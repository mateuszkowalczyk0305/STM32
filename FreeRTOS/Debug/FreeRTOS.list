
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005174  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08005314  08005314  00006314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053bc  080053bc  00007060  2**0
                  CONTENTS
  4 .ARM          00000000  080053bc  080053bc  00007060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053bc  080053bc  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053bc  080053bc  000063bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053c0  080053c0  000063c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080053c4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007060  2**0
                  CONTENTS
 10 .bss          00001b94  20000060  20000060  00007060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001bf4  20001bf4  00007060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 13 .debug_info   000140b8  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c39  00000000  00000000  0001b148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010e8  00000000  00000000  0001dd88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d0e  00000000  00000000  0001ee70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002952  00000000  00000000  0001fb7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013ae1  00000000  00000000  000224d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce70c  00000000  00000000  00035fb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001046bd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004978  00000000  00000000  00104700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00109078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080052fc 	.word	0x080052fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080052fc 	.word	0x080052fc

080001e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e4:	f000 f9d4 	bl	8000590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e8:	f000 f824 	bl	8000234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ec:	f000 f85e 	bl	80002ac <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001f0:	f002 f9ea 	bl	80025c8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 80001f4:	4a09      	ldr	r2, [pc, #36]	@ (800021c <main+0x3c>)
 80001f6:	2100      	movs	r1, #0
 80001f8:	4809      	ldr	r0, [pc, #36]	@ (8000220 <main+0x40>)
 80001fa:	f002 fa4d 	bl	8002698 <osThreadNew>
 80001fe:	4603      	mov	r3, r0
 8000200:	4a08      	ldr	r2, [pc, #32]	@ (8000224 <main+0x44>)
 8000202:	6013      	str	r3, [r2, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 8000204:	4a08      	ldr	r2, [pc, #32]	@ (8000228 <main+0x48>)
 8000206:	2100      	movs	r1, #0
 8000208:	4808      	ldr	r0, [pc, #32]	@ (800022c <main+0x4c>)
 800020a:	f002 fa45 	bl	8002698 <osThreadNew>
 800020e:	4603      	mov	r3, r0
 8000210:	4a07      	ldr	r2, [pc, #28]	@ (8000230 <main+0x50>)
 8000212:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000214:	f002 fa0c 	bl	8002630 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000218:	bf00      	nop
 800021a:	e7fd      	b.n	8000218 <main+0x38>
 800021c:	0800533c 	.word	0x0800533c
 8000220:	08000311 	.word	0x08000311
 8000224:	2000007c 	.word	0x2000007c
 8000228:	08005360 	.word	0x08005360
 800022c:	08000335 	.word	0x08000335
 8000230:	20000080 	.word	0x20000080

08000234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b090      	sub	sp, #64	@ 0x40
 8000238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023a:	f107 0318 	add.w	r3, r7, #24
 800023e:	2228      	movs	r2, #40	@ 0x28
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f004 ff72 	bl	800512c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]
 8000254:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000256:	2302      	movs	r3, #2
 8000258:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025a:	2301      	movs	r3, #1
 800025c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800025e:	2310      	movs	r3, #16
 8000260:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000262:	2300      	movs	r3, #0
 8000264:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000266:	f107 0318 	add.w	r3, r7, #24
 800026a:	4618      	mov	r0, r3
 800026c:	f000 fc64 	bl	8000b38 <HAL_RCC_OscConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000276:	f000 f881 	bl	800037c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027a:	230f      	movs	r3, #15
 800027c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800027e:	2300      	movs	r3, #0
 8000280:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f001 fca4 	bl	8001be0 <HAL_RCC_ClockConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800029e:	f000 f86d 	bl	800037c <Error_Handler>
  }
}
 80002a2:	bf00      	nop
 80002a4:	3740      	adds	r7, #64	@ 0x40
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
	...

080002ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b086      	sub	sp, #24
 80002b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]
 80002bc:	60da      	str	r2, [r3, #12]
 80002be:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002c0:	4b11      	ldr	r3, [pc, #68]	@ (8000308 <MX_GPIO_Init+0x5c>)
 80002c2:	695b      	ldr	r3, [r3, #20]
 80002c4:	4a10      	ldr	r2, [pc, #64]	@ (8000308 <MX_GPIO_Init+0x5c>)
 80002c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80002ca:	6153      	str	r3, [r2, #20]
 80002cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000308 <MX_GPIO_Init+0x5c>)
 80002ce:	695b      	ldr	r3, [r3, #20]
 80002d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80002d4:	603b      	str	r3, [r7, #0]
 80002d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Red_Led_Pin|Green_Led_Pin, GPIO_PIN_RESET);
 80002d8:	2200      	movs	r2, #0
 80002da:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 80002de:	480b      	ldr	r0, [pc, #44]	@ (800030c <MX_GPIO_Init+0x60>)
 80002e0:	f000 fbf8 	bl	8000ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Red_Led_Pin Green_Led_Pin */
  GPIO_InitStruct.Pin = Red_Led_Pin|Green_Led_Pin;
 80002e4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80002e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ea:	2301      	movs	r3, #1
 80002ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ee:	2300      	movs	r3, #0
 80002f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f2:	2300      	movs	r3, #0
 80002f4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	4619      	mov	r1, r3
 80002fa:	4804      	ldr	r0, [pc, #16]	@ (800030c <MX_GPIO_Init+0x60>)
 80002fc:	f000 fa60 	bl	80007c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000300:	bf00      	nop
 8000302:	3718      	adds	r7, #24
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	40021000 	.word	0x40021000
 800030c:	48000800 	.word	0x48000800

08000310 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOC, Green_Led_Pin);
 8000318:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800031c:	4804      	ldr	r0, [pc, #16]	@ (8000330 <StartBlink01+0x20>)
 800031e:	f000 fbf1 	bl	8000b04 <HAL_GPIO_TogglePin>
	  osDelay(1000); // 500 ms delay
 8000322:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000326:	f002 fa61 	bl	80027ec <osDelay>
	  HAL_GPIO_TogglePin(GPIOC, Green_Led_Pin);
 800032a:	bf00      	nop
 800032c:	e7f4      	b.n	8000318 <StartBlink01+0x8>
 800032e:	bf00      	nop
 8000330:	48000800 	.word	0x48000800

08000334 <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOC, Green_Led_Pin);
 800033c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000340:	4804      	ldr	r0, [pc, #16]	@ (8000354 <StartBlink02+0x20>)
 8000342:	f000 fbdf 	bl	8000b04 <HAL_GPIO_TogglePin>
    osDelay(500);
 8000346:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800034a:	f002 fa4f 	bl	80027ec <osDelay>
	HAL_GPIO_TogglePin(GPIOC, Green_Led_Pin);
 800034e:	bf00      	nop
 8000350:	e7f4      	b.n	800033c <StartBlink02+0x8>
 8000352:	bf00      	nop
 8000354:	48000800 	.word	0x48000800

08000358 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a04      	ldr	r2, [pc, #16]	@ (8000378 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000366:	4293      	cmp	r3, r2
 8000368:	d101      	bne.n	800036e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800036a:	f000 f927 	bl	80005bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800036e:	bf00      	nop
 8000370:	3708      	adds	r7, #8
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40001000 	.word	0x40001000

0800037c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000380:	b672      	cpsid	i
}
 8000382:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000384:	bf00      	nop
 8000386:	e7fd      	b.n	8000384 <Error_Handler+0x8>

08000388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800038e:	4b11      	ldr	r3, [pc, #68]	@ (80003d4 <HAL_MspInit+0x4c>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	4a10      	ldr	r2, [pc, #64]	@ (80003d4 <HAL_MspInit+0x4c>)
 8000394:	f043 0301 	orr.w	r3, r3, #1
 8000398:	6193      	str	r3, [r2, #24]
 800039a:	4b0e      	ldr	r3, [pc, #56]	@ (80003d4 <HAL_MspInit+0x4c>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	f003 0301 	and.w	r3, r3, #1
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003a6:	4b0b      	ldr	r3, [pc, #44]	@ (80003d4 <HAL_MspInit+0x4c>)
 80003a8:	69db      	ldr	r3, [r3, #28]
 80003aa:	4a0a      	ldr	r2, [pc, #40]	@ (80003d4 <HAL_MspInit+0x4c>)
 80003ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003b0:	61d3      	str	r3, [r2, #28]
 80003b2:	4b08      	ldr	r3, [pc, #32]	@ (80003d4 <HAL_MspInit+0x4c>)
 80003b4:	69db      	ldr	r3, [r3, #28]
 80003b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003ba:	603b      	str	r3, [r7, #0]
 80003bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80003be:	2200      	movs	r2, #0
 80003c0:	210f      	movs	r1, #15
 80003c2:	f06f 0001 	mvn.w	r0, #1
 80003c6:	f000 f9d1 	bl	800076c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ca:	bf00      	nop
 80003cc:	3708      	adds	r7, #8
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	40021000 	.word	0x40021000

080003d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b08e      	sub	sp, #56	@ 0x38
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80003e0:	2300      	movs	r3, #0
 80003e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80003e4:	2300      	movs	r3, #0
 80003e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80003e8:	4b33      	ldr	r3, [pc, #204]	@ (80004b8 <HAL_InitTick+0xe0>)
 80003ea:	69db      	ldr	r3, [r3, #28]
 80003ec:	4a32      	ldr	r2, [pc, #200]	@ (80004b8 <HAL_InitTick+0xe0>)
 80003ee:	f043 0310 	orr.w	r3, r3, #16
 80003f2:	61d3      	str	r3, [r2, #28]
 80003f4:	4b30      	ldr	r3, [pc, #192]	@ (80004b8 <HAL_InitTick+0xe0>)
 80003f6:	69db      	ldr	r3, [r3, #28]
 80003f8:	f003 0310 	and.w	r3, r3, #16
 80003fc:	60fb      	str	r3, [r7, #12]
 80003fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000400:	f107 0210 	add.w	r2, r7, #16
 8000404:	f107 0314 	add.w	r3, r7, #20
 8000408:	4611      	mov	r1, r2
 800040a:	4618      	mov	r0, r3
 800040c:	f001 fde6 	bl	8001fdc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000410:	6a3b      	ldr	r3, [r7, #32]
 8000412:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000416:	2b00      	cmp	r3, #0
 8000418:	d103      	bne.n	8000422 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800041a:	f001 fdbd 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 800041e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000420:	e004      	b.n	800042c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000422:	f001 fdb9 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 8000426:	4603      	mov	r3, r0
 8000428:	005b      	lsls	r3, r3, #1
 800042a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800042c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800042e:	4a23      	ldr	r2, [pc, #140]	@ (80004bc <HAL_InitTick+0xe4>)
 8000430:	fba2 2303 	umull	r2, r3, r2, r3
 8000434:	0c9b      	lsrs	r3, r3, #18
 8000436:	3b01      	subs	r3, #1
 8000438:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800043a:	4b21      	ldr	r3, [pc, #132]	@ (80004c0 <HAL_InitTick+0xe8>)
 800043c:	4a21      	ldr	r2, [pc, #132]	@ (80004c4 <HAL_InitTick+0xec>)
 800043e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000440:	4b1f      	ldr	r3, [pc, #124]	@ (80004c0 <HAL_InitTick+0xe8>)
 8000442:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000446:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000448:	4a1d      	ldr	r2, [pc, #116]	@ (80004c0 <HAL_InitTick+0xe8>)
 800044a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800044c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800044e:	4b1c      	ldr	r3, [pc, #112]	@ (80004c0 <HAL_InitTick+0xe8>)
 8000450:	2200      	movs	r2, #0
 8000452:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000454:	4b1a      	ldr	r3, [pc, #104]	@ (80004c0 <HAL_InitTick+0xe8>)
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800045a:	4b19      	ldr	r3, [pc, #100]	@ (80004c0 <HAL_InitTick+0xe8>)
 800045c:	2200      	movs	r2, #0
 800045e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000460:	4817      	ldr	r0, [pc, #92]	@ (80004c0 <HAL_InitTick+0xe8>)
 8000462:	f001 fded 	bl	8002040 <HAL_TIM_Base_Init>
 8000466:	4603      	mov	r3, r0
 8000468:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800046c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000470:	2b00      	cmp	r3, #0
 8000472:	d11b      	bne.n	80004ac <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000474:	4812      	ldr	r0, [pc, #72]	@ (80004c0 <HAL_InitTick+0xe8>)
 8000476:	f001 fe45 	bl	8002104 <HAL_TIM_Base_Start_IT>
 800047a:	4603      	mov	r3, r0
 800047c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000480:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000484:	2b00      	cmp	r3, #0
 8000486:	d111      	bne.n	80004ac <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000488:	2036      	movs	r0, #54	@ 0x36
 800048a:	f000 f98b 	bl	80007a4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	2b0f      	cmp	r3, #15
 8000492:	d808      	bhi.n	80004a6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000494:	2200      	movs	r2, #0
 8000496:	6879      	ldr	r1, [r7, #4]
 8000498:	2036      	movs	r0, #54	@ 0x36
 800049a:	f000 f967 	bl	800076c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800049e:	4a0a      	ldr	r2, [pc, #40]	@ (80004c8 <HAL_InitTick+0xf0>)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	6013      	str	r3, [r2, #0]
 80004a4:	e002      	b.n	80004ac <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80004a6:	2301      	movs	r3, #1
 80004a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80004ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	3738      	adds	r7, #56	@ 0x38
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40021000 	.word	0x40021000
 80004bc:	431bde83 	.word	0x431bde83
 80004c0:	20000084 	.word	0x20000084
 80004c4:	40001000 	.word	0x40001000
 80004c8:	20000004 	.word	0x20000004

080004cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004d0:	bf00      	nop
 80004d2:	e7fd      	b.n	80004d0 <NMI_Handler+0x4>

080004d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004d8:	bf00      	nop
 80004da:	e7fd      	b.n	80004d8 <HardFault_Handler+0x4>

080004dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004e0:	bf00      	nop
 80004e2:	e7fd      	b.n	80004e0 <MemManage_Handler+0x4>

080004e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004e8:	bf00      	nop
 80004ea:	e7fd      	b.n	80004e8 <BusFault_Handler+0x4>

080004ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004f0:	bf00      	nop
 80004f2:	e7fd      	b.n	80004f0 <UsageFault_Handler+0x4>

080004f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
	...

08000504 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000508:	4802      	ldr	r0, [pc, #8]	@ (8000514 <TIM6_DAC_IRQHandler+0x10>)
 800050a:	f001 fe6b 	bl	80021e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000084 	.word	0x20000084

08000518 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800051c:	4b06      	ldr	r3, [pc, #24]	@ (8000538 <SystemInit+0x20>)
 800051e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000522:	4a05      	ldr	r2, [pc, #20]	@ (8000538 <SystemInit+0x20>)
 8000524:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000528:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	e000ed00 	.word	0xe000ed00

0800053c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800053c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000574 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000540:	f7ff ffea 	bl	8000518 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000544:	480c      	ldr	r0, [pc, #48]	@ (8000578 <LoopForever+0x6>)
  ldr r1, =_edata
 8000546:	490d      	ldr	r1, [pc, #52]	@ (800057c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000548:	4a0d      	ldr	r2, [pc, #52]	@ (8000580 <LoopForever+0xe>)
  movs r3, #0
 800054a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800054c:	e002      	b.n	8000554 <LoopCopyDataInit>

0800054e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800054e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000552:	3304      	adds	r3, #4

08000554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000558:	d3f9      	bcc.n	800054e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800055a:	4a0a      	ldr	r2, [pc, #40]	@ (8000584 <LoopForever+0x12>)
  ldr r4, =_ebss
 800055c:	4c0a      	ldr	r4, [pc, #40]	@ (8000588 <LoopForever+0x16>)
  movs r3, #0
 800055e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000560:	e001      	b.n	8000566 <LoopFillZerobss>

08000562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000564:	3204      	adds	r2, #4

08000566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000568:	d3fb      	bcc.n	8000562 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800056a:	f004 fe3d 	bl	80051e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800056e:	f7ff fe37 	bl	80001e0 <main>

08000572 <LoopForever>:

LoopForever:
    b LoopForever
 8000572:	e7fe      	b.n	8000572 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000574:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800057c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000580:	080053c4 	.word	0x080053c4
  ldr r2, =_sbss
 8000584:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000588:	20001bf4 	.word	0x20001bf4

0800058c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800058c:	e7fe      	b.n	800058c <ADC1_2_IRQHandler>
	...

08000590 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000594:	4b08      	ldr	r3, [pc, #32]	@ (80005b8 <HAL_Init+0x28>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a07      	ldr	r2, [pc, #28]	@ (80005b8 <HAL_Init+0x28>)
 800059a:	f043 0310 	orr.w	r3, r3, #16
 800059e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a0:	2003      	movs	r0, #3
 80005a2:	f000 f8d8 	bl	8000756 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005a6:	200f      	movs	r0, #15
 80005a8:	f7ff ff16 	bl	80003d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005ac:	f7ff feec 	bl	8000388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b0:	2300      	movs	r3, #0
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40022000 	.word	0x40022000

080005bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005c0:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <HAL_IncTick+0x20>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b06      	ldr	r3, [pc, #24]	@ (80005e0 <HAL_IncTick+0x24>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4413      	add	r3, r2
 80005cc:	4a04      	ldr	r2, [pc, #16]	@ (80005e0 <HAL_IncTick+0x24>)
 80005ce:	6013      	str	r3, [r2, #0]
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000008 	.word	0x20000008
 80005e0:	200000d0 	.word	0x200000d0

080005e4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  return uwTick;  
 80005e8:	4b03      	ldr	r3, [pc, #12]	@ (80005f8 <HAL_GetTick+0x14>)
 80005ea:	681b      	ldr	r3, [r3, #0]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	200000d0 	.word	0x200000d0

080005fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	f003 0307 	and.w	r3, r3, #7
 800060a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800060c:	4b0c      	ldr	r3, [pc, #48]	@ (8000640 <__NVIC_SetPriorityGrouping+0x44>)
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000612:	68ba      	ldr	r2, [r7, #8]
 8000614:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000618:	4013      	ands	r3, r2
 800061a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000624:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000628:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800062c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800062e:	4a04      	ldr	r2, [pc, #16]	@ (8000640 <__NVIC_SetPriorityGrouping+0x44>)
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	60d3      	str	r3, [r2, #12]
}
 8000634:	bf00      	nop
 8000636:	3714      	adds	r7, #20
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000648:	4b04      	ldr	r3, [pc, #16]	@ (800065c <__NVIC_GetPriorityGrouping+0x18>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	0a1b      	lsrs	r3, r3, #8
 800064e:	f003 0307 	and.w	r3, r3, #7
}
 8000652:	4618      	mov	r0, r3
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800066a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066e:	2b00      	cmp	r3, #0
 8000670:	db0b      	blt.n	800068a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	f003 021f 	and.w	r2, r3, #31
 8000678:	4907      	ldr	r1, [pc, #28]	@ (8000698 <__NVIC_EnableIRQ+0x38>)
 800067a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067e:	095b      	lsrs	r3, r3, #5
 8000680:	2001      	movs	r0, #1
 8000682:	fa00 f202 	lsl.w	r2, r0, r2
 8000686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	e000e100 	.word	0xe000e100

0800069c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	6039      	str	r1, [r7, #0]
 80006a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	db0a      	blt.n	80006c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	490c      	ldr	r1, [pc, #48]	@ (80006e8 <__NVIC_SetPriority+0x4c>)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	0112      	lsls	r2, r2, #4
 80006bc:	b2d2      	uxtb	r2, r2
 80006be:	440b      	add	r3, r1
 80006c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c4:	e00a      	b.n	80006dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	4908      	ldr	r1, [pc, #32]	@ (80006ec <__NVIC_SetPriority+0x50>)
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	f003 030f 	and.w	r3, r3, #15
 80006d2:	3b04      	subs	r3, #4
 80006d4:	0112      	lsls	r2, r2, #4
 80006d6:	b2d2      	uxtb	r2, r2
 80006d8:	440b      	add	r3, r1
 80006da:	761a      	strb	r2, [r3, #24]
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000e100 	.word	0xe000e100
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b089      	sub	sp, #36	@ 0x24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	f003 0307 	and.w	r3, r3, #7
 8000702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000704:	69fb      	ldr	r3, [r7, #28]
 8000706:	f1c3 0307 	rsb	r3, r3, #7
 800070a:	2b04      	cmp	r3, #4
 800070c:	bf28      	it	cs
 800070e:	2304      	movcs	r3, #4
 8000710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	3304      	adds	r3, #4
 8000716:	2b06      	cmp	r3, #6
 8000718:	d902      	bls.n	8000720 <NVIC_EncodePriority+0x30>
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	3b03      	subs	r3, #3
 800071e:	e000      	b.n	8000722 <NVIC_EncodePriority+0x32>
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000724:	f04f 32ff 	mov.w	r2, #4294967295
 8000728:	69bb      	ldr	r3, [r7, #24]
 800072a:	fa02 f303 	lsl.w	r3, r2, r3
 800072e:	43da      	mvns	r2, r3
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	401a      	ands	r2, r3
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000738:	f04f 31ff 	mov.w	r1, #4294967295
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	fa01 f303 	lsl.w	r3, r1, r3
 8000742:	43d9      	mvns	r1, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000748:	4313      	orrs	r3, r2
         );
}
 800074a:	4618      	mov	r0, r3
 800074c:	3724      	adds	r7, #36	@ 0x24
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr

08000756 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	b082      	sub	sp, #8
 800075a:	af00      	add	r7, sp, #0
 800075c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f7ff ff4c 	bl	80005fc <__NVIC_SetPriorityGrouping>
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
 8000778:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800077e:	f7ff ff61 	bl	8000644 <__NVIC_GetPriorityGrouping>
 8000782:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	68b9      	ldr	r1, [r7, #8]
 8000788:	6978      	ldr	r0, [r7, #20]
 800078a:	f7ff ffb1 	bl	80006f0 <NVIC_EncodePriority>
 800078e:	4602      	mov	r2, r0
 8000790:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000794:	4611      	mov	r1, r2
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff ff80 	bl	800069c <__NVIC_SetPriority>
}
 800079c:	bf00      	nop
 800079e:	3718      	adds	r7, #24
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff ff54 	bl	8000660 <__NVIC_EnableIRQ>
}
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b087      	sub	sp, #28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007ce:	e160      	b.n	8000a92 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	2101      	movs	r1, #1
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	fa01 f303 	lsl.w	r3, r1, r3
 80007dc:	4013      	ands	r3, r2
 80007de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	f000 8152 	beq.w	8000a8c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	f003 0303 	and.w	r3, r3, #3
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d005      	beq.n	8000800 <HAL_GPIO_Init+0x40>
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	f003 0303 	and.w	r3, r3, #3
 80007fc:	2b02      	cmp	r3, #2
 80007fe:	d130      	bne.n	8000862 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	689b      	ldr	r3, [r3, #8]
 8000804:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	2203      	movs	r2, #3
 800080c:	fa02 f303 	lsl.w	r3, r2, r3
 8000810:	43db      	mvns	r3, r3
 8000812:	693a      	ldr	r2, [r7, #16]
 8000814:	4013      	ands	r3, r2
 8000816:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	68da      	ldr	r2, [r3, #12]
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	fa02 f303 	lsl.w	r3, r2, r3
 8000824:	693a      	ldr	r2, [r7, #16]
 8000826:	4313      	orrs	r3, r2
 8000828:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	693a      	ldr	r2, [r7, #16]
 800082e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000836:	2201      	movs	r2, #1
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	fa02 f303 	lsl.w	r3, r2, r3
 800083e:	43db      	mvns	r3, r3
 8000840:	693a      	ldr	r2, [r7, #16]
 8000842:	4013      	ands	r3, r2
 8000844:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	091b      	lsrs	r3, r3, #4
 800084c:	f003 0201 	and.w	r2, r3, #1
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	fa02 f303 	lsl.w	r3, r2, r3
 8000856:	693a      	ldr	r2, [r7, #16]
 8000858:	4313      	orrs	r3, r2
 800085a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	693a      	ldr	r2, [r7, #16]
 8000860:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	f003 0303 	and.w	r3, r3, #3
 800086a:	2b03      	cmp	r3, #3
 800086c:	d017      	beq.n	800089e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	68db      	ldr	r3, [r3, #12]
 8000872:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	2203      	movs	r2, #3
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	43db      	mvns	r3, r3
 8000880:	693a      	ldr	r2, [r7, #16]
 8000882:	4013      	ands	r3, r2
 8000884:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	689a      	ldr	r2, [r3, #8]
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	4313      	orrs	r3, r2
 8000896:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	693a      	ldr	r2, [r7, #16]
 800089c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	f003 0303 	and.w	r3, r3, #3
 80008a6:	2b02      	cmp	r3, #2
 80008a8:	d123      	bne.n	80008f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	08da      	lsrs	r2, r3, #3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3208      	adds	r2, #8
 80008b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	f003 0307 	and.w	r3, r3, #7
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	220f      	movs	r2, #15
 80008c2:	fa02 f303 	lsl.w	r3, r2, r3
 80008c6:	43db      	mvns	r3, r3
 80008c8:	693a      	ldr	r2, [r7, #16]
 80008ca:	4013      	ands	r3, r2
 80008cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	691a      	ldr	r2, [r3, #16]
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	f003 0307 	and.w	r3, r3, #7
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	693a      	ldr	r2, [r7, #16]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	08da      	lsrs	r2, r3, #3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3208      	adds	r2, #8
 80008ec:	6939      	ldr	r1, [r7, #16]
 80008ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	2203      	movs	r2, #3
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	43db      	mvns	r3, r3
 8000904:	693a      	ldr	r2, [r7, #16]
 8000906:	4013      	ands	r3, r2
 8000908:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	f003 0203 	and.w	r2, r3, #3
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	4313      	orrs	r3, r2
 800091e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800092e:	2b00      	cmp	r3, #0
 8000930:	f000 80ac 	beq.w	8000a8c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000934:	4b5e      	ldr	r3, [pc, #376]	@ (8000ab0 <HAL_GPIO_Init+0x2f0>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	4a5d      	ldr	r2, [pc, #372]	@ (8000ab0 <HAL_GPIO_Init+0x2f0>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	6193      	str	r3, [r2, #24]
 8000940:	4b5b      	ldr	r3, [pc, #364]	@ (8000ab0 <HAL_GPIO_Init+0x2f0>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	f003 0301 	and.w	r3, r3, #1
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800094c:	4a59      	ldr	r2, [pc, #356]	@ (8000ab4 <HAL_GPIO_Init+0x2f4>)
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	089b      	lsrs	r3, r3, #2
 8000952:	3302      	adds	r3, #2
 8000954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000958:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	f003 0303 	and.w	r3, r3, #3
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	220f      	movs	r2, #15
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	43db      	mvns	r3, r3
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	4013      	ands	r3, r2
 800096e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000976:	d025      	beq.n	80009c4 <HAL_GPIO_Init+0x204>
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4a4f      	ldr	r2, [pc, #316]	@ (8000ab8 <HAL_GPIO_Init+0x2f8>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d01f      	beq.n	80009c0 <HAL_GPIO_Init+0x200>
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a4e      	ldr	r2, [pc, #312]	@ (8000abc <HAL_GPIO_Init+0x2fc>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d019      	beq.n	80009bc <HAL_GPIO_Init+0x1fc>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a4d      	ldr	r2, [pc, #308]	@ (8000ac0 <HAL_GPIO_Init+0x300>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d013      	beq.n	80009b8 <HAL_GPIO_Init+0x1f8>
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a4c      	ldr	r2, [pc, #304]	@ (8000ac4 <HAL_GPIO_Init+0x304>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d00d      	beq.n	80009b4 <HAL_GPIO_Init+0x1f4>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a4b      	ldr	r2, [pc, #300]	@ (8000ac8 <HAL_GPIO_Init+0x308>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d007      	beq.n	80009b0 <HAL_GPIO_Init+0x1f0>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4a4a      	ldr	r2, [pc, #296]	@ (8000acc <HAL_GPIO_Init+0x30c>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d101      	bne.n	80009ac <HAL_GPIO_Init+0x1ec>
 80009a8:	2306      	movs	r3, #6
 80009aa:	e00c      	b.n	80009c6 <HAL_GPIO_Init+0x206>
 80009ac:	2307      	movs	r3, #7
 80009ae:	e00a      	b.n	80009c6 <HAL_GPIO_Init+0x206>
 80009b0:	2305      	movs	r3, #5
 80009b2:	e008      	b.n	80009c6 <HAL_GPIO_Init+0x206>
 80009b4:	2304      	movs	r3, #4
 80009b6:	e006      	b.n	80009c6 <HAL_GPIO_Init+0x206>
 80009b8:	2303      	movs	r3, #3
 80009ba:	e004      	b.n	80009c6 <HAL_GPIO_Init+0x206>
 80009bc:	2302      	movs	r3, #2
 80009be:	e002      	b.n	80009c6 <HAL_GPIO_Init+0x206>
 80009c0:	2301      	movs	r3, #1
 80009c2:	e000      	b.n	80009c6 <HAL_GPIO_Init+0x206>
 80009c4:	2300      	movs	r3, #0
 80009c6:	697a      	ldr	r2, [r7, #20]
 80009c8:	f002 0203 	and.w	r2, r2, #3
 80009cc:	0092      	lsls	r2, r2, #2
 80009ce:	4093      	lsls	r3, r2
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009d6:	4937      	ldr	r1, [pc, #220]	@ (8000ab4 <HAL_GPIO_Init+0x2f4>)
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	089b      	lsrs	r3, r3, #2
 80009dc:	3302      	adds	r3, #2
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009e4:	4b3a      	ldr	r3, [pc, #232]	@ (8000ad0 <HAL_GPIO_Init+0x310>)
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	43db      	mvns	r3, r3
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	4013      	ands	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d003      	beq.n	8000a08 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a08:	4a31      	ldr	r2, [pc, #196]	@ (8000ad0 <HAL_GPIO_Init+0x310>)
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a0e:	4b30      	ldr	r3, [pc, #192]	@ (8000ad0 <HAL_GPIO_Init+0x310>)
 8000a10:	68db      	ldr	r3, [r3, #12]
 8000a12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	43db      	mvns	r3, r3
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d003      	beq.n	8000a32 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a32:	4a27      	ldr	r2, [pc, #156]	@ (8000ad0 <HAL_GPIO_Init+0x310>)
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000a38:	4b25      	ldr	r3, [pc, #148]	@ (8000ad0 <HAL_GPIO_Init+0x310>)
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	43db      	mvns	r3, r3
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	4013      	ands	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d003      	beq.n	8000a5c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a5c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ad0 <HAL_GPIO_Init+0x310>)
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a62:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad0 <HAL_GPIO_Init+0x310>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	43db      	mvns	r3, r3
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	4013      	ands	r3, r2
 8000a70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d003      	beq.n	8000a86 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a86:	4a12      	ldr	r2, [pc, #72]	@ (8000ad0 <HAL_GPIO_Init+0x310>)
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	fa22 f303 	lsr.w	r3, r2, r3
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	f47f ae97 	bne.w	80007d0 <HAL_GPIO_Init+0x10>
  }
}
 8000aa2:	bf00      	nop
 8000aa4:	bf00      	nop
 8000aa6:	371c      	adds	r7, #28
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	40010000 	.word	0x40010000
 8000ab8:	48000400 	.word	0x48000400
 8000abc:	48000800 	.word	0x48000800
 8000ac0:	48000c00 	.word	0x48000c00
 8000ac4:	48001000 	.word	0x48001000
 8000ac8:	48001400 	.word	0x48001400
 8000acc:	48001800 	.word	0x48001800
 8000ad0:	40010400 	.word	0x40010400

08000ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	460b      	mov	r3, r1
 8000ade:	807b      	strh	r3, [r7, #2]
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ae4:	787b      	ldrb	r3, [r7, #1]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d003      	beq.n	8000af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000aea:	887a      	ldrh	r2, [r7, #2]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000af0:	e002      	b.n	8000af8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000af2:	887a      	ldrh	r2, [r7, #2]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	695b      	ldr	r3, [r3, #20]
 8000b14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b16:	887a      	ldrh	r2, [r7, #2]
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	041a      	lsls	r2, r3, #16
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	43d9      	mvns	r1, r3
 8000b22:	887b      	ldrh	r3, [r7, #2]
 8000b24:	400b      	ands	r3, r1
 8000b26:	431a      	orrs	r2, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	619a      	str	r2, [r3, #24]
}
 8000b2c:	bf00      	nop
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000b44:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b48:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000b4e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d102      	bne.n	8000b5e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	f001 b83a 	b.w	8001bd2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000b62:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f000 816f 	beq.w	8000e52 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b74:	4bb5      	ldr	r3, [pc, #724]	@ (8000e4c <HAL_RCC_OscConfig+0x314>)
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f003 030c 	and.w	r3, r3, #12
 8000b7c:	2b04      	cmp	r3, #4
 8000b7e:	d00c      	beq.n	8000b9a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b80:	4bb2      	ldr	r3, [pc, #712]	@ (8000e4c <HAL_RCC_OscConfig+0x314>)
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f003 030c 	and.w	r3, r3, #12
 8000b88:	2b08      	cmp	r3, #8
 8000b8a:	d15c      	bne.n	8000c46 <HAL_RCC_OscConfig+0x10e>
 8000b8c:	4baf      	ldr	r3, [pc, #700]	@ (8000e4c <HAL_RCC_OscConfig+0x314>)
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000b94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b98:	d155      	bne.n	8000c46 <HAL_RCC_OscConfig+0x10e>
 8000b9a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000b9e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ba2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8000ba6:	fa93 f3a3 	rbit	r3, r3
 8000baa:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000bae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bb2:	fab3 f383 	clz	r3, r3
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	095b      	lsrs	r3, r3, #5
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d102      	bne.n	8000bcc <HAL_RCC_OscConfig+0x94>
 8000bc6:	4ba1      	ldr	r3, [pc, #644]	@ (8000e4c <HAL_RCC_OscConfig+0x314>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	e015      	b.n	8000bf8 <HAL_RCC_OscConfig+0xc0>
 8000bcc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000bd0:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bd4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000bd8:	fa93 f3a3 	rbit	r3, r3
 8000bdc:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000be0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000be4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000be8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8000bec:	fa93 f3a3 	rbit	r3, r3
 8000bf0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000bf4:	4b95      	ldr	r3, [pc, #596]	@ (8000e4c <HAL_RCC_OscConfig+0x314>)
 8000bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bf8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000bfc:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8000c00:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8000c04:	fa92 f2a2 	rbit	r2, r2
 8000c08:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8000c0c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000c10:	fab2 f282 	clz	r2, r2
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	f042 0220 	orr.w	r2, r2, #32
 8000c1a:	b2d2      	uxtb	r2, r2
 8000c1c:	f002 021f 	and.w	r2, r2, #31
 8000c20:	2101      	movs	r1, #1
 8000c22:	fa01 f202 	lsl.w	r2, r1, r2
 8000c26:	4013      	ands	r3, r2
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	f000 8111 	beq.w	8000e50 <HAL_RCC_OscConfig+0x318>
 8000c2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c32:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	f040 8108 	bne.w	8000e50 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	f000 bfc6 	b.w	8001bd2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c4a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c56:	d106      	bne.n	8000c66 <HAL_RCC_OscConfig+0x12e>
 8000c58:	4b7c      	ldr	r3, [pc, #496]	@ (8000e4c <HAL_RCC_OscConfig+0x314>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a7b      	ldr	r2, [pc, #492]	@ (8000e4c <HAL_RCC_OscConfig+0x314>)
 8000c5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c62:	6013      	str	r3, [r2, #0]
 8000c64:	e036      	b.n	8000cd4 <HAL_RCC_OscConfig+0x19c>
 8000c66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c6a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d10c      	bne.n	8000c90 <HAL_RCC_OscConfig+0x158>
 8000c76:	4b75      	ldr	r3, [pc, #468]	@ (8000e4c <HAL_RCC_OscConfig+0x314>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a74      	ldr	r2, [pc, #464]	@ (8000e4c <HAL_RCC_OscConfig+0x314>)
 8000c7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c80:	6013      	str	r3, [r2, #0]
 8000c82:	4b72      	ldr	r3, [pc, #456]	@ (8000e4c <HAL_RCC_OscConfig+0x314>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a71      	ldr	r2, [pc, #452]	@ (8000e4c <HAL_RCC_OscConfig+0x314>)
 8000c88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c8c:	6013      	str	r3, [r2, #0]
 8000c8e:	e021      	b.n	8000cd4 <HAL_RCC_OscConfig+0x19c>
 8000c90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c94:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ca0:	d10c      	bne.n	8000cbc <HAL_RCC_OscConfig+0x184>
 8000ca2:	4b6a      	ldr	r3, [pc, #424]	@ (8000e4c <HAL_RCC_OscConfig+0x314>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a69      	ldr	r2, [pc, #420]	@ (8000e4c <HAL_RCC_OscConfig+0x314>)
 8000ca8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cac:	6013      	str	r3, [r2, #0]
 8000cae:	4b67      	ldr	r3, [pc, #412]	@ (8000e4c <HAL_RCC_OscConfig+0x314>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a66      	ldr	r2, [pc, #408]	@ (8000e4c <HAL_RCC_OscConfig+0x314>)
 8000cb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cb8:	6013      	str	r3, [r2, #0]
 8000cba:	e00b      	b.n	8000cd4 <HAL_RCC_OscConfig+0x19c>
 8000cbc:	4b63      	ldr	r3, [pc, #396]	@ (8000e4c <HAL_RCC_OscConfig+0x314>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a62      	ldr	r2, [pc, #392]	@ (8000e4c <HAL_RCC_OscConfig+0x314>)
 8000cc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cc6:	6013      	str	r3, [r2, #0]
 8000cc8:	4b60      	ldr	r3, [pc, #384]	@ (8000e4c <HAL_RCC_OscConfig+0x314>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a5f      	ldr	r2, [pc, #380]	@ (8000e4c <HAL_RCC_OscConfig+0x314>)
 8000cce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cd2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000cd8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d059      	beq.n	8000d98 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ce4:	f7ff fc7e 	bl	80005e4 <HAL_GetTick>
 8000ce8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cec:	e00a      	b.n	8000d04 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cee:	f7ff fc79 	bl	80005e4 <HAL_GetTick>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	2b64      	cmp	r3, #100	@ 0x64
 8000cfc:	d902      	bls.n	8000d04 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	f000 bf67 	b.w	8001bd2 <HAL_RCC_OscConfig+0x109a>
 8000d04:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d08:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d0c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000d10:	fa93 f3a3 	rbit	r3, r3
 8000d14:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8000d18:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d1c:	fab3 f383 	clz	r3, r3
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	095b      	lsrs	r3, r3, #5
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	f043 0301 	orr.w	r3, r3, #1
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d102      	bne.n	8000d36 <HAL_RCC_OscConfig+0x1fe>
 8000d30:	4b46      	ldr	r3, [pc, #280]	@ (8000e4c <HAL_RCC_OscConfig+0x314>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	e015      	b.n	8000d62 <HAL_RCC_OscConfig+0x22a>
 8000d36:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d3a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d3e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000d42:	fa93 f3a3 	rbit	r3, r3
 8000d46:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8000d4a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d4e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000d52:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000d56:	fa93 f3a3 	rbit	r3, r3
 8000d5a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000d5e:	4b3b      	ldr	r3, [pc, #236]	@ (8000e4c <HAL_RCC_OscConfig+0x314>)
 8000d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d62:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d66:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8000d6a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000d6e:	fa92 f2a2 	rbit	r2, r2
 8000d72:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8000d76:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b2d2      	uxtb	r2, r2
 8000d80:	f042 0220 	orr.w	r2, r2, #32
 8000d84:	b2d2      	uxtb	r2, r2
 8000d86:	f002 021f 	and.w	r2, r2, #31
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d0ab      	beq.n	8000cee <HAL_RCC_OscConfig+0x1b6>
 8000d96:	e05c      	b.n	8000e52 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d98:	f7ff fc24 	bl	80005e4 <HAL_GetTick>
 8000d9c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000da0:	e00a      	b.n	8000db8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000da2:	f7ff fc1f 	bl	80005e4 <HAL_GetTick>
 8000da6:	4602      	mov	r2, r0
 8000da8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	2b64      	cmp	r3, #100	@ 0x64
 8000db0:	d902      	bls.n	8000db8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8000db2:	2303      	movs	r3, #3
 8000db4:	f000 bf0d 	b.w	8001bd2 <HAL_RCC_OscConfig+0x109a>
 8000db8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000dbc:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dc0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000dc4:	fa93 f3a3 	rbit	r3, r3
 8000dc8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8000dcc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dd0:	fab3 f383 	clz	r3, r3
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	095b      	lsrs	r3, r3, #5
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d102      	bne.n	8000dea <HAL_RCC_OscConfig+0x2b2>
 8000de4:	4b19      	ldr	r3, [pc, #100]	@ (8000e4c <HAL_RCC_OscConfig+0x314>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	e015      	b.n	8000e16 <HAL_RCC_OscConfig+0x2de>
 8000dea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000dee:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000df2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8000df6:	fa93 f3a3 	rbit	r3, r3
 8000dfa:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8000dfe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e02:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000e06:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8000e0a:	fa93 f3a3 	rbit	r3, r3
 8000e0e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000e12:	4b0e      	ldr	r3, [pc, #56]	@ (8000e4c <HAL_RCC_OscConfig+0x314>)
 8000e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e16:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e1a:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8000e1e:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8000e22:	fa92 f2a2 	rbit	r2, r2
 8000e26:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8000e2a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000e2e:	fab2 f282 	clz	r2, r2
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	f042 0220 	orr.w	r2, r2, #32
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	f002 021f 	and.w	r2, r2, #31
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fa01 f202 	lsl.w	r2, r1, r2
 8000e44:	4013      	ands	r3, r2
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d1ab      	bne.n	8000da2 <HAL_RCC_OscConfig+0x26a>
 8000e4a:	e002      	b.n	8000e52 <HAL_RCC_OscConfig+0x31a>
 8000e4c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e56:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f000 817f 	beq.w	8001166 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e68:	4ba7      	ldr	r3, [pc, #668]	@ (8001108 <HAL_RCC_OscConfig+0x5d0>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 030c 	and.w	r3, r3, #12
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d00c      	beq.n	8000e8e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e74:	4ba4      	ldr	r3, [pc, #656]	@ (8001108 <HAL_RCC_OscConfig+0x5d0>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 030c 	and.w	r3, r3, #12
 8000e7c:	2b08      	cmp	r3, #8
 8000e7e:	d173      	bne.n	8000f68 <HAL_RCC_OscConfig+0x430>
 8000e80:	4ba1      	ldr	r3, [pc, #644]	@ (8001108 <HAL_RCC_OscConfig+0x5d0>)
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000e88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000e8c:	d16c      	bne.n	8000f68 <HAL_RCC_OscConfig+0x430>
 8000e8e:	2302      	movs	r3, #2
 8000e90:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e94:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8000e98:	fa93 f3a3 	rbit	r3, r3
 8000e9c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8000ea0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ea4:	fab3 f383 	clz	r3, r3
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	095b      	lsrs	r3, r3, #5
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d102      	bne.n	8000ebe <HAL_RCC_OscConfig+0x386>
 8000eb8:	4b93      	ldr	r3, [pc, #588]	@ (8001108 <HAL_RCC_OscConfig+0x5d0>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	e013      	b.n	8000ee6 <HAL_RCC_OscConfig+0x3ae>
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec4:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8000ec8:	fa93 f3a3 	rbit	r3, r3
 8000ecc:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8000ed6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8000eda:	fa93 f3a3 	rbit	r3, r3
 8000ede:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8000ee2:	4b89      	ldr	r3, [pc, #548]	@ (8001108 <HAL_RCC_OscConfig+0x5d0>)
 8000ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8000eec:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8000ef0:	fa92 f2a2 	rbit	r2, r2
 8000ef4:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8000ef8:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8000efc:	fab2 f282 	clz	r2, r2
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	f042 0220 	orr.w	r2, r2, #32
 8000f06:	b2d2      	uxtb	r2, r2
 8000f08:	f002 021f 	and.w	r2, r2, #31
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f12:	4013      	ands	r3, r2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d00a      	beq.n	8000f2e <HAL_RCC_OscConfig+0x3f6>
 8000f18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f1c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d002      	beq.n	8000f2e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	f000 be52 	b.w	8001bd2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f2e:	4b76      	ldr	r3, [pc, #472]	@ (8001108 <HAL_RCC_OscConfig+0x5d0>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f3a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	691b      	ldr	r3, [r3, #16]
 8000f42:	21f8      	movs	r1, #248	@ 0xf8
 8000f44:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f48:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8000f4c:	fa91 f1a1 	rbit	r1, r1
 8000f50:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8000f54:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8000f58:	fab1 f181 	clz	r1, r1
 8000f5c:	b2c9      	uxtb	r1, r1
 8000f5e:	408b      	lsls	r3, r1
 8000f60:	4969      	ldr	r1, [pc, #420]	@ (8001108 <HAL_RCC_OscConfig+0x5d0>)
 8000f62:	4313      	orrs	r3, r2
 8000f64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f66:	e0fe      	b.n	8001166 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f6c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f000 8088 	beq.w	800108a <HAL_RCC_OscConfig+0x552>
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f80:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8000f84:	fa93 f3a3 	rbit	r3, r3
 8000f88:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8000f8c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f90:	fab3 f383 	clz	r3, r3
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8000f9a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa6:	f7ff fb1d 	bl	80005e4 <HAL_GetTick>
 8000faa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fae:	e00a      	b.n	8000fc6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fb0:	f7ff fb18 	bl	80005e4 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d902      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	f000 be06 	b.w	8001bd2 <HAL_RCC_OscConfig+0x109a>
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fcc:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8000fd0:	fa93 f3a3 	rbit	r3, r3
 8000fd4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8000fd8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fdc:	fab3 f383 	clz	r3, r3
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	095b      	lsrs	r3, r3, #5
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d102      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x4be>
 8000ff0:	4b45      	ldr	r3, [pc, #276]	@ (8001108 <HAL_RCC_OscConfig+0x5d0>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	e013      	b.n	800101e <HAL_RCC_OscConfig+0x4e6>
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001000:	fa93 f3a3 	rbit	r3, r3
 8001004:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001008:	2302      	movs	r3, #2
 800100a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800100e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001012:	fa93 f3a3 	rbit	r3, r3
 8001016:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800101a:	4b3b      	ldr	r3, [pc, #236]	@ (8001108 <HAL_RCC_OscConfig+0x5d0>)
 800101c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800101e:	2202      	movs	r2, #2
 8001020:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001024:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001028:	fa92 f2a2 	rbit	r2, r2
 800102c:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001030:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001034:	fab2 f282 	clz	r2, r2
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	f042 0220 	orr.w	r2, r2, #32
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	f002 021f 	and.w	r2, r2, #31
 8001044:	2101      	movs	r1, #1
 8001046:	fa01 f202 	lsl.w	r2, r1, r2
 800104a:	4013      	ands	r3, r2
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0af      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001050:	4b2d      	ldr	r3, [pc, #180]	@ (8001108 <HAL_RCC_OscConfig+0x5d0>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001058:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800105c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	691b      	ldr	r3, [r3, #16]
 8001064:	21f8      	movs	r1, #248	@ 0xf8
 8001066:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106a:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800106e:	fa91 f1a1 	rbit	r1, r1
 8001072:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001076:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800107a:	fab1 f181 	clz	r1, r1
 800107e:	b2c9      	uxtb	r1, r1
 8001080:	408b      	lsls	r3, r1
 8001082:	4921      	ldr	r1, [pc, #132]	@ (8001108 <HAL_RCC_OscConfig+0x5d0>)
 8001084:	4313      	orrs	r3, r2
 8001086:	600b      	str	r3, [r1, #0]
 8001088:	e06d      	b.n	8001166 <HAL_RCC_OscConfig+0x62e>
 800108a:	2301      	movs	r3, #1
 800108c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001090:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001094:	fa93 f3a3 	rbit	r3, r3
 8001098:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 800109c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010a0:	fab3 f383 	clz	r3, r3
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80010aa:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	461a      	mov	r2, r3
 80010b2:	2300      	movs	r3, #0
 80010b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b6:	f7ff fa95 	bl	80005e4 <HAL_GetTick>
 80010ba:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010be:	e00a      	b.n	80010d6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010c0:	f7ff fa90 	bl	80005e4 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d902      	bls.n	80010d6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	f000 bd7e 	b.w	8001bd2 <HAL_RCC_OscConfig+0x109a>
 80010d6:	2302      	movs	r3, #2
 80010d8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80010e0:	fa93 f3a3 	rbit	r3, r3
 80010e4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80010e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ec:	fab3 f383 	clz	r3, r3
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	095b      	lsrs	r3, r3, #5
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d105      	bne.n	800110c <HAL_RCC_OscConfig+0x5d4>
 8001100:	4b01      	ldr	r3, [pc, #4]	@ (8001108 <HAL_RCC_OscConfig+0x5d0>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	e016      	b.n	8001134 <HAL_RCC_OscConfig+0x5fc>
 8001106:	bf00      	nop
 8001108:	40021000 	.word	0x40021000
 800110c:	2302      	movs	r3, #2
 800110e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001112:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001116:	fa93 f3a3 	rbit	r3, r3
 800111a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800111e:	2302      	movs	r3, #2
 8001120:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001124:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001128:	fa93 f3a3 	rbit	r3, r3
 800112c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001130:	4bbf      	ldr	r3, [pc, #764]	@ (8001430 <HAL_RCC_OscConfig+0x8f8>)
 8001132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001134:	2202      	movs	r2, #2
 8001136:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800113a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800113e:	fa92 f2a2 	rbit	r2, r2
 8001142:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001146:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800114a:	fab2 f282 	clz	r2, r2
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	f042 0220 	orr.w	r2, r2, #32
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	f002 021f 	and.w	r2, r2, #31
 800115a:	2101      	movs	r1, #1
 800115c:	fa01 f202 	lsl.w	r2, r1, r2
 8001160:	4013      	ands	r3, r2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1ac      	bne.n	80010c0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001166:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800116a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0308 	and.w	r3, r3, #8
 8001176:	2b00      	cmp	r3, #0
 8001178:	f000 8113 	beq.w	80013a2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800117c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001180:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	695b      	ldr	r3, [r3, #20]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d07c      	beq.n	8001286 <HAL_RCC_OscConfig+0x74e>
 800118c:	2301      	movs	r3, #1
 800118e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001196:	fa93 f3a3 	rbit	r3, r3
 800119a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 800119e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011a2:	fab3 f383 	clz	r3, r3
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	461a      	mov	r2, r3
 80011aa:	4ba2      	ldr	r3, [pc, #648]	@ (8001434 <HAL_RCC_OscConfig+0x8fc>)
 80011ac:	4413      	add	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	461a      	mov	r2, r3
 80011b2:	2301      	movs	r3, #1
 80011b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b6:	f7ff fa15 	bl	80005e4 <HAL_GetTick>
 80011ba:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011be:	e00a      	b.n	80011d6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011c0:	f7ff fa10 	bl	80005e4 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d902      	bls.n	80011d6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	f000 bcfe 	b.w	8001bd2 <HAL_RCC_OscConfig+0x109a>
 80011d6:	2302      	movs	r3, #2
 80011d8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80011e0:	fa93 f2a3 	rbit	r2, r3
 80011e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011e8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011f6:	2202      	movs	r2, #2
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	fa93 f2a3 	rbit	r2, r3
 8001208:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800120c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001216:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800121a:	2202      	movs	r2, #2
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001222:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	fa93 f2a3 	rbit	r2, r3
 800122c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001230:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001234:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001236:	4b7e      	ldr	r3, [pc, #504]	@ (8001430 <HAL_RCC_OscConfig+0x8f8>)
 8001238:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800123a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800123e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001242:	2102      	movs	r1, #2
 8001244:	6019      	str	r1, [r3, #0]
 8001246:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800124a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	fa93 f1a3 	rbit	r1, r3
 8001254:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001258:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800125c:	6019      	str	r1, [r3, #0]
  return result;
 800125e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001262:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	fab3 f383 	clz	r3, r3
 800126c:	b2db      	uxtb	r3, r3
 800126e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001272:	b2db      	uxtb	r3, r3
 8001274:	f003 031f 	and.w	r3, r3, #31
 8001278:	2101      	movs	r1, #1
 800127a:	fa01 f303 	lsl.w	r3, r1, r3
 800127e:	4013      	ands	r3, r2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d09d      	beq.n	80011c0 <HAL_RCC_OscConfig+0x688>
 8001284:	e08d      	b.n	80013a2 <HAL_RCC_OscConfig+0x86a>
 8001286:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800128a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800128e:	2201      	movs	r2, #1
 8001290:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001292:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001296:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	fa93 f2a3 	rbit	r2, r3
 80012a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012a4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80012a8:	601a      	str	r2, [r3, #0]
  return result;
 80012aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012ae:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80012b2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012b4:	fab3 f383 	clz	r3, r3
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b5d      	ldr	r3, [pc, #372]	@ (8001434 <HAL_RCC_OscConfig+0x8fc>)
 80012be:	4413      	add	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	461a      	mov	r2, r3
 80012c4:	2300      	movs	r3, #0
 80012c6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c8:	f7ff f98c 	bl	80005e4 <HAL_GetTick>
 80012cc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d0:	e00a      	b.n	80012e8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012d2:	f7ff f987 	bl	80005e4 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d902      	bls.n	80012e8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	f000 bc75 	b.w	8001bd2 <HAL_RCC_OscConfig+0x109a>
 80012e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012ec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80012f0:	2202      	movs	r2, #2
 80012f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012f8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	fa93 f2a3 	rbit	r2, r3
 8001302:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001306:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001310:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001314:	2202      	movs	r2, #2
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800131c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	fa93 f2a3 	rbit	r2, r3
 8001326:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800132a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001334:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001338:	2202      	movs	r2, #2
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001340:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	fa93 f2a3 	rbit	r2, r3
 800134a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800134e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001352:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001354:	4b36      	ldr	r3, [pc, #216]	@ (8001430 <HAL_RCC_OscConfig+0x8f8>)
 8001356:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001358:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800135c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001360:	2102      	movs	r1, #2
 8001362:	6019      	str	r1, [r3, #0]
 8001364:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001368:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	fa93 f1a3 	rbit	r1, r3
 8001372:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001376:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800137a:	6019      	str	r1, [r3, #0]
  return result;
 800137c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001380:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	fab3 f383 	clz	r3, r3
 800138a:	b2db      	uxtb	r3, r3
 800138c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001390:	b2db      	uxtb	r3, r3
 8001392:	f003 031f 	and.w	r3, r3, #31
 8001396:	2101      	movs	r1, #1
 8001398:	fa01 f303 	lsl.w	r3, r1, r3
 800139c:	4013      	ands	r3, r2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d197      	bne.n	80012d2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013a6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f000 81a5 	beq.w	8001702 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013b8:	2300      	movs	r3, #0
 80013ba:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013be:	4b1c      	ldr	r3, [pc, #112]	@ (8001430 <HAL_RCC_OscConfig+0x8f8>)
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d116      	bne.n	80013f8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ca:	4b19      	ldr	r3, [pc, #100]	@ (8001430 <HAL_RCC_OscConfig+0x8f8>)
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	4a18      	ldr	r2, [pc, #96]	@ (8001430 <HAL_RCC_OscConfig+0x8f8>)
 80013d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013d4:	61d3      	str	r3, [r2, #28]
 80013d6:	4b16      	ldr	r3, [pc, #88]	@ (8001430 <HAL_RCC_OscConfig+0x8f8>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80013de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013f0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80013f2:	2301      	movs	r3, #1
 80013f4:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001438 <HAL_RCC_OscConfig+0x900>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001400:	2b00      	cmp	r3, #0
 8001402:	d121      	bne.n	8001448 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001404:	4b0c      	ldr	r3, [pc, #48]	@ (8001438 <HAL_RCC_OscConfig+0x900>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a0b      	ldr	r2, [pc, #44]	@ (8001438 <HAL_RCC_OscConfig+0x900>)
 800140a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800140e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001410:	f7ff f8e8 	bl	80005e4 <HAL_GetTick>
 8001414:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001418:	e010      	b.n	800143c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800141a:	f7ff f8e3 	bl	80005e4 <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b64      	cmp	r3, #100	@ 0x64
 8001428:	d908      	bls.n	800143c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e3d1      	b.n	8001bd2 <HAL_RCC_OscConfig+0x109a>
 800142e:	bf00      	nop
 8001430:	40021000 	.word	0x40021000
 8001434:	10908120 	.word	0x10908120
 8001438:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143c:	4b8d      	ldr	r3, [pc, #564]	@ (8001674 <HAL_RCC_OscConfig+0xb3c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0e8      	beq.n	800141a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001448:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800144c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d106      	bne.n	8001466 <HAL_RCC_OscConfig+0x92e>
 8001458:	4b87      	ldr	r3, [pc, #540]	@ (8001678 <HAL_RCC_OscConfig+0xb40>)
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	4a86      	ldr	r2, [pc, #536]	@ (8001678 <HAL_RCC_OscConfig+0xb40>)
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	6213      	str	r3, [r2, #32]
 8001464:	e035      	b.n	80014d2 <HAL_RCC_OscConfig+0x99a>
 8001466:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800146a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10c      	bne.n	8001490 <HAL_RCC_OscConfig+0x958>
 8001476:	4b80      	ldr	r3, [pc, #512]	@ (8001678 <HAL_RCC_OscConfig+0xb40>)
 8001478:	6a1b      	ldr	r3, [r3, #32]
 800147a:	4a7f      	ldr	r2, [pc, #508]	@ (8001678 <HAL_RCC_OscConfig+0xb40>)
 800147c:	f023 0301 	bic.w	r3, r3, #1
 8001480:	6213      	str	r3, [r2, #32]
 8001482:	4b7d      	ldr	r3, [pc, #500]	@ (8001678 <HAL_RCC_OscConfig+0xb40>)
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	4a7c      	ldr	r2, [pc, #496]	@ (8001678 <HAL_RCC_OscConfig+0xb40>)
 8001488:	f023 0304 	bic.w	r3, r3, #4
 800148c:	6213      	str	r3, [r2, #32]
 800148e:	e020      	b.n	80014d2 <HAL_RCC_OscConfig+0x99a>
 8001490:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001494:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	2b05      	cmp	r3, #5
 800149e:	d10c      	bne.n	80014ba <HAL_RCC_OscConfig+0x982>
 80014a0:	4b75      	ldr	r3, [pc, #468]	@ (8001678 <HAL_RCC_OscConfig+0xb40>)
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	4a74      	ldr	r2, [pc, #464]	@ (8001678 <HAL_RCC_OscConfig+0xb40>)
 80014a6:	f043 0304 	orr.w	r3, r3, #4
 80014aa:	6213      	str	r3, [r2, #32]
 80014ac:	4b72      	ldr	r3, [pc, #456]	@ (8001678 <HAL_RCC_OscConfig+0xb40>)
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	4a71      	ldr	r2, [pc, #452]	@ (8001678 <HAL_RCC_OscConfig+0xb40>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6213      	str	r3, [r2, #32]
 80014b8:	e00b      	b.n	80014d2 <HAL_RCC_OscConfig+0x99a>
 80014ba:	4b6f      	ldr	r3, [pc, #444]	@ (8001678 <HAL_RCC_OscConfig+0xb40>)
 80014bc:	6a1b      	ldr	r3, [r3, #32]
 80014be:	4a6e      	ldr	r2, [pc, #440]	@ (8001678 <HAL_RCC_OscConfig+0xb40>)
 80014c0:	f023 0301 	bic.w	r3, r3, #1
 80014c4:	6213      	str	r3, [r2, #32]
 80014c6:	4b6c      	ldr	r3, [pc, #432]	@ (8001678 <HAL_RCC_OscConfig+0xb40>)
 80014c8:	6a1b      	ldr	r3, [r3, #32]
 80014ca:	4a6b      	ldr	r2, [pc, #428]	@ (8001678 <HAL_RCC_OscConfig+0xb40>)
 80014cc:	f023 0304 	bic.w	r3, r3, #4
 80014d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014d6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 8081 	beq.w	80015e6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e4:	f7ff f87e 	bl	80005e4 <HAL_GetTick>
 80014e8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ec:	e00b      	b.n	8001506 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ee:	f7ff f879 	bl	80005e4 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014fe:	4293      	cmp	r3, r2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e365      	b.n	8001bd2 <HAL_RCC_OscConfig+0x109a>
 8001506:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800150a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800150e:	2202      	movs	r2, #2
 8001510:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001512:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001516:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	fa93 f2a3 	rbit	r2, r3
 8001520:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001524:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800152e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001532:	2202      	movs	r2, #2
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800153a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	fa93 f2a3 	rbit	r2, r3
 8001544:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001548:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800154c:	601a      	str	r2, [r3, #0]
  return result;
 800154e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001552:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001556:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001558:	fab3 f383 	clz	r3, r3
 800155c:	b2db      	uxtb	r3, r3
 800155e:	095b      	lsrs	r3, r3, #5
 8001560:	b2db      	uxtb	r3, r3
 8001562:	f043 0302 	orr.w	r3, r3, #2
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d102      	bne.n	8001572 <HAL_RCC_OscConfig+0xa3a>
 800156c:	4b42      	ldr	r3, [pc, #264]	@ (8001678 <HAL_RCC_OscConfig+0xb40>)
 800156e:	6a1b      	ldr	r3, [r3, #32]
 8001570:	e013      	b.n	800159a <HAL_RCC_OscConfig+0xa62>
 8001572:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001576:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800157a:	2202      	movs	r2, #2
 800157c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001582:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	fa93 f2a3 	rbit	r2, r3
 800158c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001590:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	4b38      	ldr	r3, [pc, #224]	@ (8001678 <HAL_RCC_OscConfig+0xb40>)
 8001598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800159a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800159e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80015a2:	2102      	movs	r1, #2
 80015a4:	6011      	str	r1, [r2, #0]
 80015a6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80015aa:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80015ae:	6812      	ldr	r2, [r2, #0]
 80015b0:	fa92 f1a2 	rbit	r1, r2
 80015b4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80015b8:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80015bc:	6011      	str	r1, [r2, #0]
  return result;
 80015be:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80015c2:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80015c6:	6812      	ldr	r2, [r2, #0]
 80015c8:	fab2 f282 	clz	r2, r2
 80015cc:	b2d2      	uxtb	r2, r2
 80015ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	f002 021f 	and.w	r2, r2, #31
 80015d8:	2101      	movs	r1, #1
 80015da:	fa01 f202 	lsl.w	r2, r1, r2
 80015de:	4013      	ands	r3, r2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d084      	beq.n	80014ee <HAL_RCC_OscConfig+0x9b6>
 80015e4:	e083      	b.n	80016ee <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e6:	f7fe fffd 	bl	80005e4 <HAL_GetTick>
 80015ea:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ee:	e00b      	b.n	8001608 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f0:	f7fe fff8 	bl	80005e4 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001600:	4293      	cmp	r3, r2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e2e4      	b.n	8001bd2 <HAL_RCC_OscConfig+0x109a>
 8001608:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800160c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001610:	2202      	movs	r2, #2
 8001612:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001614:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001618:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	fa93 f2a3 	rbit	r2, r3
 8001622:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001626:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001630:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001634:	2202      	movs	r2, #2
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800163c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	fa93 f2a3 	rbit	r2, r3
 8001646:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800164a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800164e:	601a      	str	r2, [r3, #0]
  return result;
 8001650:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001654:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001658:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800165a:	fab3 f383 	clz	r3, r3
 800165e:	b2db      	uxtb	r3, r3
 8001660:	095b      	lsrs	r3, r3, #5
 8001662:	b2db      	uxtb	r3, r3
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d106      	bne.n	800167c <HAL_RCC_OscConfig+0xb44>
 800166e:	4b02      	ldr	r3, [pc, #8]	@ (8001678 <HAL_RCC_OscConfig+0xb40>)
 8001670:	6a1b      	ldr	r3, [r3, #32]
 8001672:	e017      	b.n	80016a4 <HAL_RCC_OscConfig+0xb6c>
 8001674:	40007000 	.word	0x40007000
 8001678:	40021000 	.word	0x40021000
 800167c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001680:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001684:	2202      	movs	r2, #2
 8001686:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001688:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800168c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	fa93 f2a3 	rbit	r2, r3
 8001696:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800169a:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	4bb3      	ldr	r3, [pc, #716]	@ (8001970 <HAL_RCC_OscConfig+0xe38>)
 80016a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80016a8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80016ac:	2102      	movs	r1, #2
 80016ae:	6011      	str	r1, [r2, #0]
 80016b0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80016b4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80016b8:	6812      	ldr	r2, [r2, #0]
 80016ba:	fa92 f1a2 	rbit	r1, r2
 80016be:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80016c2:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80016c6:	6011      	str	r1, [r2, #0]
  return result;
 80016c8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80016cc:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80016d0:	6812      	ldr	r2, [r2, #0]
 80016d2:	fab2 f282 	clz	r2, r2
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	f002 021f 	and.w	r2, r2, #31
 80016e2:	2101      	movs	r1, #1
 80016e4:	fa01 f202 	lsl.w	r2, r1, r2
 80016e8:	4013      	ands	r3, r2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d180      	bne.n	80015f0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016ee:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d105      	bne.n	8001702 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016f6:	4b9e      	ldr	r3, [pc, #632]	@ (8001970 <HAL_RCC_OscConfig+0xe38>)
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	4a9d      	ldr	r2, [pc, #628]	@ (8001970 <HAL_RCC_OscConfig+0xe38>)
 80016fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001700:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001702:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001706:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 825e 	beq.w	8001bd0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001714:	4b96      	ldr	r3, [pc, #600]	@ (8001970 <HAL_RCC_OscConfig+0xe38>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 030c 	and.w	r3, r3, #12
 800171c:	2b08      	cmp	r3, #8
 800171e:	f000 821f 	beq.w	8001b60 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001722:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001726:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	2b02      	cmp	r3, #2
 8001730:	f040 8170 	bne.w	8001a14 <HAL_RCC_OscConfig+0xedc>
 8001734:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001738:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800173c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001740:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001742:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001746:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	fa93 f2a3 	rbit	r2, r3
 8001750:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001754:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001758:	601a      	str	r2, [r3, #0]
  return result;
 800175a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800175e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001762:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001764:	fab3 f383 	clz	r3, r3
 8001768:	b2db      	uxtb	r3, r3
 800176a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800176e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	461a      	mov	r2, r3
 8001776:	2300      	movs	r3, #0
 8001778:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177a:	f7fe ff33 	bl	80005e4 <HAL_GetTick>
 800177e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001782:	e009      	b.n	8001798 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001784:	f7fe ff2e 	bl	80005e4 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e21c      	b.n	8001bd2 <HAL_RCC_OscConfig+0x109a>
 8001798:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800179c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80017a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017aa:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	fa93 f2a3 	rbit	r2, r3
 80017b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017b8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80017bc:	601a      	str	r2, [r3, #0]
  return result;
 80017be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017c2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80017c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017c8:	fab3 f383 	clz	r3, r3
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	095b      	lsrs	r3, r3, #5
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	f043 0301 	orr.w	r3, r3, #1
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d102      	bne.n	80017e2 <HAL_RCC_OscConfig+0xcaa>
 80017dc:	4b64      	ldr	r3, [pc, #400]	@ (8001970 <HAL_RCC_OscConfig+0xe38>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	e027      	b.n	8001832 <HAL_RCC_OscConfig+0xcfa>
 80017e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017e6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80017ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017f4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	fa93 f2a3 	rbit	r2, r3
 80017fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001802:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800180c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001810:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800181a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	fa93 f2a3 	rbit	r2, r3
 8001824:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001828:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	4b50      	ldr	r3, [pc, #320]	@ (8001970 <HAL_RCC_OscConfig+0xe38>)
 8001830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001832:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001836:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800183a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800183e:	6011      	str	r1, [r2, #0]
 8001840:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001844:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001848:	6812      	ldr	r2, [r2, #0]
 800184a:	fa92 f1a2 	rbit	r1, r2
 800184e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001852:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001856:	6011      	str	r1, [r2, #0]
  return result;
 8001858:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800185c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001860:	6812      	ldr	r2, [r2, #0]
 8001862:	fab2 f282 	clz	r2, r2
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	f042 0220 	orr.w	r2, r2, #32
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	f002 021f 	and.w	r2, r2, #31
 8001872:	2101      	movs	r1, #1
 8001874:	fa01 f202 	lsl.w	r2, r1, r2
 8001878:	4013      	ands	r3, r2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d182      	bne.n	8001784 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800187e:	4b3c      	ldr	r3, [pc, #240]	@ (8001970 <HAL_RCC_OscConfig+0xe38>)
 8001880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001882:	f023 020f 	bic.w	r2, r3, #15
 8001886:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800188a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001892:	4937      	ldr	r1, [pc, #220]	@ (8001970 <HAL_RCC_OscConfig+0xe38>)
 8001894:	4313      	orrs	r3, r2
 8001896:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001898:	4b35      	ldr	r3, [pc, #212]	@ (8001970 <HAL_RCC_OscConfig+0xe38>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80018a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018a4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6a19      	ldr	r1, [r3, #32]
 80018ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018b0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	69db      	ldr	r3, [r3, #28]
 80018b8:	430b      	orrs	r3, r1
 80018ba:	492d      	ldr	r1, [pc, #180]	@ (8001970 <HAL_RCC_OscConfig+0xe38>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	604b      	str	r3, [r1, #4]
 80018c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018c4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80018c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80018cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018d2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	fa93 f2a3 	rbit	r2, r3
 80018dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018e0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80018e4:	601a      	str	r2, [r3, #0]
  return result;
 80018e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ea:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80018ee:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018f0:	fab3 f383 	clz	r3, r3
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80018fa:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	461a      	mov	r2, r3
 8001902:	2301      	movs	r3, #1
 8001904:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001906:	f7fe fe6d 	bl	80005e4 <HAL_GetTick>
 800190a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800190e:	e009      	b.n	8001924 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001910:	f7fe fe68 	bl	80005e4 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e156      	b.n	8001bd2 <HAL_RCC_OscConfig+0x109a>
 8001924:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001928:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800192c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001930:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001932:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001936:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	fa93 f2a3 	rbit	r2, r3
 8001940:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001944:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001948:	601a      	str	r2, [r3, #0]
  return result;
 800194a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800194e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001952:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001954:	fab3 f383 	clz	r3, r3
 8001958:	b2db      	uxtb	r3, r3
 800195a:	095b      	lsrs	r3, r3, #5
 800195c:	b2db      	uxtb	r3, r3
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b01      	cmp	r3, #1
 8001966:	d105      	bne.n	8001974 <HAL_RCC_OscConfig+0xe3c>
 8001968:	4b01      	ldr	r3, [pc, #4]	@ (8001970 <HAL_RCC_OscConfig+0xe38>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	e02a      	b.n	80019c4 <HAL_RCC_OscConfig+0xe8c>
 800196e:	bf00      	nop
 8001970:	40021000 	.word	0x40021000
 8001974:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001978:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800197c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001980:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001982:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001986:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	fa93 f2a3 	rbit	r2, r3
 8001990:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001994:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800199e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80019a2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ac:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	fa93 f2a3 	rbit	r2, r3
 80019b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ba:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	4b86      	ldr	r3, [pc, #536]	@ (8001bdc <HAL_RCC_OscConfig+0x10a4>)
 80019c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019c8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80019cc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80019d0:	6011      	str	r1, [r2, #0]
 80019d2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019d6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80019da:	6812      	ldr	r2, [r2, #0]
 80019dc:	fa92 f1a2 	rbit	r1, r2
 80019e0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019e4:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80019e8:	6011      	str	r1, [r2, #0]
  return result;
 80019ea:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019ee:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80019f2:	6812      	ldr	r2, [r2, #0]
 80019f4:	fab2 f282 	clz	r2, r2
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	f042 0220 	orr.w	r2, r2, #32
 80019fe:	b2d2      	uxtb	r2, r2
 8001a00:	f002 021f 	and.w	r2, r2, #31
 8001a04:	2101      	movs	r1, #1
 8001a06:	fa01 f202 	lsl.w	r2, r1, r2
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f43f af7f 	beq.w	8001910 <HAL_RCC_OscConfig+0xdd8>
 8001a12:	e0dd      	b.n	8001bd0 <HAL_RCC_OscConfig+0x1098>
 8001a14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a18:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001a1c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a26:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	fa93 f2a3 	rbit	r2, r3
 8001a30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a34:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001a38:	601a      	str	r2, [r3, #0]
  return result;
 8001a3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a3e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001a42:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a44:	fab3 f383 	clz	r3, r3
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001a4e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	461a      	mov	r2, r3
 8001a56:	2300      	movs	r3, #0
 8001a58:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5a:	f7fe fdc3 	bl	80005e4 <HAL_GetTick>
 8001a5e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a62:	e009      	b.n	8001a78 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a64:	f7fe fdbe 	bl	80005e4 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e0ac      	b.n	8001bd2 <HAL_RCC_OscConfig+0x109a>
 8001a78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a7c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001a80:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a8a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	fa93 f2a3 	rbit	r2, r3
 8001a94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a98:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001a9c:	601a      	str	r2, [r3, #0]
  return result;
 8001a9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aa2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001aa6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa8:	fab3 f383 	clz	r3, r3
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	095b      	lsrs	r3, r3, #5
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d102      	bne.n	8001ac2 <HAL_RCC_OscConfig+0xf8a>
 8001abc:	4b47      	ldr	r3, [pc, #284]	@ (8001bdc <HAL_RCC_OscConfig+0x10a4>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	e027      	b.n	8001b12 <HAL_RCC_OscConfig+0xfda>
 8001ac2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ac6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001aca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ace:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ad4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	fa93 f2a3 	rbit	r2, r3
 8001ade:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ae2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aec:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001af0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001afa:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	fa93 f2a3 	rbit	r2, r3
 8001b04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b08:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	4b33      	ldr	r3, [pc, #204]	@ (8001bdc <HAL_RCC_OscConfig+0x10a4>)
 8001b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b12:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b16:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001b1a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001b1e:	6011      	str	r1, [r2, #0]
 8001b20:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b24:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001b28:	6812      	ldr	r2, [r2, #0]
 8001b2a:	fa92 f1a2 	rbit	r1, r2
 8001b2e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b32:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001b36:	6011      	str	r1, [r2, #0]
  return result;
 8001b38:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b3c:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001b40:	6812      	ldr	r2, [r2, #0]
 8001b42:	fab2 f282 	clz	r2, r2
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	f042 0220 	orr.w	r2, r2, #32
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	f002 021f 	and.w	r2, r2, #31
 8001b52:	2101      	movs	r1, #1
 8001b54:	fa01 f202 	lsl.w	r2, r1, r2
 8001b58:	4013      	ands	r3, r2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d182      	bne.n	8001a64 <HAL_RCC_OscConfig+0xf2c>
 8001b5e:	e037      	b.n	8001bd0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b64:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d101      	bne.n	8001b74 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e02e      	b.n	8001bd2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b74:	4b19      	ldr	r3, [pc, #100]	@ (8001bdc <HAL_RCC_OscConfig+0x10a4>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001b7c:	4b17      	ldr	r3, [pc, #92]	@ (8001bdc <HAL_RCC_OscConfig+0x10a4>)
 8001b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b80:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b84:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001b88:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8001b8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b90:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d117      	bne.n	8001bcc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001b9c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001ba0:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001ba4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ba8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d10b      	bne.n	8001bcc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001bb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001bb8:	f003 020f 	and.w	r2, r3, #15
 8001bbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bc0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d001      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e000      	b.n	8001bd2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40021000 	.word	0x40021000

08001be0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b09e      	sub	sp, #120	@ 0x78
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e162      	b.n	8001ebe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf8:	4b90      	ldr	r3, [pc, #576]	@ (8001e3c <HAL_RCC_ClockConfig+0x25c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d910      	bls.n	8001c28 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c06:	4b8d      	ldr	r3, [pc, #564]	@ (8001e3c <HAL_RCC_ClockConfig+0x25c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f023 0207 	bic.w	r2, r3, #7
 8001c0e:	498b      	ldr	r1, [pc, #556]	@ (8001e3c <HAL_RCC_ClockConfig+0x25c>)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c16:	4b89      	ldr	r3, [pc, #548]	@ (8001e3c <HAL_RCC_ClockConfig+0x25c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e14a      	b.n	8001ebe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d008      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c34:	4b82      	ldr	r3, [pc, #520]	@ (8001e40 <HAL_RCC_ClockConfig+0x260>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	497f      	ldr	r1, [pc, #508]	@ (8001e40 <HAL_RCC_ClockConfig+0x260>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 80dc 	beq.w	8001e0c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d13c      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xf6>
 8001c5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c60:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c64:	fa93 f3a3 	rbit	r3, r3
 8001c68:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001c6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6c:	fab3 f383 	clz	r3, r3
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	095b      	lsrs	r3, r3, #5
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d102      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xa6>
 8001c80:	4b6f      	ldr	r3, [pc, #444]	@ (8001e40 <HAL_RCC_ClockConfig+0x260>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	e00f      	b.n	8001ca6 <HAL_RCC_ClockConfig+0xc6>
 8001c86:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c8a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c8e:	fa93 f3a3 	rbit	r3, r3
 8001c92:	667b      	str	r3, [r7, #100]	@ 0x64
 8001c94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c98:	663b      	str	r3, [r7, #96]	@ 0x60
 8001c9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c9c:	fa93 f3a3 	rbit	r3, r3
 8001ca0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001ca2:	4b67      	ldr	r3, [pc, #412]	@ (8001e40 <HAL_RCC_ClockConfig+0x260>)
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001caa:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001cac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001cae:	fa92 f2a2 	rbit	r2, r2
 8001cb2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001cb4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001cb6:	fab2 f282 	clz	r2, r2
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	f042 0220 	orr.w	r2, r2, #32
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	f002 021f 	and.w	r2, r2, #31
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ccc:	4013      	ands	r3, r2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d17b      	bne.n	8001dca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e0f3      	b.n	8001ebe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d13c      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x178>
 8001cde:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ce2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ce6:	fa93 f3a3 	rbit	r3, r3
 8001cea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001cec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cee:	fab3 f383 	clz	r3, r3
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	095b      	lsrs	r3, r3, #5
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d102      	bne.n	8001d08 <HAL_RCC_ClockConfig+0x128>
 8001d02:	4b4f      	ldr	r3, [pc, #316]	@ (8001e40 <HAL_RCC_ClockConfig+0x260>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	e00f      	b.n	8001d28 <HAL_RCC_ClockConfig+0x148>
 8001d08:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d10:	fa93 f3a3 	rbit	r3, r3
 8001d14:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8001d1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d1e:	fa93 f3a3 	rbit	r3, r3
 8001d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d24:	4b46      	ldr	r3, [pc, #280]	@ (8001e40 <HAL_RCC_ClockConfig+0x260>)
 8001d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d2c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001d2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001d30:	fa92 f2a2 	rbit	r2, r2
 8001d34:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001d36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d38:	fab2 f282 	clz	r2, r2
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	f042 0220 	orr.w	r2, r2, #32
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	f002 021f 	and.w	r2, r2, #31
 8001d48:	2101      	movs	r1, #1
 8001d4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d13a      	bne.n	8001dca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e0b2      	b.n	8001ebe <HAL_RCC_ClockConfig+0x2de>
 8001d58:	2302      	movs	r3, #2
 8001d5a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d5e:	fa93 f3a3 	rbit	r3, r3
 8001d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d66:	fab3 f383 	clz	r3, r3
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	095b      	lsrs	r3, r3, #5
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d102      	bne.n	8001d80 <HAL_RCC_ClockConfig+0x1a0>
 8001d7a:	4b31      	ldr	r3, [pc, #196]	@ (8001e40 <HAL_RCC_ClockConfig+0x260>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	e00d      	b.n	8001d9c <HAL_RCC_ClockConfig+0x1bc>
 8001d80:	2302      	movs	r3, #2
 8001d82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d86:	fa93 f3a3 	rbit	r3, r3
 8001d8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	623b      	str	r3, [r7, #32]
 8001d90:	6a3b      	ldr	r3, [r7, #32]
 8001d92:	fa93 f3a3 	rbit	r3, r3
 8001d96:	61fb      	str	r3, [r7, #28]
 8001d98:	4b29      	ldr	r3, [pc, #164]	@ (8001e40 <HAL_RCC_ClockConfig+0x260>)
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	61ba      	str	r2, [r7, #24]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	fa92 f2a2 	rbit	r2, r2
 8001da6:	617a      	str	r2, [r7, #20]
  return result;
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	fab2 f282 	clz	r2, r2
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	f042 0220 	orr.w	r2, r2, #32
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	f002 021f 	and.w	r2, r2, #31
 8001dba:	2101      	movs	r1, #1
 8001dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e079      	b.n	8001ebe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dca:	4b1d      	ldr	r3, [pc, #116]	@ (8001e40 <HAL_RCC_ClockConfig+0x260>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f023 0203 	bic.w	r2, r3, #3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	491a      	ldr	r1, [pc, #104]	@ (8001e40 <HAL_RCC_ClockConfig+0x260>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ddc:	f7fe fc02 	bl	80005e4 <HAL_GetTick>
 8001de0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de2:	e00a      	b.n	8001dfa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de4:	f7fe fbfe 	bl	80005e4 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e061      	b.n	8001ebe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfa:	4b11      	ldr	r3, [pc, #68]	@ (8001e40 <HAL_RCC_ClockConfig+0x260>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f003 020c 	and.w	r2, r3, #12
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d1eb      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e3c <HAL_RCC_ClockConfig+0x25c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d214      	bcs.n	8001e44 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1a:	4b08      	ldr	r3, [pc, #32]	@ (8001e3c <HAL_RCC_ClockConfig+0x25c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f023 0207 	bic.w	r2, r3, #7
 8001e22:	4906      	ldr	r1, [pc, #24]	@ (8001e3c <HAL_RCC_ClockConfig+0x25c>)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2a:	4b04      	ldr	r3, [pc, #16]	@ (8001e3c <HAL_RCC_ClockConfig+0x25c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d005      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e040      	b.n	8001ebe <HAL_RCC_ClockConfig+0x2de>
 8001e3c:	40022000 	.word	0x40022000
 8001e40:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d008      	beq.n	8001e62 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e50:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec8 <HAL_RCC_ClockConfig+0x2e8>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	491a      	ldr	r1, [pc, #104]	@ (8001ec8 <HAL_RCC_ClockConfig+0x2e8>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d009      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e6e:	4b16      	ldr	r3, [pc, #88]	@ (8001ec8 <HAL_RCC_ClockConfig+0x2e8>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	4912      	ldr	r1, [pc, #72]	@ (8001ec8 <HAL_RCC_ClockConfig+0x2e8>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e82:	f000 f829 	bl	8001ed8 <HAL_RCC_GetSysClockFreq>
 8001e86:	4601      	mov	r1, r0
 8001e88:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec8 <HAL_RCC_ClockConfig+0x2e8>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e90:	22f0      	movs	r2, #240	@ 0xf0
 8001e92:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	fa92 f2a2 	rbit	r2, r2
 8001e9a:	60fa      	str	r2, [r7, #12]
  return result;
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	fab2 f282 	clz	r2, r2
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	40d3      	lsrs	r3, r2
 8001ea6:	4a09      	ldr	r2, [pc, #36]	@ (8001ecc <HAL_RCC_ClockConfig+0x2ec>)
 8001ea8:	5cd3      	ldrb	r3, [r2, r3]
 8001eaa:	fa21 f303 	lsr.w	r3, r1, r3
 8001eae:	4a08      	ldr	r2, [pc, #32]	@ (8001ed0 <HAL_RCC_ClockConfig+0x2f0>)
 8001eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001eb2:	4b08      	ldr	r3, [pc, #32]	@ (8001ed4 <HAL_RCC_ClockConfig+0x2f4>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe fa8e 	bl	80003d8 <HAL_InitTick>
  
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3778      	adds	r7, #120	@ 0x78
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	08005384 	.word	0x08005384
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	20000004 	.word	0x20000004

08001ed8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b087      	sub	sp, #28
 8001edc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	2300      	movs	r3, #0
 8001eec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001ef2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f003 030c 	and.w	r3, r3, #12
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	d002      	beq.n	8001f08 <HAL_RCC_GetSysClockFreq+0x30>
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d003      	beq.n	8001f0e <HAL_RCC_GetSysClockFreq+0x36>
 8001f06:	e029      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f08:	4b1a      	ldr	r3, [pc, #104]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f0a:	613b      	str	r3, [r7, #16]
      break;
 8001f0c:	e029      	b.n	8001f62 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	0c9b      	lsrs	r3, r3, #18
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	4a18      	ldr	r2, [pc, #96]	@ (8001f78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f18:	5cd3      	ldrb	r3, [r2, r3]
 8001f1a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8001f1c:	4b14      	ldr	r3, [pc, #80]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f20:	f003 030f 	and.w	r3, r3, #15
 8001f24:	4a15      	ldr	r2, [pc, #84]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f26:	5cd3      	ldrb	r3, [r2, r3]
 8001f28:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d008      	beq.n	8001f46 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f34:	4a0f      	ldr	r2, [pc, #60]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	fb02 f303 	mul.w	r3, r2, r3
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	e007      	b.n	8001f56 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f46:	4a0b      	ldr	r2, [pc, #44]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	fb02 f303 	mul.w	r3, r2, r3
 8001f54:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	613b      	str	r3, [r7, #16]
      break;
 8001f5a:	e002      	b.n	8001f62 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f5c:	4b05      	ldr	r3, [pc, #20]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f5e:	613b      	str	r3, [r7, #16]
      break;
 8001f60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f62:	693b      	ldr	r3, [r7, #16]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	371c      	adds	r7, #28
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	40021000 	.word	0x40021000
 8001f74:	007a1200 	.word	0x007a1200
 8001f78:	0800539c 	.word	0x0800539c
 8001f7c:	080053ac 	.word	0x080053ac

08001f80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f84:	4b03      	ldr	r3, [pc, #12]	@ (8001f94 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f86:	681b      	ldr	r3, [r3, #0]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	20000000 	.word	0x20000000

08001f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001f9e:	f7ff ffef 	bl	8001f80 <HAL_RCC_GetHCLKFreq>
 8001fa2:	4601      	mov	r1, r0
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001fac:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001fb0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	fa92 f2a2 	rbit	r2, r2
 8001fb8:	603a      	str	r2, [r7, #0]
  return result;
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	fab2 f282 	clz	r2, r2
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	40d3      	lsrs	r3, r2
 8001fc4:	4a04      	ldr	r2, [pc, #16]	@ (8001fd8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001fc6:	5cd3      	ldrb	r3, [r2, r3]
 8001fc8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	08005394 	.word	0x08005394

08001fdc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	220f      	movs	r2, #15
 8001fea:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001fec:	4b12      	ldr	r3, [pc, #72]	@ (8002038 <HAL_RCC_GetClockConfig+0x5c>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 0203 	and.w	r2, r3, #3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8002038 <HAL_RCC_GetClockConfig+0x5c>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002004:	4b0c      	ldr	r3, [pc, #48]	@ (8002038 <HAL_RCC_GetClockConfig+0x5c>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002010:	4b09      	ldr	r3, [pc, #36]	@ (8002038 <HAL_RCC_GetClockConfig+0x5c>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	08db      	lsrs	r3, r3, #3
 8002016:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800201e:	4b07      	ldr	r3, [pc, #28]	@ (800203c <HAL_RCC_GetClockConfig+0x60>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0207 	and.w	r2, r3, #7
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	601a      	str	r2, [r3, #0]
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40021000 	.word	0x40021000
 800203c:	40022000 	.word	0x40022000

08002040 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e049      	b.n	80020e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d106      	bne.n	800206c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f841 	bl	80020ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2202      	movs	r2, #2
 8002070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3304      	adds	r3, #4
 800207c:	4619      	mov	r1, r3
 800207e:	4610      	mov	r0, r2
 8002080:	f000 f9da 	bl	8002438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b01      	cmp	r3, #1
 8002116:	d001      	beq.n	800211c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e04f      	b.n	80021bc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2202      	movs	r2, #2
 8002120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68da      	ldr	r2, [r3, #12]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0201 	orr.w	r2, r2, #1
 8002132:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a23      	ldr	r2, [pc, #140]	@ (80021c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d01d      	beq.n	800217a <HAL_TIM_Base_Start_IT+0x76>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002146:	d018      	beq.n	800217a <HAL_TIM_Base_Start_IT+0x76>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a1f      	ldr	r2, [pc, #124]	@ (80021cc <HAL_TIM_Base_Start_IT+0xc8>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d013      	beq.n	800217a <HAL_TIM_Base_Start_IT+0x76>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a1e      	ldr	r2, [pc, #120]	@ (80021d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d00e      	beq.n	800217a <HAL_TIM_Base_Start_IT+0x76>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a1c      	ldr	r2, [pc, #112]	@ (80021d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d009      	beq.n	800217a <HAL_TIM_Base_Start_IT+0x76>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a1b      	ldr	r2, [pc, #108]	@ (80021d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d004      	beq.n	800217a <HAL_TIM_Base_Start_IT+0x76>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a19      	ldr	r2, [pc, #100]	@ (80021dc <HAL_TIM_Base_Start_IT+0xd8>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d115      	bne.n	80021a6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	4b17      	ldr	r3, [pc, #92]	@ (80021e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002182:	4013      	ands	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2b06      	cmp	r3, #6
 800218a:	d015      	beq.n	80021b8 <HAL_TIM_Base_Start_IT+0xb4>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002192:	d011      	beq.n	80021b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0201 	orr.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021a4:	e008      	b.n	80021b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f042 0201 	orr.w	r2, r2, #1
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	e000      	b.n	80021ba <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	40012c00 	.word	0x40012c00
 80021cc:	40000400 	.word	0x40000400
 80021d0:	40000800 	.word	0x40000800
 80021d4:	40013400 	.word	0x40013400
 80021d8:	40014000 	.word	0x40014000
 80021dc:	40015000 	.word	0x40015000
 80021e0:	00010007 	.word	0x00010007

080021e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d020      	beq.n	8002248 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d01b      	beq.n	8002248 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f06f 0202 	mvn.w	r2, #2
 8002218:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 f8e4 	bl	80023fc <HAL_TIM_IC_CaptureCallback>
 8002234:	e005      	b.n	8002242 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f8d6 	bl	80023e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 f8e7 	bl	8002410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	2b00      	cmp	r3, #0
 8002250:	d020      	beq.n	8002294 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b00      	cmp	r3, #0
 800225a:	d01b      	beq.n	8002294 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f06f 0204 	mvn.w	r2, #4
 8002264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2202      	movs	r2, #2
 800226a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f8be 	bl	80023fc <HAL_TIM_IC_CaptureCallback>
 8002280:	e005      	b.n	800228e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f8b0 	bl	80023e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 f8c1 	bl	8002410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	f003 0308 	and.w	r3, r3, #8
 800229a:	2b00      	cmp	r3, #0
 800229c:	d020      	beq.n	80022e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d01b      	beq.n	80022e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f06f 0208 	mvn.w	r2, #8
 80022b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2204      	movs	r2, #4
 80022b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 f898 	bl	80023fc <HAL_TIM_IC_CaptureCallback>
 80022cc:	e005      	b.n	80022da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 f88a 	bl	80023e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 f89b 	bl	8002410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	f003 0310 	and.w	r3, r3, #16
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d020      	beq.n	800232c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f003 0310 	and.w	r3, r3, #16
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d01b      	beq.n	800232c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f06f 0210 	mvn.w	r2, #16
 80022fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2208      	movs	r2, #8
 8002302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f872 	bl	80023fc <HAL_TIM_IC_CaptureCallback>
 8002318:	e005      	b.n	8002326 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f864 	bl	80023e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 f875 	bl	8002410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00c      	beq.n	8002350 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b00      	cmp	r3, #0
 800233e:	d007      	beq.n	8002350 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f06f 0201 	mvn.w	r2, #1
 8002348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7fe f804 	bl	8000358 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00c      	beq.n	8002374 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002360:	2b00      	cmp	r3, #0
 8002362:	d007      	beq.n	8002374 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800236c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f916 	bl	80025a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00c      	beq.n	8002398 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002384:	2b00      	cmp	r3, #0
 8002386:	d007      	beq.n	8002398 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f90e 	bl	80025b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00c      	beq.n	80023bc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d007      	beq.n	80023bc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80023b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f834 	bl	8002424 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f003 0320 	and.w	r3, r3, #32
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00c      	beq.n	80023e0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f003 0320 	and.w	r3, r3, #32
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d007      	beq.n	80023e0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f06f 0220 	mvn.w	r2, #32
 80023d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f8d6 	bl	800258c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023e0:	bf00      	nop
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a48      	ldr	r2, [pc, #288]	@ (800256c <TIM_Base_SetConfig+0x134>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d013      	beq.n	8002478 <TIM_Base_SetConfig+0x40>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002456:	d00f      	beq.n	8002478 <TIM_Base_SetConfig+0x40>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a45      	ldr	r2, [pc, #276]	@ (8002570 <TIM_Base_SetConfig+0x138>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d00b      	beq.n	8002478 <TIM_Base_SetConfig+0x40>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a44      	ldr	r2, [pc, #272]	@ (8002574 <TIM_Base_SetConfig+0x13c>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d007      	beq.n	8002478 <TIM_Base_SetConfig+0x40>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a43      	ldr	r2, [pc, #268]	@ (8002578 <TIM_Base_SetConfig+0x140>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d003      	beq.n	8002478 <TIM_Base_SetConfig+0x40>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a42      	ldr	r2, [pc, #264]	@ (800257c <TIM_Base_SetConfig+0x144>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d108      	bne.n	800248a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800247e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	4313      	orrs	r3, r2
 8002488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a37      	ldr	r2, [pc, #220]	@ (800256c <TIM_Base_SetConfig+0x134>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d01f      	beq.n	80024d2 <TIM_Base_SetConfig+0x9a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002498:	d01b      	beq.n	80024d2 <TIM_Base_SetConfig+0x9a>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a34      	ldr	r2, [pc, #208]	@ (8002570 <TIM_Base_SetConfig+0x138>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d017      	beq.n	80024d2 <TIM_Base_SetConfig+0x9a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a33      	ldr	r2, [pc, #204]	@ (8002574 <TIM_Base_SetConfig+0x13c>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d013      	beq.n	80024d2 <TIM_Base_SetConfig+0x9a>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a32      	ldr	r2, [pc, #200]	@ (8002578 <TIM_Base_SetConfig+0x140>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d00f      	beq.n	80024d2 <TIM_Base_SetConfig+0x9a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a32      	ldr	r2, [pc, #200]	@ (8002580 <TIM_Base_SetConfig+0x148>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d00b      	beq.n	80024d2 <TIM_Base_SetConfig+0x9a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a31      	ldr	r2, [pc, #196]	@ (8002584 <TIM_Base_SetConfig+0x14c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d007      	beq.n	80024d2 <TIM_Base_SetConfig+0x9a>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a30      	ldr	r2, [pc, #192]	@ (8002588 <TIM_Base_SetConfig+0x150>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d003      	beq.n	80024d2 <TIM_Base_SetConfig+0x9a>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a2b      	ldr	r2, [pc, #172]	@ (800257c <TIM_Base_SetConfig+0x144>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d108      	bne.n	80024e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a18      	ldr	r2, [pc, #96]	@ (800256c <TIM_Base_SetConfig+0x134>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d013      	beq.n	8002538 <TIM_Base_SetConfig+0x100>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a19      	ldr	r2, [pc, #100]	@ (8002578 <TIM_Base_SetConfig+0x140>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d00f      	beq.n	8002538 <TIM_Base_SetConfig+0x100>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a19      	ldr	r2, [pc, #100]	@ (8002580 <TIM_Base_SetConfig+0x148>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d00b      	beq.n	8002538 <TIM_Base_SetConfig+0x100>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a18      	ldr	r2, [pc, #96]	@ (8002584 <TIM_Base_SetConfig+0x14c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d007      	beq.n	8002538 <TIM_Base_SetConfig+0x100>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a17      	ldr	r2, [pc, #92]	@ (8002588 <TIM_Base_SetConfig+0x150>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d003      	beq.n	8002538 <TIM_Base_SetConfig+0x100>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a12      	ldr	r2, [pc, #72]	@ (800257c <TIM_Base_SetConfig+0x144>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d103      	bne.n	8002540 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b01      	cmp	r3, #1
 8002550:	d105      	bne.n	800255e <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	f023 0201 	bic.w	r2, r3, #1
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	611a      	str	r2, [r3, #16]
  }
}
 800255e:	bf00      	nop
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	40012c00 	.word	0x40012c00
 8002570:	40000400 	.word	0x40000400
 8002574:	40000800 	.word	0x40000800
 8002578:	40013400 	.word	0x40013400
 800257c:	40015000 	.word	0x40015000
 8002580:	40014000 	.word	0x40014000
 8002584:	40014400 	.word	0x40014400
 8002588:	40014800 	.word	0x40014800

0800258c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025ce:	f3ef 8305 	mrs	r3, IPSR
 80025d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80025d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10f      	bne.n	80025fa <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025da:	f3ef 8310 	mrs	r3, PRIMASK
 80025de:	607b      	str	r3, [r7, #4]
  return(result);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d109      	bne.n	80025fa <osKernelInitialize+0x32>
 80025e6:	4b11      	ldr	r3, [pc, #68]	@ (800262c <osKernelInitialize+0x64>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d109      	bne.n	8002602 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80025ee:	f3ef 8311 	mrs	r3, BASEPRI
 80025f2:	603b      	str	r3, [r7, #0]
  return(result);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80025fa:	f06f 0305 	mvn.w	r3, #5
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	e00c      	b.n	800261c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002602:	4b0a      	ldr	r3, [pc, #40]	@ (800262c <osKernelInitialize+0x64>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d105      	bne.n	8002616 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800260a:	4b08      	ldr	r3, [pc, #32]	@ (800262c <osKernelInitialize+0x64>)
 800260c:	2201      	movs	r2, #1
 800260e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002610:	2300      	movs	r3, #0
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	e002      	b.n	800261c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002616:	f04f 33ff 	mov.w	r3, #4294967295
 800261a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800261c:	68fb      	ldr	r3, [r7, #12]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	200000d4 	.word	0x200000d4

08002630 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002636:	f3ef 8305 	mrs	r3, IPSR
 800263a:	60bb      	str	r3, [r7, #8]
  return(result);
 800263c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10f      	bne.n	8002662 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002642:	f3ef 8310 	mrs	r3, PRIMASK
 8002646:	607b      	str	r3, [r7, #4]
  return(result);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d109      	bne.n	8002662 <osKernelStart+0x32>
 800264e:	4b11      	ldr	r3, [pc, #68]	@ (8002694 <osKernelStart+0x64>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2b02      	cmp	r3, #2
 8002654:	d109      	bne.n	800266a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002656:	f3ef 8311 	mrs	r3, BASEPRI
 800265a:	603b      	str	r3, [r7, #0]
  return(result);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <osKernelStart+0x3a>
    stat = osErrorISR;
 8002662:	f06f 0305 	mvn.w	r3, #5
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	e00e      	b.n	8002688 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800266a:	4b0a      	ldr	r3, [pc, #40]	@ (8002694 <osKernelStart+0x64>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d107      	bne.n	8002682 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002672:	4b08      	ldr	r3, [pc, #32]	@ (8002694 <osKernelStart+0x64>)
 8002674:	2202      	movs	r2, #2
 8002676:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002678:	f001 f8b0 	bl	80037dc <vTaskStartScheduler>
      stat = osOK;
 800267c:	2300      	movs	r3, #0
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	e002      	b.n	8002688 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002682:	f04f 33ff 	mov.w	r3, #4294967295
 8002686:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002688:	68fb      	ldr	r3, [r7, #12]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	200000d4 	.word	0x200000d4

08002698 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002698:	b580      	push	{r7, lr}
 800269a:	b092      	sub	sp, #72	@ 0x48
 800269c:	af04      	add	r7, sp, #16
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026a8:	f3ef 8305 	mrs	r3, IPSR
 80026ac:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80026ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f040 8094 	bne.w	80027de <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026b6:	f3ef 8310 	mrs	r3, PRIMASK
 80026ba:	623b      	str	r3, [r7, #32]
  return(result);
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f040 808d 	bne.w	80027de <osThreadNew+0x146>
 80026c4:	4b48      	ldr	r3, [pc, #288]	@ (80027e8 <osThreadNew+0x150>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d106      	bne.n	80026da <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80026cc:	f3ef 8311 	mrs	r3, BASEPRI
 80026d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f040 8082 	bne.w	80027de <osThreadNew+0x146>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d07e      	beq.n	80027de <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80026e0:	2380      	movs	r3, #128	@ 0x80
 80026e2:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80026e4:	2318      	movs	r3, #24
 80026e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 80026e8:	2300      	movs	r3, #0
 80026ea:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80026ec:	f107 031b 	add.w	r3, r7, #27
 80026f0:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 80026f2:	f04f 33ff 	mov.w	r3, #4294967295
 80026f6:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d045      	beq.n	800278a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <osThreadNew+0x74>
        name = attr->name;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d002      	beq.n	800271a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800271a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800271c:	2b00      	cmp	r3, #0
 800271e:	d008      	beq.n	8002732 <osThreadNew+0x9a>
 8002720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002722:	2b38      	cmp	r3, #56	@ 0x38
 8002724:	d805      	bhi.n	8002732 <osThreadNew+0x9a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <osThreadNew+0x9e>
        return (NULL);
 8002732:	2300      	movs	r3, #0
 8002734:	e054      	b.n	80027e0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	089b      	lsrs	r3, r3, #2
 8002744:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00e      	beq.n	800276c <osThreadNew+0xd4>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	2ba7      	cmp	r3, #167	@ 0xa7
 8002754:	d90a      	bls.n	800276c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800275a:	2b00      	cmp	r3, #0
 800275c:	d006      	beq.n	800276c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d002      	beq.n	800276c <osThreadNew+0xd4>
        mem = 1;
 8002766:	2301      	movs	r3, #1
 8002768:	62bb      	str	r3, [r7, #40]	@ 0x28
 800276a:	e010      	b.n	800278e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10c      	bne.n	800278e <osThreadNew+0xf6>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d108      	bne.n	800278e <osThreadNew+0xf6>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d104      	bne.n	800278e <osThreadNew+0xf6>
          mem = 0;
 8002784:	2300      	movs	r3, #0
 8002786:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002788:	e001      	b.n	800278e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800278a:	2300      	movs	r3, #0
 800278c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 800278e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002790:	2b01      	cmp	r3, #1
 8002792:	d110      	bne.n	80027b6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800279c:	9202      	str	r2, [sp, #8]
 800279e:	9301      	str	r3, [sp, #4]
 80027a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027a8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 fe2c 	bl	8003408 <xTaskCreateStatic>
 80027b0:	4603      	mov	r3, r0
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	e013      	b.n	80027de <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80027b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d110      	bne.n	80027de <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80027bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027be:	b29a      	uxth	r2, r3
 80027c0:	f107 0314 	add.w	r3, r7, #20
 80027c4:	9301      	str	r3, [sp, #4]
 80027c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f000 fe79 	bl	80034c6 <xTaskCreate>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d001      	beq.n	80027de <osThreadNew+0x146>
          hTask = NULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80027de:	697b      	ldr	r3, [r7, #20]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3738      	adds	r7, #56	@ 0x38
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	200000d4 	.word	0x200000d4

080027ec <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027f4:	f3ef 8305 	mrs	r3, IPSR
 80027f8:	613b      	str	r3, [r7, #16]
  return(result);
 80027fa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10f      	bne.n	8002820 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002800:	f3ef 8310 	mrs	r3, PRIMASK
 8002804:	60fb      	str	r3, [r7, #12]
  return(result);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d109      	bne.n	8002820 <osDelay+0x34>
 800280c:	4b0d      	ldr	r3, [pc, #52]	@ (8002844 <osDelay+0x58>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b02      	cmp	r3, #2
 8002812:	d109      	bne.n	8002828 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002814:	f3ef 8311 	mrs	r3, BASEPRI
 8002818:	60bb      	str	r3, [r7, #8]
  return(result);
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <osDelay+0x3c>
    stat = osErrorISR;
 8002820:	f06f 0305 	mvn.w	r3, #5
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	e007      	b.n	8002838 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d002      	beq.n	8002838 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 ff9c 	bl	8003770 <vTaskDelay>
    }
  }

  return (stat);
 8002838:	697b      	ldr	r3, [r7, #20]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	200000d4 	.word	0x200000d4

08002848 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4a07      	ldr	r2, [pc, #28]	@ (8002874 <vApplicationGetIdleTaskMemory+0x2c>)
 8002858:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	4a06      	ldr	r2, [pc, #24]	@ (8002878 <vApplicationGetIdleTaskMemory+0x30>)
 800285e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2280      	movs	r2, #128	@ 0x80
 8002864:	601a      	str	r2, [r3, #0]
}
 8002866:	bf00      	nop
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	200000d8 	.word	0x200000d8
 8002878:	20000180 	.word	0x20000180

0800287c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4a07      	ldr	r2, [pc, #28]	@ (80028a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800288c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	4a06      	ldr	r2, [pc, #24]	@ (80028ac <vApplicationGetTimerTaskMemory+0x30>)
 8002892:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800289a:	601a      	str	r2, [r3, #0]
}
 800289c:	bf00      	nop
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	20000380 	.word	0x20000380
 80028ac:	20000428 	.word	0x20000428

080028b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f103 0208 	add.w	r2, r3, #8
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f04f 32ff 	mov.w	r2, #4294967295
 80028c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f103 0208 	add.w	r2, r3, #8
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f103 0208 	add.w	r2, r3, #8
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800290a:	b480      	push	{r7}
 800290c:	b085      	sub	sp, #20
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	601a      	str	r2, [r3, #0]
}
 8002946:	bf00      	nop
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002952:	b480      	push	{r7}
 8002954:	b085      	sub	sp, #20
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002968:	d103      	bne.n	8002972 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	e00c      	b.n	800298c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3308      	adds	r3, #8
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	e002      	b.n	8002980 <vListInsert+0x2e>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	429a      	cmp	r2, r3
 800298a:	d2f6      	bcs.n	800297a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	1c5a      	adds	r2, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	601a      	str	r2, [r3, #0]
}
 80029b8:	bf00      	nop
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6892      	ldr	r2, [r2, #8]
 80029da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	6852      	ldr	r2, [r2, #4]
 80029e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d103      	bne.n	80029f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	1e5a      	subs	r2, r3, #1
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10b      	bne.n	8002a44 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a30:	f383 8811 	msr	BASEPRI, r3
 8002a34:	f3bf 8f6f 	isb	sy
 8002a38:	f3bf 8f4f 	dsb	sy
 8002a3c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a3e:	bf00      	nop
 8002a40:	bf00      	nop
 8002a42:	e7fd      	b.n	8002a40 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002a44:	f002 f870 	bl	8004b28 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a50:	68f9      	ldr	r1, [r7, #12]
 8002a52:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002a54:	fb01 f303 	mul.w	r3, r1, r3
 8002a58:	441a      	add	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a74:	3b01      	subs	r3, #1
 8002a76:	68f9      	ldr	r1, [r7, #12]
 8002a78:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002a7a:	fb01 f303 	mul.w	r3, r1, r3
 8002a7e:	441a      	add	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	22ff      	movs	r2, #255	@ 0xff
 8002a88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	22ff      	movs	r2, #255	@ 0xff
 8002a90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d114      	bne.n	8002ac4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d01a      	beq.n	8002ad8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	3310      	adds	r3, #16
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f001 f93c 	bl	8003d24 <xTaskRemoveFromEventList>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d012      	beq.n	8002ad8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ae8 <xQueueGenericReset+0xd0>)
 8002ab4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	f3bf 8f4f 	dsb	sy
 8002abe:	f3bf 8f6f 	isb	sy
 8002ac2:	e009      	b.n	8002ad8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	3310      	adds	r3, #16
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff fef1 	bl	80028b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	3324      	adds	r3, #36	@ 0x24
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff feec 	bl	80028b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002ad8:	f002 f858 	bl	8004b8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002adc:	2301      	movs	r3, #1
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	e000ed04 	.word	0xe000ed04

08002aec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08e      	sub	sp, #56	@ 0x38
 8002af0:	af02      	add	r7, sp, #8
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
 8002af8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10b      	bne.n	8002b18 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b04:	f383 8811 	msr	BASEPRI, r3
 8002b08:	f3bf 8f6f 	isb	sy
 8002b0c:	f3bf 8f4f 	dsb	sy
 8002b10:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002b12:	bf00      	nop
 8002b14:	bf00      	nop
 8002b16:	e7fd      	b.n	8002b14 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10b      	bne.n	8002b36 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b22:	f383 8811 	msr	BASEPRI, r3
 8002b26:	f3bf 8f6f 	isb	sy
 8002b2a:	f3bf 8f4f 	dsb	sy
 8002b2e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002b30:	bf00      	nop
 8002b32:	bf00      	nop
 8002b34:	e7fd      	b.n	8002b32 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d002      	beq.n	8002b42 <xQueueGenericCreateStatic+0x56>
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <xQueueGenericCreateStatic+0x5a>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <xQueueGenericCreateStatic+0x5c>
 8002b46:	2300      	movs	r3, #0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10b      	bne.n	8002b64 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b50:	f383 8811 	msr	BASEPRI, r3
 8002b54:	f3bf 8f6f 	isb	sy
 8002b58:	f3bf 8f4f 	dsb	sy
 8002b5c:	623b      	str	r3, [r7, #32]
}
 8002b5e:	bf00      	nop
 8002b60:	bf00      	nop
 8002b62:	e7fd      	b.n	8002b60 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d102      	bne.n	8002b70 <xQueueGenericCreateStatic+0x84>
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <xQueueGenericCreateStatic+0x88>
 8002b70:	2301      	movs	r3, #1
 8002b72:	e000      	b.n	8002b76 <xQueueGenericCreateStatic+0x8a>
 8002b74:	2300      	movs	r3, #0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10b      	bne.n	8002b92 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b7e:	f383 8811 	msr	BASEPRI, r3
 8002b82:	f3bf 8f6f 	isb	sy
 8002b86:	f3bf 8f4f 	dsb	sy
 8002b8a:	61fb      	str	r3, [r7, #28]
}
 8002b8c:	bf00      	nop
 8002b8e:	bf00      	nop
 8002b90:	e7fd      	b.n	8002b8e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002b92:	2350      	movs	r3, #80	@ 0x50
 8002b94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	2b50      	cmp	r3, #80	@ 0x50
 8002b9a:	d00b      	beq.n	8002bb4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ba0:	f383 8811 	msr	BASEPRI, r3
 8002ba4:	f3bf 8f6f 	isb	sy
 8002ba8:	f3bf 8f4f 	dsb	sy
 8002bac:	61bb      	str	r3, [r7, #24]
}
 8002bae:	bf00      	nop
 8002bb0:	bf00      	nop
 8002bb2:	e7fd      	b.n	8002bb0 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00d      	beq.n	8002bda <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002bc6:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	68b9      	ldr	r1, [r7, #8]
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 f805 	bl	8002be4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3730      	adds	r7, #48	@ 0x30
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d103      	bne.n	8002c00 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	e002      	b.n	8002c06 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c12:	2101      	movs	r1, #1
 8002c14:	69b8      	ldr	r0, [r7, #24]
 8002c16:	f7ff feff 	bl	8002a18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	78fa      	ldrb	r2, [r7, #3]
 8002c1e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002c22:	bf00      	nop
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
	...

08002c2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08e      	sub	sp, #56	@ 0x38
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
 8002c38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10b      	bne.n	8002c60 <xQueueGenericSend+0x34>
	__asm volatile
 8002c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c4c:	f383 8811 	msr	BASEPRI, r3
 8002c50:	f3bf 8f6f 	isb	sy
 8002c54:	f3bf 8f4f 	dsb	sy
 8002c58:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002c5a:	bf00      	nop
 8002c5c:	bf00      	nop
 8002c5e:	e7fd      	b.n	8002c5c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d103      	bne.n	8002c6e <xQueueGenericSend+0x42>
 8002c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <xQueueGenericSend+0x46>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <xQueueGenericSend+0x48>
 8002c72:	2300      	movs	r3, #0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10b      	bne.n	8002c90 <xQueueGenericSend+0x64>
	__asm volatile
 8002c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c7c:	f383 8811 	msr	BASEPRI, r3
 8002c80:	f3bf 8f6f 	isb	sy
 8002c84:	f3bf 8f4f 	dsb	sy
 8002c88:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002c8a:	bf00      	nop
 8002c8c:	bf00      	nop
 8002c8e:	e7fd      	b.n	8002c8c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d103      	bne.n	8002c9e <xQueueGenericSend+0x72>
 8002c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d101      	bne.n	8002ca2 <xQueueGenericSend+0x76>
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e000      	b.n	8002ca4 <xQueueGenericSend+0x78>
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10b      	bne.n	8002cc0 <xQueueGenericSend+0x94>
	__asm volatile
 8002ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cac:	f383 8811 	msr	BASEPRI, r3
 8002cb0:	f3bf 8f6f 	isb	sy
 8002cb4:	f3bf 8f4f 	dsb	sy
 8002cb8:	623b      	str	r3, [r7, #32]
}
 8002cba:	bf00      	nop
 8002cbc:	bf00      	nop
 8002cbe:	e7fd      	b.n	8002cbc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cc0:	f001 f9fc 	bl	80040bc <xTaskGetSchedulerState>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d102      	bne.n	8002cd0 <xQueueGenericSend+0xa4>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <xQueueGenericSend+0xa8>
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e000      	b.n	8002cd6 <xQueueGenericSend+0xaa>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10b      	bne.n	8002cf2 <xQueueGenericSend+0xc6>
	__asm volatile
 8002cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cde:	f383 8811 	msr	BASEPRI, r3
 8002ce2:	f3bf 8f6f 	isb	sy
 8002ce6:	f3bf 8f4f 	dsb	sy
 8002cea:	61fb      	str	r3, [r7, #28]
}
 8002cec:	bf00      	nop
 8002cee:	bf00      	nop
 8002cf0:	e7fd      	b.n	8002cee <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002cf2:	f001 ff19 	bl	8004b28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cf8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d302      	bcc.n	8002d08 <xQueueGenericSend+0xdc>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d129      	bne.n	8002d5c <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	68b9      	ldr	r1, [r7, #8]
 8002d0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002d0e:	f000 fa0d 	bl	800312c <prvCopyDataToQueue>
 8002d12:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d010      	beq.n	8002d3e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d1e:	3324      	adds	r3, #36	@ 0x24
 8002d20:	4618      	mov	r0, r3
 8002d22:	f000 ffff 	bl	8003d24 <xTaskRemoveFromEventList>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d013      	beq.n	8002d54 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002d2c:	4b3f      	ldr	r3, [pc, #252]	@ (8002e2c <xQueueGenericSend+0x200>)
 8002d2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	f3bf 8f4f 	dsb	sy
 8002d38:	f3bf 8f6f 	isb	sy
 8002d3c:	e00a      	b.n	8002d54 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d007      	beq.n	8002d54 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002d44:	4b39      	ldr	r3, [pc, #228]	@ (8002e2c <xQueueGenericSend+0x200>)
 8002d46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	f3bf 8f4f 	dsb	sy
 8002d50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002d54:	f001 ff1a 	bl	8004b8c <vPortExitCritical>
				return pdPASS;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e063      	b.n	8002e24 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d103      	bne.n	8002d6a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d62:	f001 ff13 	bl	8004b8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	e05c      	b.n	8002e24 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d106      	bne.n	8002d7e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d70:	f107 0314 	add.w	r3, r7, #20
 8002d74:	4618      	mov	r0, r3
 8002d76:	f001 f839 	bl	8003dec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d7e:	f001 ff05 	bl	8004b8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d82:	f000 fd9b 	bl	80038bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d86:	f001 fecf 	bl	8004b28 <vPortEnterCritical>
 8002d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d90:	b25b      	sxtb	r3, r3
 8002d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d96:	d103      	bne.n	8002da0 <xQueueGenericSend+0x174>
 8002d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002da6:	b25b      	sxtb	r3, r3
 8002da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dac:	d103      	bne.n	8002db6 <xQueueGenericSend+0x18a>
 8002dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002db6:	f001 fee9 	bl	8004b8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002dba:	1d3a      	adds	r2, r7, #4
 8002dbc:	f107 0314 	add.w	r3, r7, #20
 8002dc0:	4611      	mov	r1, r2
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f001 f828 	bl	8003e18 <xTaskCheckForTimeOut>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d124      	bne.n	8002e18 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002dce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002dd0:	f000 faa4 	bl	800331c <prvIsQueueFull>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d018      	beq.n	8002e0c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ddc:	3310      	adds	r3, #16
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	4611      	mov	r1, r2
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 ff4c 	bl	8003c80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002de8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002dea:	f000 fa2f 	bl	800324c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002dee:	f000 fd73 	bl	80038d8 <xTaskResumeAll>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f47f af7c 	bne.w	8002cf2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8002e2c <xQueueGenericSend+0x200>)
 8002dfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	f3bf 8f4f 	dsb	sy
 8002e06:	f3bf 8f6f 	isb	sy
 8002e0a:	e772      	b.n	8002cf2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002e0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e0e:	f000 fa1d 	bl	800324c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e12:	f000 fd61 	bl	80038d8 <xTaskResumeAll>
 8002e16:	e76c      	b.n	8002cf2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002e18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e1a:	f000 fa17 	bl	800324c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e1e:	f000 fd5b 	bl	80038d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002e22:	2300      	movs	r3, #0
		}
	}
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3738      	adds	r7, #56	@ 0x38
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	e000ed04 	.word	0xe000ed04

08002e30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08e      	sub	sp, #56	@ 0x38
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
 8002e3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10b      	bne.n	8002e60 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e4c:	f383 8811 	msr	BASEPRI, r3
 8002e50:	f3bf 8f6f 	isb	sy
 8002e54:	f3bf 8f4f 	dsb	sy
 8002e58:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002e5a:	bf00      	nop
 8002e5c:	bf00      	nop
 8002e5e:	e7fd      	b.n	8002e5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d103      	bne.n	8002e6e <xQueueGenericSendFromISR+0x3e>
 8002e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <xQueueGenericSendFromISR+0x42>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <xQueueGenericSendFromISR+0x44>
 8002e72:	2300      	movs	r3, #0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10b      	bne.n	8002e90 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e7c:	f383 8811 	msr	BASEPRI, r3
 8002e80:	f3bf 8f6f 	isb	sy
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	623b      	str	r3, [r7, #32]
}
 8002e8a:	bf00      	nop
 8002e8c:	bf00      	nop
 8002e8e:	e7fd      	b.n	8002e8c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d103      	bne.n	8002e9e <xQueueGenericSendFromISR+0x6e>
 8002e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d101      	bne.n	8002ea2 <xQueueGenericSendFromISR+0x72>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e000      	b.n	8002ea4 <xQueueGenericSendFromISR+0x74>
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10b      	bne.n	8002ec0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eac:	f383 8811 	msr	BASEPRI, r3
 8002eb0:	f3bf 8f6f 	isb	sy
 8002eb4:	f3bf 8f4f 	dsb	sy
 8002eb8:	61fb      	str	r3, [r7, #28]
}
 8002eba:	bf00      	nop
 8002ebc:	bf00      	nop
 8002ebe:	e7fd      	b.n	8002ebc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ec0:	f001 ff12 	bl	8004ce8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002ec4:	f3ef 8211 	mrs	r2, BASEPRI
 8002ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ecc:	f383 8811 	msr	BASEPRI, r3
 8002ed0:	f3bf 8f6f 	isb	sy
 8002ed4:	f3bf 8f4f 	dsb	sy
 8002ed8:	61ba      	str	r2, [r7, #24]
 8002eda:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002edc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d302      	bcc.n	8002ef2 <xQueueGenericSendFromISR+0xc2>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d12c      	bne.n	8002f4c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ef8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	68b9      	ldr	r1, [r7, #8]
 8002f00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f02:	f000 f913 	bl	800312c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002f06:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8002f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0e:	d112      	bne.n	8002f36 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d016      	beq.n	8002f46 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f1a:	3324      	adds	r3, #36	@ 0x24
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f000 ff01 	bl	8003d24 <xTaskRemoveFromEventList>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00e      	beq.n	8002f46 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00b      	beq.n	8002f46 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	e007      	b.n	8002f46 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002f36:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	b25a      	sxtb	r2, r3
 8002f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002f46:	2301      	movs	r3, #1
 8002f48:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8002f4a:	e001      	b.n	8002f50 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f52:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002f5a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3738      	adds	r7, #56	@ 0x38
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
	...

08002f68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08c      	sub	sp, #48	@ 0x30
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f74:	2300      	movs	r3, #0
 8002f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10b      	bne.n	8002f9a <xQueueReceive+0x32>
	__asm volatile
 8002f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f86:	f383 8811 	msr	BASEPRI, r3
 8002f8a:	f3bf 8f6f 	isb	sy
 8002f8e:	f3bf 8f4f 	dsb	sy
 8002f92:	623b      	str	r3, [r7, #32]
}
 8002f94:	bf00      	nop
 8002f96:	bf00      	nop
 8002f98:	e7fd      	b.n	8002f96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d103      	bne.n	8002fa8 <xQueueReceive+0x40>
 8002fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <xQueueReceive+0x44>
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e000      	b.n	8002fae <xQueueReceive+0x46>
 8002fac:	2300      	movs	r3, #0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10b      	bne.n	8002fca <xQueueReceive+0x62>
	__asm volatile
 8002fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fb6:	f383 8811 	msr	BASEPRI, r3
 8002fba:	f3bf 8f6f 	isb	sy
 8002fbe:	f3bf 8f4f 	dsb	sy
 8002fc2:	61fb      	str	r3, [r7, #28]
}
 8002fc4:	bf00      	nop
 8002fc6:	bf00      	nop
 8002fc8:	e7fd      	b.n	8002fc6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fca:	f001 f877 	bl	80040bc <xTaskGetSchedulerState>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d102      	bne.n	8002fda <xQueueReceive+0x72>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <xQueueReceive+0x76>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <xQueueReceive+0x78>
 8002fde:	2300      	movs	r3, #0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10b      	bne.n	8002ffc <xQueueReceive+0x94>
	__asm volatile
 8002fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fe8:	f383 8811 	msr	BASEPRI, r3
 8002fec:	f3bf 8f6f 	isb	sy
 8002ff0:	f3bf 8f4f 	dsb	sy
 8002ff4:	61bb      	str	r3, [r7, #24]
}
 8002ff6:	bf00      	nop
 8002ff8:	bf00      	nop
 8002ffa:	e7fd      	b.n	8002ff8 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ffc:	f001 fd94 	bl	8004b28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003004:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003008:	2b00      	cmp	r3, #0
 800300a:	d01f      	beq.n	800304c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800300c:	68b9      	ldr	r1, [r7, #8]
 800300e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003010:	f000 f8f6 	bl	8003200 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003016:	1e5a      	subs	r2, r3, #1
 8003018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800301a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800301c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00f      	beq.n	8003044 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003026:	3310      	adds	r3, #16
 8003028:	4618      	mov	r0, r3
 800302a:	f000 fe7b 	bl	8003d24 <xTaskRemoveFromEventList>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d007      	beq.n	8003044 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003034:	4b3c      	ldr	r3, [pc, #240]	@ (8003128 <xQueueReceive+0x1c0>)
 8003036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	f3bf 8f4f 	dsb	sy
 8003040:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003044:	f001 fda2 	bl	8004b8c <vPortExitCritical>
				return pdPASS;
 8003048:	2301      	movs	r3, #1
 800304a:	e069      	b.n	8003120 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d103      	bne.n	800305a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003052:	f001 fd9b 	bl	8004b8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003056:	2300      	movs	r3, #0
 8003058:	e062      	b.n	8003120 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800305a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800305c:	2b00      	cmp	r3, #0
 800305e:	d106      	bne.n	800306e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003060:	f107 0310 	add.w	r3, r7, #16
 8003064:	4618      	mov	r0, r3
 8003066:	f000 fec1 	bl	8003dec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800306a:	2301      	movs	r3, #1
 800306c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800306e:	f001 fd8d 	bl	8004b8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003072:	f000 fc23 	bl	80038bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003076:	f001 fd57 	bl	8004b28 <vPortEnterCritical>
 800307a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800307c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003080:	b25b      	sxtb	r3, r3
 8003082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003086:	d103      	bne.n	8003090 <xQueueReceive+0x128>
 8003088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003092:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003096:	b25b      	sxtb	r3, r3
 8003098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309c:	d103      	bne.n	80030a6 <xQueueReceive+0x13e>
 800309e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030a6:	f001 fd71 	bl	8004b8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030aa:	1d3a      	adds	r2, r7, #4
 80030ac:	f107 0310 	add.w	r3, r7, #16
 80030b0:	4611      	mov	r1, r2
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 feb0 	bl	8003e18 <xTaskCheckForTimeOut>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d123      	bne.n	8003106 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030c0:	f000 f916 	bl	80032f0 <prvIsQueueEmpty>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d017      	beq.n	80030fa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80030ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030cc:	3324      	adds	r3, #36	@ 0x24
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	4611      	mov	r1, r2
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 fdd4 	bl	8003c80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80030d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030da:	f000 f8b7 	bl	800324c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80030de:	f000 fbfb 	bl	80038d8 <xTaskResumeAll>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d189      	bne.n	8002ffc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80030e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003128 <xQueueReceive+0x1c0>)
 80030ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	f3bf 8f4f 	dsb	sy
 80030f4:	f3bf 8f6f 	isb	sy
 80030f8:	e780      	b.n	8002ffc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80030fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030fc:	f000 f8a6 	bl	800324c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003100:	f000 fbea 	bl	80038d8 <xTaskResumeAll>
 8003104:	e77a      	b.n	8002ffc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003106:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003108:	f000 f8a0 	bl	800324c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800310c:	f000 fbe4 	bl	80038d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003110:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003112:	f000 f8ed 	bl	80032f0 <prvIsQueueEmpty>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	f43f af6f 	beq.w	8002ffc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800311e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003120:	4618      	mov	r0, r3
 8003122:	3730      	adds	r7, #48	@ 0x30
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	e000ed04 	.word	0xe000ed04

0800312c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003138:	2300      	movs	r3, #0
 800313a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003140:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10d      	bne.n	8003166 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d14d      	bne.n	80031ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	4618      	mov	r0, r3
 8003158:	f000 ffce 	bl	80040f8 <xTaskPriorityDisinherit>
 800315c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	605a      	str	r2, [r3, #4]
 8003164:	e043      	b.n	80031ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d119      	bne.n	80031a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6898      	ldr	r0, [r3, #8]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003174:	461a      	mov	r2, r3
 8003176:	68b9      	ldr	r1, [r7, #8]
 8003178:	f002 f85c 	bl	8005234 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003184:	441a      	add	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	689a      	ldr	r2, [r3, #8]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	429a      	cmp	r2, r3
 8003194:	d32b      	bcc.n	80031ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	609a      	str	r2, [r3, #8]
 800319e:	e026      	b.n	80031ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	68d8      	ldr	r0, [r3, #12]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a8:	461a      	mov	r2, r3
 80031aa:	68b9      	ldr	r1, [r7, #8]
 80031ac:	f002 f842 	bl	8005234 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	68da      	ldr	r2, [r3, #12]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b8:	425b      	negs	r3, r3
 80031ba:	441a      	add	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d207      	bcs.n	80031dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d4:	425b      	negs	r3, r3
 80031d6:	441a      	add	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d105      	bne.n	80031ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d002      	beq.n	80031ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	3b01      	subs	r3, #1
 80031ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80031f6:	697b      	ldr	r3, [r7, #20]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3718      	adds	r7, #24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320e:	2b00      	cmp	r3, #0
 8003210:	d018      	beq.n	8003244 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68da      	ldr	r2, [r3, #12]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321a:	441a      	add	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68da      	ldr	r2, [r3, #12]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	429a      	cmp	r2, r3
 800322a:	d303      	bcc.n	8003234 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68d9      	ldr	r1, [r3, #12]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323c:	461a      	mov	r2, r3
 800323e:	6838      	ldr	r0, [r7, #0]
 8003240:	f001 fff8 	bl	8005234 <memcpy>
	}
}
 8003244:	bf00      	nop
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003254:	f001 fc68 	bl	8004b28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800325e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003260:	e011      	b.n	8003286 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003266:	2b00      	cmp	r3, #0
 8003268:	d012      	beq.n	8003290 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3324      	adds	r3, #36	@ 0x24
 800326e:	4618      	mov	r0, r3
 8003270:	f000 fd58 	bl	8003d24 <xTaskRemoveFromEventList>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800327a:	f000 fe31 	bl	8003ee0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800327e:	7bfb      	ldrb	r3, [r7, #15]
 8003280:	3b01      	subs	r3, #1
 8003282:	b2db      	uxtb	r3, r3
 8003284:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800328a:	2b00      	cmp	r3, #0
 800328c:	dce9      	bgt.n	8003262 <prvUnlockQueue+0x16>
 800328e:	e000      	b.n	8003292 <prvUnlockQueue+0x46>
					break;
 8003290:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	22ff      	movs	r2, #255	@ 0xff
 8003296:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800329a:	f001 fc77 	bl	8004b8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800329e:	f001 fc43 	bl	8004b28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80032aa:	e011      	b.n	80032d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d012      	beq.n	80032da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3310      	adds	r3, #16
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 fd33 	bl	8003d24 <xTaskRemoveFromEventList>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80032c4:	f000 fe0c 	bl	8003ee0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80032c8:	7bbb      	ldrb	r3, [r7, #14]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80032d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	dce9      	bgt.n	80032ac <prvUnlockQueue+0x60>
 80032d8:	e000      	b.n	80032dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80032da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	22ff      	movs	r2, #255	@ 0xff
 80032e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80032e4:	f001 fc52 	bl	8004b8c <vPortExitCritical>
}
 80032e8:	bf00      	nop
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80032f8:	f001 fc16 	bl	8004b28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003300:	2b00      	cmp	r3, #0
 8003302:	d102      	bne.n	800330a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003304:	2301      	movs	r3, #1
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	e001      	b.n	800330e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800330a:	2300      	movs	r3, #0
 800330c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800330e:	f001 fc3d 	bl	8004b8c <vPortExitCritical>

	return xReturn;
 8003312:	68fb      	ldr	r3, [r7, #12]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003324:	f001 fc00 	bl	8004b28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003330:	429a      	cmp	r2, r3
 8003332:	d102      	bne.n	800333a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003334:	2301      	movs	r3, #1
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	e001      	b.n	800333e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800333a:	2300      	movs	r3, #0
 800333c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800333e:	f001 fc25 	bl	8004b8c <vPortExitCritical>

	return xReturn;
 8003342:	68fb      	ldr	r3, [r7, #12]
}
 8003344:	4618      	mov	r0, r3
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003356:	2300      	movs	r3, #0
 8003358:	60fb      	str	r3, [r7, #12]
 800335a:	e014      	b.n	8003386 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800335c:	4a0f      	ldr	r2, [pc, #60]	@ (800339c <vQueueAddToRegistry+0x50>)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10b      	bne.n	8003380 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003368:	490c      	ldr	r1, [pc, #48]	@ (800339c <vQueueAddToRegistry+0x50>)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003372:	4a0a      	ldr	r2, [pc, #40]	@ (800339c <vQueueAddToRegistry+0x50>)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	4413      	add	r3, r2
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800337e:	e006      	b.n	800338e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	3301      	adds	r3, #1
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2b07      	cmp	r3, #7
 800338a:	d9e7      	bls.n	800335c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800338c:	bf00      	nop
 800338e:	bf00      	nop
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	20000828 	.word	0x20000828

080033a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80033b0:	f001 fbba 	bl	8004b28 <vPortEnterCritical>
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80033ba:	b25b      	sxtb	r3, r3
 80033bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c0:	d103      	bne.n	80033ca <vQueueWaitForMessageRestricted+0x2a>
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033d0:	b25b      	sxtb	r3, r3
 80033d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d6:	d103      	bne.n	80033e0 <vQueueWaitForMessageRestricted+0x40>
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033e0:	f001 fbd4 	bl	8004b8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d106      	bne.n	80033fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	3324      	adds	r3, #36	@ 0x24
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	68b9      	ldr	r1, [r7, #8]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 fc69 	bl	8003ccc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80033fa:	6978      	ldr	r0, [r7, #20]
 80033fc:	f7ff ff26 	bl	800324c <prvUnlockQueue>
	}
 8003400:	bf00      	nop
 8003402:	3718      	adds	r7, #24
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003408:	b580      	push	{r7, lr}
 800340a:	b08e      	sub	sp, #56	@ 0x38
 800340c:	af04      	add	r7, sp, #16
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
 8003414:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10b      	bne.n	8003434 <xTaskCreateStatic+0x2c>
	__asm volatile
 800341c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003420:	f383 8811 	msr	BASEPRI, r3
 8003424:	f3bf 8f6f 	isb	sy
 8003428:	f3bf 8f4f 	dsb	sy
 800342c:	623b      	str	r3, [r7, #32]
}
 800342e:	bf00      	nop
 8003430:	bf00      	nop
 8003432:	e7fd      	b.n	8003430 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10b      	bne.n	8003452 <xTaskCreateStatic+0x4a>
	__asm volatile
 800343a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800343e:	f383 8811 	msr	BASEPRI, r3
 8003442:	f3bf 8f6f 	isb	sy
 8003446:	f3bf 8f4f 	dsb	sy
 800344a:	61fb      	str	r3, [r7, #28]
}
 800344c:	bf00      	nop
 800344e:	bf00      	nop
 8003450:	e7fd      	b.n	800344e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003452:	23a8      	movs	r3, #168	@ 0xa8
 8003454:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	2ba8      	cmp	r3, #168	@ 0xa8
 800345a:	d00b      	beq.n	8003474 <xTaskCreateStatic+0x6c>
	__asm volatile
 800345c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003460:	f383 8811 	msr	BASEPRI, r3
 8003464:	f3bf 8f6f 	isb	sy
 8003468:	f3bf 8f4f 	dsb	sy
 800346c:	61bb      	str	r3, [r7, #24]
}
 800346e:	bf00      	nop
 8003470:	bf00      	nop
 8003472:	e7fd      	b.n	8003470 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003476:	2b00      	cmp	r3, #0
 8003478:	d01e      	beq.n	80034b8 <xTaskCreateStatic+0xb0>
 800347a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800347c:	2b00      	cmp	r3, #0
 800347e:	d01b      	beq.n	80034b8 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003482:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003486:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003488:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800348a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348c:	2202      	movs	r2, #2
 800348e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003492:	2300      	movs	r3, #0
 8003494:	9303      	str	r3, [sp, #12]
 8003496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003498:	9302      	str	r3, [sp, #8]
 800349a:	f107 0314 	add.w	r3, r7, #20
 800349e:	9301      	str	r3, [sp, #4]
 80034a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	68b9      	ldr	r1, [r7, #8]
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 f850 	bl	8003550 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80034b2:	f000 f8ed 	bl	8003690 <prvAddNewTaskToReadyList>
 80034b6:	e001      	b.n	80034bc <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80034bc:	697b      	ldr	r3, [r7, #20]
	}
 80034be:	4618      	mov	r0, r3
 80034c0:	3728      	adds	r7, #40	@ 0x28
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b08c      	sub	sp, #48	@ 0x30
 80034ca:	af04      	add	r7, sp, #16
 80034cc:	60f8      	str	r0, [r7, #12]
 80034ce:	60b9      	str	r1, [r7, #8]
 80034d0:	603b      	str	r3, [r7, #0]
 80034d2:	4613      	mov	r3, r2
 80034d4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034d6:	88fb      	ldrh	r3, [r7, #6]
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4618      	mov	r0, r3
 80034dc:	f001 fc46 	bl	8004d6c <pvPortMalloc>
 80034e0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00e      	beq.n	8003506 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80034e8:	20a8      	movs	r0, #168	@ 0xa8
 80034ea:	f001 fc3f 	bl	8004d6c <pvPortMalloc>
 80034ee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80034fc:	e005      	b.n	800350a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80034fe:	6978      	ldr	r0, [r7, #20]
 8003500:	f001 fcfc 	bl	8004efc <vPortFree>
 8003504:	e001      	b.n	800350a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003506:	2300      	movs	r3, #0
 8003508:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d017      	beq.n	8003540 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003518:	88fa      	ldrh	r2, [r7, #6]
 800351a:	2300      	movs	r3, #0
 800351c:	9303      	str	r3, [sp, #12]
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	9302      	str	r3, [sp, #8]
 8003522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003524:	9301      	str	r3, [sp, #4]
 8003526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	68b9      	ldr	r1, [r7, #8]
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 f80e 	bl	8003550 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003534:	69f8      	ldr	r0, [r7, #28]
 8003536:	f000 f8ab 	bl	8003690 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800353a:	2301      	movs	r3, #1
 800353c:	61bb      	str	r3, [r7, #24]
 800353e:	e002      	b.n	8003546 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003540:	f04f 33ff 	mov.w	r3, #4294967295
 8003544:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003546:	69bb      	ldr	r3, [r7, #24]
	}
 8003548:	4618      	mov	r0, r3
 800354a:	3720      	adds	r7, #32
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b088      	sub	sp, #32
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
 800355c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800355e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003560:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	461a      	mov	r2, r3
 8003568:	21a5      	movs	r1, #165	@ 0xa5
 800356a:	f001 fddf 	bl	800512c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800356e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003570:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003578:	3b01      	subs	r3, #1
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	f023 0307 	bic.w	r3, r3, #7
 8003586:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00b      	beq.n	80035aa <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003596:	f383 8811 	msr	BASEPRI, r3
 800359a:	f3bf 8f6f 	isb	sy
 800359e:	f3bf 8f4f 	dsb	sy
 80035a2:	617b      	str	r3, [r7, #20]
}
 80035a4:	bf00      	nop
 80035a6:	bf00      	nop
 80035a8:	e7fd      	b.n	80035a6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035aa:	2300      	movs	r3, #0
 80035ac:	61fb      	str	r3, [r7, #28]
 80035ae:	e012      	b.n	80035d6 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	4413      	add	r3, r2
 80035b6:	7819      	ldrb	r1, [r3, #0]
 80035b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	4413      	add	r3, r2
 80035be:	3334      	adds	r3, #52	@ 0x34
 80035c0:	460a      	mov	r2, r1
 80035c2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	4413      	add	r3, r2
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d006      	beq.n	80035de <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	3301      	adds	r3, #1
 80035d4:	61fb      	str	r3, [r7, #28]
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	2b0f      	cmp	r3, #15
 80035da:	d9e9      	bls.n	80035b0 <prvInitialiseNewTask+0x60>
 80035dc:	e000      	b.n	80035e0 <prvInitialiseNewTask+0x90>
		{
			break;
 80035de:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80035e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80035e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ea:	2b37      	cmp	r3, #55	@ 0x37
 80035ec:	d901      	bls.n	80035f2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80035ee:	2337      	movs	r3, #55	@ 0x37
 80035f0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80035f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035f6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80035f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035fc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80035fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003600:	2200      	movs	r2, #0
 8003602:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003606:	3304      	adds	r3, #4
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff f971 	bl	80028f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800360e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003610:	3318      	adds	r3, #24
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff f96c 	bl	80028f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800361a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800361c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800361e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003620:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003626:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800362a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800362c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800362e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003630:	2200      	movs	r2, #0
 8003632:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003638:	2200      	movs	r2, #0
 800363a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800363e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003640:	3354      	adds	r3, #84	@ 0x54
 8003642:	224c      	movs	r2, #76	@ 0x4c
 8003644:	2100      	movs	r1, #0
 8003646:	4618      	mov	r0, r3
 8003648:	f001 fd70 	bl	800512c <memset>
 800364c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800364e:	4a0d      	ldr	r2, [pc, #52]	@ (8003684 <prvInitialiseNewTask+0x134>)
 8003650:	659a      	str	r2, [r3, #88]	@ 0x58
 8003652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003654:	4a0c      	ldr	r2, [pc, #48]	@ (8003688 <prvInitialiseNewTask+0x138>)
 8003656:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365a:	4a0c      	ldr	r2, [pc, #48]	@ (800368c <prvInitialiseNewTask+0x13c>)
 800365c:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	68f9      	ldr	r1, [r7, #12]
 8003662:	69b8      	ldr	r0, [r7, #24]
 8003664:	f001 f92c 	bl	80048c0 <pxPortInitialiseStack>
 8003668:	4602      	mov	r2, r0
 800366a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800366c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800366e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003670:	2b00      	cmp	r3, #0
 8003672:	d002      	beq.n	800367a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003676:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003678:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800367a:	bf00      	nop
 800367c:	3720      	adds	r7, #32
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	20001ab4 	.word	0x20001ab4
 8003688:	20001b1c 	.word	0x20001b1c
 800368c:	20001b84 	.word	0x20001b84

08003690 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003698:	f001 fa46 	bl	8004b28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800369c:	4b2d      	ldr	r3, [pc, #180]	@ (8003754 <prvAddNewTaskToReadyList+0xc4>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	3301      	adds	r3, #1
 80036a2:	4a2c      	ldr	r2, [pc, #176]	@ (8003754 <prvAddNewTaskToReadyList+0xc4>)
 80036a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80036a6:	4b2c      	ldr	r3, [pc, #176]	@ (8003758 <prvAddNewTaskToReadyList+0xc8>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d109      	bne.n	80036c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80036ae:	4a2a      	ldr	r2, [pc, #168]	@ (8003758 <prvAddNewTaskToReadyList+0xc8>)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80036b4:	4b27      	ldr	r3, [pc, #156]	@ (8003754 <prvAddNewTaskToReadyList+0xc4>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d110      	bne.n	80036de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80036bc:	f000 fc34 	bl	8003f28 <prvInitialiseTaskLists>
 80036c0:	e00d      	b.n	80036de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80036c2:	4b26      	ldr	r3, [pc, #152]	@ (800375c <prvAddNewTaskToReadyList+0xcc>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d109      	bne.n	80036de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80036ca:	4b23      	ldr	r3, [pc, #140]	@ (8003758 <prvAddNewTaskToReadyList+0xc8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d802      	bhi.n	80036de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80036d8:	4a1f      	ldr	r2, [pc, #124]	@ (8003758 <prvAddNewTaskToReadyList+0xc8>)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80036de:	4b20      	ldr	r3, [pc, #128]	@ (8003760 <prvAddNewTaskToReadyList+0xd0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	3301      	adds	r3, #1
 80036e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003760 <prvAddNewTaskToReadyList+0xd0>)
 80036e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80036e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003760 <prvAddNewTaskToReadyList+0xd0>)
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003764 <prvAddNewTaskToReadyList+0xd4>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d903      	bls.n	8003704 <prvAddNewTaskToReadyList+0x74>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003700:	4a18      	ldr	r2, [pc, #96]	@ (8003764 <prvAddNewTaskToReadyList+0xd4>)
 8003702:	6013      	str	r3, [r2, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003708:	4613      	mov	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4a15      	ldr	r2, [pc, #84]	@ (8003768 <prvAddNewTaskToReadyList+0xd8>)
 8003712:	441a      	add	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3304      	adds	r3, #4
 8003718:	4619      	mov	r1, r3
 800371a:	4610      	mov	r0, r2
 800371c:	f7ff f8f5 	bl	800290a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003720:	f001 fa34 	bl	8004b8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003724:	4b0d      	ldr	r3, [pc, #52]	@ (800375c <prvAddNewTaskToReadyList+0xcc>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00e      	beq.n	800374a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800372c:	4b0a      	ldr	r3, [pc, #40]	@ (8003758 <prvAddNewTaskToReadyList+0xc8>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003736:	429a      	cmp	r2, r3
 8003738:	d207      	bcs.n	800374a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800373a:	4b0c      	ldr	r3, [pc, #48]	@ (800376c <prvAddNewTaskToReadyList+0xdc>)
 800373c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	f3bf 8f4f 	dsb	sy
 8003746:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800374a:	bf00      	nop
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	20000d3c 	.word	0x20000d3c
 8003758:	20000868 	.word	0x20000868
 800375c:	20000d48 	.word	0x20000d48
 8003760:	20000d58 	.word	0x20000d58
 8003764:	20000d44 	.word	0x20000d44
 8003768:	2000086c 	.word	0x2000086c
 800376c:	e000ed04 	.word	0xe000ed04

08003770 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003778:	2300      	movs	r3, #0
 800377a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d018      	beq.n	80037b4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003782:	4b14      	ldr	r3, [pc, #80]	@ (80037d4 <vTaskDelay+0x64>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00b      	beq.n	80037a2 <vTaskDelay+0x32>
	__asm volatile
 800378a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800378e:	f383 8811 	msr	BASEPRI, r3
 8003792:	f3bf 8f6f 	isb	sy
 8003796:	f3bf 8f4f 	dsb	sy
 800379a:	60bb      	str	r3, [r7, #8]
}
 800379c:	bf00      	nop
 800379e:	bf00      	nop
 80037a0:	e7fd      	b.n	800379e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80037a2:	f000 f88b 	bl	80038bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80037a6:	2100      	movs	r1, #0
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 fd15 	bl	80041d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80037ae:	f000 f893 	bl	80038d8 <xTaskResumeAll>
 80037b2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d107      	bne.n	80037ca <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80037ba:	4b07      	ldr	r3, [pc, #28]	@ (80037d8 <vTaskDelay+0x68>)
 80037bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	f3bf 8f4f 	dsb	sy
 80037c6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80037ca:	bf00      	nop
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	20000d64 	.word	0x20000d64
 80037d8:	e000ed04 	.word	0xe000ed04

080037dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08a      	sub	sp, #40	@ 0x28
 80037e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80037e2:	2300      	movs	r3, #0
 80037e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80037e6:	2300      	movs	r3, #0
 80037e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80037ea:	463a      	mov	r2, r7
 80037ec:	1d39      	adds	r1, r7, #4
 80037ee:	f107 0308 	add.w	r3, r7, #8
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff f828 	bl	8002848 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80037f8:	6839      	ldr	r1, [r7, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	9202      	str	r2, [sp, #8]
 8003800:	9301      	str	r3, [sp, #4]
 8003802:	2300      	movs	r3, #0
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	2300      	movs	r3, #0
 8003808:	460a      	mov	r2, r1
 800380a:	4924      	ldr	r1, [pc, #144]	@ (800389c <vTaskStartScheduler+0xc0>)
 800380c:	4824      	ldr	r0, [pc, #144]	@ (80038a0 <vTaskStartScheduler+0xc4>)
 800380e:	f7ff fdfb 	bl	8003408 <xTaskCreateStatic>
 8003812:	4603      	mov	r3, r0
 8003814:	4a23      	ldr	r2, [pc, #140]	@ (80038a4 <vTaskStartScheduler+0xc8>)
 8003816:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003818:	4b22      	ldr	r3, [pc, #136]	@ (80038a4 <vTaskStartScheduler+0xc8>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d002      	beq.n	8003826 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003820:	2301      	movs	r3, #1
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	e001      	b.n	800382a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d102      	bne.n	8003836 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003830:	f000 fd26 	bl	8004280 <xTimerCreateTimerTask>
 8003834:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d11b      	bne.n	8003874 <vTaskStartScheduler+0x98>
	__asm volatile
 800383c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003840:	f383 8811 	msr	BASEPRI, r3
 8003844:	f3bf 8f6f 	isb	sy
 8003848:	f3bf 8f4f 	dsb	sy
 800384c:	613b      	str	r3, [r7, #16]
}
 800384e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003850:	4b15      	ldr	r3, [pc, #84]	@ (80038a8 <vTaskStartScheduler+0xcc>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	3354      	adds	r3, #84	@ 0x54
 8003856:	4a15      	ldr	r2, [pc, #84]	@ (80038ac <vTaskStartScheduler+0xd0>)
 8003858:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800385a:	4b15      	ldr	r3, [pc, #84]	@ (80038b0 <vTaskStartScheduler+0xd4>)
 800385c:	f04f 32ff 	mov.w	r2, #4294967295
 8003860:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003862:	4b14      	ldr	r3, [pc, #80]	@ (80038b4 <vTaskStartScheduler+0xd8>)
 8003864:	2201      	movs	r2, #1
 8003866:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003868:	4b13      	ldr	r3, [pc, #76]	@ (80038b8 <vTaskStartScheduler+0xdc>)
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800386e:	f001 f8b7 	bl	80049e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003872:	e00f      	b.n	8003894 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800387a:	d10b      	bne.n	8003894 <vTaskStartScheduler+0xb8>
	__asm volatile
 800387c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003880:	f383 8811 	msr	BASEPRI, r3
 8003884:	f3bf 8f6f 	isb	sy
 8003888:	f3bf 8f4f 	dsb	sy
 800388c:	60fb      	str	r3, [r7, #12]
}
 800388e:	bf00      	nop
 8003890:	bf00      	nop
 8003892:	e7fd      	b.n	8003890 <vTaskStartScheduler+0xb4>
}
 8003894:	bf00      	nop
 8003896:	3718      	adds	r7, #24
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	08005324 	.word	0x08005324
 80038a0:	08003ef9 	.word	0x08003ef9
 80038a4:	20000d60 	.word	0x20000d60
 80038a8:	20000868 	.word	0x20000868
 80038ac:	20000010 	.word	0x20000010
 80038b0:	20000d5c 	.word	0x20000d5c
 80038b4:	20000d48 	.word	0x20000d48
 80038b8:	20000d40 	.word	0x20000d40

080038bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80038c0:	4b04      	ldr	r3, [pc, #16]	@ (80038d4 <vTaskSuspendAll+0x18>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	3301      	adds	r3, #1
 80038c6:	4a03      	ldr	r2, [pc, #12]	@ (80038d4 <vTaskSuspendAll+0x18>)
 80038c8:	6013      	str	r3, [r2, #0]
}
 80038ca:	bf00      	nop
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	20000d64 	.word	0x20000d64

080038d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80038de:	2300      	movs	r3, #0
 80038e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80038e2:	2300      	movs	r3, #0
 80038e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80038e6:	4b42      	ldr	r3, [pc, #264]	@ (80039f0 <xTaskResumeAll+0x118>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10b      	bne.n	8003906 <xTaskResumeAll+0x2e>
	__asm volatile
 80038ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038f2:	f383 8811 	msr	BASEPRI, r3
 80038f6:	f3bf 8f6f 	isb	sy
 80038fa:	f3bf 8f4f 	dsb	sy
 80038fe:	603b      	str	r3, [r7, #0]
}
 8003900:	bf00      	nop
 8003902:	bf00      	nop
 8003904:	e7fd      	b.n	8003902 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003906:	f001 f90f 	bl	8004b28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800390a:	4b39      	ldr	r3, [pc, #228]	@ (80039f0 <xTaskResumeAll+0x118>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	3b01      	subs	r3, #1
 8003910:	4a37      	ldr	r2, [pc, #220]	@ (80039f0 <xTaskResumeAll+0x118>)
 8003912:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003914:	4b36      	ldr	r3, [pc, #216]	@ (80039f0 <xTaskResumeAll+0x118>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d162      	bne.n	80039e2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800391c:	4b35      	ldr	r3, [pc, #212]	@ (80039f4 <xTaskResumeAll+0x11c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d05e      	beq.n	80039e2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003924:	e02f      	b.n	8003986 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003926:	4b34      	ldr	r3, [pc, #208]	@ (80039f8 <xTaskResumeAll+0x120>)
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	3318      	adds	r3, #24
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff f846 	bl	80029c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	3304      	adds	r3, #4
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff f841 	bl	80029c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003946:	4b2d      	ldr	r3, [pc, #180]	@ (80039fc <xTaskResumeAll+0x124>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	429a      	cmp	r2, r3
 800394c:	d903      	bls.n	8003956 <xTaskResumeAll+0x7e>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003952:	4a2a      	ldr	r2, [pc, #168]	@ (80039fc <xTaskResumeAll+0x124>)
 8003954:	6013      	str	r3, [r2, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800395a:	4613      	mov	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4413      	add	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4a27      	ldr	r2, [pc, #156]	@ (8003a00 <xTaskResumeAll+0x128>)
 8003964:	441a      	add	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	3304      	adds	r3, #4
 800396a:	4619      	mov	r1, r3
 800396c:	4610      	mov	r0, r2
 800396e:	f7fe ffcc 	bl	800290a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003976:	4b23      	ldr	r3, [pc, #140]	@ (8003a04 <xTaskResumeAll+0x12c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800397c:	429a      	cmp	r2, r3
 800397e:	d302      	bcc.n	8003986 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003980:	4b21      	ldr	r3, [pc, #132]	@ (8003a08 <xTaskResumeAll+0x130>)
 8003982:	2201      	movs	r2, #1
 8003984:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003986:	4b1c      	ldr	r3, [pc, #112]	@ (80039f8 <xTaskResumeAll+0x120>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1cb      	bne.n	8003926 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003994:	f000 fb6c 	bl	8004070 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003998:	4b1c      	ldr	r3, [pc, #112]	@ (8003a0c <xTaskResumeAll+0x134>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d010      	beq.n	80039c6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80039a4:	f000 f846 	bl	8003a34 <xTaskIncrementTick>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d002      	beq.n	80039b4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80039ae:	4b16      	ldr	r3, [pc, #88]	@ (8003a08 <xTaskResumeAll+0x130>)
 80039b0:	2201      	movs	r2, #1
 80039b2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	3b01      	subs	r3, #1
 80039b8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1f1      	bne.n	80039a4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80039c0:	4b12      	ldr	r3, [pc, #72]	@ (8003a0c <xTaskResumeAll+0x134>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80039c6:	4b10      	ldr	r3, [pc, #64]	@ (8003a08 <xTaskResumeAll+0x130>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d009      	beq.n	80039e2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80039ce:	2301      	movs	r3, #1
 80039d0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80039d2:	4b0f      	ldr	r3, [pc, #60]	@ (8003a10 <xTaskResumeAll+0x138>)
 80039d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	f3bf 8f4f 	dsb	sy
 80039de:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80039e2:	f001 f8d3 	bl	8004b8c <vPortExitCritical>

	return xAlreadyYielded;
 80039e6:	68bb      	ldr	r3, [r7, #8]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	20000d64 	.word	0x20000d64
 80039f4:	20000d3c 	.word	0x20000d3c
 80039f8:	20000cfc 	.word	0x20000cfc
 80039fc:	20000d44 	.word	0x20000d44
 8003a00:	2000086c 	.word	0x2000086c
 8003a04:	20000868 	.word	0x20000868
 8003a08:	20000d50 	.word	0x20000d50
 8003a0c:	20000d4c 	.word	0x20000d4c
 8003a10:	e000ed04 	.word	0xe000ed04

08003a14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003a1a:	4b05      	ldr	r3, [pc, #20]	@ (8003a30 <xTaskGetTickCount+0x1c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003a20:	687b      	ldr	r3, [r7, #4]
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	20000d40 	.word	0x20000d40

08003a34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a3e:	4b52      	ldr	r3, [pc, #328]	@ (8003b88 <xTaskIncrementTick+0x154>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f040 808f 	bne.w	8003b66 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a48:	4b50      	ldr	r3, [pc, #320]	@ (8003b8c <xTaskIncrementTick+0x158>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003a50:	4a4e      	ldr	r2, [pc, #312]	@ (8003b8c <xTaskIncrementTick+0x158>)
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d121      	bne.n	8003aa0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003a5c:	4b4c      	ldr	r3, [pc, #304]	@ (8003b90 <xTaskIncrementTick+0x15c>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00b      	beq.n	8003a7e <xTaskIncrementTick+0x4a>
	__asm volatile
 8003a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a6a:	f383 8811 	msr	BASEPRI, r3
 8003a6e:	f3bf 8f6f 	isb	sy
 8003a72:	f3bf 8f4f 	dsb	sy
 8003a76:	603b      	str	r3, [r7, #0]
}
 8003a78:	bf00      	nop
 8003a7a:	bf00      	nop
 8003a7c:	e7fd      	b.n	8003a7a <xTaskIncrementTick+0x46>
 8003a7e:	4b44      	ldr	r3, [pc, #272]	@ (8003b90 <xTaskIncrementTick+0x15c>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	4b43      	ldr	r3, [pc, #268]	@ (8003b94 <xTaskIncrementTick+0x160>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a41      	ldr	r2, [pc, #260]	@ (8003b90 <xTaskIncrementTick+0x15c>)
 8003a8a:	6013      	str	r3, [r2, #0]
 8003a8c:	4a41      	ldr	r2, [pc, #260]	@ (8003b94 <xTaskIncrementTick+0x160>)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	4b41      	ldr	r3, [pc, #260]	@ (8003b98 <xTaskIncrementTick+0x164>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	3301      	adds	r3, #1
 8003a98:	4a3f      	ldr	r2, [pc, #252]	@ (8003b98 <xTaskIncrementTick+0x164>)
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	f000 fae8 	bl	8004070 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003aa0:	4b3e      	ldr	r3, [pc, #248]	@ (8003b9c <xTaskIncrementTick+0x168>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d34e      	bcc.n	8003b48 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003aaa:	4b39      	ldr	r3, [pc, #228]	@ (8003b90 <xTaskIncrementTick+0x15c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <xTaskIncrementTick+0x84>
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e000      	b.n	8003aba <xTaskIncrementTick+0x86>
 8003ab8:	2300      	movs	r3, #0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d004      	beq.n	8003ac8 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003abe:	4b37      	ldr	r3, [pc, #220]	@ (8003b9c <xTaskIncrementTick+0x168>)
 8003ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac4:	601a      	str	r2, [r3, #0]
					break;
 8003ac6:	e03f      	b.n	8003b48 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003ac8:	4b31      	ldr	r3, [pc, #196]	@ (8003b90 <xTaskIncrementTick+0x15c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d203      	bcs.n	8003ae8 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ae0:	4a2e      	ldr	r2, [pc, #184]	@ (8003b9c <xTaskIncrementTick+0x168>)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6013      	str	r3, [r2, #0]
						break;
 8003ae6:	e02f      	b.n	8003b48 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	3304      	adds	r3, #4
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7fe ff69 	bl	80029c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d004      	beq.n	8003b04 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	3318      	adds	r3, #24
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fe ff60 	bl	80029c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b08:	4b25      	ldr	r3, [pc, #148]	@ (8003ba0 <xTaskIncrementTick+0x16c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d903      	bls.n	8003b18 <xTaskIncrementTick+0xe4>
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b14:	4a22      	ldr	r2, [pc, #136]	@ (8003ba0 <xTaskIncrementTick+0x16c>)
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4a1f      	ldr	r2, [pc, #124]	@ (8003ba4 <xTaskIncrementTick+0x170>)
 8003b26:	441a      	add	r2, r3
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	3304      	adds	r3, #4
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4610      	mov	r0, r2
 8003b30:	f7fe feeb 	bl	800290a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b38:	4b1b      	ldr	r3, [pc, #108]	@ (8003ba8 <xTaskIncrementTick+0x174>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d3b3      	bcc.n	8003aaa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003b42:	2301      	movs	r3, #1
 8003b44:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b46:	e7b0      	b.n	8003aaa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b48:	4b17      	ldr	r3, [pc, #92]	@ (8003ba8 <xTaskIncrementTick+0x174>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b4e:	4915      	ldr	r1, [pc, #84]	@ (8003ba4 <xTaskIncrementTick+0x170>)
 8003b50:	4613      	mov	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4413      	add	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d907      	bls.n	8003b70 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003b60:	2301      	movs	r3, #1
 8003b62:	617b      	str	r3, [r7, #20]
 8003b64:	e004      	b.n	8003b70 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003b66:	4b11      	ldr	r3, [pc, #68]	@ (8003bac <xTaskIncrementTick+0x178>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	4a0f      	ldr	r2, [pc, #60]	@ (8003bac <xTaskIncrementTick+0x178>)
 8003b6e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003b70:	4b0f      	ldr	r3, [pc, #60]	@ (8003bb0 <xTaskIncrementTick+0x17c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003b7c:	697b      	ldr	r3, [r7, #20]
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3718      	adds	r7, #24
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	20000d64 	.word	0x20000d64
 8003b8c:	20000d40 	.word	0x20000d40
 8003b90:	20000cf4 	.word	0x20000cf4
 8003b94:	20000cf8 	.word	0x20000cf8
 8003b98:	20000d54 	.word	0x20000d54
 8003b9c:	20000d5c 	.word	0x20000d5c
 8003ba0:	20000d44 	.word	0x20000d44
 8003ba4:	2000086c 	.word	0x2000086c
 8003ba8:	20000868 	.word	0x20000868
 8003bac:	20000d4c 	.word	0x20000d4c
 8003bb0:	20000d50 	.word	0x20000d50

08003bb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003bba:	4b2b      	ldr	r3, [pc, #172]	@ (8003c68 <vTaskSwitchContext+0xb4>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003bc2:	4b2a      	ldr	r3, [pc, #168]	@ (8003c6c <vTaskSwitchContext+0xb8>)
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003bc8:	e047      	b.n	8003c5a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8003bca:	4b28      	ldr	r3, [pc, #160]	@ (8003c6c <vTaskSwitchContext+0xb8>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003bd0:	4b27      	ldr	r3, [pc, #156]	@ (8003c70 <vTaskSwitchContext+0xbc>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	e011      	b.n	8003bfc <vTaskSwitchContext+0x48>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10b      	bne.n	8003bf6 <vTaskSwitchContext+0x42>
	__asm volatile
 8003bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be2:	f383 8811 	msr	BASEPRI, r3
 8003be6:	f3bf 8f6f 	isb	sy
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	607b      	str	r3, [r7, #4]
}
 8003bf0:	bf00      	nop
 8003bf2:	bf00      	nop
 8003bf4:	e7fd      	b.n	8003bf2 <vTaskSwitchContext+0x3e>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	60fb      	str	r3, [r7, #12]
 8003bfc:	491d      	ldr	r1, [pc, #116]	@ (8003c74 <vTaskSwitchContext+0xc0>)
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	4613      	mov	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0e3      	beq.n	8003bd8 <vTaskSwitchContext+0x24>
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	4613      	mov	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4413      	add	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4a16      	ldr	r2, [pc, #88]	@ (8003c74 <vTaskSwitchContext+0xc0>)
 8003c1c:	4413      	add	r3, r2
 8003c1e:	60bb      	str	r3, [r7, #8]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	605a      	str	r2, [r3, #4]
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	3308      	adds	r3, #8
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d104      	bne.n	8003c40 <vTaskSwitchContext+0x8c>
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	605a      	str	r2, [r3, #4]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	4a0c      	ldr	r2, [pc, #48]	@ (8003c78 <vTaskSwitchContext+0xc4>)
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	4a09      	ldr	r2, [pc, #36]	@ (8003c70 <vTaskSwitchContext+0xbc>)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003c50:	4b09      	ldr	r3, [pc, #36]	@ (8003c78 <vTaskSwitchContext+0xc4>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	3354      	adds	r3, #84	@ 0x54
 8003c56:	4a09      	ldr	r2, [pc, #36]	@ (8003c7c <vTaskSwitchContext+0xc8>)
 8003c58:	6013      	str	r3, [r2, #0]
}
 8003c5a:	bf00      	nop
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	20000d64 	.word	0x20000d64
 8003c6c:	20000d50 	.word	0x20000d50
 8003c70:	20000d44 	.word	0x20000d44
 8003c74:	2000086c 	.word	0x2000086c
 8003c78:	20000868 	.word	0x20000868
 8003c7c:	20000010 	.word	0x20000010

08003c80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10b      	bne.n	8003ca8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c94:	f383 8811 	msr	BASEPRI, r3
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	60fb      	str	r3, [r7, #12]
}
 8003ca2:	bf00      	nop
 8003ca4:	bf00      	nop
 8003ca6:	e7fd      	b.n	8003ca4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ca8:	4b07      	ldr	r3, [pc, #28]	@ (8003cc8 <vTaskPlaceOnEventList+0x48>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	3318      	adds	r3, #24
 8003cae:	4619      	mov	r1, r3
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7fe fe4e 	bl	8002952 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	6838      	ldr	r0, [r7, #0]
 8003cba:	f000 fa8d 	bl	80041d8 <prvAddCurrentTaskToDelayedList>
}
 8003cbe:	bf00      	nop
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	20000868 	.word	0x20000868

08003ccc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10b      	bne.n	8003cf6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce2:	f383 8811 	msr	BASEPRI, r3
 8003ce6:	f3bf 8f6f 	isb	sy
 8003cea:	f3bf 8f4f 	dsb	sy
 8003cee:	617b      	str	r3, [r7, #20]
}
 8003cf0:	bf00      	nop
 8003cf2:	bf00      	nop
 8003cf4:	e7fd      	b.n	8003cf2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8003d20 <vTaskPlaceOnEventListRestricted+0x54>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	3318      	adds	r3, #24
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f7fe fe03 	bl	800290a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d002      	beq.n	8003d10 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d0e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003d10:	6879      	ldr	r1, [r7, #4]
 8003d12:	68b8      	ldr	r0, [r7, #8]
 8003d14:	f000 fa60 	bl	80041d8 <prvAddCurrentTaskToDelayedList>
	}
 8003d18:	bf00      	nop
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	20000868 	.word	0x20000868

08003d24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10b      	bne.n	8003d52 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d3e:	f383 8811 	msr	BASEPRI, r3
 8003d42:	f3bf 8f6f 	isb	sy
 8003d46:	f3bf 8f4f 	dsb	sy
 8003d4a:	60fb      	str	r3, [r7, #12]
}
 8003d4c:	bf00      	nop
 8003d4e:	bf00      	nop
 8003d50:	e7fd      	b.n	8003d4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	3318      	adds	r3, #24
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fe fe34 	bl	80029c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8003dd4 <xTaskRemoveFromEventList+0xb0>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d11d      	bne.n	8003da0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	3304      	adds	r3, #4
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7fe fe2b 	bl	80029c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d72:	4b19      	ldr	r3, [pc, #100]	@ (8003dd8 <xTaskRemoveFromEventList+0xb4>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d903      	bls.n	8003d82 <xTaskRemoveFromEventList+0x5e>
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d7e:	4a16      	ldr	r2, [pc, #88]	@ (8003dd8 <xTaskRemoveFromEventList+0xb4>)
 8003d80:	6013      	str	r3, [r2, #0]
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d86:	4613      	mov	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4a13      	ldr	r2, [pc, #76]	@ (8003ddc <xTaskRemoveFromEventList+0xb8>)
 8003d90:	441a      	add	r2, r3
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	3304      	adds	r3, #4
 8003d96:	4619      	mov	r1, r3
 8003d98:	4610      	mov	r0, r2
 8003d9a:	f7fe fdb6 	bl	800290a <vListInsertEnd>
 8003d9e:	e005      	b.n	8003dac <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	3318      	adds	r3, #24
 8003da4:	4619      	mov	r1, r3
 8003da6:	480e      	ldr	r0, [pc, #56]	@ (8003de0 <xTaskRemoveFromEventList+0xbc>)
 8003da8:	f7fe fdaf 	bl	800290a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003db0:	4b0c      	ldr	r3, [pc, #48]	@ (8003de4 <xTaskRemoveFromEventList+0xc0>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d905      	bls.n	8003dc6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8003de8 <xTaskRemoveFromEventList+0xc4>)
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	e001      	b.n	8003dca <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003dca:	697b      	ldr	r3, [r7, #20]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3718      	adds	r7, #24
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	20000d64 	.word	0x20000d64
 8003dd8:	20000d44 	.word	0x20000d44
 8003ddc:	2000086c 	.word	0x2000086c
 8003de0:	20000cfc 	.word	0x20000cfc
 8003de4:	20000868 	.word	0x20000868
 8003de8:	20000d50 	.word	0x20000d50

08003dec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003df4:	4b06      	ldr	r3, [pc, #24]	@ (8003e10 <vTaskInternalSetTimeOutState+0x24>)
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003dfc:	4b05      	ldr	r3, [pc, #20]	@ (8003e14 <vTaskInternalSetTimeOutState+0x28>)
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	605a      	str	r2, [r3, #4]
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	20000d54 	.word	0x20000d54
 8003e14:	20000d40 	.word	0x20000d40

08003e18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b088      	sub	sp, #32
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10b      	bne.n	8003e40 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e2c:	f383 8811 	msr	BASEPRI, r3
 8003e30:	f3bf 8f6f 	isb	sy
 8003e34:	f3bf 8f4f 	dsb	sy
 8003e38:	613b      	str	r3, [r7, #16]
}
 8003e3a:	bf00      	nop
 8003e3c:	bf00      	nop
 8003e3e:	e7fd      	b.n	8003e3c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10b      	bne.n	8003e5e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e4a:	f383 8811 	msr	BASEPRI, r3
 8003e4e:	f3bf 8f6f 	isb	sy
 8003e52:	f3bf 8f4f 	dsb	sy
 8003e56:	60fb      	str	r3, [r7, #12]
}
 8003e58:	bf00      	nop
 8003e5a:	bf00      	nop
 8003e5c:	e7fd      	b.n	8003e5a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003e5e:	f000 fe63 	bl	8004b28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003e62:	4b1d      	ldr	r3, [pc, #116]	@ (8003ed8 <xTaskCheckForTimeOut+0xc0>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7a:	d102      	bne.n	8003e82 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	61fb      	str	r3, [r7, #28]
 8003e80:	e023      	b.n	8003eca <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	4b15      	ldr	r3, [pc, #84]	@ (8003edc <xTaskCheckForTimeOut+0xc4>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d007      	beq.n	8003e9e <xTaskCheckForTimeOut+0x86>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d302      	bcc.n	8003e9e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	61fb      	str	r3, [r7, #28]
 8003e9c:	e015      	b.n	8003eca <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d20b      	bcs.n	8003ec0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	1ad2      	subs	r2, r2, r3
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f7ff ff99 	bl	8003dec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	61fb      	str	r3, [r7, #28]
 8003ebe:	e004      	b.n	8003eca <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003eca:	f000 fe5f 	bl	8004b8c <vPortExitCritical>

	return xReturn;
 8003ece:	69fb      	ldr	r3, [r7, #28]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3720      	adds	r7, #32
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	20000d40 	.word	0x20000d40
 8003edc:	20000d54 	.word	0x20000d54

08003ee0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003ee4:	4b03      	ldr	r3, [pc, #12]	@ (8003ef4 <vTaskMissedYield+0x14>)
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	601a      	str	r2, [r3, #0]
}
 8003eea:	bf00      	nop
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	20000d50 	.word	0x20000d50

08003ef8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f00:	f000 f852 	bl	8003fa8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f04:	4b06      	ldr	r3, [pc, #24]	@ (8003f20 <prvIdleTask+0x28>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d9f9      	bls.n	8003f00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f0c:	4b05      	ldr	r3, [pc, #20]	@ (8003f24 <prvIdleTask+0x2c>)
 8003f0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	f3bf 8f4f 	dsb	sy
 8003f18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f1c:	e7f0      	b.n	8003f00 <prvIdleTask+0x8>
 8003f1e:	bf00      	nop
 8003f20:	2000086c 	.word	0x2000086c
 8003f24:	e000ed04 	.word	0xe000ed04

08003f28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f2e:	2300      	movs	r3, #0
 8003f30:	607b      	str	r3, [r7, #4]
 8003f32:	e00c      	b.n	8003f4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	4613      	mov	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4413      	add	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4a12      	ldr	r2, [pc, #72]	@ (8003f88 <prvInitialiseTaskLists+0x60>)
 8003f40:	4413      	add	r3, r2
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fe fcb4 	bl	80028b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	607b      	str	r3, [r7, #4]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b37      	cmp	r3, #55	@ 0x37
 8003f52:	d9ef      	bls.n	8003f34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f54:	480d      	ldr	r0, [pc, #52]	@ (8003f8c <prvInitialiseTaskLists+0x64>)
 8003f56:	f7fe fcab 	bl	80028b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003f5a:	480d      	ldr	r0, [pc, #52]	@ (8003f90 <prvInitialiseTaskLists+0x68>)
 8003f5c:	f7fe fca8 	bl	80028b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f60:	480c      	ldr	r0, [pc, #48]	@ (8003f94 <prvInitialiseTaskLists+0x6c>)
 8003f62:	f7fe fca5 	bl	80028b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003f66:	480c      	ldr	r0, [pc, #48]	@ (8003f98 <prvInitialiseTaskLists+0x70>)
 8003f68:	f7fe fca2 	bl	80028b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003f6c:	480b      	ldr	r0, [pc, #44]	@ (8003f9c <prvInitialiseTaskLists+0x74>)
 8003f6e:	f7fe fc9f 	bl	80028b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003f72:	4b0b      	ldr	r3, [pc, #44]	@ (8003fa0 <prvInitialiseTaskLists+0x78>)
 8003f74:	4a05      	ldr	r2, [pc, #20]	@ (8003f8c <prvInitialiseTaskLists+0x64>)
 8003f76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f78:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa4 <prvInitialiseTaskLists+0x7c>)
 8003f7a:	4a05      	ldr	r2, [pc, #20]	@ (8003f90 <prvInitialiseTaskLists+0x68>)
 8003f7c:	601a      	str	r2, [r3, #0]
}
 8003f7e:	bf00      	nop
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	2000086c 	.word	0x2000086c
 8003f8c:	20000ccc 	.word	0x20000ccc
 8003f90:	20000ce0 	.word	0x20000ce0
 8003f94:	20000cfc 	.word	0x20000cfc
 8003f98:	20000d10 	.word	0x20000d10
 8003f9c:	20000d28 	.word	0x20000d28
 8003fa0:	20000cf4 	.word	0x20000cf4
 8003fa4:	20000cf8 	.word	0x20000cf8

08003fa8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fae:	e019      	b.n	8003fe4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003fb0:	f000 fdba 	bl	8004b28 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003fb4:	4b10      	ldr	r3, [pc, #64]	@ (8003ff8 <prvCheckTasksWaitingTermination+0x50>)
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fe fcff 	bl	80029c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8003ffc <prvCheckTasksWaitingTermination+0x54>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	4a0b      	ldr	r2, [pc, #44]	@ (8003ffc <prvCheckTasksWaitingTermination+0x54>)
 8003fce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8004000 <prvCheckTasksWaitingTermination+0x58>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8004000 <prvCheckTasksWaitingTermination+0x58>)
 8003fd8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003fda:	f000 fdd7 	bl	8004b8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f810 	bl	8004004 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fe4:	4b06      	ldr	r3, [pc, #24]	@ (8004000 <prvCheckTasksWaitingTermination+0x58>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1e1      	bne.n	8003fb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003fec:	bf00      	nop
 8003fee:	bf00      	nop
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20000d10 	.word	0x20000d10
 8003ffc:	20000d3c 	.word	0x20000d3c
 8004000:	20000d24 	.word	0x20000d24

08004004 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3354      	adds	r3, #84	@ 0x54
 8004010:	4618      	mov	r0, r3
 8004012:	f001 f893 	bl	800513c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800401c:	2b00      	cmp	r3, #0
 800401e:	d108      	bne.n	8004032 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004024:	4618      	mov	r0, r3
 8004026:	f000 ff69 	bl	8004efc <vPortFree>
				vPortFree( pxTCB );
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 ff66 	bl	8004efc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004030:	e019      	b.n	8004066 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004038:	2b01      	cmp	r3, #1
 800403a:	d103      	bne.n	8004044 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 ff5d 	bl	8004efc <vPortFree>
	}
 8004042:	e010      	b.n	8004066 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800404a:	2b02      	cmp	r3, #2
 800404c:	d00b      	beq.n	8004066 <prvDeleteTCB+0x62>
	__asm volatile
 800404e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004052:	f383 8811 	msr	BASEPRI, r3
 8004056:	f3bf 8f6f 	isb	sy
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	60fb      	str	r3, [r7, #12]
}
 8004060:	bf00      	nop
 8004062:	bf00      	nop
 8004064:	e7fd      	b.n	8004062 <prvDeleteTCB+0x5e>
	}
 8004066:	bf00      	nop
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
	...

08004070 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004076:	4b0f      	ldr	r3, [pc, #60]	@ (80040b4 <prvResetNextTaskUnblockTime+0x44>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <prvResetNextTaskUnblockTime+0x14>
 8004080:	2301      	movs	r3, #1
 8004082:	e000      	b.n	8004086 <prvResetNextTaskUnblockTime+0x16>
 8004084:	2300      	movs	r3, #0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d004      	beq.n	8004094 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800408a:	4b0b      	ldr	r3, [pc, #44]	@ (80040b8 <prvResetNextTaskUnblockTime+0x48>)
 800408c:	f04f 32ff 	mov.w	r2, #4294967295
 8004090:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004092:	e008      	b.n	80040a6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004094:	4b07      	ldr	r3, [pc, #28]	@ (80040b4 <prvResetNextTaskUnblockTime+0x44>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	4a05      	ldr	r2, [pc, #20]	@ (80040b8 <prvResetNextTaskUnblockTime+0x48>)
 80040a4:	6013      	str	r3, [r2, #0]
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	20000cf4 	.word	0x20000cf4
 80040b8:	20000d5c 	.word	0x20000d5c

080040bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80040c2:	4b0b      	ldr	r3, [pc, #44]	@ (80040f0 <xTaskGetSchedulerState+0x34>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d102      	bne.n	80040d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80040ca:	2301      	movs	r3, #1
 80040cc:	607b      	str	r3, [r7, #4]
 80040ce:	e008      	b.n	80040e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040d0:	4b08      	ldr	r3, [pc, #32]	@ (80040f4 <xTaskGetSchedulerState+0x38>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d102      	bne.n	80040de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80040d8:	2302      	movs	r3, #2
 80040da:	607b      	str	r3, [r7, #4]
 80040dc:	e001      	b.n	80040e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80040de:	2300      	movs	r3, #0
 80040e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80040e2:	687b      	ldr	r3, [r7, #4]
	}
 80040e4:	4618      	mov	r0, r3
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	20000d48 	.word	0x20000d48
 80040f4:	20000d64 	.word	0x20000d64

080040f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004104:	2300      	movs	r3, #0
 8004106:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d058      	beq.n	80041c0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800410e:	4b2f      	ldr	r3, [pc, #188]	@ (80041cc <xTaskPriorityDisinherit+0xd4>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	429a      	cmp	r2, r3
 8004116:	d00b      	beq.n	8004130 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800411c:	f383 8811 	msr	BASEPRI, r3
 8004120:	f3bf 8f6f 	isb	sy
 8004124:	f3bf 8f4f 	dsb	sy
 8004128:	60fb      	str	r3, [r7, #12]
}
 800412a:	bf00      	nop
 800412c:	bf00      	nop
 800412e:	e7fd      	b.n	800412c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10b      	bne.n	8004150 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800413c:	f383 8811 	msr	BASEPRI, r3
 8004140:	f3bf 8f6f 	isb	sy
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	60bb      	str	r3, [r7, #8]
}
 800414a:	bf00      	nop
 800414c:	bf00      	nop
 800414e:	e7fd      	b.n	800414c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004154:	1e5a      	subs	r2, r3, #1
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004162:	429a      	cmp	r2, r3
 8004164:	d02c      	beq.n	80041c0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800416a:	2b00      	cmp	r3, #0
 800416c:	d128      	bne.n	80041c0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	3304      	adds	r3, #4
 8004172:	4618      	mov	r0, r3
 8004174:	f7fe fc26 	bl	80029c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004184:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004190:	4b0f      	ldr	r3, [pc, #60]	@ (80041d0 <xTaskPriorityDisinherit+0xd8>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	429a      	cmp	r2, r3
 8004196:	d903      	bls.n	80041a0 <xTaskPriorityDisinherit+0xa8>
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800419c:	4a0c      	ldr	r2, [pc, #48]	@ (80041d0 <xTaskPriorityDisinherit+0xd8>)
 800419e:	6013      	str	r3, [r2, #0]
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041a4:	4613      	mov	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4413      	add	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4a09      	ldr	r2, [pc, #36]	@ (80041d4 <xTaskPriorityDisinherit+0xdc>)
 80041ae:	441a      	add	r2, r3
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	3304      	adds	r3, #4
 80041b4:	4619      	mov	r1, r3
 80041b6:	4610      	mov	r0, r2
 80041b8:	f7fe fba7 	bl	800290a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80041bc:	2301      	movs	r3, #1
 80041be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80041c0:	697b      	ldr	r3, [r7, #20]
	}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3718      	adds	r7, #24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	20000868 	.word	0x20000868
 80041d0:	20000d44 	.word	0x20000d44
 80041d4:	2000086c 	.word	0x2000086c

080041d8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80041e2:	4b21      	ldr	r3, [pc, #132]	@ (8004268 <prvAddCurrentTaskToDelayedList+0x90>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041e8:	4b20      	ldr	r3, [pc, #128]	@ (800426c <prvAddCurrentTaskToDelayedList+0x94>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3304      	adds	r3, #4
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7fe fbe8 	bl	80029c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fa:	d10a      	bne.n	8004212 <prvAddCurrentTaskToDelayedList+0x3a>
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d007      	beq.n	8004212 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004202:	4b1a      	ldr	r3, [pc, #104]	@ (800426c <prvAddCurrentTaskToDelayedList+0x94>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	3304      	adds	r3, #4
 8004208:	4619      	mov	r1, r3
 800420a:	4819      	ldr	r0, [pc, #100]	@ (8004270 <prvAddCurrentTaskToDelayedList+0x98>)
 800420c:	f7fe fb7d 	bl	800290a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004210:	e026      	b.n	8004260 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4413      	add	r3, r2
 8004218:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800421a:	4b14      	ldr	r3, [pc, #80]	@ (800426c <prvAddCurrentTaskToDelayedList+0x94>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	429a      	cmp	r2, r3
 8004228:	d209      	bcs.n	800423e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800422a:	4b12      	ldr	r3, [pc, #72]	@ (8004274 <prvAddCurrentTaskToDelayedList+0x9c>)
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	4b0f      	ldr	r3, [pc, #60]	@ (800426c <prvAddCurrentTaskToDelayedList+0x94>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	3304      	adds	r3, #4
 8004234:	4619      	mov	r1, r3
 8004236:	4610      	mov	r0, r2
 8004238:	f7fe fb8b 	bl	8002952 <vListInsert>
}
 800423c:	e010      	b.n	8004260 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800423e:	4b0e      	ldr	r3, [pc, #56]	@ (8004278 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	4b0a      	ldr	r3, [pc, #40]	@ (800426c <prvAddCurrentTaskToDelayedList+0x94>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	3304      	adds	r3, #4
 8004248:	4619      	mov	r1, r3
 800424a:	4610      	mov	r0, r2
 800424c:	f7fe fb81 	bl	8002952 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004250:	4b0a      	ldr	r3, [pc, #40]	@ (800427c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68ba      	ldr	r2, [r7, #8]
 8004256:	429a      	cmp	r2, r3
 8004258:	d202      	bcs.n	8004260 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800425a:	4a08      	ldr	r2, [pc, #32]	@ (800427c <prvAddCurrentTaskToDelayedList+0xa4>)
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	6013      	str	r3, [r2, #0]
}
 8004260:	bf00      	nop
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	20000d40 	.word	0x20000d40
 800426c:	20000868 	.word	0x20000868
 8004270:	20000d28 	.word	0x20000d28
 8004274:	20000cf8 	.word	0x20000cf8
 8004278:	20000cf4 	.word	0x20000cf4
 800427c:	20000d5c 	.word	0x20000d5c

08004280 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b08a      	sub	sp, #40	@ 0x28
 8004284:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004286:	2300      	movs	r3, #0
 8004288:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800428a:	f000 fad9 	bl	8004840 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800428e:	4b1d      	ldr	r3, [pc, #116]	@ (8004304 <xTimerCreateTimerTask+0x84>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d021      	beq.n	80042da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004296:	2300      	movs	r3, #0
 8004298:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800429a:	2300      	movs	r3, #0
 800429c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800429e:	1d3a      	adds	r2, r7, #4
 80042a0:	f107 0108 	add.w	r1, r7, #8
 80042a4:	f107 030c 	add.w	r3, r7, #12
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7fe fae7 	bl	800287c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	9202      	str	r2, [sp, #8]
 80042b6:	9301      	str	r3, [sp, #4]
 80042b8:	2302      	movs	r3, #2
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	2300      	movs	r3, #0
 80042be:	460a      	mov	r2, r1
 80042c0:	4911      	ldr	r1, [pc, #68]	@ (8004308 <xTimerCreateTimerTask+0x88>)
 80042c2:	4812      	ldr	r0, [pc, #72]	@ (800430c <xTimerCreateTimerTask+0x8c>)
 80042c4:	f7ff f8a0 	bl	8003408 <xTaskCreateStatic>
 80042c8:	4603      	mov	r3, r0
 80042ca:	4a11      	ldr	r2, [pc, #68]	@ (8004310 <xTimerCreateTimerTask+0x90>)
 80042cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80042ce:	4b10      	ldr	r3, [pc, #64]	@ (8004310 <xTimerCreateTimerTask+0x90>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80042d6:	2301      	movs	r3, #1
 80042d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10b      	bne.n	80042f8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80042e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e4:	f383 8811 	msr	BASEPRI, r3
 80042e8:	f3bf 8f6f 	isb	sy
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	613b      	str	r3, [r7, #16]
}
 80042f2:	bf00      	nop
 80042f4:	bf00      	nop
 80042f6:	e7fd      	b.n	80042f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80042f8:	697b      	ldr	r3, [r7, #20]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3718      	adds	r7, #24
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	20000d98 	.word	0x20000d98
 8004308:	0800532c 	.word	0x0800532c
 800430c:	08004435 	.word	0x08004435
 8004310:	20000d9c 	.word	0x20000d9c

08004314 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b08a      	sub	sp, #40	@ 0x28
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004322:	2300      	movs	r3, #0
 8004324:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10b      	bne.n	8004344 <xTimerGenericCommand+0x30>
	__asm volatile
 800432c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004330:	f383 8811 	msr	BASEPRI, r3
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	f3bf 8f4f 	dsb	sy
 800433c:	623b      	str	r3, [r7, #32]
}
 800433e:	bf00      	nop
 8004340:	bf00      	nop
 8004342:	e7fd      	b.n	8004340 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004344:	4b19      	ldr	r3, [pc, #100]	@ (80043ac <xTimerGenericCommand+0x98>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d02a      	beq.n	80043a2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	2b05      	cmp	r3, #5
 800435c:	dc18      	bgt.n	8004390 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800435e:	f7ff fead 	bl	80040bc <xTaskGetSchedulerState>
 8004362:	4603      	mov	r3, r0
 8004364:	2b02      	cmp	r3, #2
 8004366:	d109      	bne.n	800437c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004368:	4b10      	ldr	r3, [pc, #64]	@ (80043ac <xTimerGenericCommand+0x98>)
 800436a:	6818      	ldr	r0, [r3, #0]
 800436c:	f107 0110 	add.w	r1, r7, #16
 8004370:	2300      	movs	r3, #0
 8004372:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004374:	f7fe fc5a 	bl	8002c2c <xQueueGenericSend>
 8004378:	6278      	str	r0, [r7, #36]	@ 0x24
 800437a:	e012      	b.n	80043a2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800437c:	4b0b      	ldr	r3, [pc, #44]	@ (80043ac <xTimerGenericCommand+0x98>)
 800437e:	6818      	ldr	r0, [r3, #0]
 8004380:	f107 0110 	add.w	r1, r7, #16
 8004384:	2300      	movs	r3, #0
 8004386:	2200      	movs	r2, #0
 8004388:	f7fe fc50 	bl	8002c2c <xQueueGenericSend>
 800438c:	6278      	str	r0, [r7, #36]	@ 0x24
 800438e:	e008      	b.n	80043a2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004390:	4b06      	ldr	r3, [pc, #24]	@ (80043ac <xTimerGenericCommand+0x98>)
 8004392:	6818      	ldr	r0, [r3, #0]
 8004394:	f107 0110 	add.w	r1, r7, #16
 8004398:	2300      	movs	r3, #0
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	f7fe fd48 	bl	8002e30 <xQueueGenericSendFromISR>
 80043a0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80043a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3728      	adds	r7, #40	@ 0x28
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	20000d98 	.word	0x20000d98

080043b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b088      	sub	sp, #32
 80043b4:	af02      	add	r7, sp, #8
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004430 <prvProcessExpiredTimer+0x80>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	3304      	adds	r3, #4
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7fe fafb 	bl	80029c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d123      	bne.n	800441e <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	699a      	ldr	r2, [r3, #24]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	18d1      	adds	r1, r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	6978      	ldr	r0, [r7, #20]
 80043e4:	f000 f8cc 	bl	8004580 <prvInsertTimerInActiveList>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d017      	beq.n	800441e <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80043ee:	2300      	movs	r3, #0
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	2300      	movs	r3, #0
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	2100      	movs	r1, #0
 80043f8:	6978      	ldr	r0, [r7, #20]
 80043fa:	f7ff ff8b 	bl	8004314 <xTimerGenericCommand>
 80043fe:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10b      	bne.n	800441e <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8004406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800440a:	f383 8811 	msr	BASEPRI, r3
 800440e:	f3bf 8f6f 	isb	sy
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	60fb      	str	r3, [r7, #12]
}
 8004418:	bf00      	nop
 800441a:	bf00      	nop
 800441c:	e7fd      	b.n	800441a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004422:	6978      	ldr	r0, [r7, #20]
 8004424:	4798      	blx	r3
}
 8004426:	bf00      	nop
 8004428:	3718      	adds	r7, #24
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	20000d90 	.word	0x20000d90

08004434 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800443c:	f107 0308 	add.w	r3, r7, #8
 8004440:	4618      	mov	r0, r3
 8004442:	f000 f859 	bl	80044f8 <prvGetNextExpireTime>
 8004446:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	4619      	mov	r1, r3
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f000 f805 	bl	800445c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004452:	f000 f8d7 	bl	8004604 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004456:	bf00      	nop
 8004458:	e7f0      	b.n	800443c <prvTimerTask+0x8>
	...

0800445c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004466:	f7ff fa29 	bl	80038bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800446a:	f107 0308 	add.w	r3, r7, #8
 800446e:	4618      	mov	r0, r3
 8004470:	f000 f866 	bl	8004540 <prvSampleTimeNow>
 8004474:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d130      	bne.n	80044de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10a      	bne.n	8004498 <prvProcessTimerOrBlockTask+0x3c>
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	429a      	cmp	r2, r3
 8004488:	d806      	bhi.n	8004498 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800448a:	f7ff fa25 	bl	80038d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800448e:	68f9      	ldr	r1, [r7, #12]
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f7ff ff8d 	bl	80043b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004496:	e024      	b.n	80044e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d008      	beq.n	80044b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800449e:	4b13      	ldr	r3, [pc, #76]	@ (80044ec <prvProcessTimerOrBlockTask+0x90>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	bf0c      	ite	eq
 80044a8:	2301      	moveq	r3, #1
 80044aa:	2300      	movne	r3, #0
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80044b0:	4b0f      	ldr	r3, [pc, #60]	@ (80044f0 <prvProcessTimerOrBlockTask+0x94>)
 80044b2:	6818      	ldr	r0, [r3, #0]
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	683a      	ldr	r2, [r7, #0]
 80044bc:	4619      	mov	r1, r3
 80044be:	f7fe ff6f 	bl	80033a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80044c2:	f7ff fa09 	bl	80038d8 <xTaskResumeAll>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10a      	bne.n	80044e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80044cc:	4b09      	ldr	r3, [pc, #36]	@ (80044f4 <prvProcessTimerOrBlockTask+0x98>)
 80044ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	f3bf 8f4f 	dsb	sy
 80044d8:	f3bf 8f6f 	isb	sy
}
 80044dc:	e001      	b.n	80044e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80044de:	f7ff f9fb 	bl	80038d8 <xTaskResumeAll>
}
 80044e2:	bf00      	nop
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	20000d94 	.word	0x20000d94
 80044f0:	20000d98 	.word	0x20000d98
 80044f4:	e000ed04 	.word	0xe000ed04

080044f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004500:	4b0e      	ldr	r3, [pc, #56]	@ (800453c <prvGetNextExpireTime+0x44>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	bf0c      	ite	eq
 800450a:	2301      	moveq	r3, #1
 800450c:	2300      	movne	r3, #0
 800450e:	b2db      	uxtb	r3, r3
 8004510:	461a      	mov	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d105      	bne.n	800452a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800451e:	4b07      	ldr	r3, [pc, #28]	@ (800453c <prvGetNextExpireTime+0x44>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	e001      	b.n	800452e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800452a:	2300      	movs	r3, #0
 800452c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800452e:	68fb      	ldr	r3, [r7, #12]
}
 8004530:	4618      	mov	r0, r3
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	20000d90 	.word	0x20000d90

08004540 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004548:	f7ff fa64 	bl	8003a14 <xTaskGetTickCount>
 800454c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800454e:	4b0b      	ldr	r3, [pc, #44]	@ (800457c <prvSampleTimeNow+0x3c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	429a      	cmp	r2, r3
 8004556:	d205      	bcs.n	8004564 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004558:	f000 f910 	bl	800477c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	e002      	b.n	800456a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800456a:	4a04      	ldr	r2, [pc, #16]	@ (800457c <prvSampleTimeNow+0x3c>)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004570:	68fb      	ldr	r3, [r7, #12]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	20000da0 	.word	0x20000da0

08004580 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
 800458c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800458e:	2300      	movs	r3, #0
 8004590:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d812      	bhi.n	80045cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	1ad2      	subs	r2, r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d302      	bcc.n	80045ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80045b4:	2301      	movs	r3, #1
 80045b6:	617b      	str	r3, [r7, #20]
 80045b8:	e01b      	b.n	80045f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80045ba:	4b10      	ldr	r3, [pc, #64]	@ (80045fc <prvInsertTimerInActiveList+0x7c>)
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	3304      	adds	r3, #4
 80045c2:	4619      	mov	r1, r3
 80045c4:	4610      	mov	r0, r2
 80045c6:	f7fe f9c4 	bl	8002952 <vListInsert>
 80045ca:	e012      	b.n	80045f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d206      	bcs.n	80045e2 <prvInsertTimerInActiveList+0x62>
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d302      	bcc.n	80045e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80045dc:	2301      	movs	r3, #1
 80045de:	617b      	str	r3, [r7, #20]
 80045e0:	e007      	b.n	80045f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80045e2:	4b07      	ldr	r3, [pc, #28]	@ (8004600 <prvInsertTimerInActiveList+0x80>)
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	3304      	adds	r3, #4
 80045ea:	4619      	mov	r1, r3
 80045ec:	4610      	mov	r0, r2
 80045ee:	f7fe f9b0 	bl	8002952 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80045f2:	697b      	ldr	r3, [r7, #20]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	20000d94 	.word	0x20000d94
 8004600:	20000d90 	.word	0x20000d90

08004604 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b08e      	sub	sp, #56	@ 0x38
 8004608:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800460a:	e0a5      	b.n	8004758 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	da19      	bge.n	8004646 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004612:	1d3b      	adds	r3, r7, #4
 8004614:	3304      	adds	r3, #4
 8004616:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10b      	bne.n	8004636 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800461e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004622:	f383 8811 	msr	BASEPRI, r3
 8004626:	f3bf 8f6f 	isb	sy
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	61fb      	str	r3, [r7, #28]
}
 8004630:	bf00      	nop
 8004632:	bf00      	nop
 8004634:	e7fd      	b.n	8004632 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800463c:	6850      	ldr	r0, [r2, #4]
 800463e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004640:	6892      	ldr	r2, [r2, #8]
 8004642:	4611      	mov	r1, r2
 8004644:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	f2c0 8085 	blt.w	8004758 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d004      	beq.n	8004664 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800465a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800465c:	3304      	adds	r3, #4
 800465e:	4618      	mov	r0, r3
 8004660:	f7fe f9b0 	bl	80029c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004664:	463b      	mov	r3, r7
 8004666:	4618      	mov	r0, r3
 8004668:	f7ff ff6a 	bl	8004540 <prvSampleTimeNow>
 800466c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b09      	cmp	r3, #9
 8004672:	d86c      	bhi.n	800474e <prvProcessReceivedCommands+0x14a>
 8004674:	a201      	add	r2, pc, #4	@ (adr r2, 800467c <prvProcessReceivedCommands+0x78>)
 8004676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467a:	bf00      	nop
 800467c:	080046a5 	.word	0x080046a5
 8004680:	080046a5 	.word	0x080046a5
 8004684:	080046a5 	.word	0x080046a5
 8004688:	0800474f 	.word	0x0800474f
 800468c:	08004703 	.word	0x08004703
 8004690:	0800473d 	.word	0x0800473d
 8004694:	080046a5 	.word	0x080046a5
 8004698:	080046a5 	.word	0x080046a5
 800469c:	0800474f 	.word	0x0800474f
 80046a0:	08004703 	.word	0x08004703
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	18d1      	adds	r1, r2, r3
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046b2:	f7ff ff65 	bl	8004580 <prvInsertTimerInActiveList>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d04a      	beq.n	8004752 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046c2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80046c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c6:	69db      	ldr	r3, [r3, #28]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d142      	bne.n	8004752 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	441a      	add	r2, r3
 80046d4:	2300      	movs	r3, #0
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	2300      	movs	r3, #0
 80046da:	2100      	movs	r1, #0
 80046dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046de:	f7ff fe19 	bl	8004314 <xTimerGenericCommand>
 80046e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d133      	bne.n	8004752 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 80046ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ee:	f383 8811 	msr	BASEPRI, r3
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	61bb      	str	r3, [r7, #24]
}
 80046fc:	bf00      	nop
 80046fe:	bf00      	nop
 8004700:	e7fd      	b.n	80046fe <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004706:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10b      	bne.n	8004728 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8004710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004714:	f383 8811 	msr	BASEPRI, r3
 8004718:	f3bf 8f6f 	isb	sy
 800471c:	f3bf 8f4f 	dsb	sy
 8004720:	617b      	str	r3, [r7, #20]
}
 8004722:	bf00      	nop
 8004724:	bf00      	nop
 8004726:	e7fd      	b.n	8004724 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800472a:	699a      	ldr	r2, [r3, #24]
 800472c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472e:	18d1      	adds	r1, r2, r3
 8004730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004732:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004734:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004736:	f7ff ff23 	bl	8004580 <prvInsertTimerInActiveList>
					break;
 800473a:	e00d      	b.n	8004758 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800473c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800473e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004742:	2b00      	cmp	r3, #0
 8004744:	d107      	bne.n	8004756 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8004746:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004748:	f000 fbd8 	bl	8004efc <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800474c:	e003      	b.n	8004756 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 800474e:	bf00      	nop
 8004750:	e002      	b.n	8004758 <prvProcessReceivedCommands+0x154>
					break;
 8004752:	bf00      	nop
 8004754:	e000      	b.n	8004758 <prvProcessReceivedCommands+0x154>
					break;
 8004756:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004758:	4b07      	ldr	r3, [pc, #28]	@ (8004778 <prvProcessReceivedCommands+0x174>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	1d39      	adds	r1, r7, #4
 800475e:	2200      	movs	r2, #0
 8004760:	4618      	mov	r0, r3
 8004762:	f7fe fc01 	bl	8002f68 <xQueueReceive>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	f47f af4f 	bne.w	800460c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800476e:	bf00      	nop
 8004770:	bf00      	nop
 8004772:	3730      	adds	r7, #48	@ 0x30
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	20000d98 	.word	0x20000d98

0800477c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b088      	sub	sp, #32
 8004780:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004782:	e046      	b.n	8004812 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004784:	4b2c      	ldr	r3, [pc, #176]	@ (8004838 <prvSwitchTimerLists+0xbc>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800478e:	4b2a      	ldr	r3, [pc, #168]	@ (8004838 <prvSwitchTimerLists+0xbc>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	3304      	adds	r3, #4
 800479c:	4618      	mov	r0, r3
 800479e:	f7fe f911 	bl	80029c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d12f      	bne.n	8004812 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	4413      	add	r3, r2
 80047ba:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d90e      	bls.n	80047e2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80047d0:	4b19      	ldr	r3, [pc, #100]	@ (8004838 <prvSwitchTimerLists+0xbc>)
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	3304      	adds	r3, #4
 80047d8:	4619      	mov	r1, r3
 80047da:	4610      	mov	r0, r2
 80047dc:	f7fe f8b9 	bl	8002952 <vListInsert>
 80047e0:	e017      	b.n	8004812 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80047e2:	2300      	movs	r3, #0
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	2300      	movs	r3, #0
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	2100      	movs	r1, #0
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f7ff fd91 	bl	8004314 <xTimerGenericCommand>
 80047f2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10b      	bne.n	8004812 <prvSwitchTimerLists+0x96>
	__asm volatile
 80047fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047fe:	f383 8811 	msr	BASEPRI, r3
 8004802:	f3bf 8f6f 	isb	sy
 8004806:	f3bf 8f4f 	dsb	sy
 800480a:	603b      	str	r3, [r7, #0]
}
 800480c:	bf00      	nop
 800480e:	bf00      	nop
 8004810:	e7fd      	b.n	800480e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004812:	4b09      	ldr	r3, [pc, #36]	@ (8004838 <prvSwitchTimerLists+0xbc>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1b3      	bne.n	8004784 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800481c:	4b06      	ldr	r3, [pc, #24]	@ (8004838 <prvSwitchTimerLists+0xbc>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004822:	4b06      	ldr	r3, [pc, #24]	@ (800483c <prvSwitchTimerLists+0xc0>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a04      	ldr	r2, [pc, #16]	@ (8004838 <prvSwitchTimerLists+0xbc>)
 8004828:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800482a:	4a04      	ldr	r2, [pc, #16]	@ (800483c <prvSwitchTimerLists+0xc0>)
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	6013      	str	r3, [r2, #0]
}
 8004830:	bf00      	nop
 8004832:	3718      	adds	r7, #24
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	20000d90 	.word	0x20000d90
 800483c:	20000d94 	.word	0x20000d94

08004840 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004846:	f000 f96f 	bl	8004b28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800484a:	4b15      	ldr	r3, [pc, #84]	@ (80048a0 <prvCheckForValidListAndQueue+0x60>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d120      	bne.n	8004894 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004852:	4814      	ldr	r0, [pc, #80]	@ (80048a4 <prvCheckForValidListAndQueue+0x64>)
 8004854:	f7fe f82c 	bl	80028b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004858:	4813      	ldr	r0, [pc, #76]	@ (80048a8 <prvCheckForValidListAndQueue+0x68>)
 800485a:	f7fe f829 	bl	80028b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800485e:	4b13      	ldr	r3, [pc, #76]	@ (80048ac <prvCheckForValidListAndQueue+0x6c>)
 8004860:	4a10      	ldr	r2, [pc, #64]	@ (80048a4 <prvCheckForValidListAndQueue+0x64>)
 8004862:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004864:	4b12      	ldr	r3, [pc, #72]	@ (80048b0 <prvCheckForValidListAndQueue+0x70>)
 8004866:	4a10      	ldr	r2, [pc, #64]	@ (80048a8 <prvCheckForValidListAndQueue+0x68>)
 8004868:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800486a:	2300      	movs	r3, #0
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	4b11      	ldr	r3, [pc, #68]	@ (80048b4 <prvCheckForValidListAndQueue+0x74>)
 8004870:	4a11      	ldr	r2, [pc, #68]	@ (80048b8 <prvCheckForValidListAndQueue+0x78>)
 8004872:	2110      	movs	r1, #16
 8004874:	200a      	movs	r0, #10
 8004876:	f7fe f939 	bl	8002aec <xQueueGenericCreateStatic>
 800487a:	4603      	mov	r3, r0
 800487c:	4a08      	ldr	r2, [pc, #32]	@ (80048a0 <prvCheckForValidListAndQueue+0x60>)
 800487e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004880:	4b07      	ldr	r3, [pc, #28]	@ (80048a0 <prvCheckForValidListAndQueue+0x60>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d005      	beq.n	8004894 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004888:	4b05      	ldr	r3, [pc, #20]	@ (80048a0 <prvCheckForValidListAndQueue+0x60>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	490b      	ldr	r1, [pc, #44]	@ (80048bc <prvCheckForValidListAndQueue+0x7c>)
 800488e:	4618      	mov	r0, r3
 8004890:	f7fe fd5c 	bl	800334c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004894:	f000 f97a 	bl	8004b8c <vPortExitCritical>
}
 8004898:	bf00      	nop
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	20000d98 	.word	0x20000d98
 80048a4:	20000d68 	.word	0x20000d68
 80048a8:	20000d7c 	.word	0x20000d7c
 80048ac:	20000d90 	.word	0x20000d90
 80048b0:	20000d94 	.word	0x20000d94
 80048b4:	20000e44 	.word	0x20000e44
 80048b8:	20000da4 	.word	0x20000da4
 80048bc:	08005334 	.word	0x08005334

080048c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	3b04      	subs	r3, #4
 80048d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80048d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	3b04      	subs	r3, #4
 80048de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	f023 0201 	bic.w	r2, r3, #1
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	3b04      	subs	r3, #4
 80048ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80048f0:	4a0c      	ldr	r2, [pc, #48]	@ (8004924 <pxPortInitialiseStack+0x64>)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	3b14      	subs	r3, #20
 80048fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	3b04      	subs	r3, #4
 8004906:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f06f 0202 	mvn.w	r2, #2
 800490e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	3b20      	subs	r3, #32
 8004914:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004916:	68fb      	ldr	r3, [r7, #12]
}
 8004918:	4618      	mov	r0, r3
 800491a:	3714      	adds	r7, #20
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr
 8004924:	08004929 	.word	0x08004929

08004928 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800492e:	2300      	movs	r3, #0
 8004930:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004932:	4b13      	ldr	r3, [pc, #76]	@ (8004980 <prvTaskExitError+0x58>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493a:	d00b      	beq.n	8004954 <prvTaskExitError+0x2c>
	__asm volatile
 800493c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004940:	f383 8811 	msr	BASEPRI, r3
 8004944:	f3bf 8f6f 	isb	sy
 8004948:	f3bf 8f4f 	dsb	sy
 800494c:	60fb      	str	r3, [r7, #12]
}
 800494e:	bf00      	nop
 8004950:	bf00      	nop
 8004952:	e7fd      	b.n	8004950 <prvTaskExitError+0x28>
	__asm volatile
 8004954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004958:	f383 8811 	msr	BASEPRI, r3
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	60bb      	str	r3, [r7, #8]
}
 8004966:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004968:	bf00      	nop
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0fc      	beq.n	800496a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004970:	bf00      	nop
 8004972:	bf00      	nop
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	2000000c 	.word	0x2000000c
	...

08004990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004990:	4b07      	ldr	r3, [pc, #28]	@ (80049b0 <pxCurrentTCBConst2>)
 8004992:	6819      	ldr	r1, [r3, #0]
 8004994:	6808      	ldr	r0, [r1, #0]
 8004996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800499a:	f380 8809 	msr	PSP, r0
 800499e:	f3bf 8f6f 	isb	sy
 80049a2:	f04f 0000 	mov.w	r0, #0
 80049a6:	f380 8811 	msr	BASEPRI, r0
 80049aa:	4770      	bx	lr
 80049ac:	f3af 8000 	nop.w

080049b0 <pxCurrentTCBConst2>:
 80049b0:	20000868 	.word	0x20000868
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80049b4:	bf00      	nop
 80049b6:	bf00      	nop

080049b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80049b8:	4808      	ldr	r0, [pc, #32]	@ (80049dc <prvPortStartFirstTask+0x24>)
 80049ba:	6800      	ldr	r0, [r0, #0]
 80049bc:	6800      	ldr	r0, [r0, #0]
 80049be:	f380 8808 	msr	MSP, r0
 80049c2:	f04f 0000 	mov.w	r0, #0
 80049c6:	f380 8814 	msr	CONTROL, r0
 80049ca:	b662      	cpsie	i
 80049cc:	b661      	cpsie	f
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	df00      	svc	0
 80049d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80049da:	bf00      	nop
 80049dc:	e000ed08 	.word	0xe000ed08

080049e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80049e6:	4b47      	ldr	r3, [pc, #284]	@ (8004b04 <xPortStartScheduler+0x124>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a47      	ldr	r2, [pc, #284]	@ (8004b08 <xPortStartScheduler+0x128>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d10b      	bne.n	8004a08 <xPortStartScheduler+0x28>
	__asm volatile
 80049f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	613b      	str	r3, [r7, #16]
}
 8004a02:	bf00      	nop
 8004a04:	bf00      	nop
 8004a06:	e7fd      	b.n	8004a04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a08:	4b3e      	ldr	r3, [pc, #248]	@ (8004b04 <xPortStartScheduler+0x124>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a3f      	ldr	r2, [pc, #252]	@ (8004b0c <xPortStartScheduler+0x12c>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d10b      	bne.n	8004a2a <xPortStartScheduler+0x4a>
	__asm volatile
 8004a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a16:	f383 8811 	msr	BASEPRI, r3
 8004a1a:	f3bf 8f6f 	isb	sy
 8004a1e:	f3bf 8f4f 	dsb	sy
 8004a22:	60fb      	str	r3, [r7, #12]
}
 8004a24:	bf00      	nop
 8004a26:	bf00      	nop
 8004a28:	e7fd      	b.n	8004a26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a2a:	4b39      	ldr	r3, [pc, #228]	@ (8004b10 <xPortStartScheduler+0x130>)
 8004a2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	22ff      	movs	r2, #255	@ 0xff
 8004a3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a44:	78fb      	ldrb	r3, [r7, #3]
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	4b31      	ldr	r3, [pc, #196]	@ (8004b14 <xPortStartScheduler+0x134>)
 8004a50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a52:	4b31      	ldr	r3, [pc, #196]	@ (8004b18 <xPortStartScheduler+0x138>)
 8004a54:	2207      	movs	r2, #7
 8004a56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a58:	e009      	b.n	8004a6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004a5a:	4b2f      	ldr	r3, [pc, #188]	@ (8004b18 <xPortStartScheduler+0x138>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	4a2d      	ldr	r2, [pc, #180]	@ (8004b18 <xPortStartScheduler+0x138>)
 8004a62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a64:	78fb      	ldrb	r3, [r7, #3]
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a6e:	78fb      	ldrb	r3, [r7, #3]
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a76:	2b80      	cmp	r3, #128	@ 0x80
 8004a78:	d0ef      	beq.n	8004a5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a7a:	4b27      	ldr	r3, [pc, #156]	@ (8004b18 <xPortStartScheduler+0x138>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f1c3 0307 	rsb	r3, r3, #7
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d00b      	beq.n	8004a9e <xPortStartScheduler+0xbe>
	__asm volatile
 8004a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a8a:	f383 8811 	msr	BASEPRI, r3
 8004a8e:	f3bf 8f6f 	isb	sy
 8004a92:	f3bf 8f4f 	dsb	sy
 8004a96:	60bb      	str	r3, [r7, #8]
}
 8004a98:	bf00      	nop
 8004a9a:	bf00      	nop
 8004a9c:	e7fd      	b.n	8004a9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8004b18 <xPortStartScheduler+0x138>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	021b      	lsls	r3, r3, #8
 8004aa4:	4a1c      	ldr	r2, [pc, #112]	@ (8004b18 <xPortStartScheduler+0x138>)
 8004aa6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8004b18 <xPortStartScheduler+0x138>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ab0:	4a19      	ldr	r2, [pc, #100]	@ (8004b18 <xPortStartScheduler+0x138>)
 8004ab2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004abc:	4b17      	ldr	r3, [pc, #92]	@ (8004b1c <xPortStartScheduler+0x13c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a16      	ldr	r2, [pc, #88]	@ (8004b1c <xPortStartScheduler+0x13c>)
 8004ac2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004ac6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ac8:	4b14      	ldr	r3, [pc, #80]	@ (8004b1c <xPortStartScheduler+0x13c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a13      	ldr	r2, [pc, #76]	@ (8004b1c <xPortStartScheduler+0x13c>)
 8004ace:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004ad2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004ad4:	f000 f8da 	bl	8004c8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ad8:	4b11      	ldr	r3, [pc, #68]	@ (8004b20 <xPortStartScheduler+0x140>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004ade:	f000 f8f9 	bl	8004cd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004ae2:	4b10      	ldr	r3, [pc, #64]	@ (8004b24 <xPortStartScheduler+0x144>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a0f      	ldr	r2, [pc, #60]	@ (8004b24 <xPortStartScheduler+0x144>)
 8004ae8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004aec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004aee:	f7ff ff63 	bl	80049b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004af2:	f7ff f85f 	bl	8003bb4 <vTaskSwitchContext>
	prvTaskExitError();
 8004af6:	f7ff ff17 	bl	8004928 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3718      	adds	r7, #24
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	e000ed00 	.word	0xe000ed00
 8004b08:	410fc271 	.word	0x410fc271
 8004b0c:	410fc270 	.word	0x410fc270
 8004b10:	e000e400 	.word	0xe000e400
 8004b14:	20000e94 	.word	0x20000e94
 8004b18:	20000e98 	.word	0x20000e98
 8004b1c:	e000ed20 	.word	0xe000ed20
 8004b20:	2000000c 	.word	0x2000000c
 8004b24:	e000ef34 	.word	0xe000ef34

08004b28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b32:	f383 8811 	msr	BASEPRI, r3
 8004b36:	f3bf 8f6f 	isb	sy
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	607b      	str	r3, [r7, #4]
}
 8004b40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004b42:	4b10      	ldr	r3, [pc, #64]	@ (8004b84 <vPortEnterCritical+0x5c>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	3301      	adds	r3, #1
 8004b48:	4a0e      	ldr	r2, [pc, #56]	@ (8004b84 <vPortEnterCritical+0x5c>)
 8004b4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004b4c:	4b0d      	ldr	r3, [pc, #52]	@ (8004b84 <vPortEnterCritical+0x5c>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d110      	bne.n	8004b76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b54:	4b0c      	ldr	r3, [pc, #48]	@ (8004b88 <vPortEnterCritical+0x60>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00b      	beq.n	8004b76 <vPortEnterCritical+0x4e>
	__asm volatile
 8004b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b62:	f383 8811 	msr	BASEPRI, r3
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	603b      	str	r3, [r7, #0]
}
 8004b70:	bf00      	nop
 8004b72:	bf00      	nop
 8004b74:	e7fd      	b.n	8004b72 <vPortEnterCritical+0x4a>
	}
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	2000000c 	.word	0x2000000c
 8004b88:	e000ed04 	.word	0xe000ed04

08004b8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004b92:	4b12      	ldr	r3, [pc, #72]	@ (8004bdc <vPortExitCritical+0x50>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10b      	bne.n	8004bb2 <vPortExitCritical+0x26>
	__asm volatile
 8004b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b9e:	f383 8811 	msr	BASEPRI, r3
 8004ba2:	f3bf 8f6f 	isb	sy
 8004ba6:	f3bf 8f4f 	dsb	sy
 8004baa:	607b      	str	r3, [r7, #4]
}
 8004bac:	bf00      	nop
 8004bae:	bf00      	nop
 8004bb0:	e7fd      	b.n	8004bae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8004bdc <vPortExitCritical+0x50>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	4a08      	ldr	r2, [pc, #32]	@ (8004bdc <vPortExitCritical+0x50>)
 8004bba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004bbc:	4b07      	ldr	r3, [pc, #28]	@ (8004bdc <vPortExitCritical+0x50>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d105      	bne.n	8004bd0 <vPortExitCritical+0x44>
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	f383 8811 	msr	BASEPRI, r3
}
 8004bce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	2000000c 	.word	0x2000000c

08004be0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004be0:	f3ef 8009 	mrs	r0, PSP
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	4b15      	ldr	r3, [pc, #84]	@ (8004c40 <pxCurrentTCBConst>)
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	f01e 0f10 	tst.w	lr, #16
 8004bf0:	bf08      	it	eq
 8004bf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004bf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bfa:	6010      	str	r0, [r2, #0]
 8004bfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004c04:	f380 8811 	msr	BASEPRI, r0
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f7fe ffd0 	bl	8003bb4 <vTaskSwitchContext>
 8004c14:	f04f 0000 	mov.w	r0, #0
 8004c18:	f380 8811 	msr	BASEPRI, r0
 8004c1c:	bc09      	pop	{r0, r3}
 8004c1e:	6819      	ldr	r1, [r3, #0]
 8004c20:	6808      	ldr	r0, [r1, #0]
 8004c22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c26:	f01e 0f10 	tst.w	lr, #16
 8004c2a:	bf08      	it	eq
 8004c2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004c30:	f380 8809 	msr	PSP, r0
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	f3af 8000 	nop.w

08004c40 <pxCurrentTCBConst>:
 8004c40:	20000868 	.word	0x20000868
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004c44:	bf00      	nop
 8004c46:	bf00      	nop

08004c48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	607b      	str	r3, [r7, #4]
}
 8004c60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c62:	f7fe fee7 	bl	8003a34 <xTaskIncrementTick>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c6c:	4b06      	ldr	r3, [pc, #24]	@ (8004c88 <SysTick_Handler+0x40>)
 8004c6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	2300      	movs	r3, #0
 8004c76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	f383 8811 	msr	BASEPRI, r3
}
 8004c7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004c80:	bf00      	nop
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	e000ed04 	.word	0xe000ed04

08004c8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c90:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc0 <vPortSetupTimerInterrupt+0x34>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c96:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc4 <vPortSetupTimerInterrupt+0x38>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc8 <vPortSetupTimerInterrupt+0x3c>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a0a      	ldr	r2, [pc, #40]	@ (8004ccc <vPortSetupTimerInterrupt+0x40>)
 8004ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca6:	099b      	lsrs	r3, r3, #6
 8004ca8:	4a09      	ldr	r2, [pc, #36]	@ (8004cd0 <vPortSetupTimerInterrupt+0x44>)
 8004caa:	3b01      	subs	r3, #1
 8004cac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004cae:	4b04      	ldr	r3, [pc, #16]	@ (8004cc0 <vPortSetupTimerInterrupt+0x34>)
 8004cb0:	2207      	movs	r2, #7
 8004cb2:	601a      	str	r2, [r3, #0]
}
 8004cb4:	bf00      	nop
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	e000e010 	.word	0xe000e010
 8004cc4:	e000e018 	.word	0xe000e018
 8004cc8:	20000000 	.word	0x20000000
 8004ccc:	10624dd3 	.word	0x10624dd3
 8004cd0:	e000e014 	.word	0xe000e014

08004cd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004cd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004ce4 <vPortEnableVFP+0x10>
 8004cd8:	6801      	ldr	r1, [r0, #0]
 8004cda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004cde:	6001      	str	r1, [r0, #0]
 8004ce0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004ce2:	bf00      	nop
 8004ce4:	e000ed88 	.word	0xe000ed88

08004ce8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004cee:	f3ef 8305 	mrs	r3, IPSR
 8004cf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2b0f      	cmp	r3, #15
 8004cf8:	d915      	bls.n	8004d26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004cfa:	4a18      	ldr	r2, [pc, #96]	@ (8004d5c <vPortValidateInterruptPriority+0x74>)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	4413      	add	r3, r2
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004d04:	4b16      	ldr	r3, [pc, #88]	@ (8004d60 <vPortValidateInterruptPriority+0x78>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	7afa      	ldrb	r2, [r7, #11]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d20b      	bcs.n	8004d26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	607b      	str	r3, [r7, #4]
}
 8004d20:	bf00      	nop
 8004d22:	bf00      	nop
 8004d24:	e7fd      	b.n	8004d22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004d26:	4b0f      	ldr	r3, [pc, #60]	@ (8004d64 <vPortValidateInterruptPriority+0x7c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8004d68 <vPortValidateInterruptPriority+0x80>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d90b      	bls.n	8004d4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d3a:	f383 8811 	msr	BASEPRI, r3
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	603b      	str	r3, [r7, #0]
}
 8004d48:	bf00      	nop
 8004d4a:	bf00      	nop
 8004d4c:	e7fd      	b.n	8004d4a <vPortValidateInterruptPriority+0x62>
	}
 8004d4e:	bf00      	nop
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	e000e3f0 	.word	0xe000e3f0
 8004d60:	20000e94 	.word	0x20000e94
 8004d64:	e000ed0c 	.word	0xe000ed0c
 8004d68:	20000e98 	.word	0x20000e98

08004d6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b08a      	sub	sp, #40	@ 0x28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004d74:	2300      	movs	r3, #0
 8004d76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004d78:	f7fe fda0 	bl	80038bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004d7c:	4b5a      	ldr	r3, [pc, #360]	@ (8004ee8 <pvPortMalloc+0x17c>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d101      	bne.n	8004d88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d84:	f000 f916 	bl	8004fb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d88:	4b58      	ldr	r3, [pc, #352]	@ (8004eec <pvPortMalloc+0x180>)
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4013      	ands	r3, r2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f040 8090 	bne.w	8004eb6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d01e      	beq.n	8004dda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004d9c:	2208      	movs	r2, #8
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4413      	add	r3, r2
 8004da2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f003 0307 	and.w	r3, r3, #7
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d015      	beq.n	8004dda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f023 0307 	bic.w	r3, r3, #7
 8004db4:	3308      	adds	r3, #8
 8004db6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f003 0307 	and.w	r3, r3, #7
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00b      	beq.n	8004dda <pvPortMalloc+0x6e>
	__asm volatile
 8004dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	617b      	str	r3, [r7, #20]
}
 8004dd4:	bf00      	nop
 8004dd6:	bf00      	nop
 8004dd8:	e7fd      	b.n	8004dd6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d06a      	beq.n	8004eb6 <pvPortMalloc+0x14a>
 8004de0:	4b43      	ldr	r3, [pc, #268]	@ (8004ef0 <pvPortMalloc+0x184>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d865      	bhi.n	8004eb6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004dea:	4b42      	ldr	r3, [pc, #264]	@ (8004ef4 <pvPortMalloc+0x188>)
 8004dec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004dee:	4b41      	ldr	r3, [pc, #260]	@ (8004ef4 <pvPortMalloc+0x188>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004df4:	e004      	b.n	8004e00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d903      	bls.n	8004e12 <pvPortMalloc+0xa6>
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1f1      	bne.n	8004df6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e12:	4b35      	ldr	r3, [pc, #212]	@ (8004ee8 <pvPortMalloc+0x17c>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d04c      	beq.n	8004eb6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2208      	movs	r2, #8
 8004e22:	4413      	add	r3, r2
 8004e24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	1ad2      	subs	r2, r2, r3
 8004e36:	2308      	movs	r3, #8
 8004e38:	005b      	lsls	r3, r3, #1
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d920      	bls.n	8004e80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4413      	add	r3, r2
 8004e44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	f003 0307 	and.w	r3, r3, #7
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00b      	beq.n	8004e68 <pvPortMalloc+0xfc>
	__asm volatile
 8004e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	613b      	str	r3, [r7, #16]
}
 8004e62:	bf00      	nop
 8004e64:	bf00      	nop
 8004e66:	e7fd      	b.n	8004e64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	1ad2      	subs	r2, r2, r3
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e7a:	69b8      	ldr	r0, [r7, #24]
 8004e7c:	f000 f8fc 	bl	8005078 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e80:	4b1b      	ldr	r3, [pc, #108]	@ (8004ef0 <pvPortMalloc+0x184>)
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	4a19      	ldr	r2, [pc, #100]	@ (8004ef0 <pvPortMalloc+0x184>)
 8004e8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e8e:	4b18      	ldr	r3, [pc, #96]	@ (8004ef0 <pvPortMalloc+0x184>)
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	4b19      	ldr	r3, [pc, #100]	@ (8004ef8 <pvPortMalloc+0x18c>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d203      	bcs.n	8004ea2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e9a:	4b15      	ldr	r3, [pc, #84]	@ (8004ef0 <pvPortMalloc+0x184>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a16      	ldr	r2, [pc, #88]	@ (8004ef8 <pvPortMalloc+0x18c>)
 8004ea0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	4b11      	ldr	r3, [pc, #68]	@ (8004eec <pvPortMalloc+0x180>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004eb6:	f7fe fd0f 	bl	80038d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	f003 0307 	and.w	r3, r3, #7
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00b      	beq.n	8004edc <pvPortMalloc+0x170>
	__asm volatile
 8004ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec8:	f383 8811 	msr	BASEPRI, r3
 8004ecc:	f3bf 8f6f 	isb	sy
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	60fb      	str	r3, [r7, #12]
}
 8004ed6:	bf00      	nop
 8004ed8:	bf00      	nop
 8004eda:	e7fd      	b.n	8004ed8 <pvPortMalloc+0x16c>
	return pvReturn;
 8004edc:	69fb      	ldr	r3, [r7, #28]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3728      	adds	r7, #40	@ 0x28
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	20001aa4 	.word	0x20001aa4
 8004eec:	20001ab0 	.word	0x20001ab0
 8004ef0:	20001aa8 	.word	0x20001aa8
 8004ef4:	20001a9c 	.word	0x20001a9c
 8004ef8:	20001aac 	.word	0x20001aac

08004efc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d04a      	beq.n	8004fa4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f0e:	2308      	movs	r3, #8
 8004f10:	425b      	negs	r3, r3
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	4413      	add	r3, r2
 8004f16:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	685a      	ldr	r2, [r3, #4]
 8004f20:	4b22      	ldr	r3, [pc, #136]	@ (8004fac <vPortFree+0xb0>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4013      	ands	r3, r2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10b      	bne.n	8004f42 <vPortFree+0x46>
	__asm volatile
 8004f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f2e:	f383 8811 	msr	BASEPRI, r3
 8004f32:	f3bf 8f6f 	isb	sy
 8004f36:	f3bf 8f4f 	dsb	sy
 8004f3a:	60fb      	str	r3, [r7, #12]
}
 8004f3c:	bf00      	nop
 8004f3e:	bf00      	nop
 8004f40:	e7fd      	b.n	8004f3e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00b      	beq.n	8004f62 <vPortFree+0x66>
	__asm volatile
 8004f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f4e:	f383 8811 	msr	BASEPRI, r3
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	60bb      	str	r3, [r7, #8]
}
 8004f5c:	bf00      	nop
 8004f5e:	bf00      	nop
 8004f60:	e7fd      	b.n	8004f5e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	4b11      	ldr	r3, [pc, #68]	@ (8004fac <vPortFree+0xb0>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d019      	beq.n	8004fa4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d115      	bne.n	8004fa4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8004fac <vPortFree+0xb0>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	43db      	mvns	r3, r3
 8004f82:	401a      	ands	r2, r3
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f88:	f7fe fc98 	bl	80038bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	4b07      	ldr	r3, [pc, #28]	@ (8004fb0 <vPortFree+0xb4>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4413      	add	r3, r2
 8004f96:	4a06      	ldr	r2, [pc, #24]	@ (8004fb0 <vPortFree+0xb4>)
 8004f98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f9a:	6938      	ldr	r0, [r7, #16]
 8004f9c:	f000 f86c 	bl	8005078 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004fa0:	f7fe fc9a 	bl	80038d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004fa4:	bf00      	nop
 8004fa6:	3718      	adds	r7, #24
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	20001ab0 	.word	0x20001ab0
 8004fb0:	20001aa8 	.word	0x20001aa8

08004fb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004fba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004fbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004fc0:	4b27      	ldr	r3, [pc, #156]	@ (8005060 <prvHeapInit+0xac>)
 8004fc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00c      	beq.n	8004fe8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	3307      	adds	r3, #7
 8004fd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f023 0307 	bic.w	r3, r3, #7
 8004fda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	4a1f      	ldr	r2, [pc, #124]	@ (8005060 <prvHeapInit+0xac>)
 8004fe4:	4413      	add	r3, r2
 8004fe6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004fec:	4a1d      	ldr	r2, [pc, #116]	@ (8005064 <prvHeapInit+0xb0>)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8005064 <prvHeapInit+0xb0>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005000:	2208      	movs	r2, #8
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	1a9b      	subs	r3, r3, r2
 8005006:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f023 0307 	bic.w	r3, r3, #7
 800500e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4a15      	ldr	r2, [pc, #84]	@ (8005068 <prvHeapInit+0xb4>)
 8005014:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005016:	4b14      	ldr	r3, [pc, #80]	@ (8005068 <prvHeapInit+0xb4>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2200      	movs	r2, #0
 800501c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800501e:	4b12      	ldr	r3, [pc, #72]	@ (8005068 <prvHeapInit+0xb4>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2200      	movs	r2, #0
 8005024:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	1ad2      	subs	r2, r2, r3
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005034:	4b0c      	ldr	r3, [pc, #48]	@ (8005068 <prvHeapInit+0xb4>)
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	4a0a      	ldr	r2, [pc, #40]	@ (800506c <prvHeapInit+0xb8>)
 8005042:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	4a09      	ldr	r2, [pc, #36]	@ (8005070 <prvHeapInit+0xbc>)
 800504a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800504c:	4b09      	ldr	r3, [pc, #36]	@ (8005074 <prvHeapInit+0xc0>)
 800504e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005052:	601a      	str	r2, [r3, #0]
}
 8005054:	bf00      	nop
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	20000e9c 	.word	0x20000e9c
 8005064:	20001a9c 	.word	0x20001a9c
 8005068:	20001aa4 	.word	0x20001aa4
 800506c:	20001aac 	.word	0x20001aac
 8005070:	20001aa8 	.word	0x20001aa8
 8005074:	20001ab0 	.word	0x20001ab0

08005078 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005080:	4b28      	ldr	r3, [pc, #160]	@ (8005124 <prvInsertBlockIntoFreeList+0xac>)
 8005082:	60fb      	str	r3, [r7, #12]
 8005084:	e002      	b.n	800508c <prvInsertBlockIntoFreeList+0x14>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	60fb      	str	r3, [r7, #12]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	429a      	cmp	r2, r3
 8005094:	d8f7      	bhi.n	8005086 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	4413      	add	r3, r2
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d108      	bne.n	80050ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	441a      	add	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	441a      	add	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d118      	bne.n	8005100 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	4b15      	ldr	r3, [pc, #84]	@ (8005128 <prvInsertBlockIntoFreeList+0xb0>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d00d      	beq.n	80050f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	441a      	add	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	e008      	b.n	8005108 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80050f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005128 <prvInsertBlockIntoFreeList+0xb0>)
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	e003      	b.n	8005108 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	429a      	cmp	r2, r3
 800510e:	d002      	beq.n	8005116 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005116:	bf00      	nop
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	20001a9c 	.word	0x20001a9c
 8005128:	20001aa4 	.word	0x20001aa4

0800512c <memset>:
 800512c:	4402      	add	r2, r0
 800512e:	4603      	mov	r3, r0
 8005130:	4293      	cmp	r3, r2
 8005132:	d100      	bne.n	8005136 <memset+0xa>
 8005134:	4770      	bx	lr
 8005136:	f803 1b01 	strb.w	r1, [r3], #1
 800513a:	e7f9      	b.n	8005130 <memset+0x4>

0800513c <_reclaim_reent>:
 800513c:	4b29      	ldr	r3, [pc, #164]	@ (80051e4 <_reclaim_reent+0xa8>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4283      	cmp	r3, r0
 8005142:	b570      	push	{r4, r5, r6, lr}
 8005144:	4604      	mov	r4, r0
 8005146:	d04b      	beq.n	80051e0 <_reclaim_reent+0xa4>
 8005148:	69c3      	ldr	r3, [r0, #28]
 800514a:	b1ab      	cbz	r3, 8005178 <_reclaim_reent+0x3c>
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	b16b      	cbz	r3, 800516c <_reclaim_reent+0x30>
 8005150:	2500      	movs	r5, #0
 8005152:	69e3      	ldr	r3, [r4, #28]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	5959      	ldr	r1, [r3, r5]
 8005158:	2900      	cmp	r1, #0
 800515a:	d13b      	bne.n	80051d4 <_reclaim_reent+0x98>
 800515c:	3504      	adds	r5, #4
 800515e:	2d80      	cmp	r5, #128	@ 0x80
 8005160:	d1f7      	bne.n	8005152 <_reclaim_reent+0x16>
 8005162:	69e3      	ldr	r3, [r4, #28]
 8005164:	4620      	mov	r0, r4
 8005166:	68d9      	ldr	r1, [r3, #12]
 8005168:	f000 f872 	bl	8005250 <_free_r>
 800516c:	69e3      	ldr	r3, [r4, #28]
 800516e:	6819      	ldr	r1, [r3, #0]
 8005170:	b111      	cbz	r1, 8005178 <_reclaim_reent+0x3c>
 8005172:	4620      	mov	r0, r4
 8005174:	f000 f86c 	bl	8005250 <_free_r>
 8005178:	6961      	ldr	r1, [r4, #20]
 800517a:	b111      	cbz	r1, 8005182 <_reclaim_reent+0x46>
 800517c:	4620      	mov	r0, r4
 800517e:	f000 f867 	bl	8005250 <_free_r>
 8005182:	69e1      	ldr	r1, [r4, #28]
 8005184:	b111      	cbz	r1, 800518c <_reclaim_reent+0x50>
 8005186:	4620      	mov	r0, r4
 8005188:	f000 f862 	bl	8005250 <_free_r>
 800518c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800518e:	b111      	cbz	r1, 8005196 <_reclaim_reent+0x5a>
 8005190:	4620      	mov	r0, r4
 8005192:	f000 f85d 	bl	8005250 <_free_r>
 8005196:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005198:	b111      	cbz	r1, 80051a0 <_reclaim_reent+0x64>
 800519a:	4620      	mov	r0, r4
 800519c:	f000 f858 	bl	8005250 <_free_r>
 80051a0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80051a2:	b111      	cbz	r1, 80051aa <_reclaim_reent+0x6e>
 80051a4:	4620      	mov	r0, r4
 80051a6:	f000 f853 	bl	8005250 <_free_r>
 80051aa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80051ac:	b111      	cbz	r1, 80051b4 <_reclaim_reent+0x78>
 80051ae:	4620      	mov	r0, r4
 80051b0:	f000 f84e 	bl	8005250 <_free_r>
 80051b4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80051b6:	b111      	cbz	r1, 80051be <_reclaim_reent+0x82>
 80051b8:	4620      	mov	r0, r4
 80051ba:	f000 f849 	bl	8005250 <_free_r>
 80051be:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80051c0:	b111      	cbz	r1, 80051c8 <_reclaim_reent+0x8c>
 80051c2:	4620      	mov	r0, r4
 80051c4:	f000 f844 	bl	8005250 <_free_r>
 80051c8:	6a23      	ldr	r3, [r4, #32]
 80051ca:	b14b      	cbz	r3, 80051e0 <_reclaim_reent+0xa4>
 80051cc:	4620      	mov	r0, r4
 80051ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80051d2:	4718      	bx	r3
 80051d4:	680e      	ldr	r6, [r1, #0]
 80051d6:	4620      	mov	r0, r4
 80051d8:	f000 f83a 	bl	8005250 <_free_r>
 80051dc:	4631      	mov	r1, r6
 80051de:	e7bb      	b.n	8005158 <_reclaim_reent+0x1c>
 80051e0:	bd70      	pop	{r4, r5, r6, pc}
 80051e2:	bf00      	nop
 80051e4:	20000010 	.word	0x20000010

080051e8 <__libc_init_array>:
 80051e8:	b570      	push	{r4, r5, r6, lr}
 80051ea:	4d0d      	ldr	r5, [pc, #52]	@ (8005220 <__libc_init_array+0x38>)
 80051ec:	4c0d      	ldr	r4, [pc, #52]	@ (8005224 <__libc_init_array+0x3c>)
 80051ee:	1b64      	subs	r4, r4, r5
 80051f0:	10a4      	asrs	r4, r4, #2
 80051f2:	2600      	movs	r6, #0
 80051f4:	42a6      	cmp	r6, r4
 80051f6:	d109      	bne.n	800520c <__libc_init_array+0x24>
 80051f8:	4d0b      	ldr	r5, [pc, #44]	@ (8005228 <__libc_init_array+0x40>)
 80051fa:	4c0c      	ldr	r4, [pc, #48]	@ (800522c <__libc_init_array+0x44>)
 80051fc:	f000 f87e 	bl	80052fc <_init>
 8005200:	1b64      	subs	r4, r4, r5
 8005202:	10a4      	asrs	r4, r4, #2
 8005204:	2600      	movs	r6, #0
 8005206:	42a6      	cmp	r6, r4
 8005208:	d105      	bne.n	8005216 <__libc_init_array+0x2e>
 800520a:	bd70      	pop	{r4, r5, r6, pc}
 800520c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005210:	4798      	blx	r3
 8005212:	3601      	adds	r6, #1
 8005214:	e7ee      	b.n	80051f4 <__libc_init_array+0xc>
 8005216:	f855 3b04 	ldr.w	r3, [r5], #4
 800521a:	4798      	blx	r3
 800521c:	3601      	adds	r6, #1
 800521e:	e7f2      	b.n	8005206 <__libc_init_array+0x1e>
 8005220:	080053bc 	.word	0x080053bc
 8005224:	080053bc 	.word	0x080053bc
 8005228:	080053bc 	.word	0x080053bc
 800522c:	080053c0 	.word	0x080053c0

08005230 <__retarget_lock_acquire_recursive>:
 8005230:	4770      	bx	lr

08005232 <__retarget_lock_release_recursive>:
 8005232:	4770      	bx	lr

08005234 <memcpy>:
 8005234:	440a      	add	r2, r1
 8005236:	4291      	cmp	r1, r2
 8005238:	f100 33ff 	add.w	r3, r0, #4294967295
 800523c:	d100      	bne.n	8005240 <memcpy+0xc>
 800523e:	4770      	bx	lr
 8005240:	b510      	push	{r4, lr}
 8005242:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005246:	f803 4f01 	strb.w	r4, [r3, #1]!
 800524a:	4291      	cmp	r1, r2
 800524c:	d1f9      	bne.n	8005242 <memcpy+0xe>
 800524e:	bd10      	pop	{r4, pc}

08005250 <_free_r>:
 8005250:	b538      	push	{r3, r4, r5, lr}
 8005252:	4605      	mov	r5, r0
 8005254:	2900      	cmp	r1, #0
 8005256:	d041      	beq.n	80052dc <_free_r+0x8c>
 8005258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800525c:	1f0c      	subs	r4, r1, #4
 800525e:	2b00      	cmp	r3, #0
 8005260:	bfb8      	it	lt
 8005262:	18e4      	addlt	r4, r4, r3
 8005264:	f000 f83e 	bl	80052e4 <__malloc_lock>
 8005268:	4a1d      	ldr	r2, [pc, #116]	@ (80052e0 <_free_r+0x90>)
 800526a:	6813      	ldr	r3, [r2, #0]
 800526c:	b933      	cbnz	r3, 800527c <_free_r+0x2c>
 800526e:	6063      	str	r3, [r4, #4]
 8005270:	6014      	str	r4, [r2, #0]
 8005272:	4628      	mov	r0, r5
 8005274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005278:	f000 b83a 	b.w	80052f0 <__malloc_unlock>
 800527c:	42a3      	cmp	r3, r4
 800527e:	d908      	bls.n	8005292 <_free_r+0x42>
 8005280:	6820      	ldr	r0, [r4, #0]
 8005282:	1821      	adds	r1, r4, r0
 8005284:	428b      	cmp	r3, r1
 8005286:	bf01      	itttt	eq
 8005288:	6819      	ldreq	r1, [r3, #0]
 800528a:	685b      	ldreq	r3, [r3, #4]
 800528c:	1809      	addeq	r1, r1, r0
 800528e:	6021      	streq	r1, [r4, #0]
 8005290:	e7ed      	b.n	800526e <_free_r+0x1e>
 8005292:	461a      	mov	r2, r3
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	b10b      	cbz	r3, 800529c <_free_r+0x4c>
 8005298:	42a3      	cmp	r3, r4
 800529a:	d9fa      	bls.n	8005292 <_free_r+0x42>
 800529c:	6811      	ldr	r1, [r2, #0]
 800529e:	1850      	adds	r0, r2, r1
 80052a0:	42a0      	cmp	r0, r4
 80052a2:	d10b      	bne.n	80052bc <_free_r+0x6c>
 80052a4:	6820      	ldr	r0, [r4, #0]
 80052a6:	4401      	add	r1, r0
 80052a8:	1850      	adds	r0, r2, r1
 80052aa:	4283      	cmp	r3, r0
 80052ac:	6011      	str	r1, [r2, #0]
 80052ae:	d1e0      	bne.n	8005272 <_free_r+0x22>
 80052b0:	6818      	ldr	r0, [r3, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	6053      	str	r3, [r2, #4]
 80052b6:	4408      	add	r0, r1
 80052b8:	6010      	str	r0, [r2, #0]
 80052ba:	e7da      	b.n	8005272 <_free_r+0x22>
 80052bc:	d902      	bls.n	80052c4 <_free_r+0x74>
 80052be:	230c      	movs	r3, #12
 80052c0:	602b      	str	r3, [r5, #0]
 80052c2:	e7d6      	b.n	8005272 <_free_r+0x22>
 80052c4:	6820      	ldr	r0, [r4, #0]
 80052c6:	1821      	adds	r1, r4, r0
 80052c8:	428b      	cmp	r3, r1
 80052ca:	bf04      	itt	eq
 80052cc:	6819      	ldreq	r1, [r3, #0]
 80052ce:	685b      	ldreq	r3, [r3, #4]
 80052d0:	6063      	str	r3, [r4, #4]
 80052d2:	bf04      	itt	eq
 80052d4:	1809      	addeq	r1, r1, r0
 80052d6:	6021      	streq	r1, [r4, #0]
 80052d8:	6054      	str	r4, [r2, #4]
 80052da:	e7ca      	b.n	8005272 <_free_r+0x22>
 80052dc:	bd38      	pop	{r3, r4, r5, pc}
 80052de:	bf00      	nop
 80052e0:	20001bf0 	.word	0x20001bf0

080052e4 <__malloc_lock>:
 80052e4:	4801      	ldr	r0, [pc, #4]	@ (80052ec <__malloc_lock+0x8>)
 80052e6:	f7ff bfa3 	b.w	8005230 <__retarget_lock_acquire_recursive>
 80052ea:	bf00      	nop
 80052ec:	20001bec 	.word	0x20001bec

080052f0 <__malloc_unlock>:
 80052f0:	4801      	ldr	r0, [pc, #4]	@ (80052f8 <__malloc_unlock+0x8>)
 80052f2:	f7ff bf9e 	b.w	8005232 <__retarget_lock_release_recursive>
 80052f6:	bf00      	nop
 80052f8:	20001bec 	.word	0x20001bec

080052fc <_init>:
 80052fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fe:	bf00      	nop
 8005300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005302:	bc08      	pop	{r3}
 8005304:	469e      	mov	lr, r3
 8005306:	4770      	bx	lr

08005308 <_fini>:
 8005308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800530a:	bf00      	nop
 800530c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800530e:	bc08      	pop	{r3}
 8005310:	469e      	mov	lr, r3
 8005312:	4770      	bx	lr
