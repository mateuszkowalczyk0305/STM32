
USART2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061dc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08006380  08006380  00016380  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067a4  080067a4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080067a4  080067a4  000167a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067ac  080067ac  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067ac  080067ac  000167ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067b0  080067b0  000167b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080067b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  200001dc  08006990  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08006990  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bfa7  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019a3  00000000  00000000  0002c1b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000988  00000000  00000000  0002db58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000918  00000000  00000000  0002e4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001651f  00000000  00000000  0002edf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd83  00000000  00000000  00045317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008960d  00000000  00000000  0005109a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000da6a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003918  00000000  00000000  000da6fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006364 	.word	0x08006364

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08006364 	.word	0x08006364

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b094      	sub	sp, #80	; 0x50
 8000f54:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f56:	f000 fb15 	bl	8001584 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f5a:	f000 f84b 	bl	8000ff4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f5e:	f000 f8ff 	bl	8001160 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f62:	f000 f8a5 	bl	80010b0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000f66:	f000 f8d1 	bl	800110c <MX_USART2_UART_Init>

    /* USER CODE BEGIN 3 */
	  uint8_t dane_z_czujnika[2];
	   float temperatura;

	   HAL_I2C_Mem_Read(&hi2c1, 0x48 << 1, 0x00, I2C_MEMADD_SIZE_8BIT, dane_z_czujnika, 2, HAL_MAX_DELAY);
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6e:	9302      	str	r3, [sp, #8]
 8000f70:	2302      	movs	r3, #2
 8000f72:	9301      	str	r3, [sp, #4]
 8000f74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2190      	movs	r1, #144	; 0x90
 8000f80:	4819      	ldr	r0, [pc, #100]	; (8000fe8 <main+0x98>)
 8000f82:	f000 ff1f 	bl	8001dc4 <HAL_I2C_Mem_Read>

	   int16_t surowaWartosc = ((dane_z_czujnika[0] << 8) | dane_z_czujnika[1]) >> 5;
 8000f86:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000f8a:	021b      	lsls	r3, r3, #8
 8000f8c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8000f90:	4313      	orrs	r3, r2
 8000f92:	115b      	asrs	r3, r3, #5
 8000f94:	87fb      	strh	r3, [r7, #62]	; 0x3e


	   temperatura = surowaWartosc * 0.125;
 8000f96:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff faca 	bl	8000534 <__aeabi_i2d>
 8000fa0:	f04f 0200 	mov.w	r2, #0
 8000fa4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8000fa8:	f7ff fb2e 	bl	8000608 <__aeabi_dmul>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	4610      	mov	r0, r2
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	f7ff fe00 	bl	8000bb8 <__aeabi_d2f>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	63bb      	str	r3, [r7, #56]	; 0x38


	   char dane_wysylka[50];
	   uint8_t rozmiar;
	   rozmiar=sprintf(dane_wysylka, "Temperature: %.2f stopni Celsjusza \n", temperatura);
 8000fbc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000fbe:	f7ff facb 	bl	8000558 <__aeabi_f2d>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4638      	mov	r0, r7
 8000fc8:	4908      	ldr	r1, [pc, #32]	; (8000fec <main+0x9c>)
 8000fca:	f002 ff9f 	bl	8003f0c <siprintf>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	   HAL_UART_Transmit(&huart2, (uint8_t *)dane_wysylka, rozmiar, HAL_MAX_DELAY);
 8000fd4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	4639      	mov	r1, r7
 8000fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe0:	4803      	ldr	r0, [pc, #12]	; (8000ff0 <main+0xa0>)
 8000fe2:	f002 f82e 	bl	8003042 <HAL_UART_Transmit>
  {
 8000fe6:	e7c0      	b.n	8000f6a <main+0x1a>
 8000fe8:	20000204 	.word	0x20000204
 8000fec:	08006380 	.word	0x08006380
 8000ff0:	20000258 	.word	0x20000258

08000ff4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b094      	sub	sp, #80	; 0x50
 8000ff8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffa:	f107 0320 	add.w	r3, r7, #32
 8000ffe:	2230      	movs	r2, #48	; 0x30
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f002 fb10 	bl	8003628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001018:	2300      	movs	r3, #0
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	4b22      	ldr	r3, [pc, #136]	; (80010a8 <SystemClock_Config+0xb4>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	4a21      	ldr	r2, [pc, #132]	; (80010a8 <SystemClock_Config+0xb4>)
 8001022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001026:	6413      	str	r3, [r2, #64]	; 0x40
 8001028:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <SystemClock_Config+0xb4>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001034:	2300      	movs	r3, #0
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <SystemClock_Config+0xb8>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a1b      	ldr	r2, [pc, #108]	; (80010ac <SystemClock_Config+0xb8>)
 800103e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001042:	6013      	str	r3, [r2, #0]
 8001044:	4b19      	ldr	r3, [pc, #100]	; (80010ac <SystemClock_Config+0xb8>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800104c:	607b      	str	r3, [r7, #4]
 800104e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001050:	2302      	movs	r3, #2
 8001052:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001054:	2301      	movs	r3, #1
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001058:	2310      	movs	r3, #16
 800105a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800105c:	2300      	movs	r3, #0
 800105e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001060:	f107 0320 	add.w	r3, r7, #32
 8001064:	4618      	mov	r0, r3
 8001066:	f001 fb57 	bl	8002718 <HAL_RCC_OscConfig>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001070:	f000 f89e 	bl	80011b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001074:	230f      	movs	r3, #15
 8001076:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001078:	2300      	movs	r3, #0
 800107a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001080:	2300      	movs	r3, #0
 8001082:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f001 fdba 	bl	8002c08 <HAL_RCC_ClockConfig>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800109a:	f000 f889 	bl	80011b0 <Error_Handler>
  }
}
 800109e:	bf00      	nop
 80010a0:	3750      	adds	r7, #80	; 0x50
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40007000 	.word	0x40007000

080010b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <MX_I2C1_Init+0x50>)
 80010b6:	4a13      	ldr	r2, [pc, #76]	; (8001104 <MX_I2C1_Init+0x54>)
 80010b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <MX_I2C1_Init+0x50>)
 80010bc:	4a12      	ldr	r2, [pc, #72]	; (8001108 <MX_I2C1_Init+0x58>)
 80010be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010c0:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <MX_I2C1_Init+0x50>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <MX_I2C1_Init+0x50>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <MX_I2C1_Init+0x50>)
 80010ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d4:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <MX_I2C1_Init+0x50>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <MX_I2C1_Init+0x50>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010e0:	4b07      	ldr	r3, [pc, #28]	; (8001100 <MX_I2C1_Init+0x50>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <MX_I2C1_Init+0x50>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010ec:	4804      	ldr	r0, [pc, #16]	; (8001100 <MX_I2C1_Init+0x50>)
 80010ee:	f000 fd25 	bl	8001b3c <HAL_I2C_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010f8:	f000 f85a 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000204 	.word	0x20000204
 8001104:	40005400 	.word	0x40005400
 8001108:	000186a0 	.word	0x000186a0

0800110c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <MX_USART2_UART_Init+0x4c>)
 8001112:	4a12      	ldr	r2, [pc, #72]	; (800115c <MX_USART2_UART_Init+0x50>)
 8001114:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001116:	4b10      	ldr	r3, [pc, #64]	; (8001158 <MX_USART2_UART_Init+0x4c>)
 8001118:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800111c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <MX_USART2_UART_Init+0x4c>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <MX_USART2_UART_Init+0x4c>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800112a:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <MX_USART2_UART_Init+0x4c>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001130:	4b09      	ldr	r3, [pc, #36]	; (8001158 <MX_USART2_UART_Init+0x4c>)
 8001132:	220c      	movs	r2, #12
 8001134:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <MX_USART2_UART_Init+0x4c>)
 8001138:	2200      	movs	r2, #0
 800113a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <MX_USART2_UART_Init+0x4c>)
 800113e:	2200      	movs	r2, #0
 8001140:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001142:	4805      	ldr	r0, [pc, #20]	; (8001158 <MX_USART2_UART_Init+0x4c>)
 8001144:	f001 ff30 	bl	8002fa8 <HAL_UART_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800114e:	f000 f82f 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000258 	.word	0x20000258
 800115c:	40004400 	.word	0x40004400

08001160 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <MX_GPIO_Init+0x4c>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a0f      	ldr	r2, [pc, #60]	; (80011ac <MX_GPIO_Init+0x4c>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <MX_GPIO_Init+0x4c>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	603b      	str	r3, [r7, #0]
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_GPIO_Init+0x4c>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a08      	ldr	r2, [pc, #32]	; (80011ac <MX_GPIO_Init+0x4c>)
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MX_GPIO_Init+0x4c>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	683b      	ldr	r3, [r7, #0]

}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	40023800 	.word	0x40023800

080011b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b4:	b672      	cpsid	i
}
 80011b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <Error_Handler+0x8>
	...

080011bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <HAL_MspInit+0x4c>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <HAL_MspInit+0x4c>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <HAL_MspInit+0x4c>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	603b      	str	r3, [r7, #0]
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <HAL_MspInit+0x4c>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	4a08      	ldr	r2, [pc, #32]	; (8001208 <HAL_MspInit+0x4c>)
 80011e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ec:	6413      	str	r3, [r2, #64]	; 0x40
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_MspInit+0x4c>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800

0800120c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a19      	ldr	r2, [pc, #100]	; (8001290 <HAL_I2C_MspInit+0x84>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d12c      	bne.n	8001288 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	4b18      	ldr	r3, [pc, #96]	; (8001294 <HAL_I2C_MspInit+0x88>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a17      	ldr	r2, [pc, #92]	; (8001294 <HAL_I2C_MspInit+0x88>)
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <HAL_I2C_MspInit+0x88>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800124a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800124e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001250:	2312      	movs	r3, #18
 8001252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001258:	2303      	movs	r3, #3
 800125a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800125c:	2304      	movs	r3, #4
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	4619      	mov	r1, r3
 8001266:	480c      	ldr	r0, [pc, #48]	; (8001298 <HAL_I2C_MspInit+0x8c>)
 8001268:	f000 fae4 	bl	8001834 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <HAL_I2C_MspInit+0x88>)
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	4a07      	ldr	r2, [pc, #28]	; (8001294 <HAL_I2C_MspInit+0x88>)
 8001276:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800127a:	6413      	str	r3, [r2, #64]	; 0x40
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <HAL_I2C_MspInit+0x88>)
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001288:	bf00      	nop
 800128a:	3728      	adds	r7, #40	; 0x28
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40005400 	.word	0x40005400
 8001294:	40023800 	.word	0x40023800
 8001298:	40020400 	.word	0x40020400

0800129c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a19      	ldr	r2, [pc, #100]	; (8001320 <HAL_UART_MspInit+0x84>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d12b      	bne.n	8001316 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	4b18      	ldr	r3, [pc, #96]	; (8001324 <HAL_UART_MspInit+0x88>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	4a17      	ldr	r2, [pc, #92]	; (8001324 <HAL_UART_MspInit+0x88>)
 80012c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012cc:	6413      	str	r3, [r2, #64]	; 0x40
 80012ce:	4b15      	ldr	r3, [pc, #84]	; (8001324 <HAL_UART_MspInit+0x88>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b11      	ldr	r3, [pc, #68]	; (8001324 <HAL_UART_MspInit+0x88>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a10      	ldr	r2, [pc, #64]	; (8001324 <HAL_UART_MspInit+0x88>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <HAL_UART_MspInit+0x88>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012f6:	230c      	movs	r3, #12
 80012f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001302:	2303      	movs	r3, #3
 8001304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001306:	2307      	movs	r3, #7
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	4619      	mov	r1, r3
 8001310:	4805      	ldr	r0, [pc, #20]	; (8001328 <HAL_UART_MspInit+0x8c>)
 8001312:	f000 fa8f 	bl	8001834 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001316:	bf00      	nop
 8001318:	3728      	adds	r7, #40	; 0x28
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40004400 	.word	0x40004400
 8001324:	40023800 	.word	0x40023800
 8001328:	40020000 	.word	0x40020000

0800132c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001330:	e7fe      	b.n	8001330 <NMI_Handler+0x4>

08001332 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001336:	e7fe      	b.n	8001336 <HardFault_Handler+0x4>

08001338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800133c:	e7fe      	b.n	800133c <MemManage_Handler+0x4>

0800133e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001342:	e7fe      	b.n	8001342 <BusFault_Handler+0x4>

08001344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <UsageFault_Handler+0x4>

0800134a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001378:	f000 f956 	bl	8001628 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}

08001380 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
	return 1;
 8001384:	2301      	movs	r3, #1
}
 8001386:	4618      	mov	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <_kill>:

int _kill(int pid, int sig)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800139a:	f002 f91b 	bl	80035d4 <__errno>
 800139e:	4603      	mov	r3, r0
 80013a0:	2216      	movs	r2, #22
 80013a2:	601a      	str	r2, [r3, #0]
	return -1;
 80013a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <_exit>:

void _exit (int status)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80013b8:	f04f 31ff 	mov.w	r1, #4294967295
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff ffe7 	bl	8001390 <_kill>
	while (1) {}		/* Make sure we hang here */
 80013c2:	e7fe      	b.n	80013c2 <_exit+0x12>

080013c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
 80013d4:	e00a      	b.n	80013ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013d6:	f3af 8000 	nop.w
 80013da:	4601      	mov	r1, r0
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	1c5a      	adds	r2, r3, #1
 80013e0:	60ba      	str	r2, [r7, #8]
 80013e2:	b2ca      	uxtb	r2, r1
 80013e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	3301      	adds	r3, #1
 80013ea:	617b      	str	r3, [r7, #20]
 80013ec:	697a      	ldr	r2, [r7, #20]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	dbf0      	blt.n	80013d6 <_read+0x12>
	}

return len;
 80013f4:	687b      	ldr	r3, [r7, #4]
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b086      	sub	sp, #24
 8001402:	af00      	add	r7, sp, #0
 8001404:	60f8      	str	r0, [r7, #12]
 8001406:	60b9      	str	r1, [r7, #8]
 8001408:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	e009      	b.n	8001424 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	1c5a      	adds	r2, r3, #1
 8001414:	60ba      	str	r2, [r7, #8]
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	3301      	adds	r3, #1
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	697a      	ldr	r2, [r7, #20]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	429a      	cmp	r2, r3
 800142a:	dbf1      	blt.n	8001410 <_write+0x12>
	}
	return len;
 800142c:	687b      	ldr	r3, [r7, #4]
}
 800142e:	4618      	mov	r0, r3
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <_close>:

int _close(int file)
{
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
	return -1;
 800143e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
 8001456:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800145e:	605a      	str	r2, [r3, #4]
	return 0;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <_isatty>:

int _isatty(int file)
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
	return 1;
 8001476:	2301      	movs	r3, #1
}
 8001478:	4618      	mov	r0, r3
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
	return 0;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014a8:	4a14      	ldr	r2, [pc, #80]	; (80014fc <_sbrk+0x5c>)
 80014aa:	4b15      	ldr	r3, [pc, #84]	; (8001500 <_sbrk+0x60>)
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014b4:	4b13      	ldr	r3, [pc, #76]	; (8001504 <_sbrk+0x64>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d102      	bne.n	80014c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014bc:	4b11      	ldr	r3, [pc, #68]	; (8001504 <_sbrk+0x64>)
 80014be:	4a12      	ldr	r2, [pc, #72]	; (8001508 <_sbrk+0x68>)
 80014c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <_sbrk+0x64>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d207      	bcs.n	80014e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014d0:	f002 f880 	bl	80035d4 <__errno>
 80014d4:	4603      	mov	r3, r0
 80014d6:	220c      	movs	r2, #12
 80014d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014da:	f04f 33ff 	mov.w	r3, #4294967295
 80014de:	e009      	b.n	80014f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <_sbrk+0x64>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014e6:	4b07      	ldr	r3, [pc, #28]	; (8001504 <_sbrk+0x64>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	4a05      	ldr	r2, [pc, #20]	; (8001504 <_sbrk+0x64>)
 80014f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014f2:	68fb      	ldr	r3, [r7, #12]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20020000 	.word	0x20020000
 8001500:	00000400 	.word	0x00000400
 8001504:	200001f8 	.word	0x200001f8
 8001508:	200002b0 	.word	0x200002b0

0800150c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <SystemInit+0x20>)
 8001512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001516:	4a05      	ldr	r2, [pc, #20]	; (800152c <SystemInit+0x20>)
 8001518:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800151c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001530:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001568 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001534:	480d      	ldr	r0, [pc, #52]	; (800156c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001536:	490e      	ldr	r1, [pc, #56]	; (8001570 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001538:	4a0e      	ldr	r2, [pc, #56]	; (8001574 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800153a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800153c:	e002      	b.n	8001544 <LoopCopyDataInit>

0800153e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800153e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001542:	3304      	adds	r3, #4

08001544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001548:	d3f9      	bcc.n	800153e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800154a:	4a0b      	ldr	r2, [pc, #44]	; (8001578 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800154c:	4c0b      	ldr	r4, [pc, #44]	; (800157c <LoopFillZerobss+0x26>)
  movs r3, #0
 800154e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001550:	e001      	b.n	8001556 <LoopFillZerobss>

08001552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001554:	3204      	adds	r2, #4

08001556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001558:	d3fb      	bcc.n	8001552 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800155a:	f7ff ffd7 	bl	800150c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800155e:	f002 f83f 	bl	80035e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001562:	f7ff fcf5 	bl	8000f50 <main>
  bx  lr    
 8001566:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001568:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800156c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001570:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001574:	080067b4 	.word	0x080067b4
  ldr r2, =_sbss
 8001578:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800157c:	200002b0 	.word	0x200002b0

08001580 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001580:	e7fe      	b.n	8001580 <ADC_IRQHandler>
	...

08001584 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001588:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <HAL_Init+0x40>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a0d      	ldr	r2, [pc, #52]	; (80015c4 <HAL_Init+0x40>)
 800158e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001592:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001594:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <HAL_Init+0x40>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <HAL_Init+0x40>)
 800159a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800159e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <HAL_Init+0x40>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a07      	ldr	r2, [pc, #28]	; (80015c4 <HAL_Init+0x40>)
 80015a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ac:	2003      	movs	r0, #3
 80015ae:	f000 f90d 	bl	80017cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015b2:	200f      	movs	r0, #15
 80015b4:	f000 f808 	bl	80015c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015b8:	f7ff fe00 	bl	80011bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40023c00 	.word	0x40023c00

080015c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015d0:	4b12      	ldr	r3, [pc, #72]	; (800161c <HAL_InitTick+0x54>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <HAL_InitTick+0x58>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4619      	mov	r1, r3
 80015da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015de:	fbb3 f3f1 	udiv	r3, r3, r1
 80015e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 f917 	bl	800181a <HAL_SYSTICK_Config>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e00e      	b.n	8001614 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b0f      	cmp	r3, #15
 80015fa:	d80a      	bhi.n	8001612 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015fc:	2200      	movs	r2, #0
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	f04f 30ff 	mov.w	r0, #4294967295
 8001604:	f000 f8ed 	bl	80017e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001608:	4a06      	ldr	r2, [pc, #24]	; (8001624 <HAL_InitTick+0x5c>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800160e:	2300      	movs	r3, #0
 8001610:	e000      	b.n	8001614 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
}
 8001614:	4618      	mov	r0, r3
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000000 	.word	0x20000000
 8001620:	20000008 	.word	0x20000008
 8001624:	20000004 	.word	0x20000004

08001628 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_IncTick+0x20>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_IncTick+0x24>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4413      	add	r3, r2
 8001638:	4a04      	ldr	r2, [pc, #16]	; (800164c <HAL_IncTick+0x24>)
 800163a:	6013      	str	r3, [r2, #0]
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	20000008 	.word	0x20000008
 800164c:	2000029c 	.word	0x2000029c

08001650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return uwTick;
 8001654:	4b03      	ldr	r3, [pc, #12]	; (8001664 <HAL_GetTick+0x14>)
 8001656:	681b      	ldr	r3, [r3, #0]
}
 8001658:	4618      	mov	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	2000029c 	.word	0x2000029c

08001668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <__NVIC_SetPriorityGrouping+0x44>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001684:	4013      	ands	r3, r2
 8001686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800169a:	4a04      	ldr	r2, [pc, #16]	; (80016ac <__NVIC_SetPriorityGrouping+0x44>)
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	60d3      	str	r3, [r2, #12]
}
 80016a0:	bf00      	nop
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b4:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <__NVIC_GetPriorityGrouping+0x18>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	0a1b      	lsrs	r3, r3, #8
 80016ba:	f003 0307 	and.w	r3, r3, #7
}
 80016be:	4618      	mov	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	6039      	str	r1, [r7, #0]
 80016d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	db0a      	blt.n	80016f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	490c      	ldr	r1, [pc, #48]	; (8001718 <__NVIC_SetPriority+0x4c>)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	0112      	lsls	r2, r2, #4
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	440b      	add	r3, r1
 80016f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f4:	e00a      	b.n	800170c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	4908      	ldr	r1, [pc, #32]	; (800171c <__NVIC_SetPriority+0x50>)
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	3b04      	subs	r3, #4
 8001704:	0112      	lsls	r2, r2, #4
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	440b      	add	r3, r1
 800170a:	761a      	strb	r2, [r3, #24]
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000e100 	.word	0xe000e100
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001720:	b480      	push	{r7}
 8001722:	b089      	sub	sp, #36	; 0x24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f1c3 0307 	rsb	r3, r3, #7
 800173a:	2b04      	cmp	r3, #4
 800173c:	bf28      	it	cs
 800173e:	2304      	movcs	r3, #4
 8001740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3304      	adds	r3, #4
 8001746:	2b06      	cmp	r3, #6
 8001748:	d902      	bls.n	8001750 <NVIC_EncodePriority+0x30>
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	3b03      	subs	r3, #3
 800174e:	e000      	b.n	8001752 <NVIC_EncodePriority+0x32>
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001754:	f04f 32ff 	mov.w	r2, #4294967295
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43da      	mvns	r2, r3
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	401a      	ands	r2, r3
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001768:	f04f 31ff 	mov.w	r1, #4294967295
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	fa01 f303 	lsl.w	r3, r1, r3
 8001772:	43d9      	mvns	r1, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001778:	4313      	orrs	r3, r2
         );
}
 800177a:	4618      	mov	r0, r3
 800177c:	3724      	adds	r7, #36	; 0x24
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
	...

08001788 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3b01      	subs	r3, #1
 8001794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001798:	d301      	bcc.n	800179e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800179a:	2301      	movs	r3, #1
 800179c:	e00f      	b.n	80017be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800179e:	4a0a      	ldr	r2, [pc, #40]	; (80017c8 <SysTick_Config+0x40>)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017a6:	210f      	movs	r1, #15
 80017a8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ac:	f7ff ff8e 	bl	80016cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <SysTick_Config+0x40>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017b6:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <SysTick_Config+0x40>)
 80017b8:	2207      	movs	r2, #7
 80017ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	e000e010 	.word	0xe000e010

080017cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff ff47 	bl	8001668 <__NVIC_SetPriorityGrouping>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b086      	sub	sp, #24
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	4603      	mov	r3, r0
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	607a      	str	r2, [r7, #4]
 80017ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017f4:	f7ff ff5c 	bl	80016b0 <__NVIC_GetPriorityGrouping>
 80017f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	68b9      	ldr	r1, [r7, #8]
 80017fe:	6978      	ldr	r0, [r7, #20]
 8001800:	f7ff ff8e 	bl	8001720 <NVIC_EncodePriority>
 8001804:	4602      	mov	r2, r0
 8001806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800180a:	4611      	mov	r1, r2
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ff5d 	bl	80016cc <__NVIC_SetPriority>
}
 8001812:	bf00      	nop
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff ffb0 	bl	8001788 <SysTick_Config>
 8001828:	4603      	mov	r3, r0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001834:	b480      	push	{r7}
 8001836:	b089      	sub	sp, #36	; 0x24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001846:	2300      	movs	r3, #0
 8001848:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
 800184e:	e159      	b.n	8001b04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001850:	2201      	movs	r2, #1
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	4013      	ands	r3, r2
 8001862:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	429a      	cmp	r2, r3
 800186a:	f040 8148 	bne.w	8001afe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	2b01      	cmp	r3, #1
 8001878:	d005      	beq.n	8001886 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001882:	2b02      	cmp	r3, #2
 8001884:	d130      	bne.n	80018e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	2203      	movs	r2, #3
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4013      	ands	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	68da      	ldr	r2, [r3, #12]
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018bc:	2201      	movs	r2, #1
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4013      	ands	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	091b      	lsrs	r3, r3, #4
 80018d2:	f003 0201 	and.w	r2, r3, #1
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4313      	orrs	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f003 0303 	and.w	r3, r3, #3
 80018f0:	2b03      	cmp	r3, #3
 80018f2:	d017      	beq.n	8001924 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	2203      	movs	r2, #3
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4313      	orrs	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d123      	bne.n	8001978 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	08da      	lsrs	r2, r3, #3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3208      	adds	r2, #8
 8001938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800193c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	220f      	movs	r2, #15
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	691a      	ldr	r2, [r3, #16]
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	08da      	lsrs	r2, r3, #3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3208      	adds	r2, #8
 8001972:	69b9      	ldr	r1, [r7, #24]
 8001974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	2203      	movs	r2, #3
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 0203 	and.w	r2, r3, #3
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 80a2 	beq.w	8001afe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	4b57      	ldr	r3, [pc, #348]	; (8001b1c <HAL_GPIO_Init+0x2e8>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	4a56      	ldr	r2, [pc, #344]	; (8001b1c <HAL_GPIO_Init+0x2e8>)
 80019c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ca:	4b54      	ldr	r3, [pc, #336]	; (8001b1c <HAL_GPIO_Init+0x2e8>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019d6:	4a52      	ldr	r2, [pc, #328]	; (8001b20 <HAL_GPIO_Init+0x2ec>)
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	089b      	lsrs	r3, r3, #2
 80019dc:	3302      	adds	r3, #2
 80019de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f003 0303 	and.w	r3, r3, #3
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	220f      	movs	r2, #15
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4013      	ands	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a49      	ldr	r2, [pc, #292]	; (8001b24 <HAL_GPIO_Init+0x2f0>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d019      	beq.n	8001a36 <HAL_GPIO_Init+0x202>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a48      	ldr	r2, [pc, #288]	; (8001b28 <HAL_GPIO_Init+0x2f4>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d013      	beq.n	8001a32 <HAL_GPIO_Init+0x1fe>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a47      	ldr	r2, [pc, #284]	; (8001b2c <HAL_GPIO_Init+0x2f8>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d00d      	beq.n	8001a2e <HAL_GPIO_Init+0x1fa>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a46      	ldr	r2, [pc, #280]	; (8001b30 <HAL_GPIO_Init+0x2fc>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d007      	beq.n	8001a2a <HAL_GPIO_Init+0x1f6>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a45      	ldr	r2, [pc, #276]	; (8001b34 <HAL_GPIO_Init+0x300>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d101      	bne.n	8001a26 <HAL_GPIO_Init+0x1f2>
 8001a22:	2304      	movs	r3, #4
 8001a24:	e008      	b.n	8001a38 <HAL_GPIO_Init+0x204>
 8001a26:	2307      	movs	r3, #7
 8001a28:	e006      	b.n	8001a38 <HAL_GPIO_Init+0x204>
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e004      	b.n	8001a38 <HAL_GPIO_Init+0x204>
 8001a2e:	2302      	movs	r3, #2
 8001a30:	e002      	b.n	8001a38 <HAL_GPIO_Init+0x204>
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <HAL_GPIO_Init+0x204>
 8001a36:	2300      	movs	r3, #0
 8001a38:	69fa      	ldr	r2, [r7, #28]
 8001a3a:	f002 0203 	and.w	r2, r2, #3
 8001a3e:	0092      	lsls	r2, r2, #2
 8001a40:	4093      	lsls	r3, r2
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a48:	4935      	ldr	r1, [pc, #212]	; (8001b20 <HAL_GPIO_Init+0x2ec>)
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	089b      	lsrs	r3, r3, #2
 8001a4e:	3302      	adds	r3, #2
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a56:	4b38      	ldr	r3, [pc, #224]	; (8001b38 <HAL_GPIO_Init+0x304>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4013      	ands	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a7a:	4a2f      	ldr	r2, [pc, #188]	; (8001b38 <HAL_GPIO_Init+0x304>)
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a80:	4b2d      	ldr	r3, [pc, #180]	; (8001b38 <HAL_GPIO_Init+0x304>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aa4:	4a24      	ldr	r2, [pc, #144]	; (8001b38 <HAL_GPIO_Init+0x304>)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aaa:	4b23      	ldr	r3, [pc, #140]	; (8001b38 <HAL_GPIO_Init+0x304>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ace:	4a1a      	ldr	r2, [pc, #104]	; (8001b38 <HAL_GPIO_Init+0x304>)
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ad4:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <HAL_GPIO_Init+0x304>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001af8:	4a0f      	ldr	r2, [pc, #60]	; (8001b38 <HAL_GPIO_Init+0x304>)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3301      	adds	r3, #1
 8001b02:	61fb      	str	r3, [r7, #28]
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	2b0f      	cmp	r3, #15
 8001b08:	f67f aea2 	bls.w	8001850 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b0c:	bf00      	nop
 8001b0e:	bf00      	nop
 8001b10:	3724      	adds	r7, #36	; 0x24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40013800 	.word	0x40013800
 8001b24:	40020000 	.word	0x40020000
 8001b28:	40020400 	.word	0x40020400
 8001b2c:	40020800 	.word	0x40020800
 8001b30:	40020c00 	.word	0x40020c00
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40013c00 	.word	0x40013c00

08001b3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e12b      	b.n	8001da6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d106      	bne.n	8001b68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff fb52 	bl	800120c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2224      	movs	r2, #36	; 0x24
 8001b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 0201 	bic.w	r2, r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ba0:	f001 f9da 	bl	8002f58 <HAL_RCC_GetPCLK1Freq>
 8001ba4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	4a81      	ldr	r2, [pc, #516]	; (8001db0 <HAL_I2C_Init+0x274>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d807      	bhi.n	8001bc0 <HAL_I2C_Init+0x84>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4a80      	ldr	r2, [pc, #512]	; (8001db4 <HAL_I2C_Init+0x278>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	bf94      	ite	ls
 8001bb8:	2301      	movls	r3, #1
 8001bba:	2300      	movhi	r3, #0
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	e006      	b.n	8001bce <HAL_I2C_Init+0x92>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4a7d      	ldr	r2, [pc, #500]	; (8001db8 <HAL_I2C_Init+0x27c>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	bf94      	ite	ls
 8001bc8:	2301      	movls	r3, #1
 8001bca:	2300      	movhi	r3, #0
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e0e7      	b.n	8001da6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	4a78      	ldr	r2, [pc, #480]	; (8001dbc <HAL_I2C_Init+0x280>)
 8001bda:	fba2 2303 	umull	r2, r3, r2, r3
 8001bde:	0c9b      	lsrs	r3, r3, #18
 8001be0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68ba      	ldr	r2, [r7, #8]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6a1b      	ldr	r3, [r3, #32]
 8001bfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	4a6a      	ldr	r2, [pc, #424]	; (8001db0 <HAL_I2C_Init+0x274>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d802      	bhi.n	8001c10 <HAL_I2C_Init+0xd4>
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	e009      	b.n	8001c24 <HAL_I2C_Init+0xe8>
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c16:	fb02 f303 	mul.w	r3, r2, r3
 8001c1a:	4a69      	ldr	r2, [pc, #420]	; (8001dc0 <HAL_I2C_Init+0x284>)
 8001c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c20:	099b      	lsrs	r3, r3, #6
 8001c22:	3301      	adds	r3, #1
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	6812      	ldr	r2, [r2, #0]
 8001c28:	430b      	orrs	r3, r1
 8001c2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	495c      	ldr	r1, [pc, #368]	; (8001db0 <HAL_I2C_Init+0x274>)
 8001c40:	428b      	cmp	r3, r1
 8001c42:	d819      	bhi.n	8001c78 <HAL_I2C_Init+0x13c>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	1e59      	subs	r1, r3, #1
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c52:	1c59      	adds	r1, r3, #1
 8001c54:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c58:	400b      	ands	r3, r1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00a      	beq.n	8001c74 <HAL_I2C_Init+0x138>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	1e59      	subs	r1, r3, #1
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c72:	e051      	b.n	8001d18 <HAL_I2C_Init+0x1dc>
 8001c74:	2304      	movs	r3, #4
 8001c76:	e04f      	b.n	8001d18 <HAL_I2C_Init+0x1dc>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d111      	bne.n	8001ca4 <HAL_I2C_Init+0x168>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	1e58      	subs	r0, r3, #1
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6859      	ldr	r1, [r3, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	440b      	add	r3, r1
 8001c8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c92:	3301      	adds	r3, #1
 8001c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	bf0c      	ite	eq
 8001c9c:	2301      	moveq	r3, #1
 8001c9e:	2300      	movne	r3, #0
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	e012      	b.n	8001cca <HAL_I2C_Init+0x18e>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	1e58      	subs	r0, r3, #1
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6859      	ldr	r1, [r3, #4]
 8001cac:	460b      	mov	r3, r1
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	0099      	lsls	r1, r3, #2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cba:	3301      	adds	r3, #1
 8001cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	bf0c      	ite	eq
 8001cc4:	2301      	moveq	r3, #1
 8001cc6:	2300      	movne	r3, #0
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_I2C_Init+0x196>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e022      	b.n	8001d18 <HAL_I2C_Init+0x1dc>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10e      	bne.n	8001cf8 <HAL_I2C_Init+0x1bc>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	1e58      	subs	r0, r3, #1
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6859      	ldr	r1, [r3, #4]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	440b      	add	r3, r1
 8001ce8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cec:	3301      	adds	r3, #1
 8001cee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cf6:	e00f      	b.n	8001d18 <HAL_I2C_Init+0x1dc>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	1e58      	subs	r0, r3, #1
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6859      	ldr	r1, [r3, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	0099      	lsls	r1, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d0e:	3301      	adds	r3, #1
 8001d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	6809      	ldr	r1, [r1, #0]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69da      	ldr	r2, [r3, #28]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6911      	ldr	r1, [r2, #16]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	68d2      	ldr	r2, [r2, #12]
 8001d52:	4311      	orrs	r1, r2
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	430b      	orrs	r3, r1
 8001d5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	695a      	ldr	r2, [r3, #20]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0201 	orr.w	r2, r2, #1
 8001d86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2220      	movs	r2, #32
 8001d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	000186a0 	.word	0x000186a0
 8001db4:	001e847f 	.word	0x001e847f
 8001db8:	003d08ff 	.word	0x003d08ff
 8001dbc:	431bde83 	.word	0x431bde83
 8001dc0:	10624dd3 	.word	0x10624dd3

08001dc4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08c      	sub	sp, #48	; 0x30
 8001dc8:	af02      	add	r7, sp, #8
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	4608      	mov	r0, r1
 8001dce:	4611      	mov	r1, r2
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	817b      	strh	r3, [r7, #10]
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	813b      	strh	r3, [r7, #8]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001dde:	f7ff fc37 	bl	8001650 <HAL_GetTick>
 8001de2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b20      	cmp	r3, #32
 8001dee:	f040 8208 	bne.w	8002202 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	2319      	movs	r3, #25
 8001df8:	2201      	movs	r2, #1
 8001dfa:	497b      	ldr	r1, [pc, #492]	; (8001fe8 <HAL_I2C_Mem_Read+0x224>)
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f000 faef 	bl	80023e0 <I2C_WaitOnFlagUntilTimeout>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e1fb      	b.n	8002204 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <HAL_I2C_Mem_Read+0x56>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e1f4      	b.n	8002204 <HAL_I2C_Mem_Read+0x440>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d007      	beq.n	8001e40 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0201 	orr.w	r2, r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2222      	movs	r2, #34	; 0x22
 8001e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2240      	movs	r2, #64	; 0x40
 8001e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001e70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4a5b      	ldr	r2, [pc, #364]	; (8001fec <HAL_I2C_Mem_Read+0x228>)
 8001e80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e82:	88f8      	ldrh	r0, [r7, #6]
 8001e84:	893a      	ldrh	r2, [r7, #8]
 8001e86:	8979      	ldrh	r1, [r7, #10]
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	9301      	str	r3, [sp, #4]
 8001e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	4603      	mov	r3, r0
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f000 f9bc 	bl	8002210 <I2C_RequestMemoryRead>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e1b0      	b.n	8002204 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d113      	bne.n	8001ed2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eaa:	2300      	movs	r3, #0
 8001eac:	623b      	str	r3, [r7, #32]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	623b      	str	r3, [r7, #32]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	623b      	str	r3, [r7, #32]
 8001ebe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	e184      	b.n	80021dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d11b      	bne.n	8001f12 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ee8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	61fb      	str	r3, [r7, #28]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	61fb      	str	r3, [r7, #28]
 8001efe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	e164      	b.n	80021dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d11b      	bne.n	8001f52 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f28:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	61bb      	str	r3, [r7, #24]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	61bb      	str	r3, [r7, #24]
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	e144      	b.n	80021dc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	617b      	str	r3, [r7, #20]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001f68:	e138      	b.n	80021dc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f6e:	2b03      	cmp	r3, #3
 8001f70:	f200 80f1 	bhi.w	8002156 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d123      	bne.n	8001fc4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f80:	68f8      	ldr	r0, [r7, #12]
 8001f82:	f000 fb44 	bl	800260e <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e139      	b.n	8002204 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	691a      	ldr	r2, [r3, #16]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa2:	1c5a      	adds	r2, r3, #1
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fac:	3b01      	subs	r3, #1
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001fc2:	e10b      	b.n	80021dc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d14e      	bne.n	800206a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	4906      	ldr	r1, [pc, #24]	; (8001ff0 <HAL_I2C_Mem_Read+0x22c>)
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f000 fa02 	bl	80023e0 <I2C_WaitOnFlagUntilTimeout>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d008      	beq.n	8001ff4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e10e      	b.n	8002204 <HAL_I2C_Mem_Read+0x440>
 8001fe6:	bf00      	nop
 8001fe8:	00100002 	.word	0x00100002
 8001fec:	ffff0000 	.word	0xffff0000
 8001ff0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002002:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	691a      	ldr	r2, [r3, #16]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	1c5a      	adds	r2, r3, #1
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002020:	3b01      	subs	r3, #1
 8002022:	b29a      	uxth	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202c:	b29b      	uxth	r3, r3
 800202e:	3b01      	subs	r3, #1
 8002030:	b29a      	uxth	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	691a      	ldr	r2, [r3, #16]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	1c5a      	adds	r2, r3, #1
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002052:	3b01      	subs	r3, #1
 8002054:	b29a      	uxth	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205e:	b29b      	uxth	r3, r3
 8002060:	3b01      	subs	r3, #1
 8002062:	b29a      	uxth	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002068:	e0b8      	b.n	80021dc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002070:	2200      	movs	r2, #0
 8002072:	4966      	ldr	r1, [pc, #408]	; (800220c <HAL_I2C_Mem_Read+0x448>)
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 f9b3 	bl	80023e0 <I2C_WaitOnFlagUntilTimeout>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e0bf      	b.n	8002204 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002092:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	691a      	ldr	r2, [r3, #16]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	1c5a      	adds	r2, r3, #1
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b0:	3b01      	subs	r3, #1
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020bc:	b29b      	uxth	r3, r3
 80020be:	3b01      	subs	r3, #1
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020cc:	2200      	movs	r2, #0
 80020ce:	494f      	ldr	r1, [pc, #316]	; (800220c <HAL_I2C_Mem_Read+0x448>)
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f000 f985 	bl	80023e0 <I2C_WaitOnFlagUntilTimeout>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e091      	b.n	8002204 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	691a      	ldr	r2, [r3, #16]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	1c5a      	adds	r2, r3, #1
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800210c:	3b01      	subs	r3, #1
 800210e:	b29a      	uxth	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002118:	b29b      	uxth	r3, r3
 800211a:	3b01      	subs	r3, #1
 800211c:	b29a      	uxth	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	691a      	ldr	r2, [r3, #16]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213e:	3b01      	subs	r3, #1
 8002140:	b29a      	uxth	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214a:	b29b      	uxth	r3, r3
 800214c:	3b01      	subs	r3, #1
 800214e:	b29a      	uxth	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002154:	e042      	b.n	80021dc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002158:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 fa57 	bl	800260e <I2C_WaitOnRXNEFlagUntilTimeout>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e04c      	b.n	8002204 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	691a      	ldr	r2, [r3, #16]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002186:	3b01      	subs	r3, #1
 8002188:	b29a      	uxth	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002192:	b29b      	uxth	r3, r3
 8002194:	3b01      	subs	r3, #1
 8002196:	b29a      	uxth	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d118      	bne.n	80021dc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	691a      	ldr	r2, [r3, #16]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	1c5a      	adds	r2, r3, #1
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c6:	3b01      	subs	r3, #1
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	3b01      	subs	r3, #1
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f47f aec2 	bne.w	8001f6a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2220      	movs	r2, #32
 80021ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	e000      	b.n	8002204 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002202:	2302      	movs	r3, #2
  }
}
 8002204:	4618      	mov	r0, r3
 8002206:	3728      	adds	r7, #40	; 0x28
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	00010004 	.word	0x00010004

08002210 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b088      	sub	sp, #32
 8002214:	af02      	add	r7, sp, #8
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	4608      	mov	r0, r1
 800221a:	4611      	mov	r1, r2
 800221c:	461a      	mov	r2, r3
 800221e:	4603      	mov	r3, r0
 8002220:	817b      	strh	r3, [r7, #10]
 8002222:	460b      	mov	r3, r1
 8002224:	813b      	strh	r3, [r7, #8]
 8002226:	4613      	mov	r3, r2
 8002228:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002238:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002248:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	2200      	movs	r2, #0
 8002252:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f000 f8c2 	bl	80023e0 <I2C_WaitOnFlagUntilTimeout>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00d      	beq.n	800227e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002270:	d103      	bne.n	800227a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002278:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e0aa      	b.n	80023d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800227e:	897b      	ldrh	r3, [r7, #10]
 8002280:	b2db      	uxtb	r3, r3
 8002282:	461a      	mov	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800228c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	6a3a      	ldr	r2, [r7, #32]
 8002292:	4952      	ldr	r1, [pc, #328]	; (80023dc <I2C_RequestMemoryRead+0x1cc>)
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f000 f8fa 	bl	800248e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e097      	b.n	80023d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	617b      	str	r3, [r7, #20]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022bc:	6a39      	ldr	r1, [r7, #32]
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 f964 	bl	800258c <I2C_WaitOnTXEFlagUntilTimeout>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00d      	beq.n	80022e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	d107      	bne.n	80022e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e076      	b.n	80023d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022e6:	88fb      	ldrh	r3, [r7, #6]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d105      	bne.n	80022f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022ec:	893b      	ldrh	r3, [r7, #8]
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	611a      	str	r2, [r3, #16]
 80022f6:	e021      	b.n	800233c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80022f8:	893b      	ldrh	r3, [r7, #8]
 80022fa:	0a1b      	lsrs	r3, r3, #8
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002308:	6a39      	ldr	r1, [r7, #32]
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 f93e 	bl	800258c <I2C_WaitOnTXEFlagUntilTimeout>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00d      	beq.n	8002332 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	2b04      	cmp	r3, #4
 800231c:	d107      	bne.n	800232e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800232c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e050      	b.n	80023d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002332:	893b      	ldrh	r3, [r7, #8]
 8002334:	b2da      	uxtb	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800233c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800233e:	6a39      	ldr	r1, [r7, #32]
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f000 f923 	bl	800258c <I2C_WaitOnTXEFlagUntilTimeout>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d00d      	beq.n	8002368 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002350:	2b04      	cmp	r3, #4
 8002352:	d107      	bne.n	8002364 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002362:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e035      	b.n	80023d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002376:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	6a3b      	ldr	r3, [r7, #32]
 800237e:	2200      	movs	r2, #0
 8002380:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f000 f82b 	bl	80023e0 <I2C_WaitOnFlagUntilTimeout>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00d      	beq.n	80023ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800239e:	d103      	bne.n	80023a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e013      	b.n	80023d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80023ac:	897b      	ldrh	r3, [r7, #10]
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	6a3a      	ldr	r2, [r7, #32]
 80023c0:	4906      	ldr	r1, [pc, #24]	; (80023dc <I2C_RequestMemoryRead+0x1cc>)
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 f863 	bl	800248e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	00010002 	.word	0x00010002

080023e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	603b      	str	r3, [r7, #0]
 80023ec:	4613      	mov	r3, r2
 80023ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023f0:	e025      	b.n	800243e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f8:	d021      	beq.n	800243e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023fa:	f7ff f929 	bl	8001650 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	429a      	cmp	r2, r3
 8002408:	d302      	bcc.n	8002410 <I2C_WaitOnFlagUntilTimeout+0x30>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d116      	bne.n	800243e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2220      	movs	r2, #32
 800241a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f043 0220 	orr.w	r2, r3, #32
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e023      	b.n	8002486 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	0c1b      	lsrs	r3, r3, #16
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b01      	cmp	r3, #1
 8002446:	d10d      	bne.n	8002464 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	43da      	mvns	r2, r3
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	4013      	ands	r3, r2
 8002454:	b29b      	uxth	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	bf0c      	ite	eq
 800245a:	2301      	moveq	r3, #1
 800245c:	2300      	movne	r3, #0
 800245e:	b2db      	uxtb	r3, r3
 8002460:	461a      	mov	r2, r3
 8002462:	e00c      	b.n	800247e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	43da      	mvns	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	4013      	ands	r3, r2
 8002470:	b29b      	uxth	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	bf0c      	ite	eq
 8002476:	2301      	moveq	r3, #1
 8002478:	2300      	movne	r3, #0
 800247a:	b2db      	uxtb	r3, r3
 800247c:	461a      	mov	r2, r3
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	429a      	cmp	r2, r3
 8002482:	d0b6      	beq.n	80023f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b084      	sub	sp, #16
 8002492:	af00      	add	r7, sp, #0
 8002494:	60f8      	str	r0, [r7, #12]
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	607a      	str	r2, [r7, #4]
 800249a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800249c:	e051      	b.n	8002542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ac:	d123      	bne.n	80024f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2220      	movs	r2, #32
 80024d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f043 0204 	orr.w	r2, r3, #4
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e046      	b.n	8002584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fc:	d021      	beq.n	8002542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024fe:	f7ff f8a7 	bl	8001650 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	429a      	cmp	r2, r3
 800250c:	d302      	bcc.n	8002514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d116      	bne.n	8002542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2220      	movs	r2, #32
 800251e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	f043 0220 	orr.w	r2, r3, #32
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e020      	b.n	8002584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	0c1b      	lsrs	r3, r3, #16
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b01      	cmp	r3, #1
 800254a:	d10c      	bne.n	8002566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	43da      	mvns	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	4013      	ands	r3, r2
 8002558:	b29b      	uxth	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	bf14      	ite	ne
 800255e:	2301      	movne	r3, #1
 8002560:	2300      	moveq	r3, #0
 8002562:	b2db      	uxtb	r3, r3
 8002564:	e00b      	b.n	800257e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	43da      	mvns	r2, r3
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	4013      	ands	r3, r2
 8002572:	b29b      	uxth	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	bf14      	ite	ne
 8002578:	2301      	movne	r3, #1
 800257a:	2300      	moveq	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d18d      	bne.n	800249e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002598:	e02d      	b.n	80025f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 f88d 	bl	80026ba <I2C_IsAcknowledgeFailed>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e02d      	b.n	8002606 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b0:	d021      	beq.n	80025f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025b2:	f7ff f84d 	bl	8001650 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d302      	bcc.n	80025c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d116      	bne.n	80025f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2220      	movs	r2, #32
 80025d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f043 0220 	orr.w	r2, r3, #32
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e007      	b.n	8002606 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002600:	2b80      	cmp	r3, #128	; 0x80
 8002602:	d1ca      	bne.n	800259a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b084      	sub	sp, #16
 8002612:	af00      	add	r7, sp, #0
 8002614:	60f8      	str	r0, [r7, #12]
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800261a:	e042      	b.n	80026a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	f003 0310 	and.w	r3, r3, #16
 8002626:	2b10      	cmp	r3, #16
 8002628:	d119      	bne.n	800265e <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f06f 0210 	mvn.w	r2, #16
 8002632:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2220      	movs	r2, #32
 800263e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e029      	b.n	80026b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800265e:	f7fe fff7 	bl	8001650 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	429a      	cmp	r2, r3
 800266c:	d302      	bcc.n	8002674 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d116      	bne.n	80026a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2220      	movs	r2, #32
 800267e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f043 0220 	orr.w	r2, r3, #32
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e007      	b.n	80026b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ac:	2b40      	cmp	r3, #64	; 0x40
 80026ae:	d1b5      	bne.n	800261c <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026d0:	d11b      	bne.n	800270a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026da:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2220      	movs	r2, #32
 80026e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	f043 0204 	orr.w	r2, r3, #4
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e264      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d075      	beq.n	8002822 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002736:	4ba3      	ldr	r3, [pc, #652]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 030c 	and.w	r3, r3, #12
 800273e:	2b04      	cmp	r3, #4
 8002740:	d00c      	beq.n	800275c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002742:	4ba0      	ldr	r3, [pc, #640]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800274a:	2b08      	cmp	r3, #8
 800274c:	d112      	bne.n	8002774 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800274e:	4b9d      	ldr	r3, [pc, #628]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002756:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800275a:	d10b      	bne.n	8002774 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800275c:	4b99      	ldr	r3, [pc, #612]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d05b      	beq.n	8002820 <HAL_RCC_OscConfig+0x108>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d157      	bne.n	8002820 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e23f      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800277c:	d106      	bne.n	800278c <HAL_RCC_OscConfig+0x74>
 800277e:	4b91      	ldr	r3, [pc, #580]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a90      	ldr	r2, [pc, #576]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 8002784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	e01d      	b.n	80027c8 <HAL_RCC_OscConfig+0xb0>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002794:	d10c      	bne.n	80027b0 <HAL_RCC_OscConfig+0x98>
 8002796:	4b8b      	ldr	r3, [pc, #556]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a8a      	ldr	r2, [pc, #552]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 800279c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027a0:	6013      	str	r3, [r2, #0]
 80027a2:	4b88      	ldr	r3, [pc, #544]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a87      	ldr	r2, [pc, #540]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 80027a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	e00b      	b.n	80027c8 <HAL_RCC_OscConfig+0xb0>
 80027b0:	4b84      	ldr	r3, [pc, #528]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a83      	ldr	r2, [pc, #524]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 80027b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ba:	6013      	str	r3, [r2, #0]
 80027bc:	4b81      	ldr	r3, [pc, #516]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a80      	ldr	r2, [pc, #512]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 80027c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d013      	beq.n	80027f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d0:	f7fe ff3e 	bl	8001650 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d8:	f7fe ff3a 	bl	8001650 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b64      	cmp	r3, #100	; 0x64
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e204      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ea:	4b76      	ldr	r3, [pc, #472]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0f0      	beq.n	80027d8 <HAL_RCC_OscConfig+0xc0>
 80027f6:	e014      	b.n	8002822 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f8:	f7fe ff2a 	bl	8001650 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002800:	f7fe ff26 	bl	8001650 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b64      	cmp	r3, #100	; 0x64
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e1f0      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002812:	4b6c      	ldr	r3, [pc, #432]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f0      	bne.n	8002800 <HAL_RCC_OscConfig+0xe8>
 800281e:	e000      	b.n	8002822 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d063      	beq.n	80028f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800282e:	4b65      	ldr	r3, [pc, #404]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 030c 	and.w	r3, r3, #12
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00b      	beq.n	8002852 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800283a:	4b62      	ldr	r3, [pc, #392]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002842:	2b08      	cmp	r3, #8
 8002844:	d11c      	bne.n	8002880 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002846:	4b5f      	ldr	r3, [pc, #380]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d116      	bne.n	8002880 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002852:	4b5c      	ldr	r3, [pc, #368]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d005      	beq.n	800286a <HAL_RCC_OscConfig+0x152>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d001      	beq.n	800286a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e1c4      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800286a:	4b56      	ldr	r3, [pc, #344]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	4952      	ldr	r1, [pc, #328]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 800287a:	4313      	orrs	r3, r2
 800287c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800287e:	e03a      	b.n	80028f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d020      	beq.n	80028ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002888:	4b4f      	ldr	r3, [pc, #316]	; (80029c8 <HAL_RCC_OscConfig+0x2b0>)
 800288a:	2201      	movs	r2, #1
 800288c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288e:	f7fe fedf 	bl	8001650 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002896:	f7fe fedb 	bl	8001650 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e1a5      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a8:	4b46      	ldr	r3, [pc, #280]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0f0      	beq.n	8002896 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b4:	4b43      	ldr	r3, [pc, #268]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	4940      	ldr	r1, [pc, #256]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	600b      	str	r3, [r1, #0]
 80028c8:	e015      	b.n	80028f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ca:	4b3f      	ldr	r3, [pc, #252]	; (80029c8 <HAL_RCC_OscConfig+0x2b0>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d0:	f7fe febe 	bl	8001650 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028d8:	f7fe feba 	bl	8001650 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e184      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ea:	4b36      	ldr	r3, [pc, #216]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f0      	bne.n	80028d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d030      	beq.n	8002964 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d016      	beq.n	8002938 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800290a:	4b30      	ldr	r3, [pc, #192]	; (80029cc <HAL_RCC_OscConfig+0x2b4>)
 800290c:	2201      	movs	r2, #1
 800290e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002910:	f7fe fe9e 	bl	8001650 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002918:	f7fe fe9a 	bl	8001650 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e164      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800292a:	4b26      	ldr	r3, [pc, #152]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 800292c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0f0      	beq.n	8002918 <HAL_RCC_OscConfig+0x200>
 8002936:	e015      	b.n	8002964 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002938:	4b24      	ldr	r3, [pc, #144]	; (80029cc <HAL_RCC_OscConfig+0x2b4>)
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800293e:	f7fe fe87 	bl	8001650 <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002946:	f7fe fe83 	bl	8001650 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e14d      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002958:	4b1a      	ldr	r3, [pc, #104]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 800295a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1f0      	bne.n	8002946 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 80a0 	beq.w	8002ab2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002972:	2300      	movs	r3, #0
 8002974:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002976:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10f      	bne.n	80029a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	60bb      	str	r3, [r7, #8]
 8002986:	4b0f      	ldr	r3, [pc, #60]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	4a0e      	ldr	r2, [pc, #56]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 800298c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002990:	6413      	str	r3, [r2, #64]	; 0x40
 8002992:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <HAL_RCC_OscConfig+0x2ac>)
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299a:	60bb      	str	r3, [r7, #8]
 800299c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800299e:	2301      	movs	r3, #1
 80029a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a2:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <HAL_RCC_OscConfig+0x2b8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d121      	bne.n	80029f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ae:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <HAL_RCC_OscConfig+0x2b8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a07      	ldr	r2, [pc, #28]	; (80029d0 <HAL_RCC_OscConfig+0x2b8>)
 80029b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ba:	f7fe fe49 	bl	8001650 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c0:	e011      	b.n	80029e6 <HAL_RCC_OscConfig+0x2ce>
 80029c2:	bf00      	nop
 80029c4:	40023800 	.word	0x40023800
 80029c8:	42470000 	.word	0x42470000
 80029cc:	42470e80 	.word	0x42470e80
 80029d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d4:	f7fe fe3c 	bl	8001650 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e106      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e6:	4b85      	ldr	r3, [pc, #532]	; (8002bfc <HAL_RCC_OscConfig+0x4e4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0f0      	beq.n	80029d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d106      	bne.n	8002a08 <HAL_RCC_OscConfig+0x2f0>
 80029fa:	4b81      	ldr	r3, [pc, #516]	; (8002c00 <HAL_RCC_OscConfig+0x4e8>)
 80029fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fe:	4a80      	ldr	r2, [pc, #512]	; (8002c00 <HAL_RCC_OscConfig+0x4e8>)
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	6713      	str	r3, [r2, #112]	; 0x70
 8002a06:	e01c      	b.n	8002a42 <HAL_RCC_OscConfig+0x32a>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	2b05      	cmp	r3, #5
 8002a0e:	d10c      	bne.n	8002a2a <HAL_RCC_OscConfig+0x312>
 8002a10:	4b7b      	ldr	r3, [pc, #492]	; (8002c00 <HAL_RCC_OscConfig+0x4e8>)
 8002a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a14:	4a7a      	ldr	r2, [pc, #488]	; (8002c00 <HAL_RCC_OscConfig+0x4e8>)
 8002a16:	f043 0304 	orr.w	r3, r3, #4
 8002a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a1c:	4b78      	ldr	r3, [pc, #480]	; (8002c00 <HAL_RCC_OscConfig+0x4e8>)
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a20:	4a77      	ldr	r2, [pc, #476]	; (8002c00 <HAL_RCC_OscConfig+0x4e8>)
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	6713      	str	r3, [r2, #112]	; 0x70
 8002a28:	e00b      	b.n	8002a42 <HAL_RCC_OscConfig+0x32a>
 8002a2a:	4b75      	ldr	r3, [pc, #468]	; (8002c00 <HAL_RCC_OscConfig+0x4e8>)
 8002a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2e:	4a74      	ldr	r2, [pc, #464]	; (8002c00 <HAL_RCC_OscConfig+0x4e8>)
 8002a30:	f023 0301 	bic.w	r3, r3, #1
 8002a34:	6713      	str	r3, [r2, #112]	; 0x70
 8002a36:	4b72      	ldr	r3, [pc, #456]	; (8002c00 <HAL_RCC_OscConfig+0x4e8>)
 8002a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3a:	4a71      	ldr	r2, [pc, #452]	; (8002c00 <HAL_RCC_OscConfig+0x4e8>)
 8002a3c:	f023 0304 	bic.w	r3, r3, #4
 8002a40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d015      	beq.n	8002a76 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4a:	f7fe fe01 	bl	8001650 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a50:	e00a      	b.n	8002a68 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a52:	f7fe fdfd 	bl	8001650 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e0c5      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a68:	4b65      	ldr	r3, [pc, #404]	; (8002c00 <HAL_RCC_OscConfig+0x4e8>)
 8002a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0ee      	beq.n	8002a52 <HAL_RCC_OscConfig+0x33a>
 8002a74:	e014      	b.n	8002aa0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a76:	f7fe fdeb 	bl	8001650 <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a7c:	e00a      	b.n	8002a94 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a7e:	f7fe fde7 	bl	8001650 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e0af      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a94:	4b5a      	ldr	r3, [pc, #360]	; (8002c00 <HAL_RCC_OscConfig+0x4e8>)
 8002a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1ee      	bne.n	8002a7e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aa0:	7dfb      	ldrb	r3, [r7, #23]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d105      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aa6:	4b56      	ldr	r3, [pc, #344]	; (8002c00 <HAL_RCC_OscConfig+0x4e8>)
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	4a55      	ldr	r2, [pc, #340]	; (8002c00 <HAL_RCC_OscConfig+0x4e8>)
 8002aac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 809b 	beq.w	8002bf2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002abc:	4b50      	ldr	r3, [pc, #320]	; (8002c00 <HAL_RCC_OscConfig+0x4e8>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 030c 	and.w	r3, r3, #12
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d05c      	beq.n	8002b82 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d141      	bne.n	8002b54 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad0:	4b4c      	ldr	r3, [pc, #304]	; (8002c04 <HAL_RCC_OscConfig+0x4ec>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad6:	f7fe fdbb 	bl	8001650 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ade:	f7fe fdb7 	bl	8001650 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e081      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af0:	4b43      	ldr	r3, [pc, #268]	; (8002c00 <HAL_RCC_OscConfig+0x4e8>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1f0      	bne.n	8002ade <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69da      	ldr	r2, [r3, #28]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	431a      	orrs	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0a:	019b      	lsls	r3, r3, #6
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b12:	085b      	lsrs	r3, r3, #1
 8002b14:	3b01      	subs	r3, #1
 8002b16:	041b      	lsls	r3, r3, #16
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1e:	061b      	lsls	r3, r3, #24
 8002b20:	4937      	ldr	r1, [pc, #220]	; (8002c00 <HAL_RCC_OscConfig+0x4e8>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b26:	4b37      	ldr	r3, [pc, #220]	; (8002c04 <HAL_RCC_OscConfig+0x4ec>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2c:	f7fe fd90 	bl	8001650 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b34:	f7fe fd8c 	bl	8001650 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e056      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b46:	4b2e      	ldr	r3, [pc, #184]	; (8002c00 <HAL_RCC_OscConfig+0x4e8>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCC_OscConfig+0x41c>
 8002b52:	e04e      	b.n	8002bf2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b54:	4b2b      	ldr	r3, [pc, #172]	; (8002c04 <HAL_RCC_OscConfig+0x4ec>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5a:	f7fe fd79 	bl	8001650 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b62:	f7fe fd75 	bl	8001650 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e03f      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b74:	4b22      	ldr	r3, [pc, #136]	; (8002c00 <HAL_RCC_OscConfig+0x4e8>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1f0      	bne.n	8002b62 <HAL_RCC_OscConfig+0x44a>
 8002b80:	e037      	b.n	8002bf2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d101      	bne.n	8002b8e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e032      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b8e:	4b1c      	ldr	r3, [pc, #112]	; (8002c00 <HAL_RCC_OscConfig+0x4e8>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d028      	beq.n	8002bee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d121      	bne.n	8002bee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d11a      	bne.n	8002bee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bc4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d111      	bne.n	8002bee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd4:	085b      	lsrs	r3, r3, #1
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d107      	bne.n	8002bee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d001      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40007000 	.word	0x40007000
 8002c00:	40023800 	.word	0x40023800
 8002c04:	42470060 	.word	0x42470060

08002c08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0cc      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c1c:	4b68      	ldr	r3, [pc, #416]	; (8002dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d90c      	bls.n	8002c44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2a:	4b65      	ldr	r3, [pc, #404]	; (8002dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c32:	4b63      	ldr	r3, [pc, #396]	; (8002dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d001      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e0b8      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d020      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d005      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c5c:	4b59      	ldr	r3, [pc, #356]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	4a58      	ldr	r2, [pc, #352]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c74:	4b53      	ldr	r3, [pc, #332]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	4a52      	ldr	r2, [pc, #328]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c80:	4b50      	ldr	r3, [pc, #320]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	494d      	ldr	r1, [pc, #308]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d044      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d107      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca6:	4b47      	ldr	r3, [pc, #284]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d119      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e07f      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d003      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	d107      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc6:	4b3f      	ldr	r3, [pc, #252]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d109      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e06f      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd6:	4b3b      	ldr	r3, [pc, #236]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e067      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ce6:	4b37      	ldr	r3, [pc, #220]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f023 0203 	bic.w	r2, r3, #3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	4934      	ldr	r1, [pc, #208]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cf8:	f7fe fcaa 	bl	8001650 <HAL_GetTick>
 8002cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cfe:	e00a      	b.n	8002d16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d00:	f7fe fca6 	bl	8001650 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e04f      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d16:	4b2b      	ldr	r3, [pc, #172]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 020c 	and.w	r2, r3, #12
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d1eb      	bne.n	8002d00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d28:	4b25      	ldr	r3, [pc, #148]	; (8002dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d20c      	bcs.n	8002d50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d36:	4b22      	ldr	r3, [pc, #136]	; (8002dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3e:	4b20      	ldr	r3, [pc, #128]	; (8002dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d001      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e032      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d008      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d5c:	4b19      	ldr	r3, [pc, #100]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	4916      	ldr	r1, [pc, #88]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0308 	and.w	r3, r3, #8
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d009      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d7a:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	490e      	ldr	r1, [pc, #56]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d8e:	f000 f821 	bl	8002dd4 <HAL_RCC_GetSysClockFreq>
 8002d92:	4602      	mov	r2, r0
 8002d94:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	091b      	lsrs	r3, r3, #4
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	490a      	ldr	r1, [pc, #40]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002da0:	5ccb      	ldrb	r3, [r1, r3]
 8002da2:	fa22 f303 	lsr.w	r3, r2, r3
 8002da6:	4a09      	ldr	r2, [pc, #36]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002daa:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fe fc0a 	bl	80015c8 <HAL_InitTick>

  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40023c00 	.word	0x40023c00
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	080063a8 	.word	0x080063a8
 8002dcc:	20000000 	.word	0x20000000
 8002dd0:	20000004 	.word	0x20000004

08002dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dd4:	b5b0      	push	{r4, r5, r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002dda:	2100      	movs	r1, #0
 8002ddc:	6079      	str	r1, [r7, #4]
 8002dde:	2100      	movs	r1, #0
 8002de0:	60f9      	str	r1, [r7, #12]
 8002de2:	2100      	movs	r1, #0
 8002de4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002de6:	2100      	movs	r1, #0
 8002de8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dea:	4952      	ldr	r1, [pc, #328]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x160>)
 8002dec:	6889      	ldr	r1, [r1, #8]
 8002dee:	f001 010c 	and.w	r1, r1, #12
 8002df2:	2908      	cmp	r1, #8
 8002df4:	d00d      	beq.n	8002e12 <HAL_RCC_GetSysClockFreq+0x3e>
 8002df6:	2908      	cmp	r1, #8
 8002df8:	f200 8094 	bhi.w	8002f24 <HAL_RCC_GetSysClockFreq+0x150>
 8002dfc:	2900      	cmp	r1, #0
 8002dfe:	d002      	beq.n	8002e06 <HAL_RCC_GetSysClockFreq+0x32>
 8002e00:	2904      	cmp	r1, #4
 8002e02:	d003      	beq.n	8002e0c <HAL_RCC_GetSysClockFreq+0x38>
 8002e04:	e08e      	b.n	8002f24 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e06:	4b4c      	ldr	r3, [pc, #304]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x164>)
 8002e08:	60bb      	str	r3, [r7, #8]
       break;
 8002e0a:	e08e      	b.n	8002f2a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e0c:	4b4b      	ldr	r3, [pc, #300]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x168>)
 8002e0e:	60bb      	str	r3, [r7, #8]
      break;
 8002e10:	e08b      	b.n	8002f2a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e12:	4948      	ldr	r1, [pc, #288]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e14:	6849      	ldr	r1, [r1, #4]
 8002e16:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002e1a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e1c:	4945      	ldr	r1, [pc, #276]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e1e:	6849      	ldr	r1, [r1, #4]
 8002e20:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002e24:	2900      	cmp	r1, #0
 8002e26:	d024      	beq.n	8002e72 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e28:	4942      	ldr	r1, [pc, #264]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e2a:	6849      	ldr	r1, [r1, #4]
 8002e2c:	0989      	lsrs	r1, r1, #6
 8002e2e:	4608      	mov	r0, r1
 8002e30:	f04f 0100 	mov.w	r1, #0
 8002e34:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002e38:	f04f 0500 	mov.w	r5, #0
 8002e3c:	ea00 0204 	and.w	r2, r0, r4
 8002e40:	ea01 0305 	and.w	r3, r1, r5
 8002e44:	493d      	ldr	r1, [pc, #244]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x168>)
 8002e46:	fb01 f003 	mul.w	r0, r1, r3
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	fb01 f102 	mul.w	r1, r1, r2
 8002e50:	1844      	adds	r4, r0, r1
 8002e52:	493a      	ldr	r1, [pc, #232]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x168>)
 8002e54:	fba2 0101 	umull	r0, r1, r2, r1
 8002e58:	1863      	adds	r3, r4, r1
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	f04f 0300 	mov.w	r3, #0
 8002e64:	f7fd fef8 	bl	8000c58 <__aeabi_uldivmod>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	e04a      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e72:	4b30      	ldr	r3, [pc, #192]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	099b      	lsrs	r3, r3, #6
 8002e78:	461a      	mov	r2, r3
 8002e7a:	f04f 0300 	mov.w	r3, #0
 8002e7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e82:	f04f 0100 	mov.w	r1, #0
 8002e86:	ea02 0400 	and.w	r4, r2, r0
 8002e8a:	ea03 0501 	and.w	r5, r3, r1
 8002e8e:	4620      	mov	r0, r4
 8002e90:	4629      	mov	r1, r5
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	f04f 0300 	mov.w	r3, #0
 8002e9a:	014b      	lsls	r3, r1, #5
 8002e9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ea0:	0142      	lsls	r2, r0, #5
 8002ea2:	4610      	mov	r0, r2
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	1b00      	subs	r0, r0, r4
 8002ea8:	eb61 0105 	sbc.w	r1, r1, r5
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	f04f 0300 	mov.w	r3, #0
 8002eb4:	018b      	lsls	r3, r1, #6
 8002eb6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002eba:	0182      	lsls	r2, r0, #6
 8002ebc:	1a12      	subs	r2, r2, r0
 8002ebe:	eb63 0301 	sbc.w	r3, r3, r1
 8002ec2:	f04f 0000 	mov.w	r0, #0
 8002ec6:	f04f 0100 	mov.w	r1, #0
 8002eca:	00d9      	lsls	r1, r3, #3
 8002ecc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ed0:	00d0      	lsls	r0, r2, #3
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	1912      	adds	r2, r2, r4
 8002ed8:	eb45 0303 	adc.w	r3, r5, r3
 8002edc:	f04f 0000 	mov.w	r0, #0
 8002ee0:	f04f 0100 	mov.w	r1, #0
 8002ee4:	0299      	lsls	r1, r3, #10
 8002ee6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002eea:	0290      	lsls	r0, r2, #10
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4610      	mov	r0, r2
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f04f 0300 	mov.w	r3, #0
 8002efc:	f7fd feac 	bl	8000c58 <__aeabi_uldivmod>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4613      	mov	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f08:	4b0a      	ldr	r3, [pc, #40]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	0c1b      	lsrs	r3, r3, #16
 8002f0e:	f003 0303 	and.w	r3, r3, #3
 8002f12:	3301      	adds	r3, #1
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f20:	60bb      	str	r3, [r7, #8]
      break;
 8002f22:	e002      	b.n	8002f2a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f24:	4b04      	ldr	r3, [pc, #16]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x164>)
 8002f26:	60bb      	str	r3, [r7, #8]
      break;
 8002f28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f2a:	68bb      	ldr	r3, [r7, #8]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bdb0      	pop	{r4, r5, r7, pc}
 8002f34:	40023800 	.word	0x40023800
 8002f38:	00f42400 	.word	0x00f42400
 8002f3c:	017d7840 	.word	0x017d7840

08002f40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f44:	4b03      	ldr	r3, [pc, #12]	; (8002f54 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f46:	681b      	ldr	r3, [r3, #0]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	20000000 	.word	0x20000000

08002f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f5c:	f7ff fff0 	bl	8002f40 <HAL_RCC_GetHCLKFreq>
 8002f60:	4602      	mov	r2, r0
 8002f62:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	0a9b      	lsrs	r3, r3, #10
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	4903      	ldr	r1, [pc, #12]	; (8002f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f6e:	5ccb      	ldrb	r3, [r1, r3]
 8002f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	080063b8 	.word	0x080063b8

08002f80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f84:	f7ff ffdc 	bl	8002f40 <HAL_RCC_GetHCLKFreq>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	4b05      	ldr	r3, [pc, #20]	; (8002fa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	0b5b      	lsrs	r3, r3, #13
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	4903      	ldr	r1, [pc, #12]	; (8002fa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f96:	5ccb      	ldrb	r3, [r1, r3]
 8002f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	080063b8 	.word	0x080063b8

08002fa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e03f      	b.n	800303a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7fe f964 	bl	800129c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2224      	movs	r2, #36	; 0x24
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f929 	bl	8003244 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	691a      	ldr	r2, [r3, #16]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003000:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695a      	ldr	r2, [r3, #20]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003010:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68da      	ldr	r2, [r3, #12]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003020:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2220      	movs	r2, #32
 8003034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b08a      	sub	sp, #40	; 0x28
 8003046:	af02      	add	r7, sp, #8
 8003048:	60f8      	str	r0, [r7, #12]
 800304a:	60b9      	str	r1, [r7, #8]
 800304c:	603b      	str	r3, [r7, #0]
 800304e:	4613      	mov	r3, r2
 8003050:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003052:	2300      	movs	r3, #0
 8003054:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b20      	cmp	r3, #32
 8003060:	d17c      	bne.n	800315c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d002      	beq.n	800306e <HAL_UART_Transmit+0x2c>
 8003068:	88fb      	ldrh	r3, [r7, #6]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e075      	b.n	800315e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <HAL_UART_Transmit+0x3e>
 800307c:	2302      	movs	r3, #2
 800307e:	e06e      	b.n	800315e <HAL_UART_Transmit+0x11c>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2221      	movs	r2, #33	; 0x21
 8003092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003096:	f7fe fadb 	bl	8001650 <HAL_GetTick>
 800309a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	88fa      	ldrh	r2, [r7, #6]
 80030a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	88fa      	ldrh	r2, [r7, #6]
 80030a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030b0:	d108      	bne.n	80030c4 <HAL_UART_Transmit+0x82>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d104      	bne.n	80030c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80030ba:	2300      	movs	r3, #0
 80030bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	61bb      	str	r3, [r7, #24]
 80030c2:	e003      	b.n	80030cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030c8:	2300      	movs	r3, #0
 80030ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80030d4:	e02a      	b.n	800312c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2200      	movs	r2, #0
 80030de:	2180      	movs	r1, #128	; 0x80
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 f840 	bl	8003166 <UART_WaitOnFlagUntilTimeout>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e036      	b.n	800315e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10b      	bne.n	800310e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003104:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	3302      	adds	r3, #2
 800310a:	61bb      	str	r3, [r7, #24]
 800310c:	e007      	b.n	800311e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	781a      	ldrb	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	3301      	adds	r3, #1
 800311c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003122:	b29b      	uxth	r3, r3
 8003124:	3b01      	subs	r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003130:	b29b      	uxth	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1cf      	bne.n	80030d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2200      	movs	r2, #0
 800313e:	2140      	movs	r1, #64	; 0x40
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f000 f810 	bl	8003166 <UART_WaitOnFlagUntilTimeout>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e006      	b.n	800315e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003158:	2300      	movs	r3, #0
 800315a:	e000      	b.n	800315e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800315c:	2302      	movs	r3, #2
  }
}
 800315e:	4618      	mov	r0, r3
 8003160:	3720      	adds	r7, #32
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b090      	sub	sp, #64	; 0x40
 800316a:	af00      	add	r7, sp, #0
 800316c:	60f8      	str	r0, [r7, #12]
 800316e:	60b9      	str	r1, [r7, #8]
 8003170:	603b      	str	r3, [r7, #0]
 8003172:	4613      	mov	r3, r2
 8003174:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003176:	e050      	b.n	800321a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003178:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800317a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317e:	d04c      	beq.n	800321a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003182:	2b00      	cmp	r3, #0
 8003184:	d007      	beq.n	8003196 <UART_WaitOnFlagUntilTimeout+0x30>
 8003186:	f7fe fa63 	bl	8001650 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003192:	429a      	cmp	r2, r3
 8003194:	d241      	bcs.n	800321a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	330c      	adds	r3, #12
 800319c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a0:	e853 3f00 	ldrex	r3, [r3]
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	330c      	adds	r3, #12
 80031b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031b6:	637a      	str	r2, [r7, #52]	; 0x34
 80031b8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031be:	e841 2300 	strex	r3, r2, [r1]
 80031c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80031c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1e5      	bne.n	8003196 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	3314      	adds	r3, #20
 80031d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	e853 3f00 	ldrex	r3, [r3]
 80031d8:	613b      	str	r3, [r7, #16]
   return(result);
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	f023 0301 	bic.w	r3, r3, #1
 80031e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	3314      	adds	r3, #20
 80031e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031ea:	623a      	str	r2, [r7, #32]
 80031ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ee:	69f9      	ldr	r1, [r7, #28]
 80031f0:	6a3a      	ldr	r2, [r7, #32]
 80031f2:	e841 2300 	strex	r3, r2, [r1]
 80031f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1e5      	bne.n	80031ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2220      	movs	r2, #32
 8003202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e00f      	b.n	800323a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	4013      	ands	r3, r2
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	429a      	cmp	r2, r3
 8003228:	bf0c      	ite	eq
 800322a:	2301      	moveq	r3, #1
 800322c:	2300      	movne	r3, #0
 800322e:	b2db      	uxtb	r3, r3
 8003230:	461a      	mov	r2, r3
 8003232:	79fb      	ldrb	r3, [r7, #7]
 8003234:	429a      	cmp	r2, r3
 8003236:	d09f      	beq.n	8003178 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3740      	adds	r7, #64	; 0x40
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003248:	b09f      	sub	sp, #124	; 0x7c
 800324a:	af00      	add	r7, sp, #0
 800324c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800324e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800325a:	68d9      	ldr	r1, [r3, #12]
 800325c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	ea40 0301 	orr.w	r3, r0, r1
 8003264:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003268:	689a      	ldr	r2, [r3, #8]
 800326a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	431a      	orrs	r2, r3
 8003270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	431a      	orrs	r2, r3
 8003276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	4313      	orrs	r3, r2
 800327c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800327e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003288:	f021 010c 	bic.w	r1, r1, #12
 800328c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003292:	430b      	orrs	r3, r1
 8003294:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80032a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a2:	6999      	ldr	r1, [r3, #24]
 80032a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	ea40 0301 	orr.w	r3, r0, r1
 80032ac:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	4bc5      	ldr	r3, [pc, #788]	; (80035c8 <UART_SetConfig+0x384>)
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d004      	beq.n	80032c2 <UART_SetConfig+0x7e>
 80032b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	4bc3      	ldr	r3, [pc, #780]	; (80035cc <UART_SetConfig+0x388>)
 80032be:	429a      	cmp	r2, r3
 80032c0:	d103      	bne.n	80032ca <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032c2:	f7ff fe5d 	bl	8002f80 <HAL_RCC_GetPCLK2Freq>
 80032c6:	6778      	str	r0, [r7, #116]	; 0x74
 80032c8:	e002      	b.n	80032d0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032ca:	f7ff fe45 	bl	8002f58 <HAL_RCC_GetPCLK1Freq>
 80032ce:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032d8:	f040 80b6 	bne.w	8003448 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032de:	461c      	mov	r4, r3
 80032e0:	f04f 0500 	mov.w	r5, #0
 80032e4:	4622      	mov	r2, r4
 80032e6:	462b      	mov	r3, r5
 80032e8:	1891      	adds	r1, r2, r2
 80032ea:	6439      	str	r1, [r7, #64]	; 0x40
 80032ec:	415b      	adcs	r3, r3
 80032ee:	647b      	str	r3, [r7, #68]	; 0x44
 80032f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80032f4:	1912      	adds	r2, r2, r4
 80032f6:	eb45 0303 	adc.w	r3, r5, r3
 80032fa:	f04f 0000 	mov.w	r0, #0
 80032fe:	f04f 0100 	mov.w	r1, #0
 8003302:	00d9      	lsls	r1, r3, #3
 8003304:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003308:	00d0      	lsls	r0, r2, #3
 800330a:	4602      	mov	r2, r0
 800330c:	460b      	mov	r3, r1
 800330e:	1911      	adds	r1, r2, r4
 8003310:	6639      	str	r1, [r7, #96]	; 0x60
 8003312:	416b      	adcs	r3, r5
 8003314:	667b      	str	r3, [r7, #100]	; 0x64
 8003316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	461a      	mov	r2, r3
 800331c:	f04f 0300 	mov.w	r3, #0
 8003320:	1891      	adds	r1, r2, r2
 8003322:	63b9      	str	r1, [r7, #56]	; 0x38
 8003324:	415b      	adcs	r3, r3
 8003326:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003328:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800332c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003330:	f7fd fc92 	bl	8000c58 <__aeabi_uldivmod>
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	4ba5      	ldr	r3, [pc, #660]	; (80035d0 <UART_SetConfig+0x38c>)
 800333a:	fba3 2302 	umull	r2, r3, r3, r2
 800333e:	095b      	lsrs	r3, r3, #5
 8003340:	011e      	lsls	r6, r3, #4
 8003342:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003344:	461c      	mov	r4, r3
 8003346:	f04f 0500 	mov.w	r5, #0
 800334a:	4622      	mov	r2, r4
 800334c:	462b      	mov	r3, r5
 800334e:	1891      	adds	r1, r2, r2
 8003350:	6339      	str	r1, [r7, #48]	; 0x30
 8003352:	415b      	adcs	r3, r3
 8003354:	637b      	str	r3, [r7, #52]	; 0x34
 8003356:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800335a:	1912      	adds	r2, r2, r4
 800335c:	eb45 0303 	adc.w	r3, r5, r3
 8003360:	f04f 0000 	mov.w	r0, #0
 8003364:	f04f 0100 	mov.w	r1, #0
 8003368:	00d9      	lsls	r1, r3, #3
 800336a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800336e:	00d0      	lsls	r0, r2, #3
 8003370:	4602      	mov	r2, r0
 8003372:	460b      	mov	r3, r1
 8003374:	1911      	adds	r1, r2, r4
 8003376:	65b9      	str	r1, [r7, #88]	; 0x58
 8003378:	416b      	adcs	r3, r5
 800337a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800337c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	461a      	mov	r2, r3
 8003382:	f04f 0300 	mov.w	r3, #0
 8003386:	1891      	adds	r1, r2, r2
 8003388:	62b9      	str	r1, [r7, #40]	; 0x28
 800338a:	415b      	adcs	r3, r3
 800338c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800338e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003392:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003396:	f7fd fc5f 	bl	8000c58 <__aeabi_uldivmod>
 800339a:	4602      	mov	r2, r0
 800339c:	460b      	mov	r3, r1
 800339e:	4b8c      	ldr	r3, [pc, #560]	; (80035d0 <UART_SetConfig+0x38c>)
 80033a0:	fba3 1302 	umull	r1, r3, r3, r2
 80033a4:	095b      	lsrs	r3, r3, #5
 80033a6:	2164      	movs	r1, #100	; 0x64
 80033a8:	fb01 f303 	mul.w	r3, r1, r3
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	3332      	adds	r3, #50	; 0x32
 80033b2:	4a87      	ldr	r2, [pc, #540]	; (80035d0 <UART_SetConfig+0x38c>)
 80033b4:	fba2 2303 	umull	r2, r3, r2, r3
 80033b8:	095b      	lsrs	r3, r3, #5
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033c0:	441e      	add	r6, r3
 80033c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033c4:	4618      	mov	r0, r3
 80033c6:	f04f 0100 	mov.w	r1, #0
 80033ca:	4602      	mov	r2, r0
 80033cc:	460b      	mov	r3, r1
 80033ce:	1894      	adds	r4, r2, r2
 80033d0:	623c      	str	r4, [r7, #32]
 80033d2:	415b      	adcs	r3, r3
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24
 80033d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033da:	1812      	adds	r2, r2, r0
 80033dc:	eb41 0303 	adc.w	r3, r1, r3
 80033e0:	f04f 0400 	mov.w	r4, #0
 80033e4:	f04f 0500 	mov.w	r5, #0
 80033e8:	00dd      	lsls	r5, r3, #3
 80033ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80033ee:	00d4      	lsls	r4, r2, #3
 80033f0:	4622      	mov	r2, r4
 80033f2:	462b      	mov	r3, r5
 80033f4:	1814      	adds	r4, r2, r0
 80033f6:	653c      	str	r4, [r7, #80]	; 0x50
 80033f8:	414b      	adcs	r3, r1
 80033fa:	657b      	str	r3, [r7, #84]	; 0x54
 80033fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	461a      	mov	r2, r3
 8003402:	f04f 0300 	mov.w	r3, #0
 8003406:	1891      	adds	r1, r2, r2
 8003408:	61b9      	str	r1, [r7, #24]
 800340a:	415b      	adcs	r3, r3
 800340c:	61fb      	str	r3, [r7, #28]
 800340e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003412:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003416:	f7fd fc1f 	bl	8000c58 <__aeabi_uldivmod>
 800341a:	4602      	mov	r2, r0
 800341c:	460b      	mov	r3, r1
 800341e:	4b6c      	ldr	r3, [pc, #432]	; (80035d0 <UART_SetConfig+0x38c>)
 8003420:	fba3 1302 	umull	r1, r3, r3, r2
 8003424:	095b      	lsrs	r3, r3, #5
 8003426:	2164      	movs	r1, #100	; 0x64
 8003428:	fb01 f303 	mul.w	r3, r1, r3
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	3332      	adds	r3, #50	; 0x32
 8003432:	4a67      	ldr	r2, [pc, #412]	; (80035d0 <UART_SetConfig+0x38c>)
 8003434:	fba2 2303 	umull	r2, r3, r2, r3
 8003438:	095b      	lsrs	r3, r3, #5
 800343a:	f003 0207 	and.w	r2, r3, #7
 800343e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4432      	add	r2, r6
 8003444:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003446:	e0b9      	b.n	80035bc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003448:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800344a:	461c      	mov	r4, r3
 800344c:	f04f 0500 	mov.w	r5, #0
 8003450:	4622      	mov	r2, r4
 8003452:	462b      	mov	r3, r5
 8003454:	1891      	adds	r1, r2, r2
 8003456:	6139      	str	r1, [r7, #16]
 8003458:	415b      	adcs	r3, r3
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003460:	1912      	adds	r2, r2, r4
 8003462:	eb45 0303 	adc.w	r3, r5, r3
 8003466:	f04f 0000 	mov.w	r0, #0
 800346a:	f04f 0100 	mov.w	r1, #0
 800346e:	00d9      	lsls	r1, r3, #3
 8003470:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003474:	00d0      	lsls	r0, r2, #3
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	eb12 0804 	adds.w	r8, r2, r4
 800347e:	eb43 0905 	adc.w	r9, r3, r5
 8003482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	4618      	mov	r0, r3
 8003488:	f04f 0100 	mov.w	r1, #0
 800348c:	f04f 0200 	mov.w	r2, #0
 8003490:	f04f 0300 	mov.w	r3, #0
 8003494:	008b      	lsls	r3, r1, #2
 8003496:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800349a:	0082      	lsls	r2, r0, #2
 800349c:	4640      	mov	r0, r8
 800349e:	4649      	mov	r1, r9
 80034a0:	f7fd fbda 	bl	8000c58 <__aeabi_uldivmod>
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	4b49      	ldr	r3, [pc, #292]	; (80035d0 <UART_SetConfig+0x38c>)
 80034aa:	fba3 2302 	umull	r2, r3, r3, r2
 80034ae:	095b      	lsrs	r3, r3, #5
 80034b0:	011e      	lsls	r6, r3, #4
 80034b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034b4:	4618      	mov	r0, r3
 80034b6:	f04f 0100 	mov.w	r1, #0
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	1894      	adds	r4, r2, r2
 80034c0:	60bc      	str	r4, [r7, #8]
 80034c2:	415b      	adcs	r3, r3
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034ca:	1812      	adds	r2, r2, r0
 80034cc:	eb41 0303 	adc.w	r3, r1, r3
 80034d0:	f04f 0400 	mov.w	r4, #0
 80034d4:	f04f 0500 	mov.w	r5, #0
 80034d8:	00dd      	lsls	r5, r3, #3
 80034da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80034de:	00d4      	lsls	r4, r2, #3
 80034e0:	4622      	mov	r2, r4
 80034e2:	462b      	mov	r3, r5
 80034e4:	1814      	adds	r4, r2, r0
 80034e6:	64bc      	str	r4, [r7, #72]	; 0x48
 80034e8:	414b      	adcs	r3, r1
 80034ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f04f 0100 	mov.w	r1, #0
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	f04f 0300 	mov.w	r3, #0
 80034fe:	008b      	lsls	r3, r1, #2
 8003500:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003504:	0082      	lsls	r2, r0, #2
 8003506:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800350a:	f7fd fba5 	bl	8000c58 <__aeabi_uldivmod>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4b2f      	ldr	r3, [pc, #188]	; (80035d0 <UART_SetConfig+0x38c>)
 8003514:	fba3 1302 	umull	r1, r3, r3, r2
 8003518:	095b      	lsrs	r3, r3, #5
 800351a:	2164      	movs	r1, #100	; 0x64
 800351c:	fb01 f303 	mul.w	r3, r1, r3
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	3332      	adds	r3, #50	; 0x32
 8003526:	4a2a      	ldr	r2, [pc, #168]	; (80035d0 <UART_SetConfig+0x38c>)
 8003528:	fba2 2303 	umull	r2, r3, r2, r3
 800352c:	095b      	lsrs	r3, r3, #5
 800352e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003532:	441e      	add	r6, r3
 8003534:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003536:	4618      	mov	r0, r3
 8003538:	f04f 0100 	mov.w	r1, #0
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	1894      	adds	r4, r2, r2
 8003542:	603c      	str	r4, [r7, #0]
 8003544:	415b      	adcs	r3, r3
 8003546:	607b      	str	r3, [r7, #4]
 8003548:	e9d7 2300 	ldrd	r2, r3, [r7]
 800354c:	1812      	adds	r2, r2, r0
 800354e:	eb41 0303 	adc.w	r3, r1, r3
 8003552:	f04f 0400 	mov.w	r4, #0
 8003556:	f04f 0500 	mov.w	r5, #0
 800355a:	00dd      	lsls	r5, r3, #3
 800355c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003560:	00d4      	lsls	r4, r2, #3
 8003562:	4622      	mov	r2, r4
 8003564:	462b      	mov	r3, r5
 8003566:	eb12 0a00 	adds.w	sl, r2, r0
 800356a:	eb43 0b01 	adc.w	fp, r3, r1
 800356e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	4618      	mov	r0, r3
 8003574:	f04f 0100 	mov.w	r1, #0
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	008b      	lsls	r3, r1, #2
 8003582:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003586:	0082      	lsls	r2, r0, #2
 8003588:	4650      	mov	r0, sl
 800358a:	4659      	mov	r1, fp
 800358c:	f7fd fb64 	bl	8000c58 <__aeabi_uldivmod>
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	4b0e      	ldr	r3, [pc, #56]	; (80035d0 <UART_SetConfig+0x38c>)
 8003596:	fba3 1302 	umull	r1, r3, r3, r2
 800359a:	095b      	lsrs	r3, r3, #5
 800359c:	2164      	movs	r1, #100	; 0x64
 800359e:	fb01 f303 	mul.w	r3, r1, r3
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	3332      	adds	r3, #50	; 0x32
 80035a8:	4a09      	ldr	r2, [pc, #36]	; (80035d0 <UART_SetConfig+0x38c>)
 80035aa:	fba2 2303 	umull	r2, r3, r2, r3
 80035ae:	095b      	lsrs	r3, r3, #5
 80035b0:	f003 020f 	and.w	r2, r3, #15
 80035b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4432      	add	r2, r6
 80035ba:	609a      	str	r2, [r3, #8]
}
 80035bc:	bf00      	nop
 80035be:	377c      	adds	r7, #124	; 0x7c
 80035c0:	46bd      	mov	sp, r7
 80035c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035c6:	bf00      	nop
 80035c8:	40011000 	.word	0x40011000
 80035cc:	40011400 	.word	0x40011400
 80035d0:	51eb851f 	.word	0x51eb851f

080035d4 <__errno>:
 80035d4:	4b01      	ldr	r3, [pc, #4]	; (80035dc <__errno+0x8>)
 80035d6:	6818      	ldr	r0, [r3, #0]
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	2000000c 	.word	0x2000000c

080035e0 <__libc_init_array>:
 80035e0:	b570      	push	{r4, r5, r6, lr}
 80035e2:	4d0d      	ldr	r5, [pc, #52]	; (8003618 <__libc_init_array+0x38>)
 80035e4:	4c0d      	ldr	r4, [pc, #52]	; (800361c <__libc_init_array+0x3c>)
 80035e6:	1b64      	subs	r4, r4, r5
 80035e8:	10a4      	asrs	r4, r4, #2
 80035ea:	2600      	movs	r6, #0
 80035ec:	42a6      	cmp	r6, r4
 80035ee:	d109      	bne.n	8003604 <__libc_init_array+0x24>
 80035f0:	4d0b      	ldr	r5, [pc, #44]	; (8003620 <__libc_init_array+0x40>)
 80035f2:	4c0c      	ldr	r4, [pc, #48]	; (8003624 <__libc_init_array+0x44>)
 80035f4:	f002 feb6 	bl	8006364 <_init>
 80035f8:	1b64      	subs	r4, r4, r5
 80035fa:	10a4      	asrs	r4, r4, #2
 80035fc:	2600      	movs	r6, #0
 80035fe:	42a6      	cmp	r6, r4
 8003600:	d105      	bne.n	800360e <__libc_init_array+0x2e>
 8003602:	bd70      	pop	{r4, r5, r6, pc}
 8003604:	f855 3b04 	ldr.w	r3, [r5], #4
 8003608:	4798      	blx	r3
 800360a:	3601      	adds	r6, #1
 800360c:	e7ee      	b.n	80035ec <__libc_init_array+0xc>
 800360e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003612:	4798      	blx	r3
 8003614:	3601      	adds	r6, #1
 8003616:	e7f2      	b.n	80035fe <__libc_init_array+0x1e>
 8003618:	080067ac 	.word	0x080067ac
 800361c:	080067ac 	.word	0x080067ac
 8003620:	080067ac 	.word	0x080067ac
 8003624:	080067b0 	.word	0x080067b0

08003628 <memset>:
 8003628:	4402      	add	r2, r0
 800362a:	4603      	mov	r3, r0
 800362c:	4293      	cmp	r3, r2
 800362e:	d100      	bne.n	8003632 <memset+0xa>
 8003630:	4770      	bx	lr
 8003632:	f803 1b01 	strb.w	r1, [r3], #1
 8003636:	e7f9      	b.n	800362c <memset+0x4>

08003638 <__cvt>:
 8003638:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800363c:	ec55 4b10 	vmov	r4, r5, d0
 8003640:	2d00      	cmp	r5, #0
 8003642:	460e      	mov	r6, r1
 8003644:	4619      	mov	r1, r3
 8003646:	462b      	mov	r3, r5
 8003648:	bfbb      	ittet	lt
 800364a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800364e:	461d      	movlt	r5, r3
 8003650:	2300      	movge	r3, #0
 8003652:	232d      	movlt	r3, #45	; 0x2d
 8003654:	700b      	strb	r3, [r1, #0]
 8003656:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003658:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800365c:	4691      	mov	r9, r2
 800365e:	f023 0820 	bic.w	r8, r3, #32
 8003662:	bfbc      	itt	lt
 8003664:	4622      	movlt	r2, r4
 8003666:	4614      	movlt	r4, r2
 8003668:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800366c:	d005      	beq.n	800367a <__cvt+0x42>
 800366e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003672:	d100      	bne.n	8003676 <__cvt+0x3e>
 8003674:	3601      	adds	r6, #1
 8003676:	2102      	movs	r1, #2
 8003678:	e000      	b.n	800367c <__cvt+0x44>
 800367a:	2103      	movs	r1, #3
 800367c:	ab03      	add	r3, sp, #12
 800367e:	9301      	str	r3, [sp, #4]
 8003680:	ab02      	add	r3, sp, #8
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	ec45 4b10 	vmov	d0, r4, r5
 8003688:	4653      	mov	r3, sl
 800368a:	4632      	mov	r2, r6
 800368c:	f000 fcec 	bl	8004068 <_dtoa_r>
 8003690:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003694:	4607      	mov	r7, r0
 8003696:	d102      	bne.n	800369e <__cvt+0x66>
 8003698:	f019 0f01 	tst.w	r9, #1
 800369c:	d022      	beq.n	80036e4 <__cvt+0xac>
 800369e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80036a2:	eb07 0906 	add.w	r9, r7, r6
 80036a6:	d110      	bne.n	80036ca <__cvt+0x92>
 80036a8:	783b      	ldrb	r3, [r7, #0]
 80036aa:	2b30      	cmp	r3, #48	; 0x30
 80036ac:	d10a      	bne.n	80036c4 <__cvt+0x8c>
 80036ae:	2200      	movs	r2, #0
 80036b0:	2300      	movs	r3, #0
 80036b2:	4620      	mov	r0, r4
 80036b4:	4629      	mov	r1, r5
 80036b6:	f7fd fa0f 	bl	8000ad8 <__aeabi_dcmpeq>
 80036ba:	b918      	cbnz	r0, 80036c4 <__cvt+0x8c>
 80036bc:	f1c6 0601 	rsb	r6, r6, #1
 80036c0:	f8ca 6000 	str.w	r6, [sl]
 80036c4:	f8da 3000 	ldr.w	r3, [sl]
 80036c8:	4499      	add	r9, r3
 80036ca:	2200      	movs	r2, #0
 80036cc:	2300      	movs	r3, #0
 80036ce:	4620      	mov	r0, r4
 80036d0:	4629      	mov	r1, r5
 80036d2:	f7fd fa01 	bl	8000ad8 <__aeabi_dcmpeq>
 80036d6:	b108      	cbz	r0, 80036dc <__cvt+0xa4>
 80036d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80036dc:	2230      	movs	r2, #48	; 0x30
 80036de:	9b03      	ldr	r3, [sp, #12]
 80036e0:	454b      	cmp	r3, r9
 80036e2:	d307      	bcc.n	80036f4 <__cvt+0xbc>
 80036e4:	9b03      	ldr	r3, [sp, #12]
 80036e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80036e8:	1bdb      	subs	r3, r3, r7
 80036ea:	4638      	mov	r0, r7
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	b004      	add	sp, #16
 80036f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036f4:	1c59      	adds	r1, r3, #1
 80036f6:	9103      	str	r1, [sp, #12]
 80036f8:	701a      	strb	r2, [r3, #0]
 80036fa:	e7f0      	b.n	80036de <__cvt+0xa6>

080036fc <__exponent>:
 80036fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036fe:	4603      	mov	r3, r0
 8003700:	2900      	cmp	r1, #0
 8003702:	bfb8      	it	lt
 8003704:	4249      	neglt	r1, r1
 8003706:	f803 2b02 	strb.w	r2, [r3], #2
 800370a:	bfb4      	ite	lt
 800370c:	222d      	movlt	r2, #45	; 0x2d
 800370e:	222b      	movge	r2, #43	; 0x2b
 8003710:	2909      	cmp	r1, #9
 8003712:	7042      	strb	r2, [r0, #1]
 8003714:	dd2a      	ble.n	800376c <__exponent+0x70>
 8003716:	f10d 0407 	add.w	r4, sp, #7
 800371a:	46a4      	mov	ip, r4
 800371c:	270a      	movs	r7, #10
 800371e:	46a6      	mov	lr, r4
 8003720:	460a      	mov	r2, r1
 8003722:	fb91 f6f7 	sdiv	r6, r1, r7
 8003726:	fb07 1516 	mls	r5, r7, r6, r1
 800372a:	3530      	adds	r5, #48	; 0x30
 800372c:	2a63      	cmp	r2, #99	; 0x63
 800372e:	f104 34ff 	add.w	r4, r4, #4294967295
 8003732:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003736:	4631      	mov	r1, r6
 8003738:	dcf1      	bgt.n	800371e <__exponent+0x22>
 800373a:	3130      	adds	r1, #48	; 0x30
 800373c:	f1ae 0502 	sub.w	r5, lr, #2
 8003740:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003744:	1c44      	adds	r4, r0, #1
 8003746:	4629      	mov	r1, r5
 8003748:	4561      	cmp	r1, ip
 800374a:	d30a      	bcc.n	8003762 <__exponent+0x66>
 800374c:	f10d 0209 	add.w	r2, sp, #9
 8003750:	eba2 020e 	sub.w	r2, r2, lr
 8003754:	4565      	cmp	r5, ip
 8003756:	bf88      	it	hi
 8003758:	2200      	movhi	r2, #0
 800375a:	4413      	add	r3, r2
 800375c:	1a18      	subs	r0, r3, r0
 800375e:	b003      	add	sp, #12
 8003760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003762:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003766:	f804 2f01 	strb.w	r2, [r4, #1]!
 800376a:	e7ed      	b.n	8003748 <__exponent+0x4c>
 800376c:	2330      	movs	r3, #48	; 0x30
 800376e:	3130      	adds	r1, #48	; 0x30
 8003770:	7083      	strb	r3, [r0, #2]
 8003772:	70c1      	strb	r1, [r0, #3]
 8003774:	1d03      	adds	r3, r0, #4
 8003776:	e7f1      	b.n	800375c <__exponent+0x60>

08003778 <_printf_float>:
 8003778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800377c:	ed2d 8b02 	vpush	{d8}
 8003780:	b08d      	sub	sp, #52	; 0x34
 8003782:	460c      	mov	r4, r1
 8003784:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003788:	4616      	mov	r6, r2
 800378a:	461f      	mov	r7, r3
 800378c:	4605      	mov	r5, r0
 800378e:	f001 fa57 	bl	8004c40 <_localeconv_r>
 8003792:	f8d0 a000 	ldr.w	sl, [r0]
 8003796:	4650      	mov	r0, sl
 8003798:	f7fc fd22 	bl	80001e0 <strlen>
 800379c:	2300      	movs	r3, #0
 800379e:	930a      	str	r3, [sp, #40]	; 0x28
 80037a0:	6823      	ldr	r3, [r4, #0]
 80037a2:	9305      	str	r3, [sp, #20]
 80037a4:	f8d8 3000 	ldr.w	r3, [r8]
 80037a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80037ac:	3307      	adds	r3, #7
 80037ae:	f023 0307 	bic.w	r3, r3, #7
 80037b2:	f103 0208 	add.w	r2, r3, #8
 80037b6:	f8c8 2000 	str.w	r2, [r8]
 80037ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037be:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80037c2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80037c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80037ca:	9307      	str	r3, [sp, #28]
 80037cc:	f8cd 8018 	str.w	r8, [sp, #24]
 80037d0:	ee08 0a10 	vmov	s16, r0
 80037d4:	4b9f      	ldr	r3, [pc, #636]	; (8003a54 <_printf_float+0x2dc>)
 80037d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80037da:	f04f 32ff 	mov.w	r2, #4294967295
 80037de:	f7fd f9ad 	bl	8000b3c <__aeabi_dcmpun>
 80037e2:	bb88      	cbnz	r0, 8003848 <_printf_float+0xd0>
 80037e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80037e8:	4b9a      	ldr	r3, [pc, #616]	; (8003a54 <_printf_float+0x2dc>)
 80037ea:	f04f 32ff 	mov.w	r2, #4294967295
 80037ee:	f7fd f987 	bl	8000b00 <__aeabi_dcmple>
 80037f2:	bb48      	cbnz	r0, 8003848 <_printf_float+0xd0>
 80037f4:	2200      	movs	r2, #0
 80037f6:	2300      	movs	r3, #0
 80037f8:	4640      	mov	r0, r8
 80037fa:	4649      	mov	r1, r9
 80037fc:	f7fd f976 	bl	8000aec <__aeabi_dcmplt>
 8003800:	b110      	cbz	r0, 8003808 <_printf_float+0x90>
 8003802:	232d      	movs	r3, #45	; 0x2d
 8003804:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003808:	4b93      	ldr	r3, [pc, #588]	; (8003a58 <_printf_float+0x2e0>)
 800380a:	4894      	ldr	r0, [pc, #592]	; (8003a5c <_printf_float+0x2e4>)
 800380c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003810:	bf94      	ite	ls
 8003812:	4698      	movls	r8, r3
 8003814:	4680      	movhi	r8, r0
 8003816:	2303      	movs	r3, #3
 8003818:	6123      	str	r3, [r4, #16]
 800381a:	9b05      	ldr	r3, [sp, #20]
 800381c:	f023 0204 	bic.w	r2, r3, #4
 8003820:	6022      	str	r2, [r4, #0]
 8003822:	f04f 0900 	mov.w	r9, #0
 8003826:	9700      	str	r7, [sp, #0]
 8003828:	4633      	mov	r3, r6
 800382a:	aa0b      	add	r2, sp, #44	; 0x2c
 800382c:	4621      	mov	r1, r4
 800382e:	4628      	mov	r0, r5
 8003830:	f000 f9d8 	bl	8003be4 <_printf_common>
 8003834:	3001      	adds	r0, #1
 8003836:	f040 8090 	bne.w	800395a <_printf_float+0x1e2>
 800383a:	f04f 30ff 	mov.w	r0, #4294967295
 800383e:	b00d      	add	sp, #52	; 0x34
 8003840:	ecbd 8b02 	vpop	{d8}
 8003844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003848:	4642      	mov	r2, r8
 800384a:	464b      	mov	r3, r9
 800384c:	4640      	mov	r0, r8
 800384e:	4649      	mov	r1, r9
 8003850:	f7fd f974 	bl	8000b3c <__aeabi_dcmpun>
 8003854:	b140      	cbz	r0, 8003868 <_printf_float+0xf0>
 8003856:	464b      	mov	r3, r9
 8003858:	2b00      	cmp	r3, #0
 800385a:	bfbc      	itt	lt
 800385c:	232d      	movlt	r3, #45	; 0x2d
 800385e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003862:	487f      	ldr	r0, [pc, #508]	; (8003a60 <_printf_float+0x2e8>)
 8003864:	4b7f      	ldr	r3, [pc, #508]	; (8003a64 <_printf_float+0x2ec>)
 8003866:	e7d1      	b.n	800380c <_printf_float+0x94>
 8003868:	6863      	ldr	r3, [r4, #4]
 800386a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800386e:	9206      	str	r2, [sp, #24]
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	d13f      	bne.n	80038f4 <_printf_float+0x17c>
 8003874:	2306      	movs	r3, #6
 8003876:	6063      	str	r3, [r4, #4]
 8003878:	9b05      	ldr	r3, [sp, #20]
 800387a:	6861      	ldr	r1, [r4, #4]
 800387c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003880:	2300      	movs	r3, #0
 8003882:	9303      	str	r3, [sp, #12]
 8003884:	ab0a      	add	r3, sp, #40	; 0x28
 8003886:	e9cd b301 	strd	fp, r3, [sp, #4]
 800388a:	ab09      	add	r3, sp, #36	; 0x24
 800388c:	ec49 8b10 	vmov	d0, r8, r9
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	6022      	str	r2, [r4, #0]
 8003894:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003898:	4628      	mov	r0, r5
 800389a:	f7ff fecd 	bl	8003638 <__cvt>
 800389e:	9b06      	ldr	r3, [sp, #24]
 80038a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80038a2:	2b47      	cmp	r3, #71	; 0x47
 80038a4:	4680      	mov	r8, r0
 80038a6:	d108      	bne.n	80038ba <_printf_float+0x142>
 80038a8:	1cc8      	adds	r0, r1, #3
 80038aa:	db02      	blt.n	80038b2 <_printf_float+0x13a>
 80038ac:	6863      	ldr	r3, [r4, #4]
 80038ae:	4299      	cmp	r1, r3
 80038b0:	dd41      	ble.n	8003936 <_printf_float+0x1be>
 80038b2:	f1ab 0b02 	sub.w	fp, fp, #2
 80038b6:	fa5f fb8b 	uxtb.w	fp, fp
 80038ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80038be:	d820      	bhi.n	8003902 <_printf_float+0x18a>
 80038c0:	3901      	subs	r1, #1
 80038c2:	465a      	mov	r2, fp
 80038c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80038c8:	9109      	str	r1, [sp, #36]	; 0x24
 80038ca:	f7ff ff17 	bl	80036fc <__exponent>
 80038ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80038d0:	1813      	adds	r3, r2, r0
 80038d2:	2a01      	cmp	r2, #1
 80038d4:	4681      	mov	r9, r0
 80038d6:	6123      	str	r3, [r4, #16]
 80038d8:	dc02      	bgt.n	80038e0 <_printf_float+0x168>
 80038da:	6822      	ldr	r2, [r4, #0]
 80038dc:	07d2      	lsls	r2, r2, #31
 80038de:	d501      	bpl.n	80038e4 <_printf_float+0x16c>
 80038e0:	3301      	adds	r3, #1
 80038e2:	6123      	str	r3, [r4, #16]
 80038e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d09c      	beq.n	8003826 <_printf_float+0xae>
 80038ec:	232d      	movs	r3, #45	; 0x2d
 80038ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038f2:	e798      	b.n	8003826 <_printf_float+0xae>
 80038f4:	9a06      	ldr	r2, [sp, #24]
 80038f6:	2a47      	cmp	r2, #71	; 0x47
 80038f8:	d1be      	bne.n	8003878 <_printf_float+0x100>
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1bc      	bne.n	8003878 <_printf_float+0x100>
 80038fe:	2301      	movs	r3, #1
 8003900:	e7b9      	b.n	8003876 <_printf_float+0xfe>
 8003902:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003906:	d118      	bne.n	800393a <_printf_float+0x1c2>
 8003908:	2900      	cmp	r1, #0
 800390a:	6863      	ldr	r3, [r4, #4]
 800390c:	dd0b      	ble.n	8003926 <_printf_float+0x1ae>
 800390e:	6121      	str	r1, [r4, #16]
 8003910:	b913      	cbnz	r3, 8003918 <_printf_float+0x1a0>
 8003912:	6822      	ldr	r2, [r4, #0]
 8003914:	07d0      	lsls	r0, r2, #31
 8003916:	d502      	bpl.n	800391e <_printf_float+0x1a6>
 8003918:	3301      	adds	r3, #1
 800391a:	440b      	add	r3, r1
 800391c:	6123      	str	r3, [r4, #16]
 800391e:	65a1      	str	r1, [r4, #88]	; 0x58
 8003920:	f04f 0900 	mov.w	r9, #0
 8003924:	e7de      	b.n	80038e4 <_printf_float+0x16c>
 8003926:	b913      	cbnz	r3, 800392e <_printf_float+0x1b6>
 8003928:	6822      	ldr	r2, [r4, #0]
 800392a:	07d2      	lsls	r2, r2, #31
 800392c:	d501      	bpl.n	8003932 <_printf_float+0x1ba>
 800392e:	3302      	adds	r3, #2
 8003930:	e7f4      	b.n	800391c <_printf_float+0x1a4>
 8003932:	2301      	movs	r3, #1
 8003934:	e7f2      	b.n	800391c <_printf_float+0x1a4>
 8003936:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800393a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800393c:	4299      	cmp	r1, r3
 800393e:	db05      	blt.n	800394c <_printf_float+0x1d4>
 8003940:	6823      	ldr	r3, [r4, #0]
 8003942:	6121      	str	r1, [r4, #16]
 8003944:	07d8      	lsls	r0, r3, #31
 8003946:	d5ea      	bpl.n	800391e <_printf_float+0x1a6>
 8003948:	1c4b      	adds	r3, r1, #1
 800394a:	e7e7      	b.n	800391c <_printf_float+0x1a4>
 800394c:	2900      	cmp	r1, #0
 800394e:	bfd4      	ite	le
 8003950:	f1c1 0202 	rsble	r2, r1, #2
 8003954:	2201      	movgt	r2, #1
 8003956:	4413      	add	r3, r2
 8003958:	e7e0      	b.n	800391c <_printf_float+0x1a4>
 800395a:	6823      	ldr	r3, [r4, #0]
 800395c:	055a      	lsls	r2, r3, #21
 800395e:	d407      	bmi.n	8003970 <_printf_float+0x1f8>
 8003960:	6923      	ldr	r3, [r4, #16]
 8003962:	4642      	mov	r2, r8
 8003964:	4631      	mov	r1, r6
 8003966:	4628      	mov	r0, r5
 8003968:	47b8      	blx	r7
 800396a:	3001      	adds	r0, #1
 800396c:	d12c      	bne.n	80039c8 <_printf_float+0x250>
 800396e:	e764      	b.n	800383a <_printf_float+0xc2>
 8003970:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003974:	f240 80e0 	bls.w	8003b38 <_printf_float+0x3c0>
 8003978:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800397c:	2200      	movs	r2, #0
 800397e:	2300      	movs	r3, #0
 8003980:	f7fd f8aa 	bl	8000ad8 <__aeabi_dcmpeq>
 8003984:	2800      	cmp	r0, #0
 8003986:	d034      	beq.n	80039f2 <_printf_float+0x27a>
 8003988:	4a37      	ldr	r2, [pc, #220]	; (8003a68 <_printf_float+0x2f0>)
 800398a:	2301      	movs	r3, #1
 800398c:	4631      	mov	r1, r6
 800398e:	4628      	mov	r0, r5
 8003990:	47b8      	blx	r7
 8003992:	3001      	adds	r0, #1
 8003994:	f43f af51 	beq.w	800383a <_printf_float+0xc2>
 8003998:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800399c:	429a      	cmp	r2, r3
 800399e:	db02      	blt.n	80039a6 <_printf_float+0x22e>
 80039a0:	6823      	ldr	r3, [r4, #0]
 80039a2:	07d8      	lsls	r0, r3, #31
 80039a4:	d510      	bpl.n	80039c8 <_printf_float+0x250>
 80039a6:	ee18 3a10 	vmov	r3, s16
 80039aa:	4652      	mov	r2, sl
 80039ac:	4631      	mov	r1, r6
 80039ae:	4628      	mov	r0, r5
 80039b0:	47b8      	blx	r7
 80039b2:	3001      	adds	r0, #1
 80039b4:	f43f af41 	beq.w	800383a <_printf_float+0xc2>
 80039b8:	f04f 0800 	mov.w	r8, #0
 80039bc:	f104 091a 	add.w	r9, r4, #26
 80039c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039c2:	3b01      	subs	r3, #1
 80039c4:	4543      	cmp	r3, r8
 80039c6:	dc09      	bgt.n	80039dc <_printf_float+0x264>
 80039c8:	6823      	ldr	r3, [r4, #0]
 80039ca:	079b      	lsls	r3, r3, #30
 80039cc:	f100 8105 	bmi.w	8003bda <_printf_float+0x462>
 80039d0:	68e0      	ldr	r0, [r4, #12]
 80039d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80039d4:	4298      	cmp	r0, r3
 80039d6:	bfb8      	it	lt
 80039d8:	4618      	movlt	r0, r3
 80039da:	e730      	b.n	800383e <_printf_float+0xc6>
 80039dc:	2301      	movs	r3, #1
 80039de:	464a      	mov	r2, r9
 80039e0:	4631      	mov	r1, r6
 80039e2:	4628      	mov	r0, r5
 80039e4:	47b8      	blx	r7
 80039e6:	3001      	adds	r0, #1
 80039e8:	f43f af27 	beq.w	800383a <_printf_float+0xc2>
 80039ec:	f108 0801 	add.w	r8, r8, #1
 80039f0:	e7e6      	b.n	80039c0 <_printf_float+0x248>
 80039f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	dc39      	bgt.n	8003a6c <_printf_float+0x2f4>
 80039f8:	4a1b      	ldr	r2, [pc, #108]	; (8003a68 <_printf_float+0x2f0>)
 80039fa:	2301      	movs	r3, #1
 80039fc:	4631      	mov	r1, r6
 80039fe:	4628      	mov	r0, r5
 8003a00:	47b8      	blx	r7
 8003a02:	3001      	adds	r0, #1
 8003a04:	f43f af19 	beq.w	800383a <_printf_float+0xc2>
 8003a08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	d102      	bne.n	8003a16 <_printf_float+0x29e>
 8003a10:	6823      	ldr	r3, [r4, #0]
 8003a12:	07d9      	lsls	r1, r3, #31
 8003a14:	d5d8      	bpl.n	80039c8 <_printf_float+0x250>
 8003a16:	ee18 3a10 	vmov	r3, s16
 8003a1a:	4652      	mov	r2, sl
 8003a1c:	4631      	mov	r1, r6
 8003a1e:	4628      	mov	r0, r5
 8003a20:	47b8      	blx	r7
 8003a22:	3001      	adds	r0, #1
 8003a24:	f43f af09 	beq.w	800383a <_printf_float+0xc2>
 8003a28:	f04f 0900 	mov.w	r9, #0
 8003a2c:	f104 0a1a 	add.w	sl, r4, #26
 8003a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a32:	425b      	negs	r3, r3
 8003a34:	454b      	cmp	r3, r9
 8003a36:	dc01      	bgt.n	8003a3c <_printf_float+0x2c4>
 8003a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a3a:	e792      	b.n	8003962 <_printf_float+0x1ea>
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	4652      	mov	r2, sl
 8003a40:	4631      	mov	r1, r6
 8003a42:	4628      	mov	r0, r5
 8003a44:	47b8      	blx	r7
 8003a46:	3001      	adds	r0, #1
 8003a48:	f43f aef7 	beq.w	800383a <_printf_float+0xc2>
 8003a4c:	f109 0901 	add.w	r9, r9, #1
 8003a50:	e7ee      	b.n	8003a30 <_printf_float+0x2b8>
 8003a52:	bf00      	nop
 8003a54:	7fefffff 	.word	0x7fefffff
 8003a58:	080063c4 	.word	0x080063c4
 8003a5c:	080063c8 	.word	0x080063c8
 8003a60:	080063d0 	.word	0x080063d0
 8003a64:	080063cc 	.word	0x080063cc
 8003a68:	080063d4 	.word	0x080063d4
 8003a6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003a6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a70:	429a      	cmp	r2, r3
 8003a72:	bfa8      	it	ge
 8003a74:	461a      	movge	r2, r3
 8003a76:	2a00      	cmp	r2, #0
 8003a78:	4691      	mov	r9, r2
 8003a7a:	dc37      	bgt.n	8003aec <_printf_float+0x374>
 8003a7c:	f04f 0b00 	mov.w	fp, #0
 8003a80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003a84:	f104 021a 	add.w	r2, r4, #26
 8003a88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a8a:	9305      	str	r3, [sp, #20]
 8003a8c:	eba3 0309 	sub.w	r3, r3, r9
 8003a90:	455b      	cmp	r3, fp
 8003a92:	dc33      	bgt.n	8003afc <_printf_float+0x384>
 8003a94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	db3b      	blt.n	8003b14 <_printf_float+0x39c>
 8003a9c:	6823      	ldr	r3, [r4, #0]
 8003a9e:	07da      	lsls	r2, r3, #31
 8003aa0:	d438      	bmi.n	8003b14 <_printf_float+0x39c>
 8003aa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003aa4:	9b05      	ldr	r3, [sp, #20]
 8003aa6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	eba2 0901 	sub.w	r9, r2, r1
 8003aae:	4599      	cmp	r9, r3
 8003ab0:	bfa8      	it	ge
 8003ab2:	4699      	movge	r9, r3
 8003ab4:	f1b9 0f00 	cmp.w	r9, #0
 8003ab8:	dc35      	bgt.n	8003b26 <_printf_float+0x3ae>
 8003aba:	f04f 0800 	mov.w	r8, #0
 8003abe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ac2:	f104 0a1a 	add.w	sl, r4, #26
 8003ac6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003aca:	1a9b      	subs	r3, r3, r2
 8003acc:	eba3 0309 	sub.w	r3, r3, r9
 8003ad0:	4543      	cmp	r3, r8
 8003ad2:	f77f af79 	ble.w	80039c8 <_printf_float+0x250>
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	4652      	mov	r2, sl
 8003ada:	4631      	mov	r1, r6
 8003adc:	4628      	mov	r0, r5
 8003ade:	47b8      	blx	r7
 8003ae0:	3001      	adds	r0, #1
 8003ae2:	f43f aeaa 	beq.w	800383a <_printf_float+0xc2>
 8003ae6:	f108 0801 	add.w	r8, r8, #1
 8003aea:	e7ec      	b.n	8003ac6 <_printf_float+0x34e>
 8003aec:	4613      	mov	r3, r2
 8003aee:	4631      	mov	r1, r6
 8003af0:	4642      	mov	r2, r8
 8003af2:	4628      	mov	r0, r5
 8003af4:	47b8      	blx	r7
 8003af6:	3001      	adds	r0, #1
 8003af8:	d1c0      	bne.n	8003a7c <_printf_float+0x304>
 8003afa:	e69e      	b.n	800383a <_printf_float+0xc2>
 8003afc:	2301      	movs	r3, #1
 8003afe:	4631      	mov	r1, r6
 8003b00:	4628      	mov	r0, r5
 8003b02:	9205      	str	r2, [sp, #20]
 8003b04:	47b8      	blx	r7
 8003b06:	3001      	adds	r0, #1
 8003b08:	f43f ae97 	beq.w	800383a <_printf_float+0xc2>
 8003b0c:	9a05      	ldr	r2, [sp, #20]
 8003b0e:	f10b 0b01 	add.w	fp, fp, #1
 8003b12:	e7b9      	b.n	8003a88 <_printf_float+0x310>
 8003b14:	ee18 3a10 	vmov	r3, s16
 8003b18:	4652      	mov	r2, sl
 8003b1a:	4631      	mov	r1, r6
 8003b1c:	4628      	mov	r0, r5
 8003b1e:	47b8      	blx	r7
 8003b20:	3001      	adds	r0, #1
 8003b22:	d1be      	bne.n	8003aa2 <_printf_float+0x32a>
 8003b24:	e689      	b.n	800383a <_printf_float+0xc2>
 8003b26:	9a05      	ldr	r2, [sp, #20]
 8003b28:	464b      	mov	r3, r9
 8003b2a:	4442      	add	r2, r8
 8003b2c:	4631      	mov	r1, r6
 8003b2e:	4628      	mov	r0, r5
 8003b30:	47b8      	blx	r7
 8003b32:	3001      	adds	r0, #1
 8003b34:	d1c1      	bne.n	8003aba <_printf_float+0x342>
 8003b36:	e680      	b.n	800383a <_printf_float+0xc2>
 8003b38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b3a:	2a01      	cmp	r2, #1
 8003b3c:	dc01      	bgt.n	8003b42 <_printf_float+0x3ca>
 8003b3e:	07db      	lsls	r3, r3, #31
 8003b40:	d538      	bpl.n	8003bb4 <_printf_float+0x43c>
 8003b42:	2301      	movs	r3, #1
 8003b44:	4642      	mov	r2, r8
 8003b46:	4631      	mov	r1, r6
 8003b48:	4628      	mov	r0, r5
 8003b4a:	47b8      	blx	r7
 8003b4c:	3001      	adds	r0, #1
 8003b4e:	f43f ae74 	beq.w	800383a <_printf_float+0xc2>
 8003b52:	ee18 3a10 	vmov	r3, s16
 8003b56:	4652      	mov	r2, sl
 8003b58:	4631      	mov	r1, r6
 8003b5a:	4628      	mov	r0, r5
 8003b5c:	47b8      	blx	r7
 8003b5e:	3001      	adds	r0, #1
 8003b60:	f43f ae6b 	beq.w	800383a <_printf_float+0xc2>
 8003b64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003b68:	2200      	movs	r2, #0
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	f7fc ffb4 	bl	8000ad8 <__aeabi_dcmpeq>
 8003b70:	b9d8      	cbnz	r0, 8003baa <_printf_float+0x432>
 8003b72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b74:	f108 0201 	add.w	r2, r8, #1
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	4631      	mov	r1, r6
 8003b7c:	4628      	mov	r0, r5
 8003b7e:	47b8      	blx	r7
 8003b80:	3001      	adds	r0, #1
 8003b82:	d10e      	bne.n	8003ba2 <_printf_float+0x42a>
 8003b84:	e659      	b.n	800383a <_printf_float+0xc2>
 8003b86:	2301      	movs	r3, #1
 8003b88:	4652      	mov	r2, sl
 8003b8a:	4631      	mov	r1, r6
 8003b8c:	4628      	mov	r0, r5
 8003b8e:	47b8      	blx	r7
 8003b90:	3001      	adds	r0, #1
 8003b92:	f43f ae52 	beq.w	800383a <_printf_float+0xc2>
 8003b96:	f108 0801 	add.w	r8, r8, #1
 8003b9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	4543      	cmp	r3, r8
 8003ba0:	dcf1      	bgt.n	8003b86 <_printf_float+0x40e>
 8003ba2:	464b      	mov	r3, r9
 8003ba4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003ba8:	e6dc      	b.n	8003964 <_printf_float+0x1ec>
 8003baa:	f04f 0800 	mov.w	r8, #0
 8003bae:	f104 0a1a 	add.w	sl, r4, #26
 8003bb2:	e7f2      	b.n	8003b9a <_printf_float+0x422>
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	4642      	mov	r2, r8
 8003bb8:	e7df      	b.n	8003b7a <_printf_float+0x402>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	464a      	mov	r2, r9
 8003bbe:	4631      	mov	r1, r6
 8003bc0:	4628      	mov	r0, r5
 8003bc2:	47b8      	blx	r7
 8003bc4:	3001      	adds	r0, #1
 8003bc6:	f43f ae38 	beq.w	800383a <_printf_float+0xc2>
 8003bca:	f108 0801 	add.w	r8, r8, #1
 8003bce:	68e3      	ldr	r3, [r4, #12]
 8003bd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003bd2:	1a5b      	subs	r3, r3, r1
 8003bd4:	4543      	cmp	r3, r8
 8003bd6:	dcf0      	bgt.n	8003bba <_printf_float+0x442>
 8003bd8:	e6fa      	b.n	80039d0 <_printf_float+0x258>
 8003bda:	f04f 0800 	mov.w	r8, #0
 8003bde:	f104 0919 	add.w	r9, r4, #25
 8003be2:	e7f4      	b.n	8003bce <_printf_float+0x456>

08003be4 <_printf_common>:
 8003be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003be8:	4616      	mov	r6, r2
 8003bea:	4699      	mov	r9, r3
 8003bec:	688a      	ldr	r2, [r1, #8]
 8003bee:	690b      	ldr	r3, [r1, #16]
 8003bf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	bfb8      	it	lt
 8003bf8:	4613      	movlt	r3, r2
 8003bfa:	6033      	str	r3, [r6, #0]
 8003bfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c00:	4607      	mov	r7, r0
 8003c02:	460c      	mov	r4, r1
 8003c04:	b10a      	cbz	r2, 8003c0a <_printf_common+0x26>
 8003c06:	3301      	adds	r3, #1
 8003c08:	6033      	str	r3, [r6, #0]
 8003c0a:	6823      	ldr	r3, [r4, #0]
 8003c0c:	0699      	lsls	r1, r3, #26
 8003c0e:	bf42      	ittt	mi
 8003c10:	6833      	ldrmi	r3, [r6, #0]
 8003c12:	3302      	addmi	r3, #2
 8003c14:	6033      	strmi	r3, [r6, #0]
 8003c16:	6825      	ldr	r5, [r4, #0]
 8003c18:	f015 0506 	ands.w	r5, r5, #6
 8003c1c:	d106      	bne.n	8003c2c <_printf_common+0x48>
 8003c1e:	f104 0a19 	add.w	sl, r4, #25
 8003c22:	68e3      	ldr	r3, [r4, #12]
 8003c24:	6832      	ldr	r2, [r6, #0]
 8003c26:	1a9b      	subs	r3, r3, r2
 8003c28:	42ab      	cmp	r3, r5
 8003c2a:	dc26      	bgt.n	8003c7a <_printf_common+0x96>
 8003c2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c30:	1e13      	subs	r3, r2, #0
 8003c32:	6822      	ldr	r2, [r4, #0]
 8003c34:	bf18      	it	ne
 8003c36:	2301      	movne	r3, #1
 8003c38:	0692      	lsls	r2, r2, #26
 8003c3a:	d42b      	bmi.n	8003c94 <_printf_common+0xb0>
 8003c3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c40:	4649      	mov	r1, r9
 8003c42:	4638      	mov	r0, r7
 8003c44:	47c0      	blx	r8
 8003c46:	3001      	adds	r0, #1
 8003c48:	d01e      	beq.n	8003c88 <_printf_common+0xa4>
 8003c4a:	6823      	ldr	r3, [r4, #0]
 8003c4c:	68e5      	ldr	r5, [r4, #12]
 8003c4e:	6832      	ldr	r2, [r6, #0]
 8003c50:	f003 0306 	and.w	r3, r3, #6
 8003c54:	2b04      	cmp	r3, #4
 8003c56:	bf08      	it	eq
 8003c58:	1aad      	subeq	r5, r5, r2
 8003c5a:	68a3      	ldr	r3, [r4, #8]
 8003c5c:	6922      	ldr	r2, [r4, #16]
 8003c5e:	bf0c      	ite	eq
 8003c60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c64:	2500      	movne	r5, #0
 8003c66:	4293      	cmp	r3, r2
 8003c68:	bfc4      	itt	gt
 8003c6a:	1a9b      	subgt	r3, r3, r2
 8003c6c:	18ed      	addgt	r5, r5, r3
 8003c6e:	2600      	movs	r6, #0
 8003c70:	341a      	adds	r4, #26
 8003c72:	42b5      	cmp	r5, r6
 8003c74:	d11a      	bne.n	8003cac <_printf_common+0xc8>
 8003c76:	2000      	movs	r0, #0
 8003c78:	e008      	b.n	8003c8c <_printf_common+0xa8>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	4652      	mov	r2, sl
 8003c7e:	4649      	mov	r1, r9
 8003c80:	4638      	mov	r0, r7
 8003c82:	47c0      	blx	r8
 8003c84:	3001      	adds	r0, #1
 8003c86:	d103      	bne.n	8003c90 <_printf_common+0xac>
 8003c88:	f04f 30ff 	mov.w	r0, #4294967295
 8003c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c90:	3501      	adds	r5, #1
 8003c92:	e7c6      	b.n	8003c22 <_printf_common+0x3e>
 8003c94:	18e1      	adds	r1, r4, r3
 8003c96:	1c5a      	adds	r2, r3, #1
 8003c98:	2030      	movs	r0, #48	; 0x30
 8003c9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c9e:	4422      	add	r2, r4
 8003ca0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ca4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ca8:	3302      	adds	r3, #2
 8003caa:	e7c7      	b.n	8003c3c <_printf_common+0x58>
 8003cac:	2301      	movs	r3, #1
 8003cae:	4622      	mov	r2, r4
 8003cb0:	4649      	mov	r1, r9
 8003cb2:	4638      	mov	r0, r7
 8003cb4:	47c0      	blx	r8
 8003cb6:	3001      	adds	r0, #1
 8003cb8:	d0e6      	beq.n	8003c88 <_printf_common+0xa4>
 8003cba:	3601      	adds	r6, #1
 8003cbc:	e7d9      	b.n	8003c72 <_printf_common+0x8e>
	...

08003cc0 <_printf_i>:
 8003cc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cc4:	460c      	mov	r4, r1
 8003cc6:	4691      	mov	r9, r2
 8003cc8:	7e27      	ldrb	r7, [r4, #24]
 8003cca:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003ccc:	2f78      	cmp	r7, #120	; 0x78
 8003cce:	4680      	mov	r8, r0
 8003cd0:	469a      	mov	sl, r3
 8003cd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cd6:	d807      	bhi.n	8003ce8 <_printf_i+0x28>
 8003cd8:	2f62      	cmp	r7, #98	; 0x62
 8003cda:	d80a      	bhi.n	8003cf2 <_printf_i+0x32>
 8003cdc:	2f00      	cmp	r7, #0
 8003cde:	f000 80d8 	beq.w	8003e92 <_printf_i+0x1d2>
 8003ce2:	2f58      	cmp	r7, #88	; 0x58
 8003ce4:	f000 80a3 	beq.w	8003e2e <_printf_i+0x16e>
 8003ce8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003cec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003cf0:	e03a      	b.n	8003d68 <_printf_i+0xa8>
 8003cf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003cf6:	2b15      	cmp	r3, #21
 8003cf8:	d8f6      	bhi.n	8003ce8 <_printf_i+0x28>
 8003cfa:	a001      	add	r0, pc, #4	; (adr r0, 8003d00 <_printf_i+0x40>)
 8003cfc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003d00:	08003d59 	.word	0x08003d59
 8003d04:	08003d6d 	.word	0x08003d6d
 8003d08:	08003ce9 	.word	0x08003ce9
 8003d0c:	08003ce9 	.word	0x08003ce9
 8003d10:	08003ce9 	.word	0x08003ce9
 8003d14:	08003ce9 	.word	0x08003ce9
 8003d18:	08003d6d 	.word	0x08003d6d
 8003d1c:	08003ce9 	.word	0x08003ce9
 8003d20:	08003ce9 	.word	0x08003ce9
 8003d24:	08003ce9 	.word	0x08003ce9
 8003d28:	08003ce9 	.word	0x08003ce9
 8003d2c:	08003e79 	.word	0x08003e79
 8003d30:	08003d9d 	.word	0x08003d9d
 8003d34:	08003e5b 	.word	0x08003e5b
 8003d38:	08003ce9 	.word	0x08003ce9
 8003d3c:	08003ce9 	.word	0x08003ce9
 8003d40:	08003e9b 	.word	0x08003e9b
 8003d44:	08003ce9 	.word	0x08003ce9
 8003d48:	08003d9d 	.word	0x08003d9d
 8003d4c:	08003ce9 	.word	0x08003ce9
 8003d50:	08003ce9 	.word	0x08003ce9
 8003d54:	08003e63 	.word	0x08003e63
 8003d58:	680b      	ldr	r3, [r1, #0]
 8003d5a:	1d1a      	adds	r2, r3, #4
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	600a      	str	r2, [r1, #0]
 8003d60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003d64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e0a3      	b.n	8003eb4 <_printf_i+0x1f4>
 8003d6c:	6825      	ldr	r5, [r4, #0]
 8003d6e:	6808      	ldr	r0, [r1, #0]
 8003d70:	062e      	lsls	r6, r5, #24
 8003d72:	f100 0304 	add.w	r3, r0, #4
 8003d76:	d50a      	bpl.n	8003d8e <_printf_i+0xce>
 8003d78:	6805      	ldr	r5, [r0, #0]
 8003d7a:	600b      	str	r3, [r1, #0]
 8003d7c:	2d00      	cmp	r5, #0
 8003d7e:	da03      	bge.n	8003d88 <_printf_i+0xc8>
 8003d80:	232d      	movs	r3, #45	; 0x2d
 8003d82:	426d      	negs	r5, r5
 8003d84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d88:	485e      	ldr	r0, [pc, #376]	; (8003f04 <_printf_i+0x244>)
 8003d8a:	230a      	movs	r3, #10
 8003d8c:	e019      	b.n	8003dc2 <_printf_i+0x102>
 8003d8e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003d92:	6805      	ldr	r5, [r0, #0]
 8003d94:	600b      	str	r3, [r1, #0]
 8003d96:	bf18      	it	ne
 8003d98:	b22d      	sxthne	r5, r5
 8003d9a:	e7ef      	b.n	8003d7c <_printf_i+0xbc>
 8003d9c:	680b      	ldr	r3, [r1, #0]
 8003d9e:	6825      	ldr	r5, [r4, #0]
 8003da0:	1d18      	adds	r0, r3, #4
 8003da2:	6008      	str	r0, [r1, #0]
 8003da4:	0628      	lsls	r0, r5, #24
 8003da6:	d501      	bpl.n	8003dac <_printf_i+0xec>
 8003da8:	681d      	ldr	r5, [r3, #0]
 8003daa:	e002      	b.n	8003db2 <_printf_i+0xf2>
 8003dac:	0669      	lsls	r1, r5, #25
 8003dae:	d5fb      	bpl.n	8003da8 <_printf_i+0xe8>
 8003db0:	881d      	ldrh	r5, [r3, #0]
 8003db2:	4854      	ldr	r0, [pc, #336]	; (8003f04 <_printf_i+0x244>)
 8003db4:	2f6f      	cmp	r7, #111	; 0x6f
 8003db6:	bf0c      	ite	eq
 8003db8:	2308      	moveq	r3, #8
 8003dba:	230a      	movne	r3, #10
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003dc2:	6866      	ldr	r6, [r4, #4]
 8003dc4:	60a6      	str	r6, [r4, #8]
 8003dc6:	2e00      	cmp	r6, #0
 8003dc8:	bfa2      	ittt	ge
 8003dca:	6821      	ldrge	r1, [r4, #0]
 8003dcc:	f021 0104 	bicge.w	r1, r1, #4
 8003dd0:	6021      	strge	r1, [r4, #0]
 8003dd2:	b90d      	cbnz	r5, 8003dd8 <_printf_i+0x118>
 8003dd4:	2e00      	cmp	r6, #0
 8003dd6:	d04d      	beq.n	8003e74 <_printf_i+0x1b4>
 8003dd8:	4616      	mov	r6, r2
 8003dda:	fbb5 f1f3 	udiv	r1, r5, r3
 8003dde:	fb03 5711 	mls	r7, r3, r1, r5
 8003de2:	5dc7      	ldrb	r7, [r0, r7]
 8003de4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003de8:	462f      	mov	r7, r5
 8003dea:	42bb      	cmp	r3, r7
 8003dec:	460d      	mov	r5, r1
 8003dee:	d9f4      	bls.n	8003dda <_printf_i+0x11a>
 8003df0:	2b08      	cmp	r3, #8
 8003df2:	d10b      	bne.n	8003e0c <_printf_i+0x14c>
 8003df4:	6823      	ldr	r3, [r4, #0]
 8003df6:	07df      	lsls	r7, r3, #31
 8003df8:	d508      	bpl.n	8003e0c <_printf_i+0x14c>
 8003dfa:	6923      	ldr	r3, [r4, #16]
 8003dfc:	6861      	ldr	r1, [r4, #4]
 8003dfe:	4299      	cmp	r1, r3
 8003e00:	bfde      	ittt	le
 8003e02:	2330      	movle	r3, #48	; 0x30
 8003e04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003e0c:	1b92      	subs	r2, r2, r6
 8003e0e:	6122      	str	r2, [r4, #16]
 8003e10:	f8cd a000 	str.w	sl, [sp]
 8003e14:	464b      	mov	r3, r9
 8003e16:	aa03      	add	r2, sp, #12
 8003e18:	4621      	mov	r1, r4
 8003e1a:	4640      	mov	r0, r8
 8003e1c:	f7ff fee2 	bl	8003be4 <_printf_common>
 8003e20:	3001      	adds	r0, #1
 8003e22:	d14c      	bne.n	8003ebe <_printf_i+0x1fe>
 8003e24:	f04f 30ff 	mov.w	r0, #4294967295
 8003e28:	b004      	add	sp, #16
 8003e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e2e:	4835      	ldr	r0, [pc, #212]	; (8003f04 <_printf_i+0x244>)
 8003e30:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003e34:	6823      	ldr	r3, [r4, #0]
 8003e36:	680e      	ldr	r6, [r1, #0]
 8003e38:	061f      	lsls	r7, r3, #24
 8003e3a:	f856 5b04 	ldr.w	r5, [r6], #4
 8003e3e:	600e      	str	r6, [r1, #0]
 8003e40:	d514      	bpl.n	8003e6c <_printf_i+0x1ac>
 8003e42:	07d9      	lsls	r1, r3, #31
 8003e44:	bf44      	itt	mi
 8003e46:	f043 0320 	orrmi.w	r3, r3, #32
 8003e4a:	6023      	strmi	r3, [r4, #0]
 8003e4c:	b91d      	cbnz	r5, 8003e56 <_printf_i+0x196>
 8003e4e:	6823      	ldr	r3, [r4, #0]
 8003e50:	f023 0320 	bic.w	r3, r3, #32
 8003e54:	6023      	str	r3, [r4, #0]
 8003e56:	2310      	movs	r3, #16
 8003e58:	e7b0      	b.n	8003dbc <_printf_i+0xfc>
 8003e5a:	6823      	ldr	r3, [r4, #0]
 8003e5c:	f043 0320 	orr.w	r3, r3, #32
 8003e60:	6023      	str	r3, [r4, #0]
 8003e62:	2378      	movs	r3, #120	; 0x78
 8003e64:	4828      	ldr	r0, [pc, #160]	; (8003f08 <_printf_i+0x248>)
 8003e66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e6a:	e7e3      	b.n	8003e34 <_printf_i+0x174>
 8003e6c:	065e      	lsls	r6, r3, #25
 8003e6e:	bf48      	it	mi
 8003e70:	b2ad      	uxthmi	r5, r5
 8003e72:	e7e6      	b.n	8003e42 <_printf_i+0x182>
 8003e74:	4616      	mov	r6, r2
 8003e76:	e7bb      	b.n	8003df0 <_printf_i+0x130>
 8003e78:	680b      	ldr	r3, [r1, #0]
 8003e7a:	6826      	ldr	r6, [r4, #0]
 8003e7c:	6960      	ldr	r0, [r4, #20]
 8003e7e:	1d1d      	adds	r5, r3, #4
 8003e80:	600d      	str	r5, [r1, #0]
 8003e82:	0635      	lsls	r5, r6, #24
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	d501      	bpl.n	8003e8c <_printf_i+0x1cc>
 8003e88:	6018      	str	r0, [r3, #0]
 8003e8a:	e002      	b.n	8003e92 <_printf_i+0x1d2>
 8003e8c:	0671      	lsls	r1, r6, #25
 8003e8e:	d5fb      	bpl.n	8003e88 <_printf_i+0x1c8>
 8003e90:	8018      	strh	r0, [r3, #0]
 8003e92:	2300      	movs	r3, #0
 8003e94:	6123      	str	r3, [r4, #16]
 8003e96:	4616      	mov	r6, r2
 8003e98:	e7ba      	b.n	8003e10 <_printf_i+0x150>
 8003e9a:	680b      	ldr	r3, [r1, #0]
 8003e9c:	1d1a      	adds	r2, r3, #4
 8003e9e:	600a      	str	r2, [r1, #0]
 8003ea0:	681e      	ldr	r6, [r3, #0]
 8003ea2:	6862      	ldr	r2, [r4, #4]
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	4630      	mov	r0, r6
 8003ea8:	f7fc f9a2 	bl	80001f0 <memchr>
 8003eac:	b108      	cbz	r0, 8003eb2 <_printf_i+0x1f2>
 8003eae:	1b80      	subs	r0, r0, r6
 8003eb0:	6060      	str	r0, [r4, #4]
 8003eb2:	6863      	ldr	r3, [r4, #4]
 8003eb4:	6123      	str	r3, [r4, #16]
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ebc:	e7a8      	b.n	8003e10 <_printf_i+0x150>
 8003ebe:	6923      	ldr	r3, [r4, #16]
 8003ec0:	4632      	mov	r2, r6
 8003ec2:	4649      	mov	r1, r9
 8003ec4:	4640      	mov	r0, r8
 8003ec6:	47d0      	blx	sl
 8003ec8:	3001      	adds	r0, #1
 8003eca:	d0ab      	beq.n	8003e24 <_printf_i+0x164>
 8003ecc:	6823      	ldr	r3, [r4, #0]
 8003ece:	079b      	lsls	r3, r3, #30
 8003ed0:	d413      	bmi.n	8003efa <_printf_i+0x23a>
 8003ed2:	68e0      	ldr	r0, [r4, #12]
 8003ed4:	9b03      	ldr	r3, [sp, #12]
 8003ed6:	4298      	cmp	r0, r3
 8003ed8:	bfb8      	it	lt
 8003eda:	4618      	movlt	r0, r3
 8003edc:	e7a4      	b.n	8003e28 <_printf_i+0x168>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	4632      	mov	r2, r6
 8003ee2:	4649      	mov	r1, r9
 8003ee4:	4640      	mov	r0, r8
 8003ee6:	47d0      	blx	sl
 8003ee8:	3001      	adds	r0, #1
 8003eea:	d09b      	beq.n	8003e24 <_printf_i+0x164>
 8003eec:	3501      	adds	r5, #1
 8003eee:	68e3      	ldr	r3, [r4, #12]
 8003ef0:	9903      	ldr	r1, [sp, #12]
 8003ef2:	1a5b      	subs	r3, r3, r1
 8003ef4:	42ab      	cmp	r3, r5
 8003ef6:	dcf2      	bgt.n	8003ede <_printf_i+0x21e>
 8003ef8:	e7eb      	b.n	8003ed2 <_printf_i+0x212>
 8003efa:	2500      	movs	r5, #0
 8003efc:	f104 0619 	add.w	r6, r4, #25
 8003f00:	e7f5      	b.n	8003eee <_printf_i+0x22e>
 8003f02:	bf00      	nop
 8003f04:	080063d6 	.word	0x080063d6
 8003f08:	080063e7 	.word	0x080063e7

08003f0c <siprintf>:
 8003f0c:	b40e      	push	{r1, r2, r3}
 8003f0e:	b500      	push	{lr}
 8003f10:	b09c      	sub	sp, #112	; 0x70
 8003f12:	ab1d      	add	r3, sp, #116	; 0x74
 8003f14:	9002      	str	r0, [sp, #8]
 8003f16:	9006      	str	r0, [sp, #24]
 8003f18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f1c:	4809      	ldr	r0, [pc, #36]	; (8003f44 <siprintf+0x38>)
 8003f1e:	9107      	str	r1, [sp, #28]
 8003f20:	9104      	str	r1, [sp, #16]
 8003f22:	4909      	ldr	r1, [pc, #36]	; (8003f48 <siprintf+0x3c>)
 8003f24:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f28:	9105      	str	r1, [sp, #20]
 8003f2a:	6800      	ldr	r0, [r0, #0]
 8003f2c:	9301      	str	r3, [sp, #4]
 8003f2e:	a902      	add	r1, sp, #8
 8003f30:	f001 fb34 	bl	800559c <_svfiprintf_r>
 8003f34:	9b02      	ldr	r3, [sp, #8]
 8003f36:	2200      	movs	r2, #0
 8003f38:	701a      	strb	r2, [r3, #0]
 8003f3a:	b01c      	add	sp, #112	; 0x70
 8003f3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f40:	b003      	add	sp, #12
 8003f42:	4770      	bx	lr
 8003f44:	2000000c 	.word	0x2000000c
 8003f48:	ffff0208 	.word	0xffff0208

08003f4c <quorem>:
 8003f4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f50:	6903      	ldr	r3, [r0, #16]
 8003f52:	690c      	ldr	r4, [r1, #16]
 8003f54:	42a3      	cmp	r3, r4
 8003f56:	4607      	mov	r7, r0
 8003f58:	f2c0 8081 	blt.w	800405e <quorem+0x112>
 8003f5c:	3c01      	subs	r4, #1
 8003f5e:	f101 0814 	add.w	r8, r1, #20
 8003f62:	f100 0514 	add.w	r5, r0, #20
 8003f66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003f6a:	9301      	str	r3, [sp, #4]
 8003f6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003f70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003f74:	3301      	adds	r3, #1
 8003f76:	429a      	cmp	r2, r3
 8003f78:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003f7c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003f80:	fbb2 f6f3 	udiv	r6, r2, r3
 8003f84:	d331      	bcc.n	8003fea <quorem+0x9e>
 8003f86:	f04f 0e00 	mov.w	lr, #0
 8003f8a:	4640      	mov	r0, r8
 8003f8c:	46ac      	mov	ip, r5
 8003f8e:	46f2      	mov	sl, lr
 8003f90:	f850 2b04 	ldr.w	r2, [r0], #4
 8003f94:	b293      	uxth	r3, r2
 8003f96:	fb06 e303 	mla	r3, r6, r3, lr
 8003f9a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	ebaa 0303 	sub.w	r3, sl, r3
 8003fa4:	0c12      	lsrs	r2, r2, #16
 8003fa6:	f8dc a000 	ldr.w	sl, [ip]
 8003faa:	fb06 e202 	mla	r2, r6, r2, lr
 8003fae:	fa13 f38a 	uxtah	r3, r3, sl
 8003fb2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003fb6:	fa1f fa82 	uxth.w	sl, r2
 8003fba:	f8dc 2000 	ldr.w	r2, [ip]
 8003fbe:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8003fc2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003fcc:	4581      	cmp	r9, r0
 8003fce:	f84c 3b04 	str.w	r3, [ip], #4
 8003fd2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003fd6:	d2db      	bcs.n	8003f90 <quorem+0x44>
 8003fd8:	f855 300b 	ldr.w	r3, [r5, fp]
 8003fdc:	b92b      	cbnz	r3, 8003fea <quorem+0x9e>
 8003fde:	9b01      	ldr	r3, [sp, #4]
 8003fe0:	3b04      	subs	r3, #4
 8003fe2:	429d      	cmp	r5, r3
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	d32e      	bcc.n	8004046 <quorem+0xfa>
 8003fe8:	613c      	str	r4, [r7, #16]
 8003fea:	4638      	mov	r0, r7
 8003fec:	f001 f8c0 	bl	8005170 <__mcmp>
 8003ff0:	2800      	cmp	r0, #0
 8003ff2:	db24      	blt.n	800403e <quorem+0xf2>
 8003ff4:	3601      	adds	r6, #1
 8003ff6:	4628      	mov	r0, r5
 8003ff8:	f04f 0c00 	mov.w	ip, #0
 8003ffc:	f858 2b04 	ldr.w	r2, [r8], #4
 8004000:	f8d0 e000 	ldr.w	lr, [r0]
 8004004:	b293      	uxth	r3, r2
 8004006:	ebac 0303 	sub.w	r3, ip, r3
 800400a:	0c12      	lsrs	r2, r2, #16
 800400c:	fa13 f38e 	uxtah	r3, r3, lr
 8004010:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004014:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004018:	b29b      	uxth	r3, r3
 800401a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800401e:	45c1      	cmp	r9, r8
 8004020:	f840 3b04 	str.w	r3, [r0], #4
 8004024:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004028:	d2e8      	bcs.n	8003ffc <quorem+0xb0>
 800402a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800402e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004032:	b922      	cbnz	r2, 800403e <quorem+0xf2>
 8004034:	3b04      	subs	r3, #4
 8004036:	429d      	cmp	r5, r3
 8004038:	461a      	mov	r2, r3
 800403a:	d30a      	bcc.n	8004052 <quorem+0x106>
 800403c:	613c      	str	r4, [r7, #16]
 800403e:	4630      	mov	r0, r6
 8004040:	b003      	add	sp, #12
 8004042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004046:	6812      	ldr	r2, [r2, #0]
 8004048:	3b04      	subs	r3, #4
 800404a:	2a00      	cmp	r2, #0
 800404c:	d1cc      	bne.n	8003fe8 <quorem+0x9c>
 800404e:	3c01      	subs	r4, #1
 8004050:	e7c7      	b.n	8003fe2 <quorem+0x96>
 8004052:	6812      	ldr	r2, [r2, #0]
 8004054:	3b04      	subs	r3, #4
 8004056:	2a00      	cmp	r2, #0
 8004058:	d1f0      	bne.n	800403c <quorem+0xf0>
 800405a:	3c01      	subs	r4, #1
 800405c:	e7eb      	b.n	8004036 <quorem+0xea>
 800405e:	2000      	movs	r0, #0
 8004060:	e7ee      	b.n	8004040 <quorem+0xf4>
 8004062:	0000      	movs	r0, r0
 8004064:	0000      	movs	r0, r0
	...

08004068 <_dtoa_r>:
 8004068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800406c:	ed2d 8b02 	vpush	{d8}
 8004070:	ec57 6b10 	vmov	r6, r7, d0
 8004074:	b095      	sub	sp, #84	; 0x54
 8004076:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004078:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800407c:	9105      	str	r1, [sp, #20]
 800407e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004082:	4604      	mov	r4, r0
 8004084:	9209      	str	r2, [sp, #36]	; 0x24
 8004086:	930f      	str	r3, [sp, #60]	; 0x3c
 8004088:	b975      	cbnz	r5, 80040a8 <_dtoa_r+0x40>
 800408a:	2010      	movs	r0, #16
 800408c:	f000 fddc 	bl	8004c48 <malloc>
 8004090:	4602      	mov	r2, r0
 8004092:	6260      	str	r0, [r4, #36]	; 0x24
 8004094:	b920      	cbnz	r0, 80040a0 <_dtoa_r+0x38>
 8004096:	4bb2      	ldr	r3, [pc, #712]	; (8004360 <_dtoa_r+0x2f8>)
 8004098:	21ea      	movs	r1, #234	; 0xea
 800409a:	48b2      	ldr	r0, [pc, #712]	; (8004364 <_dtoa_r+0x2fc>)
 800409c:	f001 fb8e 	bl	80057bc <__assert_func>
 80040a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80040a4:	6005      	str	r5, [r0, #0]
 80040a6:	60c5      	str	r5, [r0, #12]
 80040a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040aa:	6819      	ldr	r1, [r3, #0]
 80040ac:	b151      	cbz	r1, 80040c4 <_dtoa_r+0x5c>
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	604a      	str	r2, [r1, #4]
 80040b2:	2301      	movs	r3, #1
 80040b4:	4093      	lsls	r3, r2
 80040b6:	608b      	str	r3, [r1, #8]
 80040b8:	4620      	mov	r0, r4
 80040ba:	f000 fe1b 	bl	8004cf4 <_Bfree>
 80040be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	1e3b      	subs	r3, r7, #0
 80040c6:	bfb9      	ittee	lt
 80040c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80040cc:	9303      	strlt	r3, [sp, #12]
 80040ce:	2300      	movge	r3, #0
 80040d0:	f8c8 3000 	strge.w	r3, [r8]
 80040d4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80040d8:	4ba3      	ldr	r3, [pc, #652]	; (8004368 <_dtoa_r+0x300>)
 80040da:	bfbc      	itt	lt
 80040dc:	2201      	movlt	r2, #1
 80040de:	f8c8 2000 	strlt.w	r2, [r8]
 80040e2:	ea33 0309 	bics.w	r3, r3, r9
 80040e6:	d11b      	bne.n	8004120 <_dtoa_r+0xb8>
 80040e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80040ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80040ee:	6013      	str	r3, [r2, #0]
 80040f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80040f4:	4333      	orrs	r3, r6
 80040f6:	f000 857a 	beq.w	8004bee <_dtoa_r+0xb86>
 80040fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80040fc:	b963      	cbnz	r3, 8004118 <_dtoa_r+0xb0>
 80040fe:	4b9b      	ldr	r3, [pc, #620]	; (800436c <_dtoa_r+0x304>)
 8004100:	e024      	b.n	800414c <_dtoa_r+0xe4>
 8004102:	4b9b      	ldr	r3, [pc, #620]	; (8004370 <_dtoa_r+0x308>)
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	3308      	adds	r3, #8
 8004108:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800410a:	6013      	str	r3, [r2, #0]
 800410c:	9800      	ldr	r0, [sp, #0]
 800410e:	b015      	add	sp, #84	; 0x54
 8004110:	ecbd 8b02 	vpop	{d8}
 8004114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004118:	4b94      	ldr	r3, [pc, #592]	; (800436c <_dtoa_r+0x304>)
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	3303      	adds	r3, #3
 800411e:	e7f3      	b.n	8004108 <_dtoa_r+0xa0>
 8004120:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004124:	2200      	movs	r2, #0
 8004126:	ec51 0b17 	vmov	r0, r1, d7
 800412a:	2300      	movs	r3, #0
 800412c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004130:	f7fc fcd2 	bl	8000ad8 <__aeabi_dcmpeq>
 8004134:	4680      	mov	r8, r0
 8004136:	b158      	cbz	r0, 8004150 <_dtoa_r+0xe8>
 8004138:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800413a:	2301      	movs	r3, #1
 800413c:	6013      	str	r3, [r2, #0]
 800413e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004140:	2b00      	cmp	r3, #0
 8004142:	f000 8551 	beq.w	8004be8 <_dtoa_r+0xb80>
 8004146:	488b      	ldr	r0, [pc, #556]	; (8004374 <_dtoa_r+0x30c>)
 8004148:	6018      	str	r0, [r3, #0]
 800414a:	1e43      	subs	r3, r0, #1
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	e7dd      	b.n	800410c <_dtoa_r+0xa4>
 8004150:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004154:	aa12      	add	r2, sp, #72	; 0x48
 8004156:	a913      	add	r1, sp, #76	; 0x4c
 8004158:	4620      	mov	r0, r4
 800415a:	f001 f8ad 	bl	80052b8 <__d2b>
 800415e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004162:	4683      	mov	fp, r0
 8004164:	2d00      	cmp	r5, #0
 8004166:	d07c      	beq.n	8004262 <_dtoa_r+0x1fa>
 8004168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800416a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800416e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004172:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004176:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800417a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800417e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004182:	4b7d      	ldr	r3, [pc, #500]	; (8004378 <_dtoa_r+0x310>)
 8004184:	2200      	movs	r2, #0
 8004186:	4630      	mov	r0, r6
 8004188:	4639      	mov	r1, r7
 800418a:	f7fc f885 	bl	8000298 <__aeabi_dsub>
 800418e:	a36e      	add	r3, pc, #440	; (adr r3, 8004348 <_dtoa_r+0x2e0>)
 8004190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004194:	f7fc fa38 	bl	8000608 <__aeabi_dmul>
 8004198:	a36d      	add	r3, pc, #436	; (adr r3, 8004350 <_dtoa_r+0x2e8>)
 800419a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419e:	f7fc f87d 	bl	800029c <__adddf3>
 80041a2:	4606      	mov	r6, r0
 80041a4:	4628      	mov	r0, r5
 80041a6:	460f      	mov	r7, r1
 80041a8:	f7fc f9c4 	bl	8000534 <__aeabi_i2d>
 80041ac:	a36a      	add	r3, pc, #424	; (adr r3, 8004358 <_dtoa_r+0x2f0>)
 80041ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b2:	f7fc fa29 	bl	8000608 <__aeabi_dmul>
 80041b6:	4602      	mov	r2, r0
 80041b8:	460b      	mov	r3, r1
 80041ba:	4630      	mov	r0, r6
 80041bc:	4639      	mov	r1, r7
 80041be:	f7fc f86d 	bl	800029c <__adddf3>
 80041c2:	4606      	mov	r6, r0
 80041c4:	460f      	mov	r7, r1
 80041c6:	f7fc fccf 	bl	8000b68 <__aeabi_d2iz>
 80041ca:	2200      	movs	r2, #0
 80041cc:	4682      	mov	sl, r0
 80041ce:	2300      	movs	r3, #0
 80041d0:	4630      	mov	r0, r6
 80041d2:	4639      	mov	r1, r7
 80041d4:	f7fc fc8a 	bl	8000aec <__aeabi_dcmplt>
 80041d8:	b148      	cbz	r0, 80041ee <_dtoa_r+0x186>
 80041da:	4650      	mov	r0, sl
 80041dc:	f7fc f9aa 	bl	8000534 <__aeabi_i2d>
 80041e0:	4632      	mov	r2, r6
 80041e2:	463b      	mov	r3, r7
 80041e4:	f7fc fc78 	bl	8000ad8 <__aeabi_dcmpeq>
 80041e8:	b908      	cbnz	r0, 80041ee <_dtoa_r+0x186>
 80041ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80041ee:	f1ba 0f16 	cmp.w	sl, #22
 80041f2:	d854      	bhi.n	800429e <_dtoa_r+0x236>
 80041f4:	4b61      	ldr	r3, [pc, #388]	; (800437c <_dtoa_r+0x314>)
 80041f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80041fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004202:	f7fc fc73 	bl	8000aec <__aeabi_dcmplt>
 8004206:	2800      	cmp	r0, #0
 8004208:	d04b      	beq.n	80042a2 <_dtoa_r+0x23a>
 800420a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800420e:	2300      	movs	r3, #0
 8004210:	930e      	str	r3, [sp, #56]	; 0x38
 8004212:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004214:	1b5d      	subs	r5, r3, r5
 8004216:	1e6b      	subs	r3, r5, #1
 8004218:	9304      	str	r3, [sp, #16]
 800421a:	bf43      	ittte	mi
 800421c:	2300      	movmi	r3, #0
 800421e:	f1c5 0801 	rsbmi	r8, r5, #1
 8004222:	9304      	strmi	r3, [sp, #16]
 8004224:	f04f 0800 	movpl.w	r8, #0
 8004228:	f1ba 0f00 	cmp.w	sl, #0
 800422c:	db3b      	blt.n	80042a6 <_dtoa_r+0x23e>
 800422e:	9b04      	ldr	r3, [sp, #16]
 8004230:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004234:	4453      	add	r3, sl
 8004236:	9304      	str	r3, [sp, #16]
 8004238:	2300      	movs	r3, #0
 800423a:	9306      	str	r3, [sp, #24]
 800423c:	9b05      	ldr	r3, [sp, #20]
 800423e:	2b09      	cmp	r3, #9
 8004240:	d869      	bhi.n	8004316 <_dtoa_r+0x2ae>
 8004242:	2b05      	cmp	r3, #5
 8004244:	bfc4      	itt	gt
 8004246:	3b04      	subgt	r3, #4
 8004248:	9305      	strgt	r3, [sp, #20]
 800424a:	9b05      	ldr	r3, [sp, #20]
 800424c:	f1a3 0302 	sub.w	r3, r3, #2
 8004250:	bfcc      	ite	gt
 8004252:	2500      	movgt	r5, #0
 8004254:	2501      	movle	r5, #1
 8004256:	2b03      	cmp	r3, #3
 8004258:	d869      	bhi.n	800432e <_dtoa_r+0x2c6>
 800425a:	e8df f003 	tbb	[pc, r3]
 800425e:	4e2c      	.short	0x4e2c
 8004260:	5a4c      	.short	0x5a4c
 8004262:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004266:	441d      	add	r5, r3
 8004268:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800426c:	2b20      	cmp	r3, #32
 800426e:	bfc1      	itttt	gt
 8004270:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004274:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004278:	fa09 f303 	lslgt.w	r3, r9, r3
 800427c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004280:	bfda      	itte	le
 8004282:	f1c3 0320 	rsble	r3, r3, #32
 8004286:	fa06 f003 	lslle.w	r0, r6, r3
 800428a:	4318      	orrgt	r0, r3
 800428c:	f7fc f942 	bl	8000514 <__aeabi_ui2d>
 8004290:	2301      	movs	r3, #1
 8004292:	4606      	mov	r6, r0
 8004294:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004298:	3d01      	subs	r5, #1
 800429a:	9310      	str	r3, [sp, #64]	; 0x40
 800429c:	e771      	b.n	8004182 <_dtoa_r+0x11a>
 800429e:	2301      	movs	r3, #1
 80042a0:	e7b6      	b.n	8004210 <_dtoa_r+0x1a8>
 80042a2:	900e      	str	r0, [sp, #56]	; 0x38
 80042a4:	e7b5      	b.n	8004212 <_dtoa_r+0x1aa>
 80042a6:	f1ca 0300 	rsb	r3, sl, #0
 80042aa:	9306      	str	r3, [sp, #24]
 80042ac:	2300      	movs	r3, #0
 80042ae:	eba8 080a 	sub.w	r8, r8, sl
 80042b2:	930d      	str	r3, [sp, #52]	; 0x34
 80042b4:	e7c2      	b.n	800423c <_dtoa_r+0x1d4>
 80042b6:	2300      	movs	r3, #0
 80042b8:	9308      	str	r3, [sp, #32]
 80042ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042bc:	2b00      	cmp	r3, #0
 80042be:	dc39      	bgt.n	8004334 <_dtoa_r+0x2cc>
 80042c0:	f04f 0901 	mov.w	r9, #1
 80042c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80042c8:	464b      	mov	r3, r9
 80042ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80042ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80042d0:	2200      	movs	r2, #0
 80042d2:	6042      	str	r2, [r0, #4]
 80042d4:	2204      	movs	r2, #4
 80042d6:	f102 0614 	add.w	r6, r2, #20
 80042da:	429e      	cmp	r6, r3
 80042dc:	6841      	ldr	r1, [r0, #4]
 80042de:	d92f      	bls.n	8004340 <_dtoa_r+0x2d8>
 80042e0:	4620      	mov	r0, r4
 80042e2:	f000 fcc7 	bl	8004c74 <_Balloc>
 80042e6:	9000      	str	r0, [sp, #0]
 80042e8:	2800      	cmp	r0, #0
 80042ea:	d14b      	bne.n	8004384 <_dtoa_r+0x31c>
 80042ec:	4b24      	ldr	r3, [pc, #144]	; (8004380 <_dtoa_r+0x318>)
 80042ee:	4602      	mov	r2, r0
 80042f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80042f4:	e6d1      	b.n	800409a <_dtoa_r+0x32>
 80042f6:	2301      	movs	r3, #1
 80042f8:	e7de      	b.n	80042b8 <_dtoa_r+0x250>
 80042fa:	2300      	movs	r3, #0
 80042fc:	9308      	str	r3, [sp, #32]
 80042fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004300:	eb0a 0903 	add.w	r9, sl, r3
 8004304:	f109 0301 	add.w	r3, r9, #1
 8004308:	2b01      	cmp	r3, #1
 800430a:	9301      	str	r3, [sp, #4]
 800430c:	bfb8      	it	lt
 800430e:	2301      	movlt	r3, #1
 8004310:	e7dd      	b.n	80042ce <_dtoa_r+0x266>
 8004312:	2301      	movs	r3, #1
 8004314:	e7f2      	b.n	80042fc <_dtoa_r+0x294>
 8004316:	2501      	movs	r5, #1
 8004318:	2300      	movs	r3, #0
 800431a:	9305      	str	r3, [sp, #20]
 800431c:	9508      	str	r5, [sp, #32]
 800431e:	f04f 39ff 	mov.w	r9, #4294967295
 8004322:	2200      	movs	r2, #0
 8004324:	f8cd 9004 	str.w	r9, [sp, #4]
 8004328:	2312      	movs	r3, #18
 800432a:	9209      	str	r2, [sp, #36]	; 0x24
 800432c:	e7cf      	b.n	80042ce <_dtoa_r+0x266>
 800432e:	2301      	movs	r3, #1
 8004330:	9308      	str	r3, [sp, #32]
 8004332:	e7f4      	b.n	800431e <_dtoa_r+0x2b6>
 8004334:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004338:	f8cd 9004 	str.w	r9, [sp, #4]
 800433c:	464b      	mov	r3, r9
 800433e:	e7c6      	b.n	80042ce <_dtoa_r+0x266>
 8004340:	3101      	adds	r1, #1
 8004342:	6041      	str	r1, [r0, #4]
 8004344:	0052      	lsls	r2, r2, #1
 8004346:	e7c6      	b.n	80042d6 <_dtoa_r+0x26e>
 8004348:	636f4361 	.word	0x636f4361
 800434c:	3fd287a7 	.word	0x3fd287a7
 8004350:	8b60c8b3 	.word	0x8b60c8b3
 8004354:	3fc68a28 	.word	0x3fc68a28
 8004358:	509f79fb 	.word	0x509f79fb
 800435c:	3fd34413 	.word	0x3fd34413
 8004360:	08006405 	.word	0x08006405
 8004364:	0800641c 	.word	0x0800641c
 8004368:	7ff00000 	.word	0x7ff00000
 800436c:	08006401 	.word	0x08006401
 8004370:	080063f8 	.word	0x080063f8
 8004374:	080063d5 	.word	0x080063d5
 8004378:	3ff80000 	.word	0x3ff80000
 800437c:	08006518 	.word	0x08006518
 8004380:	0800647b 	.word	0x0800647b
 8004384:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004386:	9a00      	ldr	r2, [sp, #0]
 8004388:	601a      	str	r2, [r3, #0]
 800438a:	9b01      	ldr	r3, [sp, #4]
 800438c:	2b0e      	cmp	r3, #14
 800438e:	f200 80ad 	bhi.w	80044ec <_dtoa_r+0x484>
 8004392:	2d00      	cmp	r5, #0
 8004394:	f000 80aa 	beq.w	80044ec <_dtoa_r+0x484>
 8004398:	f1ba 0f00 	cmp.w	sl, #0
 800439c:	dd36      	ble.n	800440c <_dtoa_r+0x3a4>
 800439e:	4ac3      	ldr	r2, [pc, #780]	; (80046ac <_dtoa_r+0x644>)
 80043a0:	f00a 030f 	and.w	r3, sl, #15
 80043a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80043a8:	ed93 7b00 	vldr	d7, [r3]
 80043ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80043b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80043b4:	eeb0 8a47 	vmov.f32	s16, s14
 80043b8:	eef0 8a67 	vmov.f32	s17, s15
 80043bc:	d016      	beq.n	80043ec <_dtoa_r+0x384>
 80043be:	4bbc      	ldr	r3, [pc, #752]	; (80046b0 <_dtoa_r+0x648>)
 80043c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80043c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80043c8:	f7fc fa48 	bl	800085c <__aeabi_ddiv>
 80043cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043d0:	f007 070f 	and.w	r7, r7, #15
 80043d4:	2503      	movs	r5, #3
 80043d6:	4eb6      	ldr	r6, [pc, #728]	; (80046b0 <_dtoa_r+0x648>)
 80043d8:	b957      	cbnz	r7, 80043f0 <_dtoa_r+0x388>
 80043da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043de:	ec53 2b18 	vmov	r2, r3, d8
 80043e2:	f7fc fa3b 	bl	800085c <__aeabi_ddiv>
 80043e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043ea:	e029      	b.n	8004440 <_dtoa_r+0x3d8>
 80043ec:	2502      	movs	r5, #2
 80043ee:	e7f2      	b.n	80043d6 <_dtoa_r+0x36e>
 80043f0:	07f9      	lsls	r1, r7, #31
 80043f2:	d508      	bpl.n	8004406 <_dtoa_r+0x39e>
 80043f4:	ec51 0b18 	vmov	r0, r1, d8
 80043f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80043fc:	f7fc f904 	bl	8000608 <__aeabi_dmul>
 8004400:	ec41 0b18 	vmov	d8, r0, r1
 8004404:	3501      	adds	r5, #1
 8004406:	107f      	asrs	r7, r7, #1
 8004408:	3608      	adds	r6, #8
 800440a:	e7e5      	b.n	80043d8 <_dtoa_r+0x370>
 800440c:	f000 80a6 	beq.w	800455c <_dtoa_r+0x4f4>
 8004410:	f1ca 0600 	rsb	r6, sl, #0
 8004414:	4ba5      	ldr	r3, [pc, #660]	; (80046ac <_dtoa_r+0x644>)
 8004416:	4fa6      	ldr	r7, [pc, #664]	; (80046b0 <_dtoa_r+0x648>)
 8004418:	f006 020f 	and.w	r2, r6, #15
 800441c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004424:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004428:	f7fc f8ee 	bl	8000608 <__aeabi_dmul>
 800442c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004430:	1136      	asrs	r6, r6, #4
 8004432:	2300      	movs	r3, #0
 8004434:	2502      	movs	r5, #2
 8004436:	2e00      	cmp	r6, #0
 8004438:	f040 8085 	bne.w	8004546 <_dtoa_r+0x4de>
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1d2      	bne.n	80043e6 <_dtoa_r+0x37e>
 8004440:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 808c 	beq.w	8004560 <_dtoa_r+0x4f8>
 8004448:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800444c:	4b99      	ldr	r3, [pc, #612]	; (80046b4 <_dtoa_r+0x64c>)
 800444e:	2200      	movs	r2, #0
 8004450:	4630      	mov	r0, r6
 8004452:	4639      	mov	r1, r7
 8004454:	f7fc fb4a 	bl	8000aec <__aeabi_dcmplt>
 8004458:	2800      	cmp	r0, #0
 800445a:	f000 8081 	beq.w	8004560 <_dtoa_r+0x4f8>
 800445e:	9b01      	ldr	r3, [sp, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d07d      	beq.n	8004560 <_dtoa_r+0x4f8>
 8004464:	f1b9 0f00 	cmp.w	r9, #0
 8004468:	dd3c      	ble.n	80044e4 <_dtoa_r+0x47c>
 800446a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800446e:	9307      	str	r3, [sp, #28]
 8004470:	2200      	movs	r2, #0
 8004472:	4b91      	ldr	r3, [pc, #580]	; (80046b8 <_dtoa_r+0x650>)
 8004474:	4630      	mov	r0, r6
 8004476:	4639      	mov	r1, r7
 8004478:	f7fc f8c6 	bl	8000608 <__aeabi_dmul>
 800447c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004480:	3501      	adds	r5, #1
 8004482:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8004486:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800448a:	4628      	mov	r0, r5
 800448c:	f7fc f852 	bl	8000534 <__aeabi_i2d>
 8004490:	4632      	mov	r2, r6
 8004492:	463b      	mov	r3, r7
 8004494:	f7fc f8b8 	bl	8000608 <__aeabi_dmul>
 8004498:	4b88      	ldr	r3, [pc, #544]	; (80046bc <_dtoa_r+0x654>)
 800449a:	2200      	movs	r2, #0
 800449c:	f7fb fefe 	bl	800029c <__adddf3>
 80044a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80044a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80044a8:	9303      	str	r3, [sp, #12]
 80044aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d15c      	bne.n	800456a <_dtoa_r+0x502>
 80044b0:	4b83      	ldr	r3, [pc, #524]	; (80046c0 <_dtoa_r+0x658>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	4630      	mov	r0, r6
 80044b6:	4639      	mov	r1, r7
 80044b8:	f7fb feee 	bl	8000298 <__aeabi_dsub>
 80044bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80044c0:	4606      	mov	r6, r0
 80044c2:	460f      	mov	r7, r1
 80044c4:	f7fc fb30 	bl	8000b28 <__aeabi_dcmpgt>
 80044c8:	2800      	cmp	r0, #0
 80044ca:	f040 8296 	bne.w	80049fa <_dtoa_r+0x992>
 80044ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80044d2:	4630      	mov	r0, r6
 80044d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80044d8:	4639      	mov	r1, r7
 80044da:	f7fc fb07 	bl	8000aec <__aeabi_dcmplt>
 80044de:	2800      	cmp	r0, #0
 80044e0:	f040 8288 	bne.w	80049f4 <_dtoa_r+0x98c>
 80044e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80044e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80044ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f2c0 8158 	blt.w	80047a4 <_dtoa_r+0x73c>
 80044f4:	f1ba 0f0e 	cmp.w	sl, #14
 80044f8:	f300 8154 	bgt.w	80047a4 <_dtoa_r+0x73c>
 80044fc:	4b6b      	ldr	r3, [pc, #428]	; (80046ac <_dtoa_r+0x644>)
 80044fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004502:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004508:	2b00      	cmp	r3, #0
 800450a:	f280 80e3 	bge.w	80046d4 <_dtoa_r+0x66c>
 800450e:	9b01      	ldr	r3, [sp, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	f300 80df 	bgt.w	80046d4 <_dtoa_r+0x66c>
 8004516:	f040 826d 	bne.w	80049f4 <_dtoa_r+0x98c>
 800451a:	4b69      	ldr	r3, [pc, #420]	; (80046c0 <_dtoa_r+0x658>)
 800451c:	2200      	movs	r2, #0
 800451e:	4640      	mov	r0, r8
 8004520:	4649      	mov	r1, r9
 8004522:	f7fc f871 	bl	8000608 <__aeabi_dmul>
 8004526:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800452a:	f7fc faf3 	bl	8000b14 <__aeabi_dcmpge>
 800452e:	9e01      	ldr	r6, [sp, #4]
 8004530:	4637      	mov	r7, r6
 8004532:	2800      	cmp	r0, #0
 8004534:	f040 8243 	bne.w	80049be <_dtoa_r+0x956>
 8004538:	9d00      	ldr	r5, [sp, #0]
 800453a:	2331      	movs	r3, #49	; 0x31
 800453c:	f805 3b01 	strb.w	r3, [r5], #1
 8004540:	f10a 0a01 	add.w	sl, sl, #1
 8004544:	e23f      	b.n	80049c6 <_dtoa_r+0x95e>
 8004546:	07f2      	lsls	r2, r6, #31
 8004548:	d505      	bpl.n	8004556 <_dtoa_r+0x4ee>
 800454a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800454e:	f7fc f85b 	bl	8000608 <__aeabi_dmul>
 8004552:	3501      	adds	r5, #1
 8004554:	2301      	movs	r3, #1
 8004556:	1076      	asrs	r6, r6, #1
 8004558:	3708      	adds	r7, #8
 800455a:	e76c      	b.n	8004436 <_dtoa_r+0x3ce>
 800455c:	2502      	movs	r5, #2
 800455e:	e76f      	b.n	8004440 <_dtoa_r+0x3d8>
 8004560:	9b01      	ldr	r3, [sp, #4]
 8004562:	f8cd a01c 	str.w	sl, [sp, #28]
 8004566:	930c      	str	r3, [sp, #48]	; 0x30
 8004568:	e78d      	b.n	8004486 <_dtoa_r+0x41e>
 800456a:	9900      	ldr	r1, [sp, #0]
 800456c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800456e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004570:	4b4e      	ldr	r3, [pc, #312]	; (80046ac <_dtoa_r+0x644>)
 8004572:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004576:	4401      	add	r1, r0
 8004578:	9102      	str	r1, [sp, #8]
 800457a:	9908      	ldr	r1, [sp, #32]
 800457c:	eeb0 8a47 	vmov.f32	s16, s14
 8004580:	eef0 8a67 	vmov.f32	s17, s15
 8004584:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004588:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800458c:	2900      	cmp	r1, #0
 800458e:	d045      	beq.n	800461c <_dtoa_r+0x5b4>
 8004590:	494c      	ldr	r1, [pc, #304]	; (80046c4 <_dtoa_r+0x65c>)
 8004592:	2000      	movs	r0, #0
 8004594:	f7fc f962 	bl	800085c <__aeabi_ddiv>
 8004598:	ec53 2b18 	vmov	r2, r3, d8
 800459c:	f7fb fe7c 	bl	8000298 <__aeabi_dsub>
 80045a0:	9d00      	ldr	r5, [sp, #0]
 80045a2:	ec41 0b18 	vmov	d8, r0, r1
 80045a6:	4639      	mov	r1, r7
 80045a8:	4630      	mov	r0, r6
 80045aa:	f7fc fadd 	bl	8000b68 <__aeabi_d2iz>
 80045ae:	900c      	str	r0, [sp, #48]	; 0x30
 80045b0:	f7fb ffc0 	bl	8000534 <__aeabi_i2d>
 80045b4:	4602      	mov	r2, r0
 80045b6:	460b      	mov	r3, r1
 80045b8:	4630      	mov	r0, r6
 80045ba:	4639      	mov	r1, r7
 80045bc:	f7fb fe6c 	bl	8000298 <__aeabi_dsub>
 80045c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80045c2:	3330      	adds	r3, #48	; 0x30
 80045c4:	f805 3b01 	strb.w	r3, [r5], #1
 80045c8:	ec53 2b18 	vmov	r2, r3, d8
 80045cc:	4606      	mov	r6, r0
 80045ce:	460f      	mov	r7, r1
 80045d0:	f7fc fa8c 	bl	8000aec <__aeabi_dcmplt>
 80045d4:	2800      	cmp	r0, #0
 80045d6:	d165      	bne.n	80046a4 <_dtoa_r+0x63c>
 80045d8:	4632      	mov	r2, r6
 80045da:	463b      	mov	r3, r7
 80045dc:	4935      	ldr	r1, [pc, #212]	; (80046b4 <_dtoa_r+0x64c>)
 80045de:	2000      	movs	r0, #0
 80045e0:	f7fb fe5a 	bl	8000298 <__aeabi_dsub>
 80045e4:	ec53 2b18 	vmov	r2, r3, d8
 80045e8:	f7fc fa80 	bl	8000aec <__aeabi_dcmplt>
 80045ec:	2800      	cmp	r0, #0
 80045ee:	f040 80b9 	bne.w	8004764 <_dtoa_r+0x6fc>
 80045f2:	9b02      	ldr	r3, [sp, #8]
 80045f4:	429d      	cmp	r5, r3
 80045f6:	f43f af75 	beq.w	80044e4 <_dtoa_r+0x47c>
 80045fa:	4b2f      	ldr	r3, [pc, #188]	; (80046b8 <_dtoa_r+0x650>)
 80045fc:	ec51 0b18 	vmov	r0, r1, d8
 8004600:	2200      	movs	r2, #0
 8004602:	f7fc f801 	bl	8000608 <__aeabi_dmul>
 8004606:	4b2c      	ldr	r3, [pc, #176]	; (80046b8 <_dtoa_r+0x650>)
 8004608:	ec41 0b18 	vmov	d8, r0, r1
 800460c:	2200      	movs	r2, #0
 800460e:	4630      	mov	r0, r6
 8004610:	4639      	mov	r1, r7
 8004612:	f7fb fff9 	bl	8000608 <__aeabi_dmul>
 8004616:	4606      	mov	r6, r0
 8004618:	460f      	mov	r7, r1
 800461a:	e7c4      	b.n	80045a6 <_dtoa_r+0x53e>
 800461c:	ec51 0b17 	vmov	r0, r1, d7
 8004620:	f7fb fff2 	bl	8000608 <__aeabi_dmul>
 8004624:	9b02      	ldr	r3, [sp, #8]
 8004626:	9d00      	ldr	r5, [sp, #0]
 8004628:	930c      	str	r3, [sp, #48]	; 0x30
 800462a:	ec41 0b18 	vmov	d8, r0, r1
 800462e:	4639      	mov	r1, r7
 8004630:	4630      	mov	r0, r6
 8004632:	f7fc fa99 	bl	8000b68 <__aeabi_d2iz>
 8004636:	9011      	str	r0, [sp, #68]	; 0x44
 8004638:	f7fb ff7c 	bl	8000534 <__aeabi_i2d>
 800463c:	4602      	mov	r2, r0
 800463e:	460b      	mov	r3, r1
 8004640:	4630      	mov	r0, r6
 8004642:	4639      	mov	r1, r7
 8004644:	f7fb fe28 	bl	8000298 <__aeabi_dsub>
 8004648:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800464a:	3330      	adds	r3, #48	; 0x30
 800464c:	f805 3b01 	strb.w	r3, [r5], #1
 8004650:	9b02      	ldr	r3, [sp, #8]
 8004652:	429d      	cmp	r5, r3
 8004654:	4606      	mov	r6, r0
 8004656:	460f      	mov	r7, r1
 8004658:	f04f 0200 	mov.w	r2, #0
 800465c:	d134      	bne.n	80046c8 <_dtoa_r+0x660>
 800465e:	4b19      	ldr	r3, [pc, #100]	; (80046c4 <_dtoa_r+0x65c>)
 8004660:	ec51 0b18 	vmov	r0, r1, d8
 8004664:	f7fb fe1a 	bl	800029c <__adddf3>
 8004668:	4602      	mov	r2, r0
 800466a:	460b      	mov	r3, r1
 800466c:	4630      	mov	r0, r6
 800466e:	4639      	mov	r1, r7
 8004670:	f7fc fa5a 	bl	8000b28 <__aeabi_dcmpgt>
 8004674:	2800      	cmp	r0, #0
 8004676:	d175      	bne.n	8004764 <_dtoa_r+0x6fc>
 8004678:	ec53 2b18 	vmov	r2, r3, d8
 800467c:	4911      	ldr	r1, [pc, #68]	; (80046c4 <_dtoa_r+0x65c>)
 800467e:	2000      	movs	r0, #0
 8004680:	f7fb fe0a 	bl	8000298 <__aeabi_dsub>
 8004684:	4602      	mov	r2, r0
 8004686:	460b      	mov	r3, r1
 8004688:	4630      	mov	r0, r6
 800468a:	4639      	mov	r1, r7
 800468c:	f7fc fa2e 	bl	8000aec <__aeabi_dcmplt>
 8004690:	2800      	cmp	r0, #0
 8004692:	f43f af27 	beq.w	80044e4 <_dtoa_r+0x47c>
 8004696:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004698:	1e6b      	subs	r3, r5, #1
 800469a:	930c      	str	r3, [sp, #48]	; 0x30
 800469c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80046a0:	2b30      	cmp	r3, #48	; 0x30
 80046a2:	d0f8      	beq.n	8004696 <_dtoa_r+0x62e>
 80046a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80046a8:	e04a      	b.n	8004740 <_dtoa_r+0x6d8>
 80046aa:	bf00      	nop
 80046ac:	08006518 	.word	0x08006518
 80046b0:	080064f0 	.word	0x080064f0
 80046b4:	3ff00000 	.word	0x3ff00000
 80046b8:	40240000 	.word	0x40240000
 80046bc:	401c0000 	.word	0x401c0000
 80046c0:	40140000 	.word	0x40140000
 80046c4:	3fe00000 	.word	0x3fe00000
 80046c8:	4baf      	ldr	r3, [pc, #700]	; (8004988 <_dtoa_r+0x920>)
 80046ca:	f7fb ff9d 	bl	8000608 <__aeabi_dmul>
 80046ce:	4606      	mov	r6, r0
 80046d0:	460f      	mov	r7, r1
 80046d2:	e7ac      	b.n	800462e <_dtoa_r+0x5c6>
 80046d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80046d8:	9d00      	ldr	r5, [sp, #0]
 80046da:	4642      	mov	r2, r8
 80046dc:	464b      	mov	r3, r9
 80046de:	4630      	mov	r0, r6
 80046e0:	4639      	mov	r1, r7
 80046e2:	f7fc f8bb 	bl	800085c <__aeabi_ddiv>
 80046e6:	f7fc fa3f 	bl	8000b68 <__aeabi_d2iz>
 80046ea:	9002      	str	r0, [sp, #8]
 80046ec:	f7fb ff22 	bl	8000534 <__aeabi_i2d>
 80046f0:	4642      	mov	r2, r8
 80046f2:	464b      	mov	r3, r9
 80046f4:	f7fb ff88 	bl	8000608 <__aeabi_dmul>
 80046f8:	4602      	mov	r2, r0
 80046fa:	460b      	mov	r3, r1
 80046fc:	4630      	mov	r0, r6
 80046fe:	4639      	mov	r1, r7
 8004700:	f7fb fdca 	bl	8000298 <__aeabi_dsub>
 8004704:	9e02      	ldr	r6, [sp, #8]
 8004706:	9f01      	ldr	r7, [sp, #4]
 8004708:	3630      	adds	r6, #48	; 0x30
 800470a:	f805 6b01 	strb.w	r6, [r5], #1
 800470e:	9e00      	ldr	r6, [sp, #0]
 8004710:	1bae      	subs	r6, r5, r6
 8004712:	42b7      	cmp	r7, r6
 8004714:	4602      	mov	r2, r0
 8004716:	460b      	mov	r3, r1
 8004718:	d137      	bne.n	800478a <_dtoa_r+0x722>
 800471a:	f7fb fdbf 	bl	800029c <__adddf3>
 800471e:	4642      	mov	r2, r8
 8004720:	464b      	mov	r3, r9
 8004722:	4606      	mov	r6, r0
 8004724:	460f      	mov	r7, r1
 8004726:	f7fc f9ff 	bl	8000b28 <__aeabi_dcmpgt>
 800472a:	b9c8      	cbnz	r0, 8004760 <_dtoa_r+0x6f8>
 800472c:	4642      	mov	r2, r8
 800472e:	464b      	mov	r3, r9
 8004730:	4630      	mov	r0, r6
 8004732:	4639      	mov	r1, r7
 8004734:	f7fc f9d0 	bl	8000ad8 <__aeabi_dcmpeq>
 8004738:	b110      	cbz	r0, 8004740 <_dtoa_r+0x6d8>
 800473a:	9b02      	ldr	r3, [sp, #8]
 800473c:	07d9      	lsls	r1, r3, #31
 800473e:	d40f      	bmi.n	8004760 <_dtoa_r+0x6f8>
 8004740:	4620      	mov	r0, r4
 8004742:	4659      	mov	r1, fp
 8004744:	f000 fad6 	bl	8004cf4 <_Bfree>
 8004748:	2300      	movs	r3, #0
 800474a:	702b      	strb	r3, [r5, #0]
 800474c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800474e:	f10a 0001 	add.w	r0, sl, #1
 8004752:	6018      	str	r0, [r3, #0]
 8004754:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004756:	2b00      	cmp	r3, #0
 8004758:	f43f acd8 	beq.w	800410c <_dtoa_r+0xa4>
 800475c:	601d      	str	r5, [r3, #0]
 800475e:	e4d5      	b.n	800410c <_dtoa_r+0xa4>
 8004760:	f8cd a01c 	str.w	sl, [sp, #28]
 8004764:	462b      	mov	r3, r5
 8004766:	461d      	mov	r5, r3
 8004768:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800476c:	2a39      	cmp	r2, #57	; 0x39
 800476e:	d108      	bne.n	8004782 <_dtoa_r+0x71a>
 8004770:	9a00      	ldr	r2, [sp, #0]
 8004772:	429a      	cmp	r2, r3
 8004774:	d1f7      	bne.n	8004766 <_dtoa_r+0x6fe>
 8004776:	9a07      	ldr	r2, [sp, #28]
 8004778:	9900      	ldr	r1, [sp, #0]
 800477a:	3201      	adds	r2, #1
 800477c:	9207      	str	r2, [sp, #28]
 800477e:	2230      	movs	r2, #48	; 0x30
 8004780:	700a      	strb	r2, [r1, #0]
 8004782:	781a      	ldrb	r2, [r3, #0]
 8004784:	3201      	adds	r2, #1
 8004786:	701a      	strb	r2, [r3, #0]
 8004788:	e78c      	b.n	80046a4 <_dtoa_r+0x63c>
 800478a:	4b7f      	ldr	r3, [pc, #508]	; (8004988 <_dtoa_r+0x920>)
 800478c:	2200      	movs	r2, #0
 800478e:	f7fb ff3b 	bl	8000608 <__aeabi_dmul>
 8004792:	2200      	movs	r2, #0
 8004794:	2300      	movs	r3, #0
 8004796:	4606      	mov	r6, r0
 8004798:	460f      	mov	r7, r1
 800479a:	f7fc f99d 	bl	8000ad8 <__aeabi_dcmpeq>
 800479e:	2800      	cmp	r0, #0
 80047a0:	d09b      	beq.n	80046da <_dtoa_r+0x672>
 80047a2:	e7cd      	b.n	8004740 <_dtoa_r+0x6d8>
 80047a4:	9a08      	ldr	r2, [sp, #32]
 80047a6:	2a00      	cmp	r2, #0
 80047a8:	f000 80c4 	beq.w	8004934 <_dtoa_r+0x8cc>
 80047ac:	9a05      	ldr	r2, [sp, #20]
 80047ae:	2a01      	cmp	r2, #1
 80047b0:	f300 80a8 	bgt.w	8004904 <_dtoa_r+0x89c>
 80047b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80047b6:	2a00      	cmp	r2, #0
 80047b8:	f000 80a0 	beq.w	80048fc <_dtoa_r+0x894>
 80047bc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80047c0:	9e06      	ldr	r6, [sp, #24]
 80047c2:	4645      	mov	r5, r8
 80047c4:	9a04      	ldr	r2, [sp, #16]
 80047c6:	2101      	movs	r1, #1
 80047c8:	441a      	add	r2, r3
 80047ca:	4620      	mov	r0, r4
 80047cc:	4498      	add	r8, r3
 80047ce:	9204      	str	r2, [sp, #16]
 80047d0:	f000 fb4c 	bl	8004e6c <__i2b>
 80047d4:	4607      	mov	r7, r0
 80047d6:	2d00      	cmp	r5, #0
 80047d8:	dd0b      	ble.n	80047f2 <_dtoa_r+0x78a>
 80047da:	9b04      	ldr	r3, [sp, #16]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	dd08      	ble.n	80047f2 <_dtoa_r+0x78a>
 80047e0:	42ab      	cmp	r3, r5
 80047e2:	9a04      	ldr	r2, [sp, #16]
 80047e4:	bfa8      	it	ge
 80047e6:	462b      	movge	r3, r5
 80047e8:	eba8 0803 	sub.w	r8, r8, r3
 80047ec:	1aed      	subs	r5, r5, r3
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	9304      	str	r3, [sp, #16]
 80047f2:	9b06      	ldr	r3, [sp, #24]
 80047f4:	b1fb      	cbz	r3, 8004836 <_dtoa_r+0x7ce>
 80047f6:	9b08      	ldr	r3, [sp, #32]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 809f 	beq.w	800493c <_dtoa_r+0x8d4>
 80047fe:	2e00      	cmp	r6, #0
 8004800:	dd11      	ble.n	8004826 <_dtoa_r+0x7be>
 8004802:	4639      	mov	r1, r7
 8004804:	4632      	mov	r2, r6
 8004806:	4620      	mov	r0, r4
 8004808:	f000 fbec 	bl	8004fe4 <__pow5mult>
 800480c:	465a      	mov	r2, fp
 800480e:	4601      	mov	r1, r0
 8004810:	4607      	mov	r7, r0
 8004812:	4620      	mov	r0, r4
 8004814:	f000 fb40 	bl	8004e98 <__multiply>
 8004818:	4659      	mov	r1, fp
 800481a:	9007      	str	r0, [sp, #28]
 800481c:	4620      	mov	r0, r4
 800481e:	f000 fa69 	bl	8004cf4 <_Bfree>
 8004822:	9b07      	ldr	r3, [sp, #28]
 8004824:	469b      	mov	fp, r3
 8004826:	9b06      	ldr	r3, [sp, #24]
 8004828:	1b9a      	subs	r2, r3, r6
 800482a:	d004      	beq.n	8004836 <_dtoa_r+0x7ce>
 800482c:	4659      	mov	r1, fp
 800482e:	4620      	mov	r0, r4
 8004830:	f000 fbd8 	bl	8004fe4 <__pow5mult>
 8004834:	4683      	mov	fp, r0
 8004836:	2101      	movs	r1, #1
 8004838:	4620      	mov	r0, r4
 800483a:	f000 fb17 	bl	8004e6c <__i2b>
 800483e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004840:	2b00      	cmp	r3, #0
 8004842:	4606      	mov	r6, r0
 8004844:	dd7c      	ble.n	8004940 <_dtoa_r+0x8d8>
 8004846:	461a      	mov	r2, r3
 8004848:	4601      	mov	r1, r0
 800484a:	4620      	mov	r0, r4
 800484c:	f000 fbca 	bl	8004fe4 <__pow5mult>
 8004850:	9b05      	ldr	r3, [sp, #20]
 8004852:	2b01      	cmp	r3, #1
 8004854:	4606      	mov	r6, r0
 8004856:	dd76      	ble.n	8004946 <_dtoa_r+0x8de>
 8004858:	2300      	movs	r3, #0
 800485a:	9306      	str	r3, [sp, #24]
 800485c:	6933      	ldr	r3, [r6, #16]
 800485e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004862:	6918      	ldr	r0, [r3, #16]
 8004864:	f000 fab2 	bl	8004dcc <__hi0bits>
 8004868:	f1c0 0020 	rsb	r0, r0, #32
 800486c:	9b04      	ldr	r3, [sp, #16]
 800486e:	4418      	add	r0, r3
 8004870:	f010 001f 	ands.w	r0, r0, #31
 8004874:	f000 8086 	beq.w	8004984 <_dtoa_r+0x91c>
 8004878:	f1c0 0320 	rsb	r3, r0, #32
 800487c:	2b04      	cmp	r3, #4
 800487e:	dd7f      	ble.n	8004980 <_dtoa_r+0x918>
 8004880:	f1c0 001c 	rsb	r0, r0, #28
 8004884:	9b04      	ldr	r3, [sp, #16]
 8004886:	4403      	add	r3, r0
 8004888:	4480      	add	r8, r0
 800488a:	4405      	add	r5, r0
 800488c:	9304      	str	r3, [sp, #16]
 800488e:	f1b8 0f00 	cmp.w	r8, #0
 8004892:	dd05      	ble.n	80048a0 <_dtoa_r+0x838>
 8004894:	4659      	mov	r1, fp
 8004896:	4642      	mov	r2, r8
 8004898:	4620      	mov	r0, r4
 800489a:	f000 fbfd 	bl	8005098 <__lshift>
 800489e:	4683      	mov	fp, r0
 80048a0:	9b04      	ldr	r3, [sp, #16]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	dd05      	ble.n	80048b2 <_dtoa_r+0x84a>
 80048a6:	4631      	mov	r1, r6
 80048a8:	461a      	mov	r2, r3
 80048aa:	4620      	mov	r0, r4
 80048ac:	f000 fbf4 	bl	8005098 <__lshift>
 80048b0:	4606      	mov	r6, r0
 80048b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d069      	beq.n	800498c <_dtoa_r+0x924>
 80048b8:	4631      	mov	r1, r6
 80048ba:	4658      	mov	r0, fp
 80048bc:	f000 fc58 	bl	8005170 <__mcmp>
 80048c0:	2800      	cmp	r0, #0
 80048c2:	da63      	bge.n	800498c <_dtoa_r+0x924>
 80048c4:	2300      	movs	r3, #0
 80048c6:	4659      	mov	r1, fp
 80048c8:	220a      	movs	r2, #10
 80048ca:	4620      	mov	r0, r4
 80048cc:	f000 fa34 	bl	8004d38 <__multadd>
 80048d0:	9b08      	ldr	r3, [sp, #32]
 80048d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80048d6:	4683      	mov	fp, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 818f 	beq.w	8004bfc <_dtoa_r+0xb94>
 80048de:	4639      	mov	r1, r7
 80048e0:	2300      	movs	r3, #0
 80048e2:	220a      	movs	r2, #10
 80048e4:	4620      	mov	r0, r4
 80048e6:	f000 fa27 	bl	8004d38 <__multadd>
 80048ea:	f1b9 0f00 	cmp.w	r9, #0
 80048ee:	4607      	mov	r7, r0
 80048f0:	f300 808e 	bgt.w	8004a10 <_dtoa_r+0x9a8>
 80048f4:	9b05      	ldr	r3, [sp, #20]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	dc50      	bgt.n	800499c <_dtoa_r+0x934>
 80048fa:	e089      	b.n	8004a10 <_dtoa_r+0x9a8>
 80048fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80048fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004902:	e75d      	b.n	80047c0 <_dtoa_r+0x758>
 8004904:	9b01      	ldr	r3, [sp, #4]
 8004906:	1e5e      	subs	r6, r3, #1
 8004908:	9b06      	ldr	r3, [sp, #24]
 800490a:	42b3      	cmp	r3, r6
 800490c:	bfbf      	itttt	lt
 800490e:	9b06      	ldrlt	r3, [sp, #24]
 8004910:	9606      	strlt	r6, [sp, #24]
 8004912:	1af2      	sublt	r2, r6, r3
 8004914:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8004916:	bfb6      	itet	lt
 8004918:	189b      	addlt	r3, r3, r2
 800491a:	1b9e      	subge	r6, r3, r6
 800491c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800491e:	9b01      	ldr	r3, [sp, #4]
 8004920:	bfb8      	it	lt
 8004922:	2600      	movlt	r6, #0
 8004924:	2b00      	cmp	r3, #0
 8004926:	bfb5      	itete	lt
 8004928:	eba8 0503 	sublt.w	r5, r8, r3
 800492c:	9b01      	ldrge	r3, [sp, #4]
 800492e:	2300      	movlt	r3, #0
 8004930:	4645      	movge	r5, r8
 8004932:	e747      	b.n	80047c4 <_dtoa_r+0x75c>
 8004934:	9e06      	ldr	r6, [sp, #24]
 8004936:	9f08      	ldr	r7, [sp, #32]
 8004938:	4645      	mov	r5, r8
 800493a:	e74c      	b.n	80047d6 <_dtoa_r+0x76e>
 800493c:	9a06      	ldr	r2, [sp, #24]
 800493e:	e775      	b.n	800482c <_dtoa_r+0x7c4>
 8004940:	9b05      	ldr	r3, [sp, #20]
 8004942:	2b01      	cmp	r3, #1
 8004944:	dc18      	bgt.n	8004978 <_dtoa_r+0x910>
 8004946:	9b02      	ldr	r3, [sp, #8]
 8004948:	b9b3      	cbnz	r3, 8004978 <_dtoa_r+0x910>
 800494a:	9b03      	ldr	r3, [sp, #12]
 800494c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004950:	b9a3      	cbnz	r3, 800497c <_dtoa_r+0x914>
 8004952:	9b03      	ldr	r3, [sp, #12]
 8004954:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004958:	0d1b      	lsrs	r3, r3, #20
 800495a:	051b      	lsls	r3, r3, #20
 800495c:	b12b      	cbz	r3, 800496a <_dtoa_r+0x902>
 800495e:	9b04      	ldr	r3, [sp, #16]
 8004960:	3301      	adds	r3, #1
 8004962:	9304      	str	r3, [sp, #16]
 8004964:	f108 0801 	add.w	r8, r8, #1
 8004968:	2301      	movs	r3, #1
 800496a:	9306      	str	r3, [sp, #24]
 800496c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800496e:	2b00      	cmp	r3, #0
 8004970:	f47f af74 	bne.w	800485c <_dtoa_r+0x7f4>
 8004974:	2001      	movs	r0, #1
 8004976:	e779      	b.n	800486c <_dtoa_r+0x804>
 8004978:	2300      	movs	r3, #0
 800497a:	e7f6      	b.n	800496a <_dtoa_r+0x902>
 800497c:	9b02      	ldr	r3, [sp, #8]
 800497e:	e7f4      	b.n	800496a <_dtoa_r+0x902>
 8004980:	d085      	beq.n	800488e <_dtoa_r+0x826>
 8004982:	4618      	mov	r0, r3
 8004984:	301c      	adds	r0, #28
 8004986:	e77d      	b.n	8004884 <_dtoa_r+0x81c>
 8004988:	40240000 	.word	0x40240000
 800498c:	9b01      	ldr	r3, [sp, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	dc38      	bgt.n	8004a04 <_dtoa_r+0x99c>
 8004992:	9b05      	ldr	r3, [sp, #20]
 8004994:	2b02      	cmp	r3, #2
 8004996:	dd35      	ble.n	8004a04 <_dtoa_r+0x99c>
 8004998:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800499c:	f1b9 0f00 	cmp.w	r9, #0
 80049a0:	d10d      	bne.n	80049be <_dtoa_r+0x956>
 80049a2:	4631      	mov	r1, r6
 80049a4:	464b      	mov	r3, r9
 80049a6:	2205      	movs	r2, #5
 80049a8:	4620      	mov	r0, r4
 80049aa:	f000 f9c5 	bl	8004d38 <__multadd>
 80049ae:	4601      	mov	r1, r0
 80049b0:	4606      	mov	r6, r0
 80049b2:	4658      	mov	r0, fp
 80049b4:	f000 fbdc 	bl	8005170 <__mcmp>
 80049b8:	2800      	cmp	r0, #0
 80049ba:	f73f adbd 	bgt.w	8004538 <_dtoa_r+0x4d0>
 80049be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049c0:	9d00      	ldr	r5, [sp, #0]
 80049c2:	ea6f 0a03 	mvn.w	sl, r3
 80049c6:	f04f 0800 	mov.w	r8, #0
 80049ca:	4631      	mov	r1, r6
 80049cc:	4620      	mov	r0, r4
 80049ce:	f000 f991 	bl	8004cf4 <_Bfree>
 80049d2:	2f00      	cmp	r7, #0
 80049d4:	f43f aeb4 	beq.w	8004740 <_dtoa_r+0x6d8>
 80049d8:	f1b8 0f00 	cmp.w	r8, #0
 80049dc:	d005      	beq.n	80049ea <_dtoa_r+0x982>
 80049de:	45b8      	cmp	r8, r7
 80049e0:	d003      	beq.n	80049ea <_dtoa_r+0x982>
 80049e2:	4641      	mov	r1, r8
 80049e4:	4620      	mov	r0, r4
 80049e6:	f000 f985 	bl	8004cf4 <_Bfree>
 80049ea:	4639      	mov	r1, r7
 80049ec:	4620      	mov	r0, r4
 80049ee:	f000 f981 	bl	8004cf4 <_Bfree>
 80049f2:	e6a5      	b.n	8004740 <_dtoa_r+0x6d8>
 80049f4:	2600      	movs	r6, #0
 80049f6:	4637      	mov	r7, r6
 80049f8:	e7e1      	b.n	80049be <_dtoa_r+0x956>
 80049fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80049fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004a00:	4637      	mov	r7, r6
 8004a02:	e599      	b.n	8004538 <_dtoa_r+0x4d0>
 8004a04:	9b08      	ldr	r3, [sp, #32]
 8004a06:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f000 80fd 	beq.w	8004c0a <_dtoa_r+0xba2>
 8004a10:	2d00      	cmp	r5, #0
 8004a12:	dd05      	ble.n	8004a20 <_dtoa_r+0x9b8>
 8004a14:	4639      	mov	r1, r7
 8004a16:	462a      	mov	r2, r5
 8004a18:	4620      	mov	r0, r4
 8004a1a:	f000 fb3d 	bl	8005098 <__lshift>
 8004a1e:	4607      	mov	r7, r0
 8004a20:	9b06      	ldr	r3, [sp, #24]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d05c      	beq.n	8004ae0 <_dtoa_r+0xa78>
 8004a26:	6879      	ldr	r1, [r7, #4]
 8004a28:	4620      	mov	r0, r4
 8004a2a:	f000 f923 	bl	8004c74 <_Balloc>
 8004a2e:	4605      	mov	r5, r0
 8004a30:	b928      	cbnz	r0, 8004a3e <_dtoa_r+0x9d6>
 8004a32:	4b80      	ldr	r3, [pc, #512]	; (8004c34 <_dtoa_r+0xbcc>)
 8004a34:	4602      	mov	r2, r0
 8004a36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004a3a:	f7ff bb2e 	b.w	800409a <_dtoa_r+0x32>
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	3202      	adds	r2, #2
 8004a42:	0092      	lsls	r2, r2, #2
 8004a44:	f107 010c 	add.w	r1, r7, #12
 8004a48:	300c      	adds	r0, #12
 8004a4a:	f000 f905 	bl	8004c58 <memcpy>
 8004a4e:	2201      	movs	r2, #1
 8004a50:	4629      	mov	r1, r5
 8004a52:	4620      	mov	r0, r4
 8004a54:	f000 fb20 	bl	8005098 <__lshift>
 8004a58:	9b00      	ldr	r3, [sp, #0]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	9301      	str	r3, [sp, #4]
 8004a5e:	9b00      	ldr	r3, [sp, #0]
 8004a60:	444b      	add	r3, r9
 8004a62:	9307      	str	r3, [sp, #28]
 8004a64:	9b02      	ldr	r3, [sp, #8]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	46b8      	mov	r8, r7
 8004a6c:	9306      	str	r3, [sp, #24]
 8004a6e:	4607      	mov	r7, r0
 8004a70:	9b01      	ldr	r3, [sp, #4]
 8004a72:	4631      	mov	r1, r6
 8004a74:	3b01      	subs	r3, #1
 8004a76:	4658      	mov	r0, fp
 8004a78:	9302      	str	r3, [sp, #8]
 8004a7a:	f7ff fa67 	bl	8003f4c <quorem>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	3330      	adds	r3, #48	; 0x30
 8004a82:	9004      	str	r0, [sp, #16]
 8004a84:	4641      	mov	r1, r8
 8004a86:	4658      	mov	r0, fp
 8004a88:	9308      	str	r3, [sp, #32]
 8004a8a:	f000 fb71 	bl	8005170 <__mcmp>
 8004a8e:	463a      	mov	r2, r7
 8004a90:	4681      	mov	r9, r0
 8004a92:	4631      	mov	r1, r6
 8004a94:	4620      	mov	r0, r4
 8004a96:	f000 fb87 	bl	80051a8 <__mdiff>
 8004a9a:	68c2      	ldr	r2, [r0, #12]
 8004a9c:	9b08      	ldr	r3, [sp, #32]
 8004a9e:	4605      	mov	r5, r0
 8004aa0:	bb02      	cbnz	r2, 8004ae4 <_dtoa_r+0xa7c>
 8004aa2:	4601      	mov	r1, r0
 8004aa4:	4658      	mov	r0, fp
 8004aa6:	f000 fb63 	bl	8005170 <__mcmp>
 8004aaa:	9b08      	ldr	r3, [sp, #32]
 8004aac:	4602      	mov	r2, r0
 8004aae:	4629      	mov	r1, r5
 8004ab0:	4620      	mov	r0, r4
 8004ab2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8004ab6:	f000 f91d 	bl	8004cf4 <_Bfree>
 8004aba:	9b05      	ldr	r3, [sp, #20]
 8004abc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004abe:	9d01      	ldr	r5, [sp, #4]
 8004ac0:	ea43 0102 	orr.w	r1, r3, r2
 8004ac4:	9b06      	ldr	r3, [sp, #24]
 8004ac6:	430b      	orrs	r3, r1
 8004ac8:	9b08      	ldr	r3, [sp, #32]
 8004aca:	d10d      	bne.n	8004ae8 <_dtoa_r+0xa80>
 8004acc:	2b39      	cmp	r3, #57	; 0x39
 8004ace:	d029      	beq.n	8004b24 <_dtoa_r+0xabc>
 8004ad0:	f1b9 0f00 	cmp.w	r9, #0
 8004ad4:	dd01      	ble.n	8004ada <_dtoa_r+0xa72>
 8004ad6:	9b04      	ldr	r3, [sp, #16]
 8004ad8:	3331      	adds	r3, #49	; 0x31
 8004ada:	9a02      	ldr	r2, [sp, #8]
 8004adc:	7013      	strb	r3, [r2, #0]
 8004ade:	e774      	b.n	80049ca <_dtoa_r+0x962>
 8004ae0:	4638      	mov	r0, r7
 8004ae2:	e7b9      	b.n	8004a58 <_dtoa_r+0x9f0>
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	e7e2      	b.n	8004aae <_dtoa_r+0xa46>
 8004ae8:	f1b9 0f00 	cmp.w	r9, #0
 8004aec:	db06      	blt.n	8004afc <_dtoa_r+0xa94>
 8004aee:	9905      	ldr	r1, [sp, #20]
 8004af0:	ea41 0909 	orr.w	r9, r1, r9
 8004af4:	9906      	ldr	r1, [sp, #24]
 8004af6:	ea59 0101 	orrs.w	r1, r9, r1
 8004afa:	d120      	bne.n	8004b3e <_dtoa_r+0xad6>
 8004afc:	2a00      	cmp	r2, #0
 8004afe:	ddec      	ble.n	8004ada <_dtoa_r+0xa72>
 8004b00:	4659      	mov	r1, fp
 8004b02:	2201      	movs	r2, #1
 8004b04:	4620      	mov	r0, r4
 8004b06:	9301      	str	r3, [sp, #4]
 8004b08:	f000 fac6 	bl	8005098 <__lshift>
 8004b0c:	4631      	mov	r1, r6
 8004b0e:	4683      	mov	fp, r0
 8004b10:	f000 fb2e 	bl	8005170 <__mcmp>
 8004b14:	2800      	cmp	r0, #0
 8004b16:	9b01      	ldr	r3, [sp, #4]
 8004b18:	dc02      	bgt.n	8004b20 <_dtoa_r+0xab8>
 8004b1a:	d1de      	bne.n	8004ada <_dtoa_r+0xa72>
 8004b1c:	07da      	lsls	r2, r3, #31
 8004b1e:	d5dc      	bpl.n	8004ada <_dtoa_r+0xa72>
 8004b20:	2b39      	cmp	r3, #57	; 0x39
 8004b22:	d1d8      	bne.n	8004ad6 <_dtoa_r+0xa6e>
 8004b24:	9a02      	ldr	r2, [sp, #8]
 8004b26:	2339      	movs	r3, #57	; 0x39
 8004b28:	7013      	strb	r3, [r2, #0]
 8004b2a:	462b      	mov	r3, r5
 8004b2c:	461d      	mov	r5, r3
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004b34:	2a39      	cmp	r2, #57	; 0x39
 8004b36:	d050      	beq.n	8004bda <_dtoa_r+0xb72>
 8004b38:	3201      	adds	r2, #1
 8004b3a:	701a      	strb	r2, [r3, #0]
 8004b3c:	e745      	b.n	80049ca <_dtoa_r+0x962>
 8004b3e:	2a00      	cmp	r2, #0
 8004b40:	dd03      	ble.n	8004b4a <_dtoa_r+0xae2>
 8004b42:	2b39      	cmp	r3, #57	; 0x39
 8004b44:	d0ee      	beq.n	8004b24 <_dtoa_r+0xabc>
 8004b46:	3301      	adds	r3, #1
 8004b48:	e7c7      	b.n	8004ada <_dtoa_r+0xa72>
 8004b4a:	9a01      	ldr	r2, [sp, #4]
 8004b4c:	9907      	ldr	r1, [sp, #28]
 8004b4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004b52:	428a      	cmp	r2, r1
 8004b54:	d02a      	beq.n	8004bac <_dtoa_r+0xb44>
 8004b56:	4659      	mov	r1, fp
 8004b58:	2300      	movs	r3, #0
 8004b5a:	220a      	movs	r2, #10
 8004b5c:	4620      	mov	r0, r4
 8004b5e:	f000 f8eb 	bl	8004d38 <__multadd>
 8004b62:	45b8      	cmp	r8, r7
 8004b64:	4683      	mov	fp, r0
 8004b66:	f04f 0300 	mov.w	r3, #0
 8004b6a:	f04f 020a 	mov.w	r2, #10
 8004b6e:	4641      	mov	r1, r8
 8004b70:	4620      	mov	r0, r4
 8004b72:	d107      	bne.n	8004b84 <_dtoa_r+0xb1c>
 8004b74:	f000 f8e0 	bl	8004d38 <__multadd>
 8004b78:	4680      	mov	r8, r0
 8004b7a:	4607      	mov	r7, r0
 8004b7c:	9b01      	ldr	r3, [sp, #4]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	9301      	str	r3, [sp, #4]
 8004b82:	e775      	b.n	8004a70 <_dtoa_r+0xa08>
 8004b84:	f000 f8d8 	bl	8004d38 <__multadd>
 8004b88:	4639      	mov	r1, r7
 8004b8a:	4680      	mov	r8, r0
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	220a      	movs	r2, #10
 8004b90:	4620      	mov	r0, r4
 8004b92:	f000 f8d1 	bl	8004d38 <__multadd>
 8004b96:	4607      	mov	r7, r0
 8004b98:	e7f0      	b.n	8004b7c <_dtoa_r+0xb14>
 8004b9a:	f1b9 0f00 	cmp.w	r9, #0
 8004b9e:	9a00      	ldr	r2, [sp, #0]
 8004ba0:	bfcc      	ite	gt
 8004ba2:	464d      	movgt	r5, r9
 8004ba4:	2501      	movle	r5, #1
 8004ba6:	4415      	add	r5, r2
 8004ba8:	f04f 0800 	mov.w	r8, #0
 8004bac:	4659      	mov	r1, fp
 8004bae:	2201      	movs	r2, #1
 8004bb0:	4620      	mov	r0, r4
 8004bb2:	9301      	str	r3, [sp, #4]
 8004bb4:	f000 fa70 	bl	8005098 <__lshift>
 8004bb8:	4631      	mov	r1, r6
 8004bba:	4683      	mov	fp, r0
 8004bbc:	f000 fad8 	bl	8005170 <__mcmp>
 8004bc0:	2800      	cmp	r0, #0
 8004bc2:	dcb2      	bgt.n	8004b2a <_dtoa_r+0xac2>
 8004bc4:	d102      	bne.n	8004bcc <_dtoa_r+0xb64>
 8004bc6:	9b01      	ldr	r3, [sp, #4]
 8004bc8:	07db      	lsls	r3, r3, #31
 8004bca:	d4ae      	bmi.n	8004b2a <_dtoa_r+0xac2>
 8004bcc:	462b      	mov	r3, r5
 8004bce:	461d      	mov	r5, r3
 8004bd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004bd4:	2a30      	cmp	r2, #48	; 0x30
 8004bd6:	d0fa      	beq.n	8004bce <_dtoa_r+0xb66>
 8004bd8:	e6f7      	b.n	80049ca <_dtoa_r+0x962>
 8004bda:	9a00      	ldr	r2, [sp, #0]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d1a5      	bne.n	8004b2c <_dtoa_r+0xac4>
 8004be0:	f10a 0a01 	add.w	sl, sl, #1
 8004be4:	2331      	movs	r3, #49	; 0x31
 8004be6:	e779      	b.n	8004adc <_dtoa_r+0xa74>
 8004be8:	4b13      	ldr	r3, [pc, #76]	; (8004c38 <_dtoa_r+0xbd0>)
 8004bea:	f7ff baaf 	b.w	800414c <_dtoa_r+0xe4>
 8004bee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f47f aa86 	bne.w	8004102 <_dtoa_r+0x9a>
 8004bf6:	4b11      	ldr	r3, [pc, #68]	; (8004c3c <_dtoa_r+0xbd4>)
 8004bf8:	f7ff baa8 	b.w	800414c <_dtoa_r+0xe4>
 8004bfc:	f1b9 0f00 	cmp.w	r9, #0
 8004c00:	dc03      	bgt.n	8004c0a <_dtoa_r+0xba2>
 8004c02:	9b05      	ldr	r3, [sp, #20]
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	f73f aec9 	bgt.w	800499c <_dtoa_r+0x934>
 8004c0a:	9d00      	ldr	r5, [sp, #0]
 8004c0c:	4631      	mov	r1, r6
 8004c0e:	4658      	mov	r0, fp
 8004c10:	f7ff f99c 	bl	8003f4c <quorem>
 8004c14:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004c18:	f805 3b01 	strb.w	r3, [r5], #1
 8004c1c:	9a00      	ldr	r2, [sp, #0]
 8004c1e:	1aaa      	subs	r2, r5, r2
 8004c20:	4591      	cmp	r9, r2
 8004c22:	ddba      	ble.n	8004b9a <_dtoa_r+0xb32>
 8004c24:	4659      	mov	r1, fp
 8004c26:	2300      	movs	r3, #0
 8004c28:	220a      	movs	r2, #10
 8004c2a:	4620      	mov	r0, r4
 8004c2c:	f000 f884 	bl	8004d38 <__multadd>
 8004c30:	4683      	mov	fp, r0
 8004c32:	e7eb      	b.n	8004c0c <_dtoa_r+0xba4>
 8004c34:	0800647b 	.word	0x0800647b
 8004c38:	080063d4 	.word	0x080063d4
 8004c3c:	080063f8 	.word	0x080063f8

08004c40 <_localeconv_r>:
 8004c40:	4800      	ldr	r0, [pc, #0]	; (8004c44 <_localeconv_r+0x4>)
 8004c42:	4770      	bx	lr
 8004c44:	20000160 	.word	0x20000160

08004c48 <malloc>:
 8004c48:	4b02      	ldr	r3, [pc, #8]	; (8004c54 <malloc+0xc>)
 8004c4a:	4601      	mov	r1, r0
 8004c4c:	6818      	ldr	r0, [r3, #0]
 8004c4e:	f000 bbef 	b.w	8005430 <_malloc_r>
 8004c52:	bf00      	nop
 8004c54:	2000000c 	.word	0x2000000c

08004c58 <memcpy>:
 8004c58:	440a      	add	r2, r1
 8004c5a:	4291      	cmp	r1, r2
 8004c5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c60:	d100      	bne.n	8004c64 <memcpy+0xc>
 8004c62:	4770      	bx	lr
 8004c64:	b510      	push	{r4, lr}
 8004c66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c6e:	4291      	cmp	r1, r2
 8004c70:	d1f9      	bne.n	8004c66 <memcpy+0xe>
 8004c72:	bd10      	pop	{r4, pc}

08004c74 <_Balloc>:
 8004c74:	b570      	push	{r4, r5, r6, lr}
 8004c76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004c78:	4604      	mov	r4, r0
 8004c7a:	460d      	mov	r5, r1
 8004c7c:	b976      	cbnz	r6, 8004c9c <_Balloc+0x28>
 8004c7e:	2010      	movs	r0, #16
 8004c80:	f7ff ffe2 	bl	8004c48 <malloc>
 8004c84:	4602      	mov	r2, r0
 8004c86:	6260      	str	r0, [r4, #36]	; 0x24
 8004c88:	b920      	cbnz	r0, 8004c94 <_Balloc+0x20>
 8004c8a:	4b18      	ldr	r3, [pc, #96]	; (8004cec <_Balloc+0x78>)
 8004c8c:	4818      	ldr	r0, [pc, #96]	; (8004cf0 <_Balloc+0x7c>)
 8004c8e:	2166      	movs	r1, #102	; 0x66
 8004c90:	f000 fd94 	bl	80057bc <__assert_func>
 8004c94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004c98:	6006      	str	r6, [r0, #0]
 8004c9a:	60c6      	str	r6, [r0, #12]
 8004c9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004c9e:	68f3      	ldr	r3, [r6, #12]
 8004ca0:	b183      	cbz	r3, 8004cc4 <_Balloc+0x50>
 8004ca2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004caa:	b9b8      	cbnz	r0, 8004cdc <_Balloc+0x68>
 8004cac:	2101      	movs	r1, #1
 8004cae:	fa01 f605 	lsl.w	r6, r1, r5
 8004cb2:	1d72      	adds	r2, r6, #5
 8004cb4:	0092      	lsls	r2, r2, #2
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	f000 fb5a 	bl	8005370 <_calloc_r>
 8004cbc:	b160      	cbz	r0, 8004cd8 <_Balloc+0x64>
 8004cbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004cc2:	e00e      	b.n	8004ce2 <_Balloc+0x6e>
 8004cc4:	2221      	movs	r2, #33	; 0x21
 8004cc6:	2104      	movs	r1, #4
 8004cc8:	4620      	mov	r0, r4
 8004cca:	f000 fb51 	bl	8005370 <_calloc_r>
 8004cce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cd0:	60f0      	str	r0, [r6, #12]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1e4      	bne.n	8004ca2 <_Balloc+0x2e>
 8004cd8:	2000      	movs	r0, #0
 8004cda:	bd70      	pop	{r4, r5, r6, pc}
 8004cdc:	6802      	ldr	r2, [r0, #0]
 8004cde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004ce8:	e7f7      	b.n	8004cda <_Balloc+0x66>
 8004cea:	bf00      	nop
 8004cec:	08006405 	.word	0x08006405
 8004cf0:	0800648c 	.word	0x0800648c

08004cf4 <_Bfree>:
 8004cf4:	b570      	push	{r4, r5, r6, lr}
 8004cf6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004cf8:	4605      	mov	r5, r0
 8004cfa:	460c      	mov	r4, r1
 8004cfc:	b976      	cbnz	r6, 8004d1c <_Bfree+0x28>
 8004cfe:	2010      	movs	r0, #16
 8004d00:	f7ff ffa2 	bl	8004c48 <malloc>
 8004d04:	4602      	mov	r2, r0
 8004d06:	6268      	str	r0, [r5, #36]	; 0x24
 8004d08:	b920      	cbnz	r0, 8004d14 <_Bfree+0x20>
 8004d0a:	4b09      	ldr	r3, [pc, #36]	; (8004d30 <_Bfree+0x3c>)
 8004d0c:	4809      	ldr	r0, [pc, #36]	; (8004d34 <_Bfree+0x40>)
 8004d0e:	218a      	movs	r1, #138	; 0x8a
 8004d10:	f000 fd54 	bl	80057bc <__assert_func>
 8004d14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004d18:	6006      	str	r6, [r0, #0]
 8004d1a:	60c6      	str	r6, [r0, #12]
 8004d1c:	b13c      	cbz	r4, 8004d2e <_Bfree+0x3a>
 8004d1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004d20:	6862      	ldr	r2, [r4, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004d28:	6021      	str	r1, [r4, #0]
 8004d2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004d2e:	bd70      	pop	{r4, r5, r6, pc}
 8004d30:	08006405 	.word	0x08006405
 8004d34:	0800648c 	.word	0x0800648c

08004d38 <__multadd>:
 8004d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d3c:	690e      	ldr	r6, [r1, #16]
 8004d3e:	4607      	mov	r7, r0
 8004d40:	4698      	mov	r8, r3
 8004d42:	460c      	mov	r4, r1
 8004d44:	f101 0014 	add.w	r0, r1, #20
 8004d48:	2300      	movs	r3, #0
 8004d4a:	6805      	ldr	r5, [r0, #0]
 8004d4c:	b2a9      	uxth	r1, r5
 8004d4e:	fb02 8101 	mla	r1, r2, r1, r8
 8004d52:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8004d56:	0c2d      	lsrs	r5, r5, #16
 8004d58:	fb02 c505 	mla	r5, r2, r5, ip
 8004d5c:	b289      	uxth	r1, r1
 8004d5e:	3301      	adds	r3, #1
 8004d60:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004d64:	429e      	cmp	r6, r3
 8004d66:	f840 1b04 	str.w	r1, [r0], #4
 8004d6a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8004d6e:	dcec      	bgt.n	8004d4a <__multadd+0x12>
 8004d70:	f1b8 0f00 	cmp.w	r8, #0
 8004d74:	d022      	beq.n	8004dbc <__multadd+0x84>
 8004d76:	68a3      	ldr	r3, [r4, #8]
 8004d78:	42b3      	cmp	r3, r6
 8004d7a:	dc19      	bgt.n	8004db0 <__multadd+0x78>
 8004d7c:	6861      	ldr	r1, [r4, #4]
 8004d7e:	4638      	mov	r0, r7
 8004d80:	3101      	adds	r1, #1
 8004d82:	f7ff ff77 	bl	8004c74 <_Balloc>
 8004d86:	4605      	mov	r5, r0
 8004d88:	b928      	cbnz	r0, 8004d96 <__multadd+0x5e>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	4b0d      	ldr	r3, [pc, #52]	; (8004dc4 <__multadd+0x8c>)
 8004d8e:	480e      	ldr	r0, [pc, #56]	; (8004dc8 <__multadd+0x90>)
 8004d90:	21b5      	movs	r1, #181	; 0xb5
 8004d92:	f000 fd13 	bl	80057bc <__assert_func>
 8004d96:	6922      	ldr	r2, [r4, #16]
 8004d98:	3202      	adds	r2, #2
 8004d9a:	f104 010c 	add.w	r1, r4, #12
 8004d9e:	0092      	lsls	r2, r2, #2
 8004da0:	300c      	adds	r0, #12
 8004da2:	f7ff ff59 	bl	8004c58 <memcpy>
 8004da6:	4621      	mov	r1, r4
 8004da8:	4638      	mov	r0, r7
 8004daa:	f7ff ffa3 	bl	8004cf4 <_Bfree>
 8004dae:	462c      	mov	r4, r5
 8004db0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004db4:	3601      	adds	r6, #1
 8004db6:	f8c3 8014 	str.w	r8, [r3, #20]
 8004dba:	6126      	str	r6, [r4, #16]
 8004dbc:	4620      	mov	r0, r4
 8004dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dc2:	bf00      	nop
 8004dc4:	0800647b 	.word	0x0800647b
 8004dc8:	0800648c 	.word	0x0800648c

08004dcc <__hi0bits>:
 8004dcc:	0c03      	lsrs	r3, r0, #16
 8004dce:	041b      	lsls	r3, r3, #16
 8004dd0:	b9d3      	cbnz	r3, 8004e08 <__hi0bits+0x3c>
 8004dd2:	0400      	lsls	r0, r0, #16
 8004dd4:	2310      	movs	r3, #16
 8004dd6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004dda:	bf04      	itt	eq
 8004ddc:	0200      	lsleq	r0, r0, #8
 8004dde:	3308      	addeq	r3, #8
 8004de0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004de4:	bf04      	itt	eq
 8004de6:	0100      	lsleq	r0, r0, #4
 8004de8:	3304      	addeq	r3, #4
 8004dea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004dee:	bf04      	itt	eq
 8004df0:	0080      	lsleq	r0, r0, #2
 8004df2:	3302      	addeq	r3, #2
 8004df4:	2800      	cmp	r0, #0
 8004df6:	db05      	blt.n	8004e04 <__hi0bits+0x38>
 8004df8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004dfc:	f103 0301 	add.w	r3, r3, #1
 8004e00:	bf08      	it	eq
 8004e02:	2320      	moveq	r3, #32
 8004e04:	4618      	mov	r0, r3
 8004e06:	4770      	bx	lr
 8004e08:	2300      	movs	r3, #0
 8004e0a:	e7e4      	b.n	8004dd6 <__hi0bits+0xa>

08004e0c <__lo0bits>:
 8004e0c:	6803      	ldr	r3, [r0, #0]
 8004e0e:	f013 0207 	ands.w	r2, r3, #7
 8004e12:	4601      	mov	r1, r0
 8004e14:	d00b      	beq.n	8004e2e <__lo0bits+0x22>
 8004e16:	07da      	lsls	r2, r3, #31
 8004e18:	d424      	bmi.n	8004e64 <__lo0bits+0x58>
 8004e1a:	0798      	lsls	r0, r3, #30
 8004e1c:	bf49      	itett	mi
 8004e1e:	085b      	lsrmi	r3, r3, #1
 8004e20:	089b      	lsrpl	r3, r3, #2
 8004e22:	2001      	movmi	r0, #1
 8004e24:	600b      	strmi	r3, [r1, #0]
 8004e26:	bf5c      	itt	pl
 8004e28:	600b      	strpl	r3, [r1, #0]
 8004e2a:	2002      	movpl	r0, #2
 8004e2c:	4770      	bx	lr
 8004e2e:	b298      	uxth	r0, r3
 8004e30:	b9b0      	cbnz	r0, 8004e60 <__lo0bits+0x54>
 8004e32:	0c1b      	lsrs	r3, r3, #16
 8004e34:	2010      	movs	r0, #16
 8004e36:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004e3a:	bf04      	itt	eq
 8004e3c:	0a1b      	lsreq	r3, r3, #8
 8004e3e:	3008      	addeq	r0, #8
 8004e40:	071a      	lsls	r2, r3, #28
 8004e42:	bf04      	itt	eq
 8004e44:	091b      	lsreq	r3, r3, #4
 8004e46:	3004      	addeq	r0, #4
 8004e48:	079a      	lsls	r2, r3, #30
 8004e4a:	bf04      	itt	eq
 8004e4c:	089b      	lsreq	r3, r3, #2
 8004e4e:	3002      	addeq	r0, #2
 8004e50:	07da      	lsls	r2, r3, #31
 8004e52:	d403      	bmi.n	8004e5c <__lo0bits+0x50>
 8004e54:	085b      	lsrs	r3, r3, #1
 8004e56:	f100 0001 	add.w	r0, r0, #1
 8004e5a:	d005      	beq.n	8004e68 <__lo0bits+0x5c>
 8004e5c:	600b      	str	r3, [r1, #0]
 8004e5e:	4770      	bx	lr
 8004e60:	4610      	mov	r0, r2
 8004e62:	e7e8      	b.n	8004e36 <__lo0bits+0x2a>
 8004e64:	2000      	movs	r0, #0
 8004e66:	4770      	bx	lr
 8004e68:	2020      	movs	r0, #32
 8004e6a:	4770      	bx	lr

08004e6c <__i2b>:
 8004e6c:	b510      	push	{r4, lr}
 8004e6e:	460c      	mov	r4, r1
 8004e70:	2101      	movs	r1, #1
 8004e72:	f7ff feff 	bl	8004c74 <_Balloc>
 8004e76:	4602      	mov	r2, r0
 8004e78:	b928      	cbnz	r0, 8004e86 <__i2b+0x1a>
 8004e7a:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <__i2b+0x24>)
 8004e7c:	4805      	ldr	r0, [pc, #20]	; (8004e94 <__i2b+0x28>)
 8004e7e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004e82:	f000 fc9b 	bl	80057bc <__assert_func>
 8004e86:	2301      	movs	r3, #1
 8004e88:	6144      	str	r4, [r0, #20]
 8004e8a:	6103      	str	r3, [r0, #16]
 8004e8c:	bd10      	pop	{r4, pc}
 8004e8e:	bf00      	nop
 8004e90:	0800647b 	.word	0x0800647b
 8004e94:	0800648c 	.word	0x0800648c

08004e98 <__multiply>:
 8004e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e9c:	4614      	mov	r4, r2
 8004e9e:	690a      	ldr	r2, [r1, #16]
 8004ea0:	6923      	ldr	r3, [r4, #16]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	bfb8      	it	lt
 8004ea6:	460b      	movlt	r3, r1
 8004ea8:	460d      	mov	r5, r1
 8004eaa:	bfbc      	itt	lt
 8004eac:	4625      	movlt	r5, r4
 8004eae:	461c      	movlt	r4, r3
 8004eb0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004eb4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004eb8:	68ab      	ldr	r3, [r5, #8]
 8004eba:	6869      	ldr	r1, [r5, #4]
 8004ebc:	eb0a 0709 	add.w	r7, sl, r9
 8004ec0:	42bb      	cmp	r3, r7
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	bfb8      	it	lt
 8004ec6:	3101      	addlt	r1, #1
 8004ec8:	f7ff fed4 	bl	8004c74 <_Balloc>
 8004ecc:	b930      	cbnz	r0, 8004edc <__multiply+0x44>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	4b42      	ldr	r3, [pc, #264]	; (8004fdc <__multiply+0x144>)
 8004ed2:	4843      	ldr	r0, [pc, #268]	; (8004fe0 <__multiply+0x148>)
 8004ed4:	f240 115d 	movw	r1, #349	; 0x15d
 8004ed8:	f000 fc70 	bl	80057bc <__assert_func>
 8004edc:	f100 0614 	add.w	r6, r0, #20
 8004ee0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8004ee4:	4633      	mov	r3, r6
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	4543      	cmp	r3, r8
 8004eea:	d31e      	bcc.n	8004f2a <__multiply+0x92>
 8004eec:	f105 0c14 	add.w	ip, r5, #20
 8004ef0:	f104 0314 	add.w	r3, r4, #20
 8004ef4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8004ef8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8004efc:	9202      	str	r2, [sp, #8]
 8004efe:	ebac 0205 	sub.w	r2, ip, r5
 8004f02:	3a15      	subs	r2, #21
 8004f04:	f022 0203 	bic.w	r2, r2, #3
 8004f08:	3204      	adds	r2, #4
 8004f0a:	f105 0115 	add.w	r1, r5, #21
 8004f0e:	458c      	cmp	ip, r1
 8004f10:	bf38      	it	cc
 8004f12:	2204      	movcc	r2, #4
 8004f14:	9201      	str	r2, [sp, #4]
 8004f16:	9a02      	ldr	r2, [sp, #8]
 8004f18:	9303      	str	r3, [sp, #12]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d808      	bhi.n	8004f30 <__multiply+0x98>
 8004f1e:	2f00      	cmp	r7, #0
 8004f20:	dc55      	bgt.n	8004fce <__multiply+0x136>
 8004f22:	6107      	str	r7, [r0, #16]
 8004f24:	b005      	add	sp, #20
 8004f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f2a:	f843 2b04 	str.w	r2, [r3], #4
 8004f2e:	e7db      	b.n	8004ee8 <__multiply+0x50>
 8004f30:	f8b3 a000 	ldrh.w	sl, [r3]
 8004f34:	f1ba 0f00 	cmp.w	sl, #0
 8004f38:	d020      	beq.n	8004f7c <__multiply+0xe4>
 8004f3a:	f105 0e14 	add.w	lr, r5, #20
 8004f3e:	46b1      	mov	r9, r6
 8004f40:	2200      	movs	r2, #0
 8004f42:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004f46:	f8d9 b000 	ldr.w	fp, [r9]
 8004f4a:	b2a1      	uxth	r1, r4
 8004f4c:	fa1f fb8b 	uxth.w	fp, fp
 8004f50:	fb0a b101 	mla	r1, sl, r1, fp
 8004f54:	4411      	add	r1, r2
 8004f56:	f8d9 2000 	ldr.w	r2, [r9]
 8004f5a:	0c24      	lsrs	r4, r4, #16
 8004f5c:	0c12      	lsrs	r2, r2, #16
 8004f5e:	fb0a 2404 	mla	r4, sl, r4, r2
 8004f62:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8004f66:	b289      	uxth	r1, r1
 8004f68:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004f6c:	45f4      	cmp	ip, lr
 8004f6e:	f849 1b04 	str.w	r1, [r9], #4
 8004f72:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8004f76:	d8e4      	bhi.n	8004f42 <__multiply+0xaa>
 8004f78:	9901      	ldr	r1, [sp, #4]
 8004f7a:	5072      	str	r2, [r6, r1]
 8004f7c:	9a03      	ldr	r2, [sp, #12]
 8004f7e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004f82:	3304      	adds	r3, #4
 8004f84:	f1b9 0f00 	cmp.w	r9, #0
 8004f88:	d01f      	beq.n	8004fca <__multiply+0x132>
 8004f8a:	6834      	ldr	r4, [r6, #0]
 8004f8c:	f105 0114 	add.w	r1, r5, #20
 8004f90:	46b6      	mov	lr, r6
 8004f92:	f04f 0a00 	mov.w	sl, #0
 8004f96:	880a      	ldrh	r2, [r1, #0]
 8004f98:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004f9c:	fb09 b202 	mla	r2, r9, r2, fp
 8004fa0:	4492      	add	sl, r2
 8004fa2:	b2a4      	uxth	r4, r4
 8004fa4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004fa8:	f84e 4b04 	str.w	r4, [lr], #4
 8004fac:	f851 4b04 	ldr.w	r4, [r1], #4
 8004fb0:	f8be 2000 	ldrh.w	r2, [lr]
 8004fb4:	0c24      	lsrs	r4, r4, #16
 8004fb6:	fb09 2404 	mla	r4, r9, r4, r2
 8004fba:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8004fbe:	458c      	cmp	ip, r1
 8004fc0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004fc4:	d8e7      	bhi.n	8004f96 <__multiply+0xfe>
 8004fc6:	9a01      	ldr	r2, [sp, #4]
 8004fc8:	50b4      	str	r4, [r6, r2]
 8004fca:	3604      	adds	r6, #4
 8004fcc:	e7a3      	b.n	8004f16 <__multiply+0x7e>
 8004fce:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1a5      	bne.n	8004f22 <__multiply+0x8a>
 8004fd6:	3f01      	subs	r7, #1
 8004fd8:	e7a1      	b.n	8004f1e <__multiply+0x86>
 8004fda:	bf00      	nop
 8004fdc:	0800647b 	.word	0x0800647b
 8004fe0:	0800648c 	.word	0x0800648c

08004fe4 <__pow5mult>:
 8004fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fe8:	4615      	mov	r5, r2
 8004fea:	f012 0203 	ands.w	r2, r2, #3
 8004fee:	4606      	mov	r6, r0
 8004ff0:	460f      	mov	r7, r1
 8004ff2:	d007      	beq.n	8005004 <__pow5mult+0x20>
 8004ff4:	4c25      	ldr	r4, [pc, #148]	; (800508c <__pow5mult+0xa8>)
 8004ff6:	3a01      	subs	r2, #1
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004ffe:	f7ff fe9b 	bl	8004d38 <__multadd>
 8005002:	4607      	mov	r7, r0
 8005004:	10ad      	asrs	r5, r5, #2
 8005006:	d03d      	beq.n	8005084 <__pow5mult+0xa0>
 8005008:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800500a:	b97c      	cbnz	r4, 800502c <__pow5mult+0x48>
 800500c:	2010      	movs	r0, #16
 800500e:	f7ff fe1b 	bl	8004c48 <malloc>
 8005012:	4602      	mov	r2, r0
 8005014:	6270      	str	r0, [r6, #36]	; 0x24
 8005016:	b928      	cbnz	r0, 8005024 <__pow5mult+0x40>
 8005018:	4b1d      	ldr	r3, [pc, #116]	; (8005090 <__pow5mult+0xac>)
 800501a:	481e      	ldr	r0, [pc, #120]	; (8005094 <__pow5mult+0xb0>)
 800501c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005020:	f000 fbcc 	bl	80057bc <__assert_func>
 8005024:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005028:	6004      	str	r4, [r0, #0]
 800502a:	60c4      	str	r4, [r0, #12]
 800502c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005030:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005034:	b94c      	cbnz	r4, 800504a <__pow5mult+0x66>
 8005036:	f240 2171 	movw	r1, #625	; 0x271
 800503a:	4630      	mov	r0, r6
 800503c:	f7ff ff16 	bl	8004e6c <__i2b>
 8005040:	2300      	movs	r3, #0
 8005042:	f8c8 0008 	str.w	r0, [r8, #8]
 8005046:	4604      	mov	r4, r0
 8005048:	6003      	str	r3, [r0, #0]
 800504a:	f04f 0900 	mov.w	r9, #0
 800504e:	07eb      	lsls	r3, r5, #31
 8005050:	d50a      	bpl.n	8005068 <__pow5mult+0x84>
 8005052:	4639      	mov	r1, r7
 8005054:	4622      	mov	r2, r4
 8005056:	4630      	mov	r0, r6
 8005058:	f7ff ff1e 	bl	8004e98 <__multiply>
 800505c:	4639      	mov	r1, r7
 800505e:	4680      	mov	r8, r0
 8005060:	4630      	mov	r0, r6
 8005062:	f7ff fe47 	bl	8004cf4 <_Bfree>
 8005066:	4647      	mov	r7, r8
 8005068:	106d      	asrs	r5, r5, #1
 800506a:	d00b      	beq.n	8005084 <__pow5mult+0xa0>
 800506c:	6820      	ldr	r0, [r4, #0]
 800506e:	b938      	cbnz	r0, 8005080 <__pow5mult+0x9c>
 8005070:	4622      	mov	r2, r4
 8005072:	4621      	mov	r1, r4
 8005074:	4630      	mov	r0, r6
 8005076:	f7ff ff0f 	bl	8004e98 <__multiply>
 800507a:	6020      	str	r0, [r4, #0]
 800507c:	f8c0 9000 	str.w	r9, [r0]
 8005080:	4604      	mov	r4, r0
 8005082:	e7e4      	b.n	800504e <__pow5mult+0x6a>
 8005084:	4638      	mov	r0, r7
 8005086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800508a:	bf00      	nop
 800508c:	080065e0 	.word	0x080065e0
 8005090:	08006405 	.word	0x08006405
 8005094:	0800648c 	.word	0x0800648c

08005098 <__lshift>:
 8005098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800509c:	460c      	mov	r4, r1
 800509e:	6849      	ldr	r1, [r1, #4]
 80050a0:	6923      	ldr	r3, [r4, #16]
 80050a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80050a6:	68a3      	ldr	r3, [r4, #8]
 80050a8:	4607      	mov	r7, r0
 80050aa:	4691      	mov	r9, r2
 80050ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80050b0:	f108 0601 	add.w	r6, r8, #1
 80050b4:	42b3      	cmp	r3, r6
 80050b6:	db0b      	blt.n	80050d0 <__lshift+0x38>
 80050b8:	4638      	mov	r0, r7
 80050ba:	f7ff fddb 	bl	8004c74 <_Balloc>
 80050be:	4605      	mov	r5, r0
 80050c0:	b948      	cbnz	r0, 80050d6 <__lshift+0x3e>
 80050c2:	4602      	mov	r2, r0
 80050c4:	4b28      	ldr	r3, [pc, #160]	; (8005168 <__lshift+0xd0>)
 80050c6:	4829      	ldr	r0, [pc, #164]	; (800516c <__lshift+0xd4>)
 80050c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80050cc:	f000 fb76 	bl	80057bc <__assert_func>
 80050d0:	3101      	adds	r1, #1
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	e7ee      	b.n	80050b4 <__lshift+0x1c>
 80050d6:	2300      	movs	r3, #0
 80050d8:	f100 0114 	add.w	r1, r0, #20
 80050dc:	f100 0210 	add.w	r2, r0, #16
 80050e0:	4618      	mov	r0, r3
 80050e2:	4553      	cmp	r3, sl
 80050e4:	db33      	blt.n	800514e <__lshift+0xb6>
 80050e6:	6920      	ldr	r0, [r4, #16]
 80050e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80050ec:	f104 0314 	add.w	r3, r4, #20
 80050f0:	f019 091f 	ands.w	r9, r9, #31
 80050f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80050f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80050fc:	d02b      	beq.n	8005156 <__lshift+0xbe>
 80050fe:	f1c9 0e20 	rsb	lr, r9, #32
 8005102:	468a      	mov	sl, r1
 8005104:	2200      	movs	r2, #0
 8005106:	6818      	ldr	r0, [r3, #0]
 8005108:	fa00 f009 	lsl.w	r0, r0, r9
 800510c:	4302      	orrs	r2, r0
 800510e:	f84a 2b04 	str.w	r2, [sl], #4
 8005112:	f853 2b04 	ldr.w	r2, [r3], #4
 8005116:	459c      	cmp	ip, r3
 8005118:	fa22 f20e 	lsr.w	r2, r2, lr
 800511c:	d8f3      	bhi.n	8005106 <__lshift+0x6e>
 800511e:	ebac 0304 	sub.w	r3, ip, r4
 8005122:	3b15      	subs	r3, #21
 8005124:	f023 0303 	bic.w	r3, r3, #3
 8005128:	3304      	adds	r3, #4
 800512a:	f104 0015 	add.w	r0, r4, #21
 800512e:	4584      	cmp	ip, r0
 8005130:	bf38      	it	cc
 8005132:	2304      	movcc	r3, #4
 8005134:	50ca      	str	r2, [r1, r3]
 8005136:	b10a      	cbz	r2, 800513c <__lshift+0xa4>
 8005138:	f108 0602 	add.w	r6, r8, #2
 800513c:	3e01      	subs	r6, #1
 800513e:	4638      	mov	r0, r7
 8005140:	612e      	str	r6, [r5, #16]
 8005142:	4621      	mov	r1, r4
 8005144:	f7ff fdd6 	bl	8004cf4 <_Bfree>
 8005148:	4628      	mov	r0, r5
 800514a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800514e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005152:	3301      	adds	r3, #1
 8005154:	e7c5      	b.n	80050e2 <__lshift+0x4a>
 8005156:	3904      	subs	r1, #4
 8005158:	f853 2b04 	ldr.w	r2, [r3], #4
 800515c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005160:	459c      	cmp	ip, r3
 8005162:	d8f9      	bhi.n	8005158 <__lshift+0xc0>
 8005164:	e7ea      	b.n	800513c <__lshift+0xa4>
 8005166:	bf00      	nop
 8005168:	0800647b 	.word	0x0800647b
 800516c:	0800648c 	.word	0x0800648c

08005170 <__mcmp>:
 8005170:	b530      	push	{r4, r5, lr}
 8005172:	6902      	ldr	r2, [r0, #16]
 8005174:	690c      	ldr	r4, [r1, #16]
 8005176:	1b12      	subs	r2, r2, r4
 8005178:	d10e      	bne.n	8005198 <__mcmp+0x28>
 800517a:	f100 0314 	add.w	r3, r0, #20
 800517e:	3114      	adds	r1, #20
 8005180:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005184:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005188:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800518c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005190:	42a5      	cmp	r5, r4
 8005192:	d003      	beq.n	800519c <__mcmp+0x2c>
 8005194:	d305      	bcc.n	80051a2 <__mcmp+0x32>
 8005196:	2201      	movs	r2, #1
 8005198:	4610      	mov	r0, r2
 800519a:	bd30      	pop	{r4, r5, pc}
 800519c:	4283      	cmp	r3, r0
 800519e:	d3f3      	bcc.n	8005188 <__mcmp+0x18>
 80051a0:	e7fa      	b.n	8005198 <__mcmp+0x28>
 80051a2:	f04f 32ff 	mov.w	r2, #4294967295
 80051a6:	e7f7      	b.n	8005198 <__mcmp+0x28>

080051a8 <__mdiff>:
 80051a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ac:	460c      	mov	r4, r1
 80051ae:	4606      	mov	r6, r0
 80051b0:	4611      	mov	r1, r2
 80051b2:	4620      	mov	r0, r4
 80051b4:	4617      	mov	r7, r2
 80051b6:	f7ff ffdb 	bl	8005170 <__mcmp>
 80051ba:	1e05      	subs	r5, r0, #0
 80051bc:	d110      	bne.n	80051e0 <__mdiff+0x38>
 80051be:	4629      	mov	r1, r5
 80051c0:	4630      	mov	r0, r6
 80051c2:	f7ff fd57 	bl	8004c74 <_Balloc>
 80051c6:	b930      	cbnz	r0, 80051d6 <__mdiff+0x2e>
 80051c8:	4b39      	ldr	r3, [pc, #228]	; (80052b0 <__mdiff+0x108>)
 80051ca:	4602      	mov	r2, r0
 80051cc:	f240 2132 	movw	r1, #562	; 0x232
 80051d0:	4838      	ldr	r0, [pc, #224]	; (80052b4 <__mdiff+0x10c>)
 80051d2:	f000 faf3 	bl	80057bc <__assert_func>
 80051d6:	2301      	movs	r3, #1
 80051d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80051dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051e0:	bfa4      	itt	ge
 80051e2:	463b      	movge	r3, r7
 80051e4:	4627      	movge	r7, r4
 80051e6:	4630      	mov	r0, r6
 80051e8:	6879      	ldr	r1, [r7, #4]
 80051ea:	bfa6      	itte	ge
 80051ec:	461c      	movge	r4, r3
 80051ee:	2500      	movge	r5, #0
 80051f0:	2501      	movlt	r5, #1
 80051f2:	f7ff fd3f 	bl	8004c74 <_Balloc>
 80051f6:	b920      	cbnz	r0, 8005202 <__mdiff+0x5a>
 80051f8:	4b2d      	ldr	r3, [pc, #180]	; (80052b0 <__mdiff+0x108>)
 80051fa:	4602      	mov	r2, r0
 80051fc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005200:	e7e6      	b.n	80051d0 <__mdiff+0x28>
 8005202:	693e      	ldr	r6, [r7, #16]
 8005204:	60c5      	str	r5, [r0, #12]
 8005206:	6925      	ldr	r5, [r4, #16]
 8005208:	f107 0114 	add.w	r1, r7, #20
 800520c:	f104 0914 	add.w	r9, r4, #20
 8005210:	f100 0e14 	add.w	lr, r0, #20
 8005214:	f107 0210 	add.w	r2, r7, #16
 8005218:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800521c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8005220:	46f2      	mov	sl, lr
 8005222:	2700      	movs	r7, #0
 8005224:	f859 3b04 	ldr.w	r3, [r9], #4
 8005228:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800522c:	fa1f f883 	uxth.w	r8, r3
 8005230:	fa17 f78b 	uxtah	r7, r7, fp
 8005234:	0c1b      	lsrs	r3, r3, #16
 8005236:	eba7 0808 	sub.w	r8, r7, r8
 800523a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800523e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005242:	fa1f f888 	uxth.w	r8, r8
 8005246:	141f      	asrs	r7, r3, #16
 8005248:	454d      	cmp	r5, r9
 800524a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800524e:	f84a 3b04 	str.w	r3, [sl], #4
 8005252:	d8e7      	bhi.n	8005224 <__mdiff+0x7c>
 8005254:	1b2b      	subs	r3, r5, r4
 8005256:	3b15      	subs	r3, #21
 8005258:	f023 0303 	bic.w	r3, r3, #3
 800525c:	3304      	adds	r3, #4
 800525e:	3415      	adds	r4, #21
 8005260:	42a5      	cmp	r5, r4
 8005262:	bf38      	it	cc
 8005264:	2304      	movcc	r3, #4
 8005266:	4419      	add	r1, r3
 8005268:	4473      	add	r3, lr
 800526a:	469e      	mov	lr, r3
 800526c:	460d      	mov	r5, r1
 800526e:	4565      	cmp	r5, ip
 8005270:	d30e      	bcc.n	8005290 <__mdiff+0xe8>
 8005272:	f10c 0203 	add.w	r2, ip, #3
 8005276:	1a52      	subs	r2, r2, r1
 8005278:	f022 0203 	bic.w	r2, r2, #3
 800527c:	3903      	subs	r1, #3
 800527e:	458c      	cmp	ip, r1
 8005280:	bf38      	it	cc
 8005282:	2200      	movcc	r2, #0
 8005284:	441a      	add	r2, r3
 8005286:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800528a:	b17b      	cbz	r3, 80052ac <__mdiff+0x104>
 800528c:	6106      	str	r6, [r0, #16]
 800528e:	e7a5      	b.n	80051dc <__mdiff+0x34>
 8005290:	f855 8b04 	ldr.w	r8, [r5], #4
 8005294:	fa17 f488 	uxtah	r4, r7, r8
 8005298:	1422      	asrs	r2, r4, #16
 800529a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800529e:	b2a4      	uxth	r4, r4
 80052a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80052a4:	f84e 4b04 	str.w	r4, [lr], #4
 80052a8:	1417      	asrs	r7, r2, #16
 80052aa:	e7e0      	b.n	800526e <__mdiff+0xc6>
 80052ac:	3e01      	subs	r6, #1
 80052ae:	e7ea      	b.n	8005286 <__mdiff+0xde>
 80052b0:	0800647b 	.word	0x0800647b
 80052b4:	0800648c 	.word	0x0800648c

080052b8 <__d2b>:
 80052b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80052bc:	4689      	mov	r9, r1
 80052be:	2101      	movs	r1, #1
 80052c0:	ec57 6b10 	vmov	r6, r7, d0
 80052c4:	4690      	mov	r8, r2
 80052c6:	f7ff fcd5 	bl	8004c74 <_Balloc>
 80052ca:	4604      	mov	r4, r0
 80052cc:	b930      	cbnz	r0, 80052dc <__d2b+0x24>
 80052ce:	4602      	mov	r2, r0
 80052d0:	4b25      	ldr	r3, [pc, #148]	; (8005368 <__d2b+0xb0>)
 80052d2:	4826      	ldr	r0, [pc, #152]	; (800536c <__d2b+0xb4>)
 80052d4:	f240 310a 	movw	r1, #778	; 0x30a
 80052d8:	f000 fa70 	bl	80057bc <__assert_func>
 80052dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80052e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80052e4:	bb35      	cbnz	r5, 8005334 <__d2b+0x7c>
 80052e6:	2e00      	cmp	r6, #0
 80052e8:	9301      	str	r3, [sp, #4]
 80052ea:	d028      	beq.n	800533e <__d2b+0x86>
 80052ec:	4668      	mov	r0, sp
 80052ee:	9600      	str	r6, [sp, #0]
 80052f0:	f7ff fd8c 	bl	8004e0c <__lo0bits>
 80052f4:	9900      	ldr	r1, [sp, #0]
 80052f6:	b300      	cbz	r0, 800533a <__d2b+0x82>
 80052f8:	9a01      	ldr	r2, [sp, #4]
 80052fa:	f1c0 0320 	rsb	r3, r0, #32
 80052fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005302:	430b      	orrs	r3, r1
 8005304:	40c2      	lsrs	r2, r0
 8005306:	6163      	str	r3, [r4, #20]
 8005308:	9201      	str	r2, [sp, #4]
 800530a:	9b01      	ldr	r3, [sp, #4]
 800530c:	61a3      	str	r3, [r4, #24]
 800530e:	2b00      	cmp	r3, #0
 8005310:	bf14      	ite	ne
 8005312:	2202      	movne	r2, #2
 8005314:	2201      	moveq	r2, #1
 8005316:	6122      	str	r2, [r4, #16]
 8005318:	b1d5      	cbz	r5, 8005350 <__d2b+0x98>
 800531a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800531e:	4405      	add	r5, r0
 8005320:	f8c9 5000 	str.w	r5, [r9]
 8005324:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005328:	f8c8 0000 	str.w	r0, [r8]
 800532c:	4620      	mov	r0, r4
 800532e:	b003      	add	sp, #12
 8005330:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005334:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005338:	e7d5      	b.n	80052e6 <__d2b+0x2e>
 800533a:	6161      	str	r1, [r4, #20]
 800533c:	e7e5      	b.n	800530a <__d2b+0x52>
 800533e:	a801      	add	r0, sp, #4
 8005340:	f7ff fd64 	bl	8004e0c <__lo0bits>
 8005344:	9b01      	ldr	r3, [sp, #4]
 8005346:	6163      	str	r3, [r4, #20]
 8005348:	2201      	movs	r2, #1
 800534a:	6122      	str	r2, [r4, #16]
 800534c:	3020      	adds	r0, #32
 800534e:	e7e3      	b.n	8005318 <__d2b+0x60>
 8005350:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005354:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005358:	f8c9 0000 	str.w	r0, [r9]
 800535c:	6918      	ldr	r0, [r3, #16]
 800535e:	f7ff fd35 	bl	8004dcc <__hi0bits>
 8005362:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005366:	e7df      	b.n	8005328 <__d2b+0x70>
 8005368:	0800647b 	.word	0x0800647b
 800536c:	0800648c 	.word	0x0800648c

08005370 <_calloc_r>:
 8005370:	b513      	push	{r0, r1, r4, lr}
 8005372:	434a      	muls	r2, r1
 8005374:	4611      	mov	r1, r2
 8005376:	9201      	str	r2, [sp, #4]
 8005378:	f000 f85a 	bl	8005430 <_malloc_r>
 800537c:	4604      	mov	r4, r0
 800537e:	b118      	cbz	r0, 8005388 <_calloc_r+0x18>
 8005380:	9a01      	ldr	r2, [sp, #4]
 8005382:	2100      	movs	r1, #0
 8005384:	f7fe f950 	bl	8003628 <memset>
 8005388:	4620      	mov	r0, r4
 800538a:	b002      	add	sp, #8
 800538c:	bd10      	pop	{r4, pc}
	...

08005390 <_free_r>:
 8005390:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005392:	2900      	cmp	r1, #0
 8005394:	d048      	beq.n	8005428 <_free_r+0x98>
 8005396:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800539a:	9001      	str	r0, [sp, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	f1a1 0404 	sub.w	r4, r1, #4
 80053a2:	bfb8      	it	lt
 80053a4:	18e4      	addlt	r4, r4, r3
 80053a6:	f000 fa65 	bl	8005874 <__malloc_lock>
 80053aa:	4a20      	ldr	r2, [pc, #128]	; (800542c <_free_r+0x9c>)
 80053ac:	9801      	ldr	r0, [sp, #4]
 80053ae:	6813      	ldr	r3, [r2, #0]
 80053b0:	4615      	mov	r5, r2
 80053b2:	b933      	cbnz	r3, 80053c2 <_free_r+0x32>
 80053b4:	6063      	str	r3, [r4, #4]
 80053b6:	6014      	str	r4, [r2, #0]
 80053b8:	b003      	add	sp, #12
 80053ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053be:	f000 ba5f 	b.w	8005880 <__malloc_unlock>
 80053c2:	42a3      	cmp	r3, r4
 80053c4:	d90b      	bls.n	80053de <_free_r+0x4e>
 80053c6:	6821      	ldr	r1, [r4, #0]
 80053c8:	1862      	adds	r2, r4, r1
 80053ca:	4293      	cmp	r3, r2
 80053cc:	bf04      	itt	eq
 80053ce:	681a      	ldreq	r2, [r3, #0]
 80053d0:	685b      	ldreq	r3, [r3, #4]
 80053d2:	6063      	str	r3, [r4, #4]
 80053d4:	bf04      	itt	eq
 80053d6:	1852      	addeq	r2, r2, r1
 80053d8:	6022      	streq	r2, [r4, #0]
 80053da:	602c      	str	r4, [r5, #0]
 80053dc:	e7ec      	b.n	80053b8 <_free_r+0x28>
 80053de:	461a      	mov	r2, r3
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	b10b      	cbz	r3, 80053e8 <_free_r+0x58>
 80053e4:	42a3      	cmp	r3, r4
 80053e6:	d9fa      	bls.n	80053de <_free_r+0x4e>
 80053e8:	6811      	ldr	r1, [r2, #0]
 80053ea:	1855      	adds	r5, r2, r1
 80053ec:	42a5      	cmp	r5, r4
 80053ee:	d10b      	bne.n	8005408 <_free_r+0x78>
 80053f0:	6824      	ldr	r4, [r4, #0]
 80053f2:	4421      	add	r1, r4
 80053f4:	1854      	adds	r4, r2, r1
 80053f6:	42a3      	cmp	r3, r4
 80053f8:	6011      	str	r1, [r2, #0]
 80053fa:	d1dd      	bne.n	80053b8 <_free_r+0x28>
 80053fc:	681c      	ldr	r4, [r3, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	6053      	str	r3, [r2, #4]
 8005402:	4421      	add	r1, r4
 8005404:	6011      	str	r1, [r2, #0]
 8005406:	e7d7      	b.n	80053b8 <_free_r+0x28>
 8005408:	d902      	bls.n	8005410 <_free_r+0x80>
 800540a:	230c      	movs	r3, #12
 800540c:	6003      	str	r3, [r0, #0]
 800540e:	e7d3      	b.n	80053b8 <_free_r+0x28>
 8005410:	6825      	ldr	r5, [r4, #0]
 8005412:	1961      	adds	r1, r4, r5
 8005414:	428b      	cmp	r3, r1
 8005416:	bf04      	itt	eq
 8005418:	6819      	ldreq	r1, [r3, #0]
 800541a:	685b      	ldreq	r3, [r3, #4]
 800541c:	6063      	str	r3, [r4, #4]
 800541e:	bf04      	itt	eq
 8005420:	1949      	addeq	r1, r1, r5
 8005422:	6021      	streq	r1, [r4, #0]
 8005424:	6054      	str	r4, [r2, #4]
 8005426:	e7c7      	b.n	80053b8 <_free_r+0x28>
 8005428:	b003      	add	sp, #12
 800542a:	bd30      	pop	{r4, r5, pc}
 800542c:	200001fc 	.word	0x200001fc

08005430 <_malloc_r>:
 8005430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005432:	1ccd      	adds	r5, r1, #3
 8005434:	f025 0503 	bic.w	r5, r5, #3
 8005438:	3508      	adds	r5, #8
 800543a:	2d0c      	cmp	r5, #12
 800543c:	bf38      	it	cc
 800543e:	250c      	movcc	r5, #12
 8005440:	2d00      	cmp	r5, #0
 8005442:	4606      	mov	r6, r0
 8005444:	db01      	blt.n	800544a <_malloc_r+0x1a>
 8005446:	42a9      	cmp	r1, r5
 8005448:	d903      	bls.n	8005452 <_malloc_r+0x22>
 800544a:	230c      	movs	r3, #12
 800544c:	6033      	str	r3, [r6, #0]
 800544e:	2000      	movs	r0, #0
 8005450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005452:	f000 fa0f 	bl	8005874 <__malloc_lock>
 8005456:	4921      	ldr	r1, [pc, #132]	; (80054dc <_malloc_r+0xac>)
 8005458:	680a      	ldr	r2, [r1, #0]
 800545a:	4614      	mov	r4, r2
 800545c:	b99c      	cbnz	r4, 8005486 <_malloc_r+0x56>
 800545e:	4f20      	ldr	r7, [pc, #128]	; (80054e0 <_malloc_r+0xb0>)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	b923      	cbnz	r3, 800546e <_malloc_r+0x3e>
 8005464:	4621      	mov	r1, r4
 8005466:	4630      	mov	r0, r6
 8005468:	f000 f998 	bl	800579c <_sbrk_r>
 800546c:	6038      	str	r0, [r7, #0]
 800546e:	4629      	mov	r1, r5
 8005470:	4630      	mov	r0, r6
 8005472:	f000 f993 	bl	800579c <_sbrk_r>
 8005476:	1c43      	adds	r3, r0, #1
 8005478:	d123      	bne.n	80054c2 <_malloc_r+0x92>
 800547a:	230c      	movs	r3, #12
 800547c:	6033      	str	r3, [r6, #0]
 800547e:	4630      	mov	r0, r6
 8005480:	f000 f9fe 	bl	8005880 <__malloc_unlock>
 8005484:	e7e3      	b.n	800544e <_malloc_r+0x1e>
 8005486:	6823      	ldr	r3, [r4, #0]
 8005488:	1b5b      	subs	r3, r3, r5
 800548a:	d417      	bmi.n	80054bc <_malloc_r+0x8c>
 800548c:	2b0b      	cmp	r3, #11
 800548e:	d903      	bls.n	8005498 <_malloc_r+0x68>
 8005490:	6023      	str	r3, [r4, #0]
 8005492:	441c      	add	r4, r3
 8005494:	6025      	str	r5, [r4, #0]
 8005496:	e004      	b.n	80054a2 <_malloc_r+0x72>
 8005498:	6863      	ldr	r3, [r4, #4]
 800549a:	42a2      	cmp	r2, r4
 800549c:	bf0c      	ite	eq
 800549e:	600b      	streq	r3, [r1, #0]
 80054a0:	6053      	strne	r3, [r2, #4]
 80054a2:	4630      	mov	r0, r6
 80054a4:	f000 f9ec 	bl	8005880 <__malloc_unlock>
 80054a8:	f104 000b 	add.w	r0, r4, #11
 80054ac:	1d23      	adds	r3, r4, #4
 80054ae:	f020 0007 	bic.w	r0, r0, #7
 80054b2:	1ac2      	subs	r2, r0, r3
 80054b4:	d0cc      	beq.n	8005450 <_malloc_r+0x20>
 80054b6:	1a1b      	subs	r3, r3, r0
 80054b8:	50a3      	str	r3, [r4, r2]
 80054ba:	e7c9      	b.n	8005450 <_malloc_r+0x20>
 80054bc:	4622      	mov	r2, r4
 80054be:	6864      	ldr	r4, [r4, #4]
 80054c0:	e7cc      	b.n	800545c <_malloc_r+0x2c>
 80054c2:	1cc4      	adds	r4, r0, #3
 80054c4:	f024 0403 	bic.w	r4, r4, #3
 80054c8:	42a0      	cmp	r0, r4
 80054ca:	d0e3      	beq.n	8005494 <_malloc_r+0x64>
 80054cc:	1a21      	subs	r1, r4, r0
 80054ce:	4630      	mov	r0, r6
 80054d0:	f000 f964 	bl	800579c <_sbrk_r>
 80054d4:	3001      	adds	r0, #1
 80054d6:	d1dd      	bne.n	8005494 <_malloc_r+0x64>
 80054d8:	e7cf      	b.n	800547a <_malloc_r+0x4a>
 80054da:	bf00      	nop
 80054dc:	200001fc 	.word	0x200001fc
 80054e0:	20000200 	.word	0x20000200

080054e4 <__ssputs_r>:
 80054e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054e8:	688e      	ldr	r6, [r1, #8]
 80054ea:	429e      	cmp	r6, r3
 80054ec:	4682      	mov	sl, r0
 80054ee:	460c      	mov	r4, r1
 80054f0:	4690      	mov	r8, r2
 80054f2:	461f      	mov	r7, r3
 80054f4:	d838      	bhi.n	8005568 <__ssputs_r+0x84>
 80054f6:	898a      	ldrh	r2, [r1, #12]
 80054f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80054fc:	d032      	beq.n	8005564 <__ssputs_r+0x80>
 80054fe:	6825      	ldr	r5, [r4, #0]
 8005500:	6909      	ldr	r1, [r1, #16]
 8005502:	eba5 0901 	sub.w	r9, r5, r1
 8005506:	6965      	ldr	r5, [r4, #20]
 8005508:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800550c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005510:	3301      	adds	r3, #1
 8005512:	444b      	add	r3, r9
 8005514:	106d      	asrs	r5, r5, #1
 8005516:	429d      	cmp	r5, r3
 8005518:	bf38      	it	cc
 800551a:	461d      	movcc	r5, r3
 800551c:	0553      	lsls	r3, r2, #21
 800551e:	d531      	bpl.n	8005584 <__ssputs_r+0xa0>
 8005520:	4629      	mov	r1, r5
 8005522:	f7ff ff85 	bl	8005430 <_malloc_r>
 8005526:	4606      	mov	r6, r0
 8005528:	b950      	cbnz	r0, 8005540 <__ssputs_r+0x5c>
 800552a:	230c      	movs	r3, #12
 800552c:	f8ca 3000 	str.w	r3, [sl]
 8005530:	89a3      	ldrh	r3, [r4, #12]
 8005532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005536:	81a3      	strh	r3, [r4, #12]
 8005538:	f04f 30ff 	mov.w	r0, #4294967295
 800553c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005540:	6921      	ldr	r1, [r4, #16]
 8005542:	464a      	mov	r2, r9
 8005544:	f7ff fb88 	bl	8004c58 <memcpy>
 8005548:	89a3      	ldrh	r3, [r4, #12]
 800554a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800554e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005552:	81a3      	strh	r3, [r4, #12]
 8005554:	6126      	str	r6, [r4, #16]
 8005556:	6165      	str	r5, [r4, #20]
 8005558:	444e      	add	r6, r9
 800555a:	eba5 0509 	sub.w	r5, r5, r9
 800555e:	6026      	str	r6, [r4, #0]
 8005560:	60a5      	str	r5, [r4, #8]
 8005562:	463e      	mov	r6, r7
 8005564:	42be      	cmp	r6, r7
 8005566:	d900      	bls.n	800556a <__ssputs_r+0x86>
 8005568:	463e      	mov	r6, r7
 800556a:	4632      	mov	r2, r6
 800556c:	6820      	ldr	r0, [r4, #0]
 800556e:	4641      	mov	r1, r8
 8005570:	f000 f966 	bl	8005840 <memmove>
 8005574:	68a3      	ldr	r3, [r4, #8]
 8005576:	6822      	ldr	r2, [r4, #0]
 8005578:	1b9b      	subs	r3, r3, r6
 800557a:	4432      	add	r2, r6
 800557c:	60a3      	str	r3, [r4, #8]
 800557e:	6022      	str	r2, [r4, #0]
 8005580:	2000      	movs	r0, #0
 8005582:	e7db      	b.n	800553c <__ssputs_r+0x58>
 8005584:	462a      	mov	r2, r5
 8005586:	f000 f981 	bl	800588c <_realloc_r>
 800558a:	4606      	mov	r6, r0
 800558c:	2800      	cmp	r0, #0
 800558e:	d1e1      	bne.n	8005554 <__ssputs_r+0x70>
 8005590:	6921      	ldr	r1, [r4, #16]
 8005592:	4650      	mov	r0, sl
 8005594:	f7ff fefc 	bl	8005390 <_free_r>
 8005598:	e7c7      	b.n	800552a <__ssputs_r+0x46>
	...

0800559c <_svfiprintf_r>:
 800559c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055a0:	4698      	mov	r8, r3
 80055a2:	898b      	ldrh	r3, [r1, #12]
 80055a4:	061b      	lsls	r3, r3, #24
 80055a6:	b09d      	sub	sp, #116	; 0x74
 80055a8:	4607      	mov	r7, r0
 80055aa:	460d      	mov	r5, r1
 80055ac:	4614      	mov	r4, r2
 80055ae:	d50e      	bpl.n	80055ce <_svfiprintf_r+0x32>
 80055b0:	690b      	ldr	r3, [r1, #16]
 80055b2:	b963      	cbnz	r3, 80055ce <_svfiprintf_r+0x32>
 80055b4:	2140      	movs	r1, #64	; 0x40
 80055b6:	f7ff ff3b 	bl	8005430 <_malloc_r>
 80055ba:	6028      	str	r0, [r5, #0]
 80055bc:	6128      	str	r0, [r5, #16]
 80055be:	b920      	cbnz	r0, 80055ca <_svfiprintf_r+0x2e>
 80055c0:	230c      	movs	r3, #12
 80055c2:	603b      	str	r3, [r7, #0]
 80055c4:	f04f 30ff 	mov.w	r0, #4294967295
 80055c8:	e0d1      	b.n	800576e <_svfiprintf_r+0x1d2>
 80055ca:	2340      	movs	r3, #64	; 0x40
 80055cc:	616b      	str	r3, [r5, #20]
 80055ce:	2300      	movs	r3, #0
 80055d0:	9309      	str	r3, [sp, #36]	; 0x24
 80055d2:	2320      	movs	r3, #32
 80055d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80055dc:	2330      	movs	r3, #48	; 0x30
 80055de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005788 <_svfiprintf_r+0x1ec>
 80055e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055e6:	f04f 0901 	mov.w	r9, #1
 80055ea:	4623      	mov	r3, r4
 80055ec:	469a      	mov	sl, r3
 80055ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055f2:	b10a      	cbz	r2, 80055f8 <_svfiprintf_r+0x5c>
 80055f4:	2a25      	cmp	r2, #37	; 0x25
 80055f6:	d1f9      	bne.n	80055ec <_svfiprintf_r+0x50>
 80055f8:	ebba 0b04 	subs.w	fp, sl, r4
 80055fc:	d00b      	beq.n	8005616 <_svfiprintf_r+0x7a>
 80055fe:	465b      	mov	r3, fp
 8005600:	4622      	mov	r2, r4
 8005602:	4629      	mov	r1, r5
 8005604:	4638      	mov	r0, r7
 8005606:	f7ff ff6d 	bl	80054e4 <__ssputs_r>
 800560a:	3001      	adds	r0, #1
 800560c:	f000 80aa 	beq.w	8005764 <_svfiprintf_r+0x1c8>
 8005610:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005612:	445a      	add	r2, fp
 8005614:	9209      	str	r2, [sp, #36]	; 0x24
 8005616:	f89a 3000 	ldrb.w	r3, [sl]
 800561a:	2b00      	cmp	r3, #0
 800561c:	f000 80a2 	beq.w	8005764 <_svfiprintf_r+0x1c8>
 8005620:	2300      	movs	r3, #0
 8005622:	f04f 32ff 	mov.w	r2, #4294967295
 8005626:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800562a:	f10a 0a01 	add.w	sl, sl, #1
 800562e:	9304      	str	r3, [sp, #16]
 8005630:	9307      	str	r3, [sp, #28]
 8005632:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005636:	931a      	str	r3, [sp, #104]	; 0x68
 8005638:	4654      	mov	r4, sl
 800563a:	2205      	movs	r2, #5
 800563c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005640:	4851      	ldr	r0, [pc, #324]	; (8005788 <_svfiprintf_r+0x1ec>)
 8005642:	f7fa fdd5 	bl	80001f0 <memchr>
 8005646:	9a04      	ldr	r2, [sp, #16]
 8005648:	b9d8      	cbnz	r0, 8005682 <_svfiprintf_r+0xe6>
 800564a:	06d0      	lsls	r0, r2, #27
 800564c:	bf44      	itt	mi
 800564e:	2320      	movmi	r3, #32
 8005650:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005654:	0711      	lsls	r1, r2, #28
 8005656:	bf44      	itt	mi
 8005658:	232b      	movmi	r3, #43	; 0x2b
 800565a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800565e:	f89a 3000 	ldrb.w	r3, [sl]
 8005662:	2b2a      	cmp	r3, #42	; 0x2a
 8005664:	d015      	beq.n	8005692 <_svfiprintf_r+0xf6>
 8005666:	9a07      	ldr	r2, [sp, #28]
 8005668:	4654      	mov	r4, sl
 800566a:	2000      	movs	r0, #0
 800566c:	f04f 0c0a 	mov.w	ip, #10
 8005670:	4621      	mov	r1, r4
 8005672:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005676:	3b30      	subs	r3, #48	; 0x30
 8005678:	2b09      	cmp	r3, #9
 800567a:	d94e      	bls.n	800571a <_svfiprintf_r+0x17e>
 800567c:	b1b0      	cbz	r0, 80056ac <_svfiprintf_r+0x110>
 800567e:	9207      	str	r2, [sp, #28]
 8005680:	e014      	b.n	80056ac <_svfiprintf_r+0x110>
 8005682:	eba0 0308 	sub.w	r3, r0, r8
 8005686:	fa09 f303 	lsl.w	r3, r9, r3
 800568a:	4313      	orrs	r3, r2
 800568c:	9304      	str	r3, [sp, #16]
 800568e:	46a2      	mov	sl, r4
 8005690:	e7d2      	b.n	8005638 <_svfiprintf_r+0x9c>
 8005692:	9b03      	ldr	r3, [sp, #12]
 8005694:	1d19      	adds	r1, r3, #4
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	9103      	str	r1, [sp, #12]
 800569a:	2b00      	cmp	r3, #0
 800569c:	bfbb      	ittet	lt
 800569e:	425b      	neglt	r3, r3
 80056a0:	f042 0202 	orrlt.w	r2, r2, #2
 80056a4:	9307      	strge	r3, [sp, #28]
 80056a6:	9307      	strlt	r3, [sp, #28]
 80056a8:	bfb8      	it	lt
 80056aa:	9204      	strlt	r2, [sp, #16]
 80056ac:	7823      	ldrb	r3, [r4, #0]
 80056ae:	2b2e      	cmp	r3, #46	; 0x2e
 80056b0:	d10c      	bne.n	80056cc <_svfiprintf_r+0x130>
 80056b2:	7863      	ldrb	r3, [r4, #1]
 80056b4:	2b2a      	cmp	r3, #42	; 0x2a
 80056b6:	d135      	bne.n	8005724 <_svfiprintf_r+0x188>
 80056b8:	9b03      	ldr	r3, [sp, #12]
 80056ba:	1d1a      	adds	r2, r3, #4
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	9203      	str	r2, [sp, #12]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	bfb8      	it	lt
 80056c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80056c8:	3402      	adds	r4, #2
 80056ca:	9305      	str	r3, [sp, #20]
 80056cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005798 <_svfiprintf_r+0x1fc>
 80056d0:	7821      	ldrb	r1, [r4, #0]
 80056d2:	2203      	movs	r2, #3
 80056d4:	4650      	mov	r0, sl
 80056d6:	f7fa fd8b 	bl	80001f0 <memchr>
 80056da:	b140      	cbz	r0, 80056ee <_svfiprintf_r+0x152>
 80056dc:	2340      	movs	r3, #64	; 0x40
 80056de:	eba0 000a 	sub.w	r0, r0, sl
 80056e2:	fa03 f000 	lsl.w	r0, r3, r0
 80056e6:	9b04      	ldr	r3, [sp, #16]
 80056e8:	4303      	orrs	r3, r0
 80056ea:	3401      	adds	r4, #1
 80056ec:	9304      	str	r3, [sp, #16]
 80056ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056f2:	4826      	ldr	r0, [pc, #152]	; (800578c <_svfiprintf_r+0x1f0>)
 80056f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056f8:	2206      	movs	r2, #6
 80056fa:	f7fa fd79 	bl	80001f0 <memchr>
 80056fe:	2800      	cmp	r0, #0
 8005700:	d038      	beq.n	8005774 <_svfiprintf_r+0x1d8>
 8005702:	4b23      	ldr	r3, [pc, #140]	; (8005790 <_svfiprintf_r+0x1f4>)
 8005704:	bb1b      	cbnz	r3, 800574e <_svfiprintf_r+0x1b2>
 8005706:	9b03      	ldr	r3, [sp, #12]
 8005708:	3307      	adds	r3, #7
 800570a:	f023 0307 	bic.w	r3, r3, #7
 800570e:	3308      	adds	r3, #8
 8005710:	9303      	str	r3, [sp, #12]
 8005712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005714:	4433      	add	r3, r6
 8005716:	9309      	str	r3, [sp, #36]	; 0x24
 8005718:	e767      	b.n	80055ea <_svfiprintf_r+0x4e>
 800571a:	fb0c 3202 	mla	r2, ip, r2, r3
 800571e:	460c      	mov	r4, r1
 8005720:	2001      	movs	r0, #1
 8005722:	e7a5      	b.n	8005670 <_svfiprintf_r+0xd4>
 8005724:	2300      	movs	r3, #0
 8005726:	3401      	adds	r4, #1
 8005728:	9305      	str	r3, [sp, #20]
 800572a:	4619      	mov	r1, r3
 800572c:	f04f 0c0a 	mov.w	ip, #10
 8005730:	4620      	mov	r0, r4
 8005732:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005736:	3a30      	subs	r2, #48	; 0x30
 8005738:	2a09      	cmp	r2, #9
 800573a:	d903      	bls.n	8005744 <_svfiprintf_r+0x1a8>
 800573c:	2b00      	cmp	r3, #0
 800573e:	d0c5      	beq.n	80056cc <_svfiprintf_r+0x130>
 8005740:	9105      	str	r1, [sp, #20]
 8005742:	e7c3      	b.n	80056cc <_svfiprintf_r+0x130>
 8005744:	fb0c 2101 	mla	r1, ip, r1, r2
 8005748:	4604      	mov	r4, r0
 800574a:	2301      	movs	r3, #1
 800574c:	e7f0      	b.n	8005730 <_svfiprintf_r+0x194>
 800574e:	ab03      	add	r3, sp, #12
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	462a      	mov	r2, r5
 8005754:	4b0f      	ldr	r3, [pc, #60]	; (8005794 <_svfiprintf_r+0x1f8>)
 8005756:	a904      	add	r1, sp, #16
 8005758:	4638      	mov	r0, r7
 800575a:	f7fe f80d 	bl	8003778 <_printf_float>
 800575e:	1c42      	adds	r2, r0, #1
 8005760:	4606      	mov	r6, r0
 8005762:	d1d6      	bne.n	8005712 <_svfiprintf_r+0x176>
 8005764:	89ab      	ldrh	r3, [r5, #12]
 8005766:	065b      	lsls	r3, r3, #25
 8005768:	f53f af2c 	bmi.w	80055c4 <_svfiprintf_r+0x28>
 800576c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800576e:	b01d      	add	sp, #116	; 0x74
 8005770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005774:	ab03      	add	r3, sp, #12
 8005776:	9300      	str	r3, [sp, #0]
 8005778:	462a      	mov	r2, r5
 800577a:	4b06      	ldr	r3, [pc, #24]	; (8005794 <_svfiprintf_r+0x1f8>)
 800577c:	a904      	add	r1, sp, #16
 800577e:	4638      	mov	r0, r7
 8005780:	f7fe fa9e 	bl	8003cc0 <_printf_i>
 8005784:	e7eb      	b.n	800575e <_svfiprintf_r+0x1c2>
 8005786:	bf00      	nop
 8005788:	080065ec 	.word	0x080065ec
 800578c:	080065f6 	.word	0x080065f6
 8005790:	08003779 	.word	0x08003779
 8005794:	080054e5 	.word	0x080054e5
 8005798:	080065f2 	.word	0x080065f2

0800579c <_sbrk_r>:
 800579c:	b538      	push	{r3, r4, r5, lr}
 800579e:	4d06      	ldr	r5, [pc, #24]	; (80057b8 <_sbrk_r+0x1c>)
 80057a0:	2300      	movs	r3, #0
 80057a2:	4604      	mov	r4, r0
 80057a4:	4608      	mov	r0, r1
 80057a6:	602b      	str	r3, [r5, #0]
 80057a8:	f7fb fe7a 	bl	80014a0 <_sbrk>
 80057ac:	1c43      	adds	r3, r0, #1
 80057ae:	d102      	bne.n	80057b6 <_sbrk_r+0x1a>
 80057b0:	682b      	ldr	r3, [r5, #0]
 80057b2:	b103      	cbz	r3, 80057b6 <_sbrk_r+0x1a>
 80057b4:	6023      	str	r3, [r4, #0]
 80057b6:	bd38      	pop	{r3, r4, r5, pc}
 80057b8:	200002a0 	.word	0x200002a0

080057bc <__assert_func>:
 80057bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80057be:	4614      	mov	r4, r2
 80057c0:	461a      	mov	r2, r3
 80057c2:	4b09      	ldr	r3, [pc, #36]	; (80057e8 <__assert_func+0x2c>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4605      	mov	r5, r0
 80057c8:	68d8      	ldr	r0, [r3, #12]
 80057ca:	b14c      	cbz	r4, 80057e0 <__assert_func+0x24>
 80057cc:	4b07      	ldr	r3, [pc, #28]	; (80057ec <__assert_func+0x30>)
 80057ce:	9100      	str	r1, [sp, #0]
 80057d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80057d4:	4906      	ldr	r1, [pc, #24]	; (80057f0 <__assert_func+0x34>)
 80057d6:	462b      	mov	r3, r5
 80057d8:	f000 f80e 	bl	80057f8 <fiprintf>
 80057dc:	f000 faa4 	bl	8005d28 <abort>
 80057e0:	4b04      	ldr	r3, [pc, #16]	; (80057f4 <__assert_func+0x38>)
 80057e2:	461c      	mov	r4, r3
 80057e4:	e7f3      	b.n	80057ce <__assert_func+0x12>
 80057e6:	bf00      	nop
 80057e8:	2000000c 	.word	0x2000000c
 80057ec:	080065fd 	.word	0x080065fd
 80057f0:	0800660a 	.word	0x0800660a
 80057f4:	08006638 	.word	0x08006638

080057f8 <fiprintf>:
 80057f8:	b40e      	push	{r1, r2, r3}
 80057fa:	b503      	push	{r0, r1, lr}
 80057fc:	4601      	mov	r1, r0
 80057fe:	ab03      	add	r3, sp, #12
 8005800:	4805      	ldr	r0, [pc, #20]	; (8005818 <fiprintf+0x20>)
 8005802:	f853 2b04 	ldr.w	r2, [r3], #4
 8005806:	6800      	ldr	r0, [r0, #0]
 8005808:	9301      	str	r3, [sp, #4]
 800580a:	f000 f88f 	bl	800592c <_vfiprintf_r>
 800580e:	b002      	add	sp, #8
 8005810:	f85d eb04 	ldr.w	lr, [sp], #4
 8005814:	b003      	add	sp, #12
 8005816:	4770      	bx	lr
 8005818:	2000000c 	.word	0x2000000c

0800581c <__ascii_mbtowc>:
 800581c:	b082      	sub	sp, #8
 800581e:	b901      	cbnz	r1, 8005822 <__ascii_mbtowc+0x6>
 8005820:	a901      	add	r1, sp, #4
 8005822:	b142      	cbz	r2, 8005836 <__ascii_mbtowc+0x1a>
 8005824:	b14b      	cbz	r3, 800583a <__ascii_mbtowc+0x1e>
 8005826:	7813      	ldrb	r3, [r2, #0]
 8005828:	600b      	str	r3, [r1, #0]
 800582a:	7812      	ldrb	r2, [r2, #0]
 800582c:	1e10      	subs	r0, r2, #0
 800582e:	bf18      	it	ne
 8005830:	2001      	movne	r0, #1
 8005832:	b002      	add	sp, #8
 8005834:	4770      	bx	lr
 8005836:	4610      	mov	r0, r2
 8005838:	e7fb      	b.n	8005832 <__ascii_mbtowc+0x16>
 800583a:	f06f 0001 	mvn.w	r0, #1
 800583e:	e7f8      	b.n	8005832 <__ascii_mbtowc+0x16>

08005840 <memmove>:
 8005840:	4288      	cmp	r0, r1
 8005842:	b510      	push	{r4, lr}
 8005844:	eb01 0402 	add.w	r4, r1, r2
 8005848:	d902      	bls.n	8005850 <memmove+0x10>
 800584a:	4284      	cmp	r4, r0
 800584c:	4623      	mov	r3, r4
 800584e:	d807      	bhi.n	8005860 <memmove+0x20>
 8005850:	1e43      	subs	r3, r0, #1
 8005852:	42a1      	cmp	r1, r4
 8005854:	d008      	beq.n	8005868 <memmove+0x28>
 8005856:	f811 2b01 	ldrb.w	r2, [r1], #1
 800585a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800585e:	e7f8      	b.n	8005852 <memmove+0x12>
 8005860:	4402      	add	r2, r0
 8005862:	4601      	mov	r1, r0
 8005864:	428a      	cmp	r2, r1
 8005866:	d100      	bne.n	800586a <memmove+0x2a>
 8005868:	bd10      	pop	{r4, pc}
 800586a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800586e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005872:	e7f7      	b.n	8005864 <memmove+0x24>

08005874 <__malloc_lock>:
 8005874:	4801      	ldr	r0, [pc, #4]	; (800587c <__malloc_lock+0x8>)
 8005876:	f000 bc17 	b.w	80060a8 <__retarget_lock_acquire_recursive>
 800587a:	bf00      	nop
 800587c:	200002a8 	.word	0x200002a8

08005880 <__malloc_unlock>:
 8005880:	4801      	ldr	r0, [pc, #4]	; (8005888 <__malloc_unlock+0x8>)
 8005882:	f000 bc12 	b.w	80060aa <__retarget_lock_release_recursive>
 8005886:	bf00      	nop
 8005888:	200002a8 	.word	0x200002a8

0800588c <_realloc_r>:
 800588c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800588e:	4607      	mov	r7, r0
 8005890:	4614      	mov	r4, r2
 8005892:	460e      	mov	r6, r1
 8005894:	b921      	cbnz	r1, 80058a0 <_realloc_r+0x14>
 8005896:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800589a:	4611      	mov	r1, r2
 800589c:	f7ff bdc8 	b.w	8005430 <_malloc_r>
 80058a0:	b922      	cbnz	r2, 80058ac <_realloc_r+0x20>
 80058a2:	f7ff fd75 	bl	8005390 <_free_r>
 80058a6:	4625      	mov	r5, r4
 80058a8:	4628      	mov	r0, r5
 80058aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058ac:	f000 fc62 	bl	8006174 <_malloc_usable_size_r>
 80058b0:	42a0      	cmp	r0, r4
 80058b2:	d20f      	bcs.n	80058d4 <_realloc_r+0x48>
 80058b4:	4621      	mov	r1, r4
 80058b6:	4638      	mov	r0, r7
 80058b8:	f7ff fdba 	bl	8005430 <_malloc_r>
 80058bc:	4605      	mov	r5, r0
 80058be:	2800      	cmp	r0, #0
 80058c0:	d0f2      	beq.n	80058a8 <_realloc_r+0x1c>
 80058c2:	4631      	mov	r1, r6
 80058c4:	4622      	mov	r2, r4
 80058c6:	f7ff f9c7 	bl	8004c58 <memcpy>
 80058ca:	4631      	mov	r1, r6
 80058cc:	4638      	mov	r0, r7
 80058ce:	f7ff fd5f 	bl	8005390 <_free_r>
 80058d2:	e7e9      	b.n	80058a8 <_realloc_r+0x1c>
 80058d4:	4635      	mov	r5, r6
 80058d6:	e7e7      	b.n	80058a8 <_realloc_r+0x1c>

080058d8 <__sfputc_r>:
 80058d8:	6893      	ldr	r3, [r2, #8]
 80058da:	3b01      	subs	r3, #1
 80058dc:	2b00      	cmp	r3, #0
 80058de:	b410      	push	{r4}
 80058e0:	6093      	str	r3, [r2, #8]
 80058e2:	da08      	bge.n	80058f6 <__sfputc_r+0x1e>
 80058e4:	6994      	ldr	r4, [r2, #24]
 80058e6:	42a3      	cmp	r3, r4
 80058e8:	db01      	blt.n	80058ee <__sfputc_r+0x16>
 80058ea:	290a      	cmp	r1, #10
 80058ec:	d103      	bne.n	80058f6 <__sfputc_r+0x1e>
 80058ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058f2:	f000 b94b 	b.w	8005b8c <__swbuf_r>
 80058f6:	6813      	ldr	r3, [r2, #0]
 80058f8:	1c58      	adds	r0, r3, #1
 80058fa:	6010      	str	r0, [r2, #0]
 80058fc:	7019      	strb	r1, [r3, #0]
 80058fe:	4608      	mov	r0, r1
 8005900:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005904:	4770      	bx	lr

08005906 <__sfputs_r>:
 8005906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005908:	4606      	mov	r6, r0
 800590a:	460f      	mov	r7, r1
 800590c:	4614      	mov	r4, r2
 800590e:	18d5      	adds	r5, r2, r3
 8005910:	42ac      	cmp	r4, r5
 8005912:	d101      	bne.n	8005918 <__sfputs_r+0x12>
 8005914:	2000      	movs	r0, #0
 8005916:	e007      	b.n	8005928 <__sfputs_r+0x22>
 8005918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800591c:	463a      	mov	r2, r7
 800591e:	4630      	mov	r0, r6
 8005920:	f7ff ffda 	bl	80058d8 <__sfputc_r>
 8005924:	1c43      	adds	r3, r0, #1
 8005926:	d1f3      	bne.n	8005910 <__sfputs_r+0xa>
 8005928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800592c <_vfiprintf_r>:
 800592c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005930:	460d      	mov	r5, r1
 8005932:	b09d      	sub	sp, #116	; 0x74
 8005934:	4614      	mov	r4, r2
 8005936:	4698      	mov	r8, r3
 8005938:	4606      	mov	r6, r0
 800593a:	b118      	cbz	r0, 8005944 <_vfiprintf_r+0x18>
 800593c:	6983      	ldr	r3, [r0, #24]
 800593e:	b90b      	cbnz	r3, 8005944 <_vfiprintf_r+0x18>
 8005940:	f000 fb14 	bl	8005f6c <__sinit>
 8005944:	4b89      	ldr	r3, [pc, #548]	; (8005b6c <_vfiprintf_r+0x240>)
 8005946:	429d      	cmp	r5, r3
 8005948:	d11b      	bne.n	8005982 <_vfiprintf_r+0x56>
 800594a:	6875      	ldr	r5, [r6, #4]
 800594c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800594e:	07d9      	lsls	r1, r3, #31
 8005950:	d405      	bmi.n	800595e <_vfiprintf_r+0x32>
 8005952:	89ab      	ldrh	r3, [r5, #12]
 8005954:	059a      	lsls	r2, r3, #22
 8005956:	d402      	bmi.n	800595e <_vfiprintf_r+0x32>
 8005958:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800595a:	f000 fba5 	bl	80060a8 <__retarget_lock_acquire_recursive>
 800595e:	89ab      	ldrh	r3, [r5, #12]
 8005960:	071b      	lsls	r3, r3, #28
 8005962:	d501      	bpl.n	8005968 <_vfiprintf_r+0x3c>
 8005964:	692b      	ldr	r3, [r5, #16]
 8005966:	b9eb      	cbnz	r3, 80059a4 <_vfiprintf_r+0x78>
 8005968:	4629      	mov	r1, r5
 800596a:	4630      	mov	r0, r6
 800596c:	f000 f96e 	bl	8005c4c <__swsetup_r>
 8005970:	b1c0      	cbz	r0, 80059a4 <_vfiprintf_r+0x78>
 8005972:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005974:	07dc      	lsls	r4, r3, #31
 8005976:	d50e      	bpl.n	8005996 <_vfiprintf_r+0x6a>
 8005978:	f04f 30ff 	mov.w	r0, #4294967295
 800597c:	b01d      	add	sp, #116	; 0x74
 800597e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005982:	4b7b      	ldr	r3, [pc, #492]	; (8005b70 <_vfiprintf_r+0x244>)
 8005984:	429d      	cmp	r5, r3
 8005986:	d101      	bne.n	800598c <_vfiprintf_r+0x60>
 8005988:	68b5      	ldr	r5, [r6, #8]
 800598a:	e7df      	b.n	800594c <_vfiprintf_r+0x20>
 800598c:	4b79      	ldr	r3, [pc, #484]	; (8005b74 <_vfiprintf_r+0x248>)
 800598e:	429d      	cmp	r5, r3
 8005990:	bf08      	it	eq
 8005992:	68f5      	ldreq	r5, [r6, #12]
 8005994:	e7da      	b.n	800594c <_vfiprintf_r+0x20>
 8005996:	89ab      	ldrh	r3, [r5, #12]
 8005998:	0598      	lsls	r0, r3, #22
 800599a:	d4ed      	bmi.n	8005978 <_vfiprintf_r+0x4c>
 800599c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800599e:	f000 fb84 	bl	80060aa <__retarget_lock_release_recursive>
 80059a2:	e7e9      	b.n	8005978 <_vfiprintf_r+0x4c>
 80059a4:	2300      	movs	r3, #0
 80059a6:	9309      	str	r3, [sp, #36]	; 0x24
 80059a8:	2320      	movs	r3, #32
 80059aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80059b2:	2330      	movs	r3, #48	; 0x30
 80059b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005b78 <_vfiprintf_r+0x24c>
 80059b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059bc:	f04f 0901 	mov.w	r9, #1
 80059c0:	4623      	mov	r3, r4
 80059c2:	469a      	mov	sl, r3
 80059c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059c8:	b10a      	cbz	r2, 80059ce <_vfiprintf_r+0xa2>
 80059ca:	2a25      	cmp	r2, #37	; 0x25
 80059cc:	d1f9      	bne.n	80059c2 <_vfiprintf_r+0x96>
 80059ce:	ebba 0b04 	subs.w	fp, sl, r4
 80059d2:	d00b      	beq.n	80059ec <_vfiprintf_r+0xc0>
 80059d4:	465b      	mov	r3, fp
 80059d6:	4622      	mov	r2, r4
 80059d8:	4629      	mov	r1, r5
 80059da:	4630      	mov	r0, r6
 80059dc:	f7ff ff93 	bl	8005906 <__sfputs_r>
 80059e0:	3001      	adds	r0, #1
 80059e2:	f000 80aa 	beq.w	8005b3a <_vfiprintf_r+0x20e>
 80059e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059e8:	445a      	add	r2, fp
 80059ea:	9209      	str	r2, [sp, #36]	; 0x24
 80059ec:	f89a 3000 	ldrb.w	r3, [sl]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 80a2 	beq.w	8005b3a <_vfiprintf_r+0x20e>
 80059f6:	2300      	movs	r3, #0
 80059f8:	f04f 32ff 	mov.w	r2, #4294967295
 80059fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a00:	f10a 0a01 	add.w	sl, sl, #1
 8005a04:	9304      	str	r3, [sp, #16]
 8005a06:	9307      	str	r3, [sp, #28]
 8005a08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a0c:	931a      	str	r3, [sp, #104]	; 0x68
 8005a0e:	4654      	mov	r4, sl
 8005a10:	2205      	movs	r2, #5
 8005a12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a16:	4858      	ldr	r0, [pc, #352]	; (8005b78 <_vfiprintf_r+0x24c>)
 8005a18:	f7fa fbea 	bl	80001f0 <memchr>
 8005a1c:	9a04      	ldr	r2, [sp, #16]
 8005a1e:	b9d8      	cbnz	r0, 8005a58 <_vfiprintf_r+0x12c>
 8005a20:	06d1      	lsls	r1, r2, #27
 8005a22:	bf44      	itt	mi
 8005a24:	2320      	movmi	r3, #32
 8005a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a2a:	0713      	lsls	r3, r2, #28
 8005a2c:	bf44      	itt	mi
 8005a2e:	232b      	movmi	r3, #43	; 0x2b
 8005a30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a34:	f89a 3000 	ldrb.w	r3, [sl]
 8005a38:	2b2a      	cmp	r3, #42	; 0x2a
 8005a3a:	d015      	beq.n	8005a68 <_vfiprintf_r+0x13c>
 8005a3c:	9a07      	ldr	r2, [sp, #28]
 8005a3e:	4654      	mov	r4, sl
 8005a40:	2000      	movs	r0, #0
 8005a42:	f04f 0c0a 	mov.w	ip, #10
 8005a46:	4621      	mov	r1, r4
 8005a48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a4c:	3b30      	subs	r3, #48	; 0x30
 8005a4e:	2b09      	cmp	r3, #9
 8005a50:	d94e      	bls.n	8005af0 <_vfiprintf_r+0x1c4>
 8005a52:	b1b0      	cbz	r0, 8005a82 <_vfiprintf_r+0x156>
 8005a54:	9207      	str	r2, [sp, #28]
 8005a56:	e014      	b.n	8005a82 <_vfiprintf_r+0x156>
 8005a58:	eba0 0308 	sub.w	r3, r0, r8
 8005a5c:	fa09 f303 	lsl.w	r3, r9, r3
 8005a60:	4313      	orrs	r3, r2
 8005a62:	9304      	str	r3, [sp, #16]
 8005a64:	46a2      	mov	sl, r4
 8005a66:	e7d2      	b.n	8005a0e <_vfiprintf_r+0xe2>
 8005a68:	9b03      	ldr	r3, [sp, #12]
 8005a6a:	1d19      	adds	r1, r3, #4
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	9103      	str	r1, [sp, #12]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	bfbb      	ittet	lt
 8005a74:	425b      	neglt	r3, r3
 8005a76:	f042 0202 	orrlt.w	r2, r2, #2
 8005a7a:	9307      	strge	r3, [sp, #28]
 8005a7c:	9307      	strlt	r3, [sp, #28]
 8005a7e:	bfb8      	it	lt
 8005a80:	9204      	strlt	r2, [sp, #16]
 8005a82:	7823      	ldrb	r3, [r4, #0]
 8005a84:	2b2e      	cmp	r3, #46	; 0x2e
 8005a86:	d10c      	bne.n	8005aa2 <_vfiprintf_r+0x176>
 8005a88:	7863      	ldrb	r3, [r4, #1]
 8005a8a:	2b2a      	cmp	r3, #42	; 0x2a
 8005a8c:	d135      	bne.n	8005afa <_vfiprintf_r+0x1ce>
 8005a8e:	9b03      	ldr	r3, [sp, #12]
 8005a90:	1d1a      	adds	r2, r3, #4
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	9203      	str	r2, [sp, #12]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	bfb8      	it	lt
 8005a9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a9e:	3402      	adds	r4, #2
 8005aa0:	9305      	str	r3, [sp, #20]
 8005aa2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005b88 <_vfiprintf_r+0x25c>
 8005aa6:	7821      	ldrb	r1, [r4, #0]
 8005aa8:	2203      	movs	r2, #3
 8005aaa:	4650      	mov	r0, sl
 8005aac:	f7fa fba0 	bl	80001f0 <memchr>
 8005ab0:	b140      	cbz	r0, 8005ac4 <_vfiprintf_r+0x198>
 8005ab2:	2340      	movs	r3, #64	; 0x40
 8005ab4:	eba0 000a 	sub.w	r0, r0, sl
 8005ab8:	fa03 f000 	lsl.w	r0, r3, r0
 8005abc:	9b04      	ldr	r3, [sp, #16]
 8005abe:	4303      	orrs	r3, r0
 8005ac0:	3401      	adds	r4, #1
 8005ac2:	9304      	str	r3, [sp, #16]
 8005ac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ac8:	482c      	ldr	r0, [pc, #176]	; (8005b7c <_vfiprintf_r+0x250>)
 8005aca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ace:	2206      	movs	r2, #6
 8005ad0:	f7fa fb8e 	bl	80001f0 <memchr>
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	d03f      	beq.n	8005b58 <_vfiprintf_r+0x22c>
 8005ad8:	4b29      	ldr	r3, [pc, #164]	; (8005b80 <_vfiprintf_r+0x254>)
 8005ada:	bb1b      	cbnz	r3, 8005b24 <_vfiprintf_r+0x1f8>
 8005adc:	9b03      	ldr	r3, [sp, #12]
 8005ade:	3307      	adds	r3, #7
 8005ae0:	f023 0307 	bic.w	r3, r3, #7
 8005ae4:	3308      	adds	r3, #8
 8005ae6:	9303      	str	r3, [sp, #12]
 8005ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aea:	443b      	add	r3, r7
 8005aec:	9309      	str	r3, [sp, #36]	; 0x24
 8005aee:	e767      	b.n	80059c0 <_vfiprintf_r+0x94>
 8005af0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005af4:	460c      	mov	r4, r1
 8005af6:	2001      	movs	r0, #1
 8005af8:	e7a5      	b.n	8005a46 <_vfiprintf_r+0x11a>
 8005afa:	2300      	movs	r3, #0
 8005afc:	3401      	adds	r4, #1
 8005afe:	9305      	str	r3, [sp, #20]
 8005b00:	4619      	mov	r1, r3
 8005b02:	f04f 0c0a 	mov.w	ip, #10
 8005b06:	4620      	mov	r0, r4
 8005b08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b0c:	3a30      	subs	r2, #48	; 0x30
 8005b0e:	2a09      	cmp	r2, #9
 8005b10:	d903      	bls.n	8005b1a <_vfiprintf_r+0x1ee>
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d0c5      	beq.n	8005aa2 <_vfiprintf_r+0x176>
 8005b16:	9105      	str	r1, [sp, #20]
 8005b18:	e7c3      	b.n	8005aa2 <_vfiprintf_r+0x176>
 8005b1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b1e:	4604      	mov	r4, r0
 8005b20:	2301      	movs	r3, #1
 8005b22:	e7f0      	b.n	8005b06 <_vfiprintf_r+0x1da>
 8005b24:	ab03      	add	r3, sp, #12
 8005b26:	9300      	str	r3, [sp, #0]
 8005b28:	462a      	mov	r2, r5
 8005b2a:	4b16      	ldr	r3, [pc, #88]	; (8005b84 <_vfiprintf_r+0x258>)
 8005b2c:	a904      	add	r1, sp, #16
 8005b2e:	4630      	mov	r0, r6
 8005b30:	f7fd fe22 	bl	8003778 <_printf_float>
 8005b34:	4607      	mov	r7, r0
 8005b36:	1c78      	adds	r0, r7, #1
 8005b38:	d1d6      	bne.n	8005ae8 <_vfiprintf_r+0x1bc>
 8005b3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b3c:	07d9      	lsls	r1, r3, #31
 8005b3e:	d405      	bmi.n	8005b4c <_vfiprintf_r+0x220>
 8005b40:	89ab      	ldrh	r3, [r5, #12]
 8005b42:	059a      	lsls	r2, r3, #22
 8005b44:	d402      	bmi.n	8005b4c <_vfiprintf_r+0x220>
 8005b46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b48:	f000 faaf 	bl	80060aa <__retarget_lock_release_recursive>
 8005b4c:	89ab      	ldrh	r3, [r5, #12]
 8005b4e:	065b      	lsls	r3, r3, #25
 8005b50:	f53f af12 	bmi.w	8005978 <_vfiprintf_r+0x4c>
 8005b54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b56:	e711      	b.n	800597c <_vfiprintf_r+0x50>
 8005b58:	ab03      	add	r3, sp, #12
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	462a      	mov	r2, r5
 8005b5e:	4b09      	ldr	r3, [pc, #36]	; (8005b84 <_vfiprintf_r+0x258>)
 8005b60:	a904      	add	r1, sp, #16
 8005b62:	4630      	mov	r0, r6
 8005b64:	f7fe f8ac 	bl	8003cc0 <_printf_i>
 8005b68:	e7e4      	b.n	8005b34 <_vfiprintf_r+0x208>
 8005b6a:	bf00      	nop
 8005b6c:	08006764 	.word	0x08006764
 8005b70:	08006784 	.word	0x08006784
 8005b74:	08006744 	.word	0x08006744
 8005b78:	080065ec 	.word	0x080065ec
 8005b7c:	080065f6 	.word	0x080065f6
 8005b80:	08003779 	.word	0x08003779
 8005b84:	08005907 	.word	0x08005907
 8005b88:	080065f2 	.word	0x080065f2

08005b8c <__swbuf_r>:
 8005b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b8e:	460e      	mov	r6, r1
 8005b90:	4614      	mov	r4, r2
 8005b92:	4605      	mov	r5, r0
 8005b94:	b118      	cbz	r0, 8005b9e <__swbuf_r+0x12>
 8005b96:	6983      	ldr	r3, [r0, #24]
 8005b98:	b90b      	cbnz	r3, 8005b9e <__swbuf_r+0x12>
 8005b9a:	f000 f9e7 	bl	8005f6c <__sinit>
 8005b9e:	4b21      	ldr	r3, [pc, #132]	; (8005c24 <__swbuf_r+0x98>)
 8005ba0:	429c      	cmp	r4, r3
 8005ba2:	d12b      	bne.n	8005bfc <__swbuf_r+0x70>
 8005ba4:	686c      	ldr	r4, [r5, #4]
 8005ba6:	69a3      	ldr	r3, [r4, #24]
 8005ba8:	60a3      	str	r3, [r4, #8]
 8005baa:	89a3      	ldrh	r3, [r4, #12]
 8005bac:	071a      	lsls	r2, r3, #28
 8005bae:	d52f      	bpl.n	8005c10 <__swbuf_r+0x84>
 8005bb0:	6923      	ldr	r3, [r4, #16]
 8005bb2:	b36b      	cbz	r3, 8005c10 <__swbuf_r+0x84>
 8005bb4:	6923      	ldr	r3, [r4, #16]
 8005bb6:	6820      	ldr	r0, [r4, #0]
 8005bb8:	1ac0      	subs	r0, r0, r3
 8005bba:	6963      	ldr	r3, [r4, #20]
 8005bbc:	b2f6      	uxtb	r6, r6
 8005bbe:	4283      	cmp	r3, r0
 8005bc0:	4637      	mov	r7, r6
 8005bc2:	dc04      	bgt.n	8005bce <__swbuf_r+0x42>
 8005bc4:	4621      	mov	r1, r4
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	f000 f93c 	bl	8005e44 <_fflush_r>
 8005bcc:	bb30      	cbnz	r0, 8005c1c <__swbuf_r+0x90>
 8005bce:	68a3      	ldr	r3, [r4, #8]
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	60a3      	str	r3, [r4, #8]
 8005bd4:	6823      	ldr	r3, [r4, #0]
 8005bd6:	1c5a      	adds	r2, r3, #1
 8005bd8:	6022      	str	r2, [r4, #0]
 8005bda:	701e      	strb	r6, [r3, #0]
 8005bdc:	6963      	ldr	r3, [r4, #20]
 8005bde:	3001      	adds	r0, #1
 8005be0:	4283      	cmp	r3, r0
 8005be2:	d004      	beq.n	8005bee <__swbuf_r+0x62>
 8005be4:	89a3      	ldrh	r3, [r4, #12]
 8005be6:	07db      	lsls	r3, r3, #31
 8005be8:	d506      	bpl.n	8005bf8 <__swbuf_r+0x6c>
 8005bea:	2e0a      	cmp	r6, #10
 8005bec:	d104      	bne.n	8005bf8 <__swbuf_r+0x6c>
 8005bee:	4621      	mov	r1, r4
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	f000 f927 	bl	8005e44 <_fflush_r>
 8005bf6:	b988      	cbnz	r0, 8005c1c <__swbuf_r+0x90>
 8005bf8:	4638      	mov	r0, r7
 8005bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bfc:	4b0a      	ldr	r3, [pc, #40]	; (8005c28 <__swbuf_r+0x9c>)
 8005bfe:	429c      	cmp	r4, r3
 8005c00:	d101      	bne.n	8005c06 <__swbuf_r+0x7a>
 8005c02:	68ac      	ldr	r4, [r5, #8]
 8005c04:	e7cf      	b.n	8005ba6 <__swbuf_r+0x1a>
 8005c06:	4b09      	ldr	r3, [pc, #36]	; (8005c2c <__swbuf_r+0xa0>)
 8005c08:	429c      	cmp	r4, r3
 8005c0a:	bf08      	it	eq
 8005c0c:	68ec      	ldreq	r4, [r5, #12]
 8005c0e:	e7ca      	b.n	8005ba6 <__swbuf_r+0x1a>
 8005c10:	4621      	mov	r1, r4
 8005c12:	4628      	mov	r0, r5
 8005c14:	f000 f81a 	bl	8005c4c <__swsetup_r>
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	d0cb      	beq.n	8005bb4 <__swbuf_r+0x28>
 8005c1c:	f04f 37ff 	mov.w	r7, #4294967295
 8005c20:	e7ea      	b.n	8005bf8 <__swbuf_r+0x6c>
 8005c22:	bf00      	nop
 8005c24:	08006764 	.word	0x08006764
 8005c28:	08006784 	.word	0x08006784
 8005c2c:	08006744 	.word	0x08006744

08005c30 <__ascii_wctomb>:
 8005c30:	b149      	cbz	r1, 8005c46 <__ascii_wctomb+0x16>
 8005c32:	2aff      	cmp	r2, #255	; 0xff
 8005c34:	bf85      	ittet	hi
 8005c36:	238a      	movhi	r3, #138	; 0x8a
 8005c38:	6003      	strhi	r3, [r0, #0]
 8005c3a:	700a      	strbls	r2, [r1, #0]
 8005c3c:	f04f 30ff 	movhi.w	r0, #4294967295
 8005c40:	bf98      	it	ls
 8005c42:	2001      	movls	r0, #1
 8005c44:	4770      	bx	lr
 8005c46:	4608      	mov	r0, r1
 8005c48:	4770      	bx	lr
	...

08005c4c <__swsetup_r>:
 8005c4c:	4b32      	ldr	r3, [pc, #200]	; (8005d18 <__swsetup_r+0xcc>)
 8005c4e:	b570      	push	{r4, r5, r6, lr}
 8005c50:	681d      	ldr	r5, [r3, #0]
 8005c52:	4606      	mov	r6, r0
 8005c54:	460c      	mov	r4, r1
 8005c56:	b125      	cbz	r5, 8005c62 <__swsetup_r+0x16>
 8005c58:	69ab      	ldr	r3, [r5, #24]
 8005c5a:	b913      	cbnz	r3, 8005c62 <__swsetup_r+0x16>
 8005c5c:	4628      	mov	r0, r5
 8005c5e:	f000 f985 	bl	8005f6c <__sinit>
 8005c62:	4b2e      	ldr	r3, [pc, #184]	; (8005d1c <__swsetup_r+0xd0>)
 8005c64:	429c      	cmp	r4, r3
 8005c66:	d10f      	bne.n	8005c88 <__swsetup_r+0x3c>
 8005c68:	686c      	ldr	r4, [r5, #4]
 8005c6a:	89a3      	ldrh	r3, [r4, #12]
 8005c6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c70:	0719      	lsls	r1, r3, #28
 8005c72:	d42c      	bmi.n	8005cce <__swsetup_r+0x82>
 8005c74:	06dd      	lsls	r5, r3, #27
 8005c76:	d411      	bmi.n	8005c9c <__swsetup_r+0x50>
 8005c78:	2309      	movs	r3, #9
 8005c7a:	6033      	str	r3, [r6, #0]
 8005c7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c80:	81a3      	strh	r3, [r4, #12]
 8005c82:	f04f 30ff 	mov.w	r0, #4294967295
 8005c86:	e03e      	b.n	8005d06 <__swsetup_r+0xba>
 8005c88:	4b25      	ldr	r3, [pc, #148]	; (8005d20 <__swsetup_r+0xd4>)
 8005c8a:	429c      	cmp	r4, r3
 8005c8c:	d101      	bne.n	8005c92 <__swsetup_r+0x46>
 8005c8e:	68ac      	ldr	r4, [r5, #8]
 8005c90:	e7eb      	b.n	8005c6a <__swsetup_r+0x1e>
 8005c92:	4b24      	ldr	r3, [pc, #144]	; (8005d24 <__swsetup_r+0xd8>)
 8005c94:	429c      	cmp	r4, r3
 8005c96:	bf08      	it	eq
 8005c98:	68ec      	ldreq	r4, [r5, #12]
 8005c9a:	e7e6      	b.n	8005c6a <__swsetup_r+0x1e>
 8005c9c:	0758      	lsls	r0, r3, #29
 8005c9e:	d512      	bpl.n	8005cc6 <__swsetup_r+0x7a>
 8005ca0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ca2:	b141      	cbz	r1, 8005cb6 <__swsetup_r+0x6a>
 8005ca4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ca8:	4299      	cmp	r1, r3
 8005caa:	d002      	beq.n	8005cb2 <__swsetup_r+0x66>
 8005cac:	4630      	mov	r0, r6
 8005cae:	f7ff fb6f 	bl	8005390 <_free_r>
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	6363      	str	r3, [r4, #52]	; 0x34
 8005cb6:	89a3      	ldrh	r3, [r4, #12]
 8005cb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005cbc:	81a3      	strh	r3, [r4, #12]
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	6063      	str	r3, [r4, #4]
 8005cc2:	6923      	ldr	r3, [r4, #16]
 8005cc4:	6023      	str	r3, [r4, #0]
 8005cc6:	89a3      	ldrh	r3, [r4, #12]
 8005cc8:	f043 0308 	orr.w	r3, r3, #8
 8005ccc:	81a3      	strh	r3, [r4, #12]
 8005cce:	6923      	ldr	r3, [r4, #16]
 8005cd0:	b94b      	cbnz	r3, 8005ce6 <__swsetup_r+0x9a>
 8005cd2:	89a3      	ldrh	r3, [r4, #12]
 8005cd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005cd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cdc:	d003      	beq.n	8005ce6 <__swsetup_r+0x9a>
 8005cde:	4621      	mov	r1, r4
 8005ce0:	4630      	mov	r0, r6
 8005ce2:	f000 fa07 	bl	80060f4 <__smakebuf_r>
 8005ce6:	89a0      	ldrh	r0, [r4, #12]
 8005ce8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005cec:	f010 0301 	ands.w	r3, r0, #1
 8005cf0:	d00a      	beq.n	8005d08 <__swsetup_r+0xbc>
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	60a3      	str	r3, [r4, #8]
 8005cf6:	6963      	ldr	r3, [r4, #20]
 8005cf8:	425b      	negs	r3, r3
 8005cfa:	61a3      	str	r3, [r4, #24]
 8005cfc:	6923      	ldr	r3, [r4, #16]
 8005cfe:	b943      	cbnz	r3, 8005d12 <__swsetup_r+0xc6>
 8005d00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d04:	d1ba      	bne.n	8005c7c <__swsetup_r+0x30>
 8005d06:	bd70      	pop	{r4, r5, r6, pc}
 8005d08:	0781      	lsls	r1, r0, #30
 8005d0a:	bf58      	it	pl
 8005d0c:	6963      	ldrpl	r3, [r4, #20]
 8005d0e:	60a3      	str	r3, [r4, #8]
 8005d10:	e7f4      	b.n	8005cfc <__swsetup_r+0xb0>
 8005d12:	2000      	movs	r0, #0
 8005d14:	e7f7      	b.n	8005d06 <__swsetup_r+0xba>
 8005d16:	bf00      	nop
 8005d18:	2000000c 	.word	0x2000000c
 8005d1c:	08006764 	.word	0x08006764
 8005d20:	08006784 	.word	0x08006784
 8005d24:	08006744 	.word	0x08006744

08005d28 <abort>:
 8005d28:	b508      	push	{r3, lr}
 8005d2a:	2006      	movs	r0, #6
 8005d2c:	f000 fa52 	bl	80061d4 <raise>
 8005d30:	2001      	movs	r0, #1
 8005d32:	f7fb fb3d 	bl	80013b0 <_exit>
	...

08005d38 <__sflush_r>:
 8005d38:	898a      	ldrh	r2, [r1, #12]
 8005d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d3e:	4605      	mov	r5, r0
 8005d40:	0710      	lsls	r0, r2, #28
 8005d42:	460c      	mov	r4, r1
 8005d44:	d458      	bmi.n	8005df8 <__sflush_r+0xc0>
 8005d46:	684b      	ldr	r3, [r1, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	dc05      	bgt.n	8005d58 <__sflush_r+0x20>
 8005d4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	dc02      	bgt.n	8005d58 <__sflush_r+0x20>
 8005d52:	2000      	movs	r0, #0
 8005d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d5a:	2e00      	cmp	r6, #0
 8005d5c:	d0f9      	beq.n	8005d52 <__sflush_r+0x1a>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d64:	682f      	ldr	r7, [r5, #0]
 8005d66:	602b      	str	r3, [r5, #0]
 8005d68:	d032      	beq.n	8005dd0 <__sflush_r+0x98>
 8005d6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d6c:	89a3      	ldrh	r3, [r4, #12]
 8005d6e:	075a      	lsls	r2, r3, #29
 8005d70:	d505      	bpl.n	8005d7e <__sflush_r+0x46>
 8005d72:	6863      	ldr	r3, [r4, #4]
 8005d74:	1ac0      	subs	r0, r0, r3
 8005d76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d78:	b10b      	cbz	r3, 8005d7e <__sflush_r+0x46>
 8005d7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d7c:	1ac0      	subs	r0, r0, r3
 8005d7e:	2300      	movs	r3, #0
 8005d80:	4602      	mov	r2, r0
 8005d82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d84:	6a21      	ldr	r1, [r4, #32]
 8005d86:	4628      	mov	r0, r5
 8005d88:	47b0      	blx	r6
 8005d8a:	1c43      	adds	r3, r0, #1
 8005d8c:	89a3      	ldrh	r3, [r4, #12]
 8005d8e:	d106      	bne.n	8005d9e <__sflush_r+0x66>
 8005d90:	6829      	ldr	r1, [r5, #0]
 8005d92:	291d      	cmp	r1, #29
 8005d94:	d82c      	bhi.n	8005df0 <__sflush_r+0xb8>
 8005d96:	4a2a      	ldr	r2, [pc, #168]	; (8005e40 <__sflush_r+0x108>)
 8005d98:	40ca      	lsrs	r2, r1
 8005d9a:	07d6      	lsls	r6, r2, #31
 8005d9c:	d528      	bpl.n	8005df0 <__sflush_r+0xb8>
 8005d9e:	2200      	movs	r2, #0
 8005da0:	6062      	str	r2, [r4, #4]
 8005da2:	04d9      	lsls	r1, r3, #19
 8005da4:	6922      	ldr	r2, [r4, #16]
 8005da6:	6022      	str	r2, [r4, #0]
 8005da8:	d504      	bpl.n	8005db4 <__sflush_r+0x7c>
 8005daa:	1c42      	adds	r2, r0, #1
 8005dac:	d101      	bne.n	8005db2 <__sflush_r+0x7a>
 8005dae:	682b      	ldr	r3, [r5, #0]
 8005db0:	b903      	cbnz	r3, 8005db4 <__sflush_r+0x7c>
 8005db2:	6560      	str	r0, [r4, #84]	; 0x54
 8005db4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005db6:	602f      	str	r7, [r5, #0]
 8005db8:	2900      	cmp	r1, #0
 8005dba:	d0ca      	beq.n	8005d52 <__sflush_r+0x1a>
 8005dbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005dc0:	4299      	cmp	r1, r3
 8005dc2:	d002      	beq.n	8005dca <__sflush_r+0x92>
 8005dc4:	4628      	mov	r0, r5
 8005dc6:	f7ff fae3 	bl	8005390 <_free_r>
 8005dca:	2000      	movs	r0, #0
 8005dcc:	6360      	str	r0, [r4, #52]	; 0x34
 8005dce:	e7c1      	b.n	8005d54 <__sflush_r+0x1c>
 8005dd0:	6a21      	ldr	r1, [r4, #32]
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	47b0      	blx	r6
 8005dd8:	1c41      	adds	r1, r0, #1
 8005dda:	d1c7      	bne.n	8005d6c <__sflush_r+0x34>
 8005ddc:	682b      	ldr	r3, [r5, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d0c4      	beq.n	8005d6c <__sflush_r+0x34>
 8005de2:	2b1d      	cmp	r3, #29
 8005de4:	d001      	beq.n	8005dea <__sflush_r+0xb2>
 8005de6:	2b16      	cmp	r3, #22
 8005de8:	d101      	bne.n	8005dee <__sflush_r+0xb6>
 8005dea:	602f      	str	r7, [r5, #0]
 8005dec:	e7b1      	b.n	8005d52 <__sflush_r+0x1a>
 8005dee:	89a3      	ldrh	r3, [r4, #12]
 8005df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005df4:	81a3      	strh	r3, [r4, #12]
 8005df6:	e7ad      	b.n	8005d54 <__sflush_r+0x1c>
 8005df8:	690f      	ldr	r7, [r1, #16]
 8005dfa:	2f00      	cmp	r7, #0
 8005dfc:	d0a9      	beq.n	8005d52 <__sflush_r+0x1a>
 8005dfe:	0793      	lsls	r3, r2, #30
 8005e00:	680e      	ldr	r6, [r1, #0]
 8005e02:	bf08      	it	eq
 8005e04:	694b      	ldreq	r3, [r1, #20]
 8005e06:	600f      	str	r7, [r1, #0]
 8005e08:	bf18      	it	ne
 8005e0a:	2300      	movne	r3, #0
 8005e0c:	eba6 0807 	sub.w	r8, r6, r7
 8005e10:	608b      	str	r3, [r1, #8]
 8005e12:	f1b8 0f00 	cmp.w	r8, #0
 8005e16:	dd9c      	ble.n	8005d52 <__sflush_r+0x1a>
 8005e18:	6a21      	ldr	r1, [r4, #32]
 8005e1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e1c:	4643      	mov	r3, r8
 8005e1e:	463a      	mov	r2, r7
 8005e20:	4628      	mov	r0, r5
 8005e22:	47b0      	blx	r6
 8005e24:	2800      	cmp	r0, #0
 8005e26:	dc06      	bgt.n	8005e36 <__sflush_r+0xfe>
 8005e28:	89a3      	ldrh	r3, [r4, #12]
 8005e2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e2e:	81a3      	strh	r3, [r4, #12]
 8005e30:	f04f 30ff 	mov.w	r0, #4294967295
 8005e34:	e78e      	b.n	8005d54 <__sflush_r+0x1c>
 8005e36:	4407      	add	r7, r0
 8005e38:	eba8 0800 	sub.w	r8, r8, r0
 8005e3c:	e7e9      	b.n	8005e12 <__sflush_r+0xda>
 8005e3e:	bf00      	nop
 8005e40:	20400001 	.word	0x20400001

08005e44 <_fflush_r>:
 8005e44:	b538      	push	{r3, r4, r5, lr}
 8005e46:	690b      	ldr	r3, [r1, #16]
 8005e48:	4605      	mov	r5, r0
 8005e4a:	460c      	mov	r4, r1
 8005e4c:	b913      	cbnz	r3, 8005e54 <_fflush_r+0x10>
 8005e4e:	2500      	movs	r5, #0
 8005e50:	4628      	mov	r0, r5
 8005e52:	bd38      	pop	{r3, r4, r5, pc}
 8005e54:	b118      	cbz	r0, 8005e5e <_fflush_r+0x1a>
 8005e56:	6983      	ldr	r3, [r0, #24]
 8005e58:	b90b      	cbnz	r3, 8005e5e <_fflush_r+0x1a>
 8005e5a:	f000 f887 	bl	8005f6c <__sinit>
 8005e5e:	4b14      	ldr	r3, [pc, #80]	; (8005eb0 <_fflush_r+0x6c>)
 8005e60:	429c      	cmp	r4, r3
 8005e62:	d11b      	bne.n	8005e9c <_fflush_r+0x58>
 8005e64:	686c      	ldr	r4, [r5, #4]
 8005e66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d0ef      	beq.n	8005e4e <_fflush_r+0xa>
 8005e6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e70:	07d0      	lsls	r0, r2, #31
 8005e72:	d404      	bmi.n	8005e7e <_fflush_r+0x3a>
 8005e74:	0599      	lsls	r1, r3, #22
 8005e76:	d402      	bmi.n	8005e7e <_fflush_r+0x3a>
 8005e78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e7a:	f000 f915 	bl	80060a8 <__retarget_lock_acquire_recursive>
 8005e7e:	4628      	mov	r0, r5
 8005e80:	4621      	mov	r1, r4
 8005e82:	f7ff ff59 	bl	8005d38 <__sflush_r>
 8005e86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e88:	07da      	lsls	r2, r3, #31
 8005e8a:	4605      	mov	r5, r0
 8005e8c:	d4e0      	bmi.n	8005e50 <_fflush_r+0xc>
 8005e8e:	89a3      	ldrh	r3, [r4, #12]
 8005e90:	059b      	lsls	r3, r3, #22
 8005e92:	d4dd      	bmi.n	8005e50 <_fflush_r+0xc>
 8005e94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e96:	f000 f908 	bl	80060aa <__retarget_lock_release_recursive>
 8005e9a:	e7d9      	b.n	8005e50 <_fflush_r+0xc>
 8005e9c:	4b05      	ldr	r3, [pc, #20]	; (8005eb4 <_fflush_r+0x70>)
 8005e9e:	429c      	cmp	r4, r3
 8005ea0:	d101      	bne.n	8005ea6 <_fflush_r+0x62>
 8005ea2:	68ac      	ldr	r4, [r5, #8]
 8005ea4:	e7df      	b.n	8005e66 <_fflush_r+0x22>
 8005ea6:	4b04      	ldr	r3, [pc, #16]	; (8005eb8 <_fflush_r+0x74>)
 8005ea8:	429c      	cmp	r4, r3
 8005eaa:	bf08      	it	eq
 8005eac:	68ec      	ldreq	r4, [r5, #12]
 8005eae:	e7da      	b.n	8005e66 <_fflush_r+0x22>
 8005eb0:	08006764 	.word	0x08006764
 8005eb4:	08006784 	.word	0x08006784
 8005eb8:	08006744 	.word	0x08006744

08005ebc <std>:
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	b510      	push	{r4, lr}
 8005ec0:	4604      	mov	r4, r0
 8005ec2:	e9c0 3300 	strd	r3, r3, [r0]
 8005ec6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005eca:	6083      	str	r3, [r0, #8]
 8005ecc:	8181      	strh	r1, [r0, #12]
 8005ece:	6643      	str	r3, [r0, #100]	; 0x64
 8005ed0:	81c2      	strh	r2, [r0, #14]
 8005ed2:	6183      	str	r3, [r0, #24]
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	2208      	movs	r2, #8
 8005ed8:	305c      	adds	r0, #92	; 0x5c
 8005eda:	f7fd fba5 	bl	8003628 <memset>
 8005ede:	4b05      	ldr	r3, [pc, #20]	; (8005ef4 <std+0x38>)
 8005ee0:	6263      	str	r3, [r4, #36]	; 0x24
 8005ee2:	4b05      	ldr	r3, [pc, #20]	; (8005ef8 <std+0x3c>)
 8005ee4:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ee6:	4b05      	ldr	r3, [pc, #20]	; (8005efc <std+0x40>)
 8005ee8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005eea:	4b05      	ldr	r3, [pc, #20]	; (8005f00 <std+0x44>)
 8005eec:	6224      	str	r4, [r4, #32]
 8005eee:	6323      	str	r3, [r4, #48]	; 0x30
 8005ef0:	bd10      	pop	{r4, pc}
 8005ef2:	bf00      	nop
 8005ef4:	0800620d 	.word	0x0800620d
 8005ef8:	0800622f 	.word	0x0800622f
 8005efc:	08006267 	.word	0x08006267
 8005f00:	0800628b 	.word	0x0800628b

08005f04 <_cleanup_r>:
 8005f04:	4901      	ldr	r1, [pc, #4]	; (8005f0c <_cleanup_r+0x8>)
 8005f06:	f000 b8af 	b.w	8006068 <_fwalk_reent>
 8005f0a:	bf00      	nop
 8005f0c:	08005e45 	.word	0x08005e45

08005f10 <__sfmoreglue>:
 8005f10:	b570      	push	{r4, r5, r6, lr}
 8005f12:	1e4a      	subs	r2, r1, #1
 8005f14:	2568      	movs	r5, #104	; 0x68
 8005f16:	4355      	muls	r5, r2
 8005f18:	460e      	mov	r6, r1
 8005f1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005f1e:	f7ff fa87 	bl	8005430 <_malloc_r>
 8005f22:	4604      	mov	r4, r0
 8005f24:	b140      	cbz	r0, 8005f38 <__sfmoreglue+0x28>
 8005f26:	2100      	movs	r1, #0
 8005f28:	e9c0 1600 	strd	r1, r6, [r0]
 8005f2c:	300c      	adds	r0, #12
 8005f2e:	60a0      	str	r0, [r4, #8]
 8005f30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005f34:	f7fd fb78 	bl	8003628 <memset>
 8005f38:	4620      	mov	r0, r4
 8005f3a:	bd70      	pop	{r4, r5, r6, pc}

08005f3c <__sfp_lock_acquire>:
 8005f3c:	4801      	ldr	r0, [pc, #4]	; (8005f44 <__sfp_lock_acquire+0x8>)
 8005f3e:	f000 b8b3 	b.w	80060a8 <__retarget_lock_acquire_recursive>
 8005f42:	bf00      	nop
 8005f44:	200002ac 	.word	0x200002ac

08005f48 <__sfp_lock_release>:
 8005f48:	4801      	ldr	r0, [pc, #4]	; (8005f50 <__sfp_lock_release+0x8>)
 8005f4a:	f000 b8ae 	b.w	80060aa <__retarget_lock_release_recursive>
 8005f4e:	bf00      	nop
 8005f50:	200002ac 	.word	0x200002ac

08005f54 <__sinit_lock_acquire>:
 8005f54:	4801      	ldr	r0, [pc, #4]	; (8005f5c <__sinit_lock_acquire+0x8>)
 8005f56:	f000 b8a7 	b.w	80060a8 <__retarget_lock_acquire_recursive>
 8005f5a:	bf00      	nop
 8005f5c:	200002a7 	.word	0x200002a7

08005f60 <__sinit_lock_release>:
 8005f60:	4801      	ldr	r0, [pc, #4]	; (8005f68 <__sinit_lock_release+0x8>)
 8005f62:	f000 b8a2 	b.w	80060aa <__retarget_lock_release_recursive>
 8005f66:	bf00      	nop
 8005f68:	200002a7 	.word	0x200002a7

08005f6c <__sinit>:
 8005f6c:	b510      	push	{r4, lr}
 8005f6e:	4604      	mov	r4, r0
 8005f70:	f7ff fff0 	bl	8005f54 <__sinit_lock_acquire>
 8005f74:	69a3      	ldr	r3, [r4, #24]
 8005f76:	b11b      	cbz	r3, 8005f80 <__sinit+0x14>
 8005f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f7c:	f7ff bff0 	b.w	8005f60 <__sinit_lock_release>
 8005f80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005f84:	6523      	str	r3, [r4, #80]	; 0x50
 8005f86:	4b13      	ldr	r3, [pc, #76]	; (8005fd4 <__sinit+0x68>)
 8005f88:	4a13      	ldr	r2, [pc, #76]	; (8005fd8 <__sinit+0x6c>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005f8e:	42a3      	cmp	r3, r4
 8005f90:	bf04      	itt	eq
 8005f92:	2301      	moveq	r3, #1
 8005f94:	61a3      	streq	r3, [r4, #24]
 8005f96:	4620      	mov	r0, r4
 8005f98:	f000 f820 	bl	8005fdc <__sfp>
 8005f9c:	6060      	str	r0, [r4, #4]
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	f000 f81c 	bl	8005fdc <__sfp>
 8005fa4:	60a0      	str	r0, [r4, #8]
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	f000 f818 	bl	8005fdc <__sfp>
 8005fac:	2200      	movs	r2, #0
 8005fae:	60e0      	str	r0, [r4, #12]
 8005fb0:	2104      	movs	r1, #4
 8005fb2:	6860      	ldr	r0, [r4, #4]
 8005fb4:	f7ff ff82 	bl	8005ebc <std>
 8005fb8:	68a0      	ldr	r0, [r4, #8]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	2109      	movs	r1, #9
 8005fbe:	f7ff ff7d 	bl	8005ebc <std>
 8005fc2:	68e0      	ldr	r0, [r4, #12]
 8005fc4:	2202      	movs	r2, #2
 8005fc6:	2112      	movs	r1, #18
 8005fc8:	f7ff ff78 	bl	8005ebc <std>
 8005fcc:	2301      	movs	r3, #1
 8005fce:	61a3      	str	r3, [r4, #24]
 8005fd0:	e7d2      	b.n	8005f78 <__sinit+0xc>
 8005fd2:	bf00      	nop
 8005fd4:	080063c0 	.word	0x080063c0
 8005fd8:	08005f05 	.word	0x08005f05

08005fdc <__sfp>:
 8005fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fde:	4607      	mov	r7, r0
 8005fe0:	f7ff ffac 	bl	8005f3c <__sfp_lock_acquire>
 8005fe4:	4b1e      	ldr	r3, [pc, #120]	; (8006060 <__sfp+0x84>)
 8005fe6:	681e      	ldr	r6, [r3, #0]
 8005fe8:	69b3      	ldr	r3, [r6, #24]
 8005fea:	b913      	cbnz	r3, 8005ff2 <__sfp+0x16>
 8005fec:	4630      	mov	r0, r6
 8005fee:	f7ff ffbd 	bl	8005f6c <__sinit>
 8005ff2:	3648      	adds	r6, #72	; 0x48
 8005ff4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	d503      	bpl.n	8006004 <__sfp+0x28>
 8005ffc:	6833      	ldr	r3, [r6, #0]
 8005ffe:	b30b      	cbz	r3, 8006044 <__sfp+0x68>
 8006000:	6836      	ldr	r6, [r6, #0]
 8006002:	e7f7      	b.n	8005ff4 <__sfp+0x18>
 8006004:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006008:	b9d5      	cbnz	r5, 8006040 <__sfp+0x64>
 800600a:	4b16      	ldr	r3, [pc, #88]	; (8006064 <__sfp+0x88>)
 800600c:	60e3      	str	r3, [r4, #12]
 800600e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006012:	6665      	str	r5, [r4, #100]	; 0x64
 8006014:	f000 f847 	bl	80060a6 <__retarget_lock_init_recursive>
 8006018:	f7ff ff96 	bl	8005f48 <__sfp_lock_release>
 800601c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006020:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006024:	6025      	str	r5, [r4, #0]
 8006026:	61a5      	str	r5, [r4, #24]
 8006028:	2208      	movs	r2, #8
 800602a:	4629      	mov	r1, r5
 800602c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006030:	f7fd fafa 	bl	8003628 <memset>
 8006034:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006038:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800603c:	4620      	mov	r0, r4
 800603e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006040:	3468      	adds	r4, #104	; 0x68
 8006042:	e7d9      	b.n	8005ff8 <__sfp+0x1c>
 8006044:	2104      	movs	r1, #4
 8006046:	4638      	mov	r0, r7
 8006048:	f7ff ff62 	bl	8005f10 <__sfmoreglue>
 800604c:	4604      	mov	r4, r0
 800604e:	6030      	str	r0, [r6, #0]
 8006050:	2800      	cmp	r0, #0
 8006052:	d1d5      	bne.n	8006000 <__sfp+0x24>
 8006054:	f7ff ff78 	bl	8005f48 <__sfp_lock_release>
 8006058:	230c      	movs	r3, #12
 800605a:	603b      	str	r3, [r7, #0]
 800605c:	e7ee      	b.n	800603c <__sfp+0x60>
 800605e:	bf00      	nop
 8006060:	080063c0 	.word	0x080063c0
 8006064:	ffff0001 	.word	0xffff0001

08006068 <_fwalk_reent>:
 8006068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800606c:	4606      	mov	r6, r0
 800606e:	4688      	mov	r8, r1
 8006070:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006074:	2700      	movs	r7, #0
 8006076:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800607a:	f1b9 0901 	subs.w	r9, r9, #1
 800607e:	d505      	bpl.n	800608c <_fwalk_reent+0x24>
 8006080:	6824      	ldr	r4, [r4, #0]
 8006082:	2c00      	cmp	r4, #0
 8006084:	d1f7      	bne.n	8006076 <_fwalk_reent+0xe>
 8006086:	4638      	mov	r0, r7
 8006088:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800608c:	89ab      	ldrh	r3, [r5, #12]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d907      	bls.n	80060a2 <_fwalk_reent+0x3a>
 8006092:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006096:	3301      	adds	r3, #1
 8006098:	d003      	beq.n	80060a2 <_fwalk_reent+0x3a>
 800609a:	4629      	mov	r1, r5
 800609c:	4630      	mov	r0, r6
 800609e:	47c0      	blx	r8
 80060a0:	4307      	orrs	r7, r0
 80060a2:	3568      	adds	r5, #104	; 0x68
 80060a4:	e7e9      	b.n	800607a <_fwalk_reent+0x12>

080060a6 <__retarget_lock_init_recursive>:
 80060a6:	4770      	bx	lr

080060a8 <__retarget_lock_acquire_recursive>:
 80060a8:	4770      	bx	lr

080060aa <__retarget_lock_release_recursive>:
 80060aa:	4770      	bx	lr

080060ac <__swhatbuf_r>:
 80060ac:	b570      	push	{r4, r5, r6, lr}
 80060ae:	460e      	mov	r6, r1
 80060b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060b4:	2900      	cmp	r1, #0
 80060b6:	b096      	sub	sp, #88	; 0x58
 80060b8:	4614      	mov	r4, r2
 80060ba:	461d      	mov	r5, r3
 80060bc:	da07      	bge.n	80060ce <__swhatbuf_r+0x22>
 80060be:	2300      	movs	r3, #0
 80060c0:	602b      	str	r3, [r5, #0]
 80060c2:	89b3      	ldrh	r3, [r6, #12]
 80060c4:	061a      	lsls	r2, r3, #24
 80060c6:	d410      	bmi.n	80060ea <__swhatbuf_r+0x3e>
 80060c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060cc:	e00e      	b.n	80060ec <__swhatbuf_r+0x40>
 80060ce:	466a      	mov	r2, sp
 80060d0:	f000 f902 	bl	80062d8 <_fstat_r>
 80060d4:	2800      	cmp	r0, #0
 80060d6:	dbf2      	blt.n	80060be <__swhatbuf_r+0x12>
 80060d8:	9a01      	ldr	r2, [sp, #4]
 80060da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80060de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80060e2:	425a      	negs	r2, r3
 80060e4:	415a      	adcs	r2, r3
 80060e6:	602a      	str	r2, [r5, #0]
 80060e8:	e7ee      	b.n	80060c8 <__swhatbuf_r+0x1c>
 80060ea:	2340      	movs	r3, #64	; 0x40
 80060ec:	2000      	movs	r0, #0
 80060ee:	6023      	str	r3, [r4, #0]
 80060f0:	b016      	add	sp, #88	; 0x58
 80060f2:	bd70      	pop	{r4, r5, r6, pc}

080060f4 <__smakebuf_r>:
 80060f4:	898b      	ldrh	r3, [r1, #12]
 80060f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80060f8:	079d      	lsls	r5, r3, #30
 80060fa:	4606      	mov	r6, r0
 80060fc:	460c      	mov	r4, r1
 80060fe:	d507      	bpl.n	8006110 <__smakebuf_r+0x1c>
 8006100:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006104:	6023      	str	r3, [r4, #0]
 8006106:	6123      	str	r3, [r4, #16]
 8006108:	2301      	movs	r3, #1
 800610a:	6163      	str	r3, [r4, #20]
 800610c:	b002      	add	sp, #8
 800610e:	bd70      	pop	{r4, r5, r6, pc}
 8006110:	ab01      	add	r3, sp, #4
 8006112:	466a      	mov	r2, sp
 8006114:	f7ff ffca 	bl	80060ac <__swhatbuf_r>
 8006118:	9900      	ldr	r1, [sp, #0]
 800611a:	4605      	mov	r5, r0
 800611c:	4630      	mov	r0, r6
 800611e:	f7ff f987 	bl	8005430 <_malloc_r>
 8006122:	b948      	cbnz	r0, 8006138 <__smakebuf_r+0x44>
 8006124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006128:	059a      	lsls	r2, r3, #22
 800612a:	d4ef      	bmi.n	800610c <__smakebuf_r+0x18>
 800612c:	f023 0303 	bic.w	r3, r3, #3
 8006130:	f043 0302 	orr.w	r3, r3, #2
 8006134:	81a3      	strh	r3, [r4, #12]
 8006136:	e7e3      	b.n	8006100 <__smakebuf_r+0xc>
 8006138:	4b0d      	ldr	r3, [pc, #52]	; (8006170 <__smakebuf_r+0x7c>)
 800613a:	62b3      	str	r3, [r6, #40]	; 0x28
 800613c:	89a3      	ldrh	r3, [r4, #12]
 800613e:	6020      	str	r0, [r4, #0]
 8006140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006144:	81a3      	strh	r3, [r4, #12]
 8006146:	9b00      	ldr	r3, [sp, #0]
 8006148:	6163      	str	r3, [r4, #20]
 800614a:	9b01      	ldr	r3, [sp, #4]
 800614c:	6120      	str	r0, [r4, #16]
 800614e:	b15b      	cbz	r3, 8006168 <__smakebuf_r+0x74>
 8006150:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006154:	4630      	mov	r0, r6
 8006156:	f000 f8d1 	bl	80062fc <_isatty_r>
 800615a:	b128      	cbz	r0, 8006168 <__smakebuf_r+0x74>
 800615c:	89a3      	ldrh	r3, [r4, #12]
 800615e:	f023 0303 	bic.w	r3, r3, #3
 8006162:	f043 0301 	orr.w	r3, r3, #1
 8006166:	81a3      	strh	r3, [r4, #12]
 8006168:	89a0      	ldrh	r0, [r4, #12]
 800616a:	4305      	orrs	r5, r0
 800616c:	81a5      	strh	r5, [r4, #12]
 800616e:	e7cd      	b.n	800610c <__smakebuf_r+0x18>
 8006170:	08005f05 	.word	0x08005f05

08006174 <_malloc_usable_size_r>:
 8006174:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006178:	1f18      	subs	r0, r3, #4
 800617a:	2b00      	cmp	r3, #0
 800617c:	bfbc      	itt	lt
 800617e:	580b      	ldrlt	r3, [r1, r0]
 8006180:	18c0      	addlt	r0, r0, r3
 8006182:	4770      	bx	lr

08006184 <_raise_r>:
 8006184:	291f      	cmp	r1, #31
 8006186:	b538      	push	{r3, r4, r5, lr}
 8006188:	4604      	mov	r4, r0
 800618a:	460d      	mov	r5, r1
 800618c:	d904      	bls.n	8006198 <_raise_r+0x14>
 800618e:	2316      	movs	r3, #22
 8006190:	6003      	str	r3, [r0, #0]
 8006192:	f04f 30ff 	mov.w	r0, #4294967295
 8006196:	bd38      	pop	{r3, r4, r5, pc}
 8006198:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800619a:	b112      	cbz	r2, 80061a2 <_raise_r+0x1e>
 800619c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80061a0:	b94b      	cbnz	r3, 80061b6 <_raise_r+0x32>
 80061a2:	4620      	mov	r0, r4
 80061a4:	f000 f830 	bl	8006208 <_getpid_r>
 80061a8:	462a      	mov	r2, r5
 80061aa:	4601      	mov	r1, r0
 80061ac:	4620      	mov	r0, r4
 80061ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061b2:	f000 b817 	b.w	80061e4 <_kill_r>
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d00a      	beq.n	80061d0 <_raise_r+0x4c>
 80061ba:	1c59      	adds	r1, r3, #1
 80061bc:	d103      	bne.n	80061c6 <_raise_r+0x42>
 80061be:	2316      	movs	r3, #22
 80061c0:	6003      	str	r3, [r0, #0]
 80061c2:	2001      	movs	r0, #1
 80061c4:	e7e7      	b.n	8006196 <_raise_r+0x12>
 80061c6:	2400      	movs	r4, #0
 80061c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80061cc:	4628      	mov	r0, r5
 80061ce:	4798      	blx	r3
 80061d0:	2000      	movs	r0, #0
 80061d2:	e7e0      	b.n	8006196 <_raise_r+0x12>

080061d4 <raise>:
 80061d4:	4b02      	ldr	r3, [pc, #8]	; (80061e0 <raise+0xc>)
 80061d6:	4601      	mov	r1, r0
 80061d8:	6818      	ldr	r0, [r3, #0]
 80061da:	f7ff bfd3 	b.w	8006184 <_raise_r>
 80061de:	bf00      	nop
 80061e0:	2000000c 	.word	0x2000000c

080061e4 <_kill_r>:
 80061e4:	b538      	push	{r3, r4, r5, lr}
 80061e6:	4d07      	ldr	r5, [pc, #28]	; (8006204 <_kill_r+0x20>)
 80061e8:	2300      	movs	r3, #0
 80061ea:	4604      	mov	r4, r0
 80061ec:	4608      	mov	r0, r1
 80061ee:	4611      	mov	r1, r2
 80061f0:	602b      	str	r3, [r5, #0]
 80061f2:	f7fb f8cd 	bl	8001390 <_kill>
 80061f6:	1c43      	adds	r3, r0, #1
 80061f8:	d102      	bne.n	8006200 <_kill_r+0x1c>
 80061fa:	682b      	ldr	r3, [r5, #0]
 80061fc:	b103      	cbz	r3, 8006200 <_kill_r+0x1c>
 80061fe:	6023      	str	r3, [r4, #0]
 8006200:	bd38      	pop	{r3, r4, r5, pc}
 8006202:	bf00      	nop
 8006204:	200002a0 	.word	0x200002a0

08006208 <_getpid_r>:
 8006208:	f7fb b8ba 	b.w	8001380 <_getpid>

0800620c <__sread>:
 800620c:	b510      	push	{r4, lr}
 800620e:	460c      	mov	r4, r1
 8006210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006214:	f000 f894 	bl	8006340 <_read_r>
 8006218:	2800      	cmp	r0, #0
 800621a:	bfab      	itete	ge
 800621c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800621e:	89a3      	ldrhlt	r3, [r4, #12]
 8006220:	181b      	addge	r3, r3, r0
 8006222:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006226:	bfac      	ite	ge
 8006228:	6563      	strge	r3, [r4, #84]	; 0x54
 800622a:	81a3      	strhlt	r3, [r4, #12]
 800622c:	bd10      	pop	{r4, pc}

0800622e <__swrite>:
 800622e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006232:	461f      	mov	r7, r3
 8006234:	898b      	ldrh	r3, [r1, #12]
 8006236:	05db      	lsls	r3, r3, #23
 8006238:	4605      	mov	r5, r0
 800623a:	460c      	mov	r4, r1
 800623c:	4616      	mov	r6, r2
 800623e:	d505      	bpl.n	800624c <__swrite+0x1e>
 8006240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006244:	2302      	movs	r3, #2
 8006246:	2200      	movs	r2, #0
 8006248:	f000 f868 	bl	800631c <_lseek_r>
 800624c:	89a3      	ldrh	r3, [r4, #12]
 800624e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006252:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006256:	81a3      	strh	r3, [r4, #12]
 8006258:	4632      	mov	r2, r6
 800625a:	463b      	mov	r3, r7
 800625c:	4628      	mov	r0, r5
 800625e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006262:	f000 b817 	b.w	8006294 <_write_r>

08006266 <__sseek>:
 8006266:	b510      	push	{r4, lr}
 8006268:	460c      	mov	r4, r1
 800626a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800626e:	f000 f855 	bl	800631c <_lseek_r>
 8006272:	1c43      	adds	r3, r0, #1
 8006274:	89a3      	ldrh	r3, [r4, #12]
 8006276:	bf15      	itete	ne
 8006278:	6560      	strne	r0, [r4, #84]	; 0x54
 800627a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800627e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006282:	81a3      	strheq	r3, [r4, #12]
 8006284:	bf18      	it	ne
 8006286:	81a3      	strhne	r3, [r4, #12]
 8006288:	bd10      	pop	{r4, pc}

0800628a <__sclose>:
 800628a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800628e:	f000 b813 	b.w	80062b8 <_close_r>
	...

08006294 <_write_r>:
 8006294:	b538      	push	{r3, r4, r5, lr}
 8006296:	4d07      	ldr	r5, [pc, #28]	; (80062b4 <_write_r+0x20>)
 8006298:	4604      	mov	r4, r0
 800629a:	4608      	mov	r0, r1
 800629c:	4611      	mov	r1, r2
 800629e:	2200      	movs	r2, #0
 80062a0:	602a      	str	r2, [r5, #0]
 80062a2:	461a      	mov	r2, r3
 80062a4:	f7fb f8ab 	bl	80013fe <_write>
 80062a8:	1c43      	adds	r3, r0, #1
 80062aa:	d102      	bne.n	80062b2 <_write_r+0x1e>
 80062ac:	682b      	ldr	r3, [r5, #0]
 80062ae:	b103      	cbz	r3, 80062b2 <_write_r+0x1e>
 80062b0:	6023      	str	r3, [r4, #0]
 80062b2:	bd38      	pop	{r3, r4, r5, pc}
 80062b4:	200002a0 	.word	0x200002a0

080062b8 <_close_r>:
 80062b8:	b538      	push	{r3, r4, r5, lr}
 80062ba:	4d06      	ldr	r5, [pc, #24]	; (80062d4 <_close_r+0x1c>)
 80062bc:	2300      	movs	r3, #0
 80062be:	4604      	mov	r4, r0
 80062c0:	4608      	mov	r0, r1
 80062c2:	602b      	str	r3, [r5, #0]
 80062c4:	f7fb f8b7 	bl	8001436 <_close>
 80062c8:	1c43      	adds	r3, r0, #1
 80062ca:	d102      	bne.n	80062d2 <_close_r+0x1a>
 80062cc:	682b      	ldr	r3, [r5, #0]
 80062ce:	b103      	cbz	r3, 80062d2 <_close_r+0x1a>
 80062d0:	6023      	str	r3, [r4, #0]
 80062d2:	bd38      	pop	{r3, r4, r5, pc}
 80062d4:	200002a0 	.word	0x200002a0

080062d8 <_fstat_r>:
 80062d8:	b538      	push	{r3, r4, r5, lr}
 80062da:	4d07      	ldr	r5, [pc, #28]	; (80062f8 <_fstat_r+0x20>)
 80062dc:	2300      	movs	r3, #0
 80062de:	4604      	mov	r4, r0
 80062e0:	4608      	mov	r0, r1
 80062e2:	4611      	mov	r1, r2
 80062e4:	602b      	str	r3, [r5, #0]
 80062e6:	f7fb f8b2 	bl	800144e <_fstat>
 80062ea:	1c43      	adds	r3, r0, #1
 80062ec:	d102      	bne.n	80062f4 <_fstat_r+0x1c>
 80062ee:	682b      	ldr	r3, [r5, #0]
 80062f0:	b103      	cbz	r3, 80062f4 <_fstat_r+0x1c>
 80062f2:	6023      	str	r3, [r4, #0]
 80062f4:	bd38      	pop	{r3, r4, r5, pc}
 80062f6:	bf00      	nop
 80062f8:	200002a0 	.word	0x200002a0

080062fc <_isatty_r>:
 80062fc:	b538      	push	{r3, r4, r5, lr}
 80062fe:	4d06      	ldr	r5, [pc, #24]	; (8006318 <_isatty_r+0x1c>)
 8006300:	2300      	movs	r3, #0
 8006302:	4604      	mov	r4, r0
 8006304:	4608      	mov	r0, r1
 8006306:	602b      	str	r3, [r5, #0]
 8006308:	f7fb f8b1 	bl	800146e <_isatty>
 800630c:	1c43      	adds	r3, r0, #1
 800630e:	d102      	bne.n	8006316 <_isatty_r+0x1a>
 8006310:	682b      	ldr	r3, [r5, #0]
 8006312:	b103      	cbz	r3, 8006316 <_isatty_r+0x1a>
 8006314:	6023      	str	r3, [r4, #0]
 8006316:	bd38      	pop	{r3, r4, r5, pc}
 8006318:	200002a0 	.word	0x200002a0

0800631c <_lseek_r>:
 800631c:	b538      	push	{r3, r4, r5, lr}
 800631e:	4d07      	ldr	r5, [pc, #28]	; (800633c <_lseek_r+0x20>)
 8006320:	4604      	mov	r4, r0
 8006322:	4608      	mov	r0, r1
 8006324:	4611      	mov	r1, r2
 8006326:	2200      	movs	r2, #0
 8006328:	602a      	str	r2, [r5, #0]
 800632a:	461a      	mov	r2, r3
 800632c:	f7fb f8aa 	bl	8001484 <_lseek>
 8006330:	1c43      	adds	r3, r0, #1
 8006332:	d102      	bne.n	800633a <_lseek_r+0x1e>
 8006334:	682b      	ldr	r3, [r5, #0]
 8006336:	b103      	cbz	r3, 800633a <_lseek_r+0x1e>
 8006338:	6023      	str	r3, [r4, #0]
 800633a:	bd38      	pop	{r3, r4, r5, pc}
 800633c:	200002a0 	.word	0x200002a0

08006340 <_read_r>:
 8006340:	b538      	push	{r3, r4, r5, lr}
 8006342:	4d07      	ldr	r5, [pc, #28]	; (8006360 <_read_r+0x20>)
 8006344:	4604      	mov	r4, r0
 8006346:	4608      	mov	r0, r1
 8006348:	4611      	mov	r1, r2
 800634a:	2200      	movs	r2, #0
 800634c:	602a      	str	r2, [r5, #0]
 800634e:	461a      	mov	r2, r3
 8006350:	f7fb f838 	bl	80013c4 <_read>
 8006354:	1c43      	adds	r3, r0, #1
 8006356:	d102      	bne.n	800635e <_read_r+0x1e>
 8006358:	682b      	ldr	r3, [r5, #0]
 800635a:	b103      	cbz	r3, 800635e <_read_r+0x1e>
 800635c:	6023      	str	r3, [r4, #0]
 800635e:	bd38      	pop	{r3, r4, r5, pc}
 8006360:	200002a0 	.word	0x200002a0

08006364 <_init>:
 8006364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006366:	bf00      	nop
 8006368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800636a:	bc08      	pop	{r3}
 800636c:	469e      	mov	lr, r3
 800636e:	4770      	bx	lr

08006370 <_fini>:
 8006370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006372:	bf00      	nop
 8006374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006376:	bc08      	pop	{r3}
 8006378:	469e      	mov	lr, r3
 800637a:	4770      	bx	lr
