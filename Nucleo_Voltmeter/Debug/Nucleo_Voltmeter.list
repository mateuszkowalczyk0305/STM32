
Nucleo_Voltmeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009034  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  080091d8  080091d8  000191d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095fc  080095fc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080095fc  080095fc  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080095fc  080095fc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095fc  080095fc  000195fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009600  08009600  00019600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000114  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002f0  200002f0  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d7db  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b92  00000000  00000000  0002d9e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008b0  00000000  00000000  0002f580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000808  00000000  00000000  0002fe30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002186b  00000000  00000000  00030638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cd68  00000000  00000000  00051ea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb075  00000000  00000000  0005ec0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00129c80  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003424  00000000  00000000  00129cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080091bc 	.word	0x080091bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080091bc 	.word	0x080091bc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bbe:	f002 f841 	bl	8002c44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc2:	f001 fcd5 	bl	8002570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc6:	f001 fdd5 	bl	8002774 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bca:	f001 fda3 	bl	8002714 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000bce:	f001 fd31 	bl	8002634 <MX_ADC1_Init>

// Test: GPIO set pin high:
//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);

// Get ADC Value:
HAL_ADC_Start(&hadc1);
 8000bd2:	48c6      	ldr	r0, [pc, #792]	; (8000eec <main+0x334>)
 8000bd4:	f002 faba 	bl	800314c <HAL_ADC_Start>
HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bdc:	48c3      	ldr	r0, [pc, #780]	; (8000eec <main+0x334>)
 8000bde:	f002 fbcb 	bl	8003378 <HAL_ADC_PollForConversion>
raw = HAL_ADC_GetValue(&hadc1);
 8000be2:	48c2      	ldr	r0, [pc, #776]	; (8000eec <main+0x334>)
 8000be4:	f002 fcca 	bl	800357c <HAL_ADC_GetValue>
 8000be8:	4603      	mov	r3, r0
 8000bea:	81fb      	strh	r3, [r7, #14]
// Test: GPIO set pin low:
//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);

 // USART check:
// Convert to string and print:
sprintf(msg, "%hu\r\n", raw);
 8000bec:	89fa      	ldrh	r2, [r7, #14]
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	49bf      	ldr	r1, [pc, #764]	; (8000ef0 <main+0x338>)
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f006 f8b8 	bl	8006d68 <siprintf>
HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff faf0 	bl	80001e0 <strlen>
 8000c00:	4603      	mov	r3, r0
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	1d39      	adds	r1, r7, #4
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0a:	48ba      	ldr	r0, [pc, #744]	; (8000ef4 <main+0x33c>)
 8000c0c:	f004 ff96 	bl	8005b3c <HAL_UART_Transmit>

// 7seg display - if statement:

if (raw == 0)
 8000c10:	89fb      	ldrh	r3, [r7, #14]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d155      	bne.n	8000cc2 <main+0x10a>
{
	// Left num:
	HAL_GPIO_WritePin(GPIOB, A1_Pin, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2102      	movs	r1, #2
 8000c1a:	48b7      	ldr	r0, [pc, #732]	; (8000ef8 <main+0x340>)
 8000c1c:	f003 fbd4 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B1_Pin, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c26:	48b4      	ldr	r0, [pc, #720]	; (8000ef8 <main+0x340>)
 8000c28:	f003 fbce 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C1_Pin, GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2110      	movs	r1, #16
 8000c30:	48b1      	ldr	r0, [pc, #708]	; (8000ef8 <main+0x340>)
 8000c32:	f003 fbc9 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D1_Pin, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2120      	movs	r1, #32
 8000c3a:	48af      	ldr	r0, [pc, #700]	; (8000ef8 <main+0x340>)
 8000c3c:	f003 fbc4 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, E1_Pin, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2140      	movs	r1, #64	; 0x40
 8000c44:	48ac      	ldr	r0, [pc, #688]	; (8000ef8 <main+0x340>)
 8000c46:	f003 fbbf 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, F1_Pin, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2180      	movs	r1, #128	; 0x80
 8000c4e:	48aa      	ldr	r0, [pc, #680]	; (8000ef8 <main+0x340>)
 8000c50:	f003 fbba 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_SET);
 8000c54:	2201      	movs	r2, #1
 8000c56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c5a:	48a7      	ldr	r0, [pc, #668]	; (8000ef8 <main+0x340>)
 8000c5c:	f003 fbb4 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DP1_Pin, GPIO_PIN_RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c66:	48a4      	ldr	r0, [pc, #656]	; (8000ef8 <main+0x340>)
 8000c68:	f003 fbae 	bl	80043c8 <HAL_GPIO_WritePin>

	// Right num:
	HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_RESET);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2102      	movs	r1, #2
 8000c70:	48a2      	ldr	r0, [pc, #648]	; (8000efc <main+0x344>)
 8000c72:	f003 fba9 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, B2_Pin, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2104      	movs	r1, #4
 8000c7a:	48a0      	ldr	r0, [pc, #640]	; (8000efc <main+0x344>)
 8000c7c:	f003 fba4 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, C2_Pin, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2108      	movs	r1, #8
 8000c84:	489d      	ldr	r0, [pc, #628]	; (8000efc <main+0x344>)
 8000c86:	f003 fb9f 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, D2_Pin, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2110      	movs	r1, #16
 8000c8e:	489b      	ldr	r0, [pc, #620]	; (8000efc <main+0x344>)
 8000c90:	f003 fb9a 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, E2_Pin, GPIO_PIN_RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2120      	movs	r1, #32
 8000c98:	4898      	ldr	r0, [pc, #608]	; (8000efc <main+0x344>)
 8000c9a:	f003 fb95 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, F2_Pin, GPIO_PIN_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2140      	movs	r1, #64	; 0x40
 8000ca2:	4896      	ldr	r0, [pc, #600]	; (8000efc <main+0x344>)
 8000ca4:	f003 fb90 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, G2_Pin, GPIO_PIN_SET);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2180      	movs	r1, #128	; 0x80
 8000cac:	4893      	ldr	r0, [pc, #588]	; (8000efc <main+0x344>)
 8000cae:	f003 fb8b 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DP2_Pin, GPIO_PIN_SET);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cb8:	4890      	ldr	r0, [pc, #576]	; (8000efc <main+0x344>)
 8000cba:	f003 fb85 	bl	80043c8 <HAL_GPIO_WritePin>
 8000cbe:	f001 bc4d 	b.w	800255c <main+0x19a4>

}
else if (raw > 0 && raw < 124)
 8000cc2:	89fb      	ldrh	r3, [r7, #14]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d058      	beq.n	8000d7a <main+0x1c2>
 8000cc8:	89fb      	ldrh	r3, [r7, #14]
 8000cca:	2b7b      	cmp	r3, #123	; 0x7b
 8000ccc:	d855      	bhi.n	8000d7a <main+0x1c2>
{
	// Left num:
	HAL_GPIO_WritePin(GPIOB, A1_Pin, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2102      	movs	r1, #2
 8000cd2:	4889      	ldr	r0, [pc, #548]	; (8000ef8 <main+0x340>)
 8000cd4:	f003 fb78 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B1_Pin, GPIO_PIN_RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cde:	4886      	ldr	r0, [pc, #536]	; (8000ef8 <main+0x340>)
 8000ce0:	f003 fb72 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C1_Pin, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2110      	movs	r1, #16
 8000ce8:	4883      	ldr	r0, [pc, #524]	; (8000ef8 <main+0x340>)
 8000cea:	f003 fb6d 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D1_Pin, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2120      	movs	r1, #32
 8000cf2:	4881      	ldr	r0, [pc, #516]	; (8000ef8 <main+0x340>)
 8000cf4:	f003 fb68 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, E1_Pin, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2140      	movs	r1, #64	; 0x40
 8000cfc:	487e      	ldr	r0, [pc, #504]	; (8000ef8 <main+0x340>)
 8000cfe:	f003 fb63 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, F1_Pin, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2180      	movs	r1, #128	; 0x80
 8000d06:	487c      	ldr	r0, [pc, #496]	; (8000ef8 <main+0x340>)
 8000d08:	f003 fb5e 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_SET);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d12:	4879      	ldr	r0, [pc, #484]	; (8000ef8 <main+0x340>)
 8000d14:	f003 fb58 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DP1_Pin, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d1e:	4876      	ldr	r0, [pc, #472]	; (8000ef8 <main+0x340>)
 8000d20:	f003 fb52 	bl	80043c8 <HAL_GPIO_WritePin>

	// Right num:
	HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_SET);
 8000d24:	2201      	movs	r2, #1
 8000d26:	2102      	movs	r1, #2
 8000d28:	4874      	ldr	r0, [pc, #464]	; (8000efc <main+0x344>)
 8000d2a:	f003 fb4d 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, B2_Pin, GPIO_PIN_RESET);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2104      	movs	r1, #4
 8000d32:	4872      	ldr	r0, [pc, #456]	; (8000efc <main+0x344>)
 8000d34:	f003 fb48 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, C2_Pin, GPIO_PIN_RESET);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2108      	movs	r1, #8
 8000d3c:	486f      	ldr	r0, [pc, #444]	; (8000efc <main+0x344>)
 8000d3e:	f003 fb43 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, D2_Pin, GPIO_PIN_SET);
 8000d42:	2201      	movs	r2, #1
 8000d44:	2110      	movs	r1, #16
 8000d46:	486d      	ldr	r0, [pc, #436]	; (8000efc <main+0x344>)
 8000d48:	f003 fb3e 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, E2_Pin, GPIO_PIN_SET);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	2120      	movs	r1, #32
 8000d50:	486a      	ldr	r0, [pc, #424]	; (8000efc <main+0x344>)
 8000d52:	f003 fb39 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, F2_Pin, GPIO_PIN_SET);
 8000d56:	2201      	movs	r2, #1
 8000d58:	2140      	movs	r1, #64	; 0x40
 8000d5a:	4868      	ldr	r0, [pc, #416]	; (8000efc <main+0x344>)
 8000d5c:	f003 fb34 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, G2_Pin, GPIO_PIN_SET);
 8000d60:	2201      	movs	r2, #1
 8000d62:	2180      	movs	r1, #128	; 0x80
 8000d64:	4865      	ldr	r0, [pc, #404]	; (8000efc <main+0x344>)
 8000d66:	f003 fb2f 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DP2_Pin, GPIO_PIN_SET);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d70:	4862      	ldr	r0, [pc, #392]	; (8000efc <main+0x344>)
 8000d72:	f003 fb29 	bl	80043c8 <HAL_GPIO_WritePin>
 8000d76:	f001 bbf1 	b.w	800255c <main+0x19a4>
}
else if (raw >= 124 && raw < 248)
 8000d7a:	89fb      	ldrh	r3, [r7, #14]
 8000d7c:	2b7b      	cmp	r3, #123	; 0x7b
 8000d7e:	d958      	bls.n	8000e32 <main+0x27a>
 8000d80:	89fb      	ldrh	r3, [r7, #14]
 8000d82:	2bf7      	cmp	r3, #247	; 0xf7
 8000d84:	d855      	bhi.n	8000e32 <main+0x27a>
{
	// Left num:
	HAL_GPIO_WritePin(GPIOB, A1_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2102      	movs	r1, #2
 8000d8a:	485b      	ldr	r0, [pc, #364]	; (8000ef8 <main+0x340>)
 8000d8c:	f003 fb1c 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B1_Pin, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d96:	4858      	ldr	r0, [pc, #352]	; (8000ef8 <main+0x340>)
 8000d98:	f003 fb16 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C1_Pin, GPIO_PIN_RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2110      	movs	r1, #16
 8000da0:	4855      	ldr	r0, [pc, #340]	; (8000ef8 <main+0x340>)
 8000da2:	f003 fb11 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D1_Pin, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2120      	movs	r1, #32
 8000daa:	4853      	ldr	r0, [pc, #332]	; (8000ef8 <main+0x340>)
 8000dac:	f003 fb0c 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, E1_Pin, GPIO_PIN_RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2140      	movs	r1, #64	; 0x40
 8000db4:	4850      	ldr	r0, [pc, #320]	; (8000ef8 <main+0x340>)
 8000db6:	f003 fb07 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, F1_Pin, GPIO_PIN_RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2180      	movs	r1, #128	; 0x80
 8000dbe:	484e      	ldr	r0, [pc, #312]	; (8000ef8 <main+0x340>)
 8000dc0:	f003 fb02 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_SET);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dca:	484b      	ldr	r0, [pc, #300]	; (8000ef8 <main+0x340>)
 8000dcc:	f003 fafc 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DP1_Pin, GPIO_PIN_RESET);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dd6:	4848      	ldr	r0, [pc, #288]	; (8000ef8 <main+0x340>)
 8000dd8:	f003 faf6 	bl	80043c8 <HAL_GPIO_WritePin>

	// Right num:
	HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2102      	movs	r1, #2
 8000de0:	4846      	ldr	r0, [pc, #280]	; (8000efc <main+0x344>)
 8000de2:	f003 faf1 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, B2_Pin, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2104      	movs	r1, #4
 8000dea:	4844      	ldr	r0, [pc, #272]	; (8000efc <main+0x344>)
 8000dec:	f003 faec 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, C2_Pin, GPIO_PIN_SET);
 8000df0:	2201      	movs	r2, #1
 8000df2:	2108      	movs	r1, #8
 8000df4:	4841      	ldr	r0, [pc, #260]	; (8000efc <main+0x344>)
 8000df6:	f003 fae7 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, D2_Pin, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2110      	movs	r1, #16
 8000dfe:	483f      	ldr	r0, [pc, #252]	; (8000efc <main+0x344>)
 8000e00:	f003 fae2 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, E2_Pin, GPIO_PIN_RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2120      	movs	r1, #32
 8000e08:	483c      	ldr	r0, [pc, #240]	; (8000efc <main+0x344>)
 8000e0a:	f003 fadd 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, F2_Pin, GPIO_PIN_SET);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	2140      	movs	r1, #64	; 0x40
 8000e12:	483a      	ldr	r0, [pc, #232]	; (8000efc <main+0x344>)
 8000e14:	f003 fad8 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, G2_Pin, GPIO_PIN_RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2180      	movs	r1, #128	; 0x80
 8000e1c:	4837      	ldr	r0, [pc, #220]	; (8000efc <main+0x344>)
 8000e1e:	f003 fad3 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DP2_Pin, GPIO_PIN_SET);
 8000e22:	2201      	movs	r2, #1
 8000e24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e28:	4834      	ldr	r0, [pc, #208]	; (8000efc <main+0x344>)
 8000e2a:	f003 facd 	bl	80043c8 <HAL_GPIO_WritePin>
 8000e2e:	f001 bb95 	b.w	800255c <main+0x19a4>
}
else if (raw >= 248 && raw < 372)
 8000e32:	89fb      	ldrh	r3, [r7, #14]
 8000e34:	2bf7      	cmp	r3, #247	; 0xf7
 8000e36:	d963      	bls.n	8000f00 <main+0x348>
 8000e38:	89fb      	ldrh	r3, [r7, #14]
 8000e3a:	f5b3 7fba 	cmp.w	r3, #372	; 0x174
 8000e3e:	d25f      	bcs.n	8000f00 <main+0x348>
{
	// Left num:
	HAL_GPIO_WritePin(GPIOB, A1_Pin, GPIO_PIN_RESET);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2102      	movs	r1, #2
 8000e44:	482c      	ldr	r0, [pc, #176]	; (8000ef8 <main+0x340>)
 8000e46:	f003 fabf 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B1_Pin, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e50:	4829      	ldr	r0, [pc, #164]	; (8000ef8 <main+0x340>)
 8000e52:	f003 fab9 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C1_Pin, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2110      	movs	r1, #16
 8000e5a:	4827      	ldr	r0, [pc, #156]	; (8000ef8 <main+0x340>)
 8000e5c:	f003 fab4 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D1_Pin, GPIO_PIN_RESET);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2120      	movs	r1, #32
 8000e64:	4824      	ldr	r0, [pc, #144]	; (8000ef8 <main+0x340>)
 8000e66:	f003 faaf 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, E1_Pin, GPIO_PIN_RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2140      	movs	r1, #64	; 0x40
 8000e6e:	4822      	ldr	r0, [pc, #136]	; (8000ef8 <main+0x340>)
 8000e70:	f003 faaa 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, F1_Pin, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2180      	movs	r1, #128	; 0x80
 8000e78:	481f      	ldr	r0, [pc, #124]	; (8000ef8 <main+0x340>)
 8000e7a:	f003 faa5 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_SET);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e84:	481c      	ldr	r0, [pc, #112]	; (8000ef8 <main+0x340>)
 8000e86:	f003 fa9f 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DP1_Pin, GPIO_PIN_RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e90:	4819      	ldr	r0, [pc, #100]	; (8000ef8 <main+0x340>)
 8000e92:	f003 fa99 	bl	80043c8 <HAL_GPIO_WritePin>

	// Right num:
	HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2102      	movs	r1, #2
 8000e9a:	4818      	ldr	r0, [pc, #96]	; (8000efc <main+0x344>)
 8000e9c:	f003 fa94 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, B2_Pin, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2104      	movs	r1, #4
 8000ea4:	4815      	ldr	r0, [pc, #84]	; (8000efc <main+0x344>)
 8000ea6:	f003 fa8f 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, C2_Pin, GPIO_PIN_RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2108      	movs	r1, #8
 8000eae:	4813      	ldr	r0, [pc, #76]	; (8000efc <main+0x344>)
 8000eb0:	f003 fa8a 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, D2_Pin, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2110      	movs	r1, #16
 8000eb8:	4810      	ldr	r0, [pc, #64]	; (8000efc <main+0x344>)
 8000eba:	f003 fa85 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, E2_Pin, GPIO_PIN_SET);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	2120      	movs	r1, #32
 8000ec2:	480e      	ldr	r0, [pc, #56]	; (8000efc <main+0x344>)
 8000ec4:	f003 fa80 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, F2_Pin, GPIO_PIN_SET);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	2140      	movs	r1, #64	; 0x40
 8000ecc:	480b      	ldr	r0, [pc, #44]	; (8000efc <main+0x344>)
 8000ece:	f003 fa7b 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, G2_Pin, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2180      	movs	r1, #128	; 0x80
 8000ed6:	4809      	ldr	r0, [pc, #36]	; (8000efc <main+0x344>)
 8000ed8:	f003 fa76 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DP2_Pin, GPIO_PIN_SET);
 8000edc:	2201      	movs	r2, #1
 8000ede:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ee2:	4806      	ldr	r0, [pc, #24]	; (8000efc <main+0x344>)
 8000ee4:	f003 fa70 	bl	80043c8 <HAL_GPIO_WritePin>
 8000ee8:	f001 bb38 	b.w	800255c <main+0x19a4>
 8000eec:	20000204 	.word	0x20000204
 8000ef0:	080091d8 	.word	0x080091d8
 8000ef4:	20000254 	.word	0x20000254
 8000ef8:	48000400 	.word	0x48000400
 8000efc:	48000800 	.word	0x48000800
}
else if (raw >= 372 && raw < 496) //0.4
 8000f00:	89fb      	ldrh	r3, [r7, #14]
 8000f02:	f5b3 7fba 	cmp.w	r3, #372	; 0x174
 8000f06:	d359      	bcc.n	8000fbc <main+0x404>
 8000f08:	89fb      	ldrh	r3, [r7, #14]
 8000f0a:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 8000f0e:	d255      	bcs.n	8000fbc <main+0x404>
{
	// Left num:
	HAL_GPIO_WritePin(GPIOB, A1_Pin, GPIO_PIN_RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2102      	movs	r1, #2
 8000f14:	48b6      	ldr	r0, [pc, #728]	; (80011f0 <main+0x638>)
 8000f16:	f003 fa57 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B1_Pin, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f20:	48b3      	ldr	r0, [pc, #716]	; (80011f0 <main+0x638>)
 8000f22:	f003 fa51 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C1_Pin, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2110      	movs	r1, #16
 8000f2a:	48b1      	ldr	r0, [pc, #708]	; (80011f0 <main+0x638>)
 8000f2c:	f003 fa4c 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D1_Pin, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2120      	movs	r1, #32
 8000f34:	48ae      	ldr	r0, [pc, #696]	; (80011f0 <main+0x638>)
 8000f36:	f003 fa47 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, E1_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2140      	movs	r1, #64	; 0x40
 8000f3e:	48ac      	ldr	r0, [pc, #688]	; (80011f0 <main+0x638>)
 8000f40:	f003 fa42 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, F1_Pin, GPIO_PIN_RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2180      	movs	r1, #128	; 0x80
 8000f48:	48a9      	ldr	r0, [pc, #676]	; (80011f0 <main+0x638>)
 8000f4a:	f003 fa3d 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_SET);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f54:	48a6      	ldr	r0, [pc, #664]	; (80011f0 <main+0x638>)
 8000f56:	f003 fa37 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DP1_Pin, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f60:	48a3      	ldr	r0, [pc, #652]	; (80011f0 <main+0x638>)
 8000f62:	f003 fa31 	bl	80043c8 <HAL_GPIO_WritePin>

	// Right num:
	HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_SET);
 8000f66:	2201      	movs	r2, #1
 8000f68:	2102      	movs	r1, #2
 8000f6a:	48a2      	ldr	r0, [pc, #648]	; (80011f4 <main+0x63c>)
 8000f6c:	f003 fa2c 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, B2_Pin, GPIO_PIN_RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2104      	movs	r1, #4
 8000f74:	489f      	ldr	r0, [pc, #636]	; (80011f4 <main+0x63c>)
 8000f76:	f003 fa27 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, C2_Pin, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2108      	movs	r1, #8
 8000f7e:	489d      	ldr	r0, [pc, #628]	; (80011f4 <main+0x63c>)
 8000f80:	f003 fa22 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, D2_Pin, GPIO_PIN_SET);
 8000f84:	2201      	movs	r2, #1
 8000f86:	2110      	movs	r1, #16
 8000f88:	489a      	ldr	r0, [pc, #616]	; (80011f4 <main+0x63c>)
 8000f8a:	f003 fa1d 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, E2_Pin, GPIO_PIN_SET);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	2120      	movs	r1, #32
 8000f92:	4898      	ldr	r0, [pc, #608]	; (80011f4 <main+0x63c>)
 8000f94:	f003 fa18 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, F2_Pin, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2140      	movs	r1, #64	; 0x40
 8000f9c:	4895      	ldr	r0, [pc, #596]	; (80011f4 <main+0x63c>)
 8000f9e:	f003 fa13 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, G2_Pin, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2180      	movs	r1, #128	; 0x80
 8000fa6:	4893      	ldr	r0, [pc, #588]	; (80011f4 <main+0x63c>)
 8000fa8:	f003 fa0e 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DP2_Pin, GPIO_PIN_SET);
 8000fac:	2201      	movs	r2, #1
 8000fae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb2:	4890      	ldr	r0, [pc, #576]	; (80011f4 <main+0x63c>)
 8000fb4:	f003 fa08 	bl	80043c8 <HAL_GPIO_WritePin>
 8000fb8:	f001 bad0 	b.w	800255c <main+0x19a4>
}
else if (raw >= 496 && raw < 620)
 8000fbc:	89fb      	ldrh	r3, [r7, #14]
 8000fbe:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 8000fc2:	d359      	bcc.n	8001078 <main+0x4c0>
 8000fc4:	89fb      	ldrh	r3, [r7, #14]
 8000fc6:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8000fca:	d255      	bcs.n	8001078 <main+0x4c0>
{
	// Left num:
	HAL_GPIO_WritePin(GPIOB, A1_Pin, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2102      	movs	r1, #2
 8000fd0:	4887      	ldr	r0, [pc, #540]	; (80011f0 <main+0x638>)
 8000fd2:	f003 f9f9 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B1_Pin, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fdc:	4884      	ldr	r0, [pc, #528]	; (80011f0 <main+0x638>)
 8000fde:	f003 f9f3 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C1_Pin, GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2110      	movs	r1, #16
 8000fe6:	4882      	ldr	r0, [pc, #520]	; (80011f0 <main+0x638>)
 8000fe8:	f003 f9ee 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D1_Pin, GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2120      	movs	r1, #32
 8000ff0:	487f      	ldr	r0, [pc, #508]	; (80011f0 <main+0x638>)
 8000ff2:	f003 f9e9 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, E1_Pin, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2140      	movs	r1, #64	; 0x40
 8000ffa:	487d      	ldr	r0, [pc, #500]	; (80011f0 <main+0x638>)
 8000ffc:	f003 f9e4 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, F1_Pin, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	2180      	movs	r1, #128	; 0x80
 8001004:	487a      	ldr	r0, [pc, #488]	; (80011f0 <main+0x638>)
 8001006:	f003 f9df 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_SET);
 800100a:	2201      	movs	r2, #1
 800100c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001010:	4877      	ldr	r0, [pc, #476]	; (80011f0 <main+0x638>)
 8001012:	f003 f9d9 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DP1_Pin, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	f44f 7100 	mov.w	r1, #512	; 0x200
 800101c:	4874      	ldr	r0, [pc, #464]	; (80011f0 <main+0x638>)
 800101e:	f003 f9d3 	bl	80043c8 <HAL_GPIO_WritePin>

	// Right num:
	HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	2102      	movs	r1, #2
 8001026:	4873      	ldr	r0, [pc, #460]	; (80011f4 <main+0x63c>)
 8001028:	f003 f9ce 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, B2_Pin, GPIO_PIN_SET);
 800102c:	2201      	movs	r2, #1
 800102e:	2104      	movs	r1, #4
 8001030:	4870      	ldr	r0, [pc, #448]	; (80011f4 <main+0x63c>)
 8001032:	f003 f9c9 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, C2_Pin, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	2108      	movs	r1, #8
 800103a:	486e      	ldr	r0, [pc, #440]	; (80011f4 <main+0x63c>)
 800103c:	f003 f9c4 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, D2_Pin, GPIO_PIN_RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	2110      	movs	r1, #16
 8001044:	486b      	ldr	r0, [pc, #428]	; (80011f4 <main+0x63c>)
 8001046:	f003 f9bf 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, E2_Pin, GPIO_PIN_SET);
 800104a:	2201      	movs	r2, #1
 800104c:	2120      	movs	r1, #32
 800104e:	4869      	ldr	r0, [pc, #420]	; (80011f4 <main+0x63c>)
 8001050:	f003 f9ba 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, F2_Pin, GPIO_PIN_RESET);
 8001054:	2200      	movs	r2, #0
 8001056:	2140      	movs	r1, #64	; 0x40
 8001058:	4866      	ldr	r0, [pc, #408]	; (80011f4 <main+0x63c>)
 800105a:	f003 f9b5 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, G2_Pin, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	2180      	movs	r1, #128	; 0x80
 8001062:	4864      	ldr	r0, [pc, #400]	; (80011f4 <main+0x63c>)
 8001064:	f003 f9b0 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DP2_Pin, GPIO_PIN_SET);
 8001068:	2201      	movs	r2, #1
 800106a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800106e:	4861      	ldr	r0, [pc, #388]	; (80011f4 <main+0x63c>)
 8001070:	f003 f9aa 	bl	80043c8 <HAL_GPIO_WritePin>
 8001074:	f001 ba72 	b.w	800255c <main+0x19a4>
}
else if (raw >= 620 && raw < 744) //0.6
 8001078:	89fb      	ldrh	r3, [r7, #14]
 800107a:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 800107e:	d359      	bcc.n	8001134 <main+0x57c>
 8001080:	89fb      	ldrh	r3, [r7, #14]
 8001082:	f5b3 7f3a 	cmp.w	r3, #744	; 0x2e8
 8001086:	d255      	bcs.n	8001134 <main+0x57c>
{
	// Left num:
	HAL_GPIO_WritePin(GPIOB, A1_Pin, GPIO_PIN_RESET);
 8001088:	2200      	movs	r2, #0
 800108a:	2102      	movs	r1, #2
 800108c:	4858      	ldr	r0, [pc, #352]	; (80011f0 <main+0x638>)
 800108e:	f003 f99b 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B1_Pin, GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001098:	4855      	ldr	r0, [pc, #340]	; (80011f0 <main+0x638>)
 800109a:	f003 f995 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C1_Pin, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	2110      	movs	r1, #16
 80010a2:	4853      	ldr	r0, [pc, #332]	; (80011f0 <main+0x638>)
 80010a4:	f003 f990 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D1_Pin, GPIO_PIN_RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2120      	movs	r1, #32
 80010ac:	4850      	ldr	r0, [pc, #320]	; (80011f0 <main+0x638>)
 80010ae:	f003 f98b 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, E1_Pin, GPIO_PIN_RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2140      	movs	r1, #64	; 0x40
 80010b6:	484e      	ldr	r0, [pc, #312]	; (80011f0 <main+0x638>)
 80010b8:	f003 f986 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, F1_Pin, GPIO_PIN_RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	2180      	movs	r1, #128	; 0x80
 80010c0:	484b      	ldr	r0, [pc, #300]	; (80011f0 <main+0x638>)
 80010c2:	f003 f981 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_SET);
 80010c6:	2201      	movs	r2, #1
 80010c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010cc:	4848      	ldr	r0, [pc, #288]	; (80011f0 <main+0x638>)
 80010ce:	f003 f97b 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DP1_Pin, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010d8:	4845      	ldr	r0, [pc, #276]	; (80011f0 <main+0x638>)
 80010da:	f003 f975 	bl	80043c8 <HAL_GPIO_WritePin>

	// Right num:
	HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_RESET);
 80010de:	2200      	movs	r2, #0
 80010e0:	2102      	movs	r1, #2
 80010e2:	4844      	ldr	r0, [pc, #272]	; (80011f4 <main+0x63c>)
 80010e4:	f003 f970 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, B2_Pin, GPIO_PIN_SET);
 80010e8:	2201      	movs	r2, #1
 80010ea:	2104      	movs	r1, #4
 80010ec:	4841      	ldr	r0, [pc, #260]	; (80011f4 <main+0x63c>)
 80010ee:	f003 f96b 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, C2_Pin, GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2108      	movs	r1, #8
 80010f6:	483f      	ldr	r0, [pc, #252]	; (80011f4 <main+0x63c>)
 80010f8:	f003 f966 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, D2_Pin, GPIO_PIN_RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2110      	movs	r1, #16
 8001100:	483c      	ldr	r0, [pc, #240]	; (80011f4 <main+0x63c>)
 8001102:	f003 f961 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, E2_Pin, GPIO_PIN_RESET);
 8001106:	2200      	movs	r2, #0
 8001108:	2120      	movs	r1, #32
 800110a:	483a      	ldr	r0, [pc, #232]	; (80011f4 <main+0x63c>)
 800110c:	f003 f95c 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, F2_Pin, GPIO_PIN_RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	2140      	movs	r1, #64	; 0x40
 8001114:	4837      	ldr	r0, [pc, #220]	; (80011f4 <main+0x63c>)
 8001116:	f003 f957 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, G2_Pin, GPIO_PIN_RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	2180      	movs	r1, #128	; 0x80
 800111e:	4835      	ldr	r0, [pc, #212]	; (80011f4 <main+0x63c>)
 8001120:	f003 f952 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DP2_Pin, GPIO_PIN_SET);
 8001124:	2201      	movs	r2, #1
 8001126:	f44f 7180 	mov.w	r1, #256	; 0x100
 800112a:	4832      	ldr	r0, [pc, #200]	; (80011f4 <main+0x63c>)
 800112c:	f003 f94c 	bl	80043c8 <HAL_GPIO_WritePin>
 8001130:	f001 ba14 	b.w	800255c <main+0x19a4>

}
else if (raw >= 744 && raw < 868)
 8001134:	89fb      	ldrh	r3, [r7, #14]
 8001136:	f5b3 7f3a 	cmp.w	r3, #744	; 0x2e8
 800113a:	d35d      	bcc.n	80011f8 <main+0x640>
 800113c:	89fb      	ldrh	r3, [r7, #14]
 800113e:	f5b3 7f59 	cmp.w	r3, #868	; 0x364
 8001142:	d259      	bcs.n	80011f8 <main+0x640>
{
	// Left num:
	HAL_GPIO_WritePin(GPIOB, A1_Pin, GPIO_PIN_RESET);
 8001144:	2200      	movs	r2, #0
 8001146:	2102      	movs	r1, #2
 8001148:	4829      	ldr	r0, [pc, #164]	; (80011f0 <main+0x638>)
 800114a:	f003 f93d 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B1_Pin, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001154:	4826      	ldr	r0, [pc, #152]	; (80011f0 <main+0x638>)
 8001156:	f003 f937 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C1_Pin, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	2110      	movs	r1, #16
 800115e:	4824      	ldr	r0, [pc, #144]	; (80011f0 <main+0x638>)
 8001160:	f003 f932 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D1_Pin, GPIO_PIN_RESET);
 8001164:	2200      	movs	r2, #0
 8001166:	2120      	movs	r1, #32
 8001168:	4821      	ldr	r0, [pc, #132]	; (80011f0 <main+0x638>)
 800116a:	f003 f92d 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, E1_Pin, GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	2140      	movs	r1, #64	; 0x40
 8001172:	481f      	ldr	r0, [pc, #124]	; (80011f0 <main+0x638>)
 8001174:	f003 f928 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, F1_Pin, GPIO_PIN_RESET);
 8001178:	2200      	movs	r2, #0
 800117a:	2180      	movs	r1, #128	; 0x80
 800117c:	481c      	ldr	r0, [pc, #112]	; (80011f0 <main+0x638>)
 800117e:	f003 f923 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_SET);
 8001182:	2201      	movs	r2, #1
 8001184:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001188:	4819      	ldr	r0, [pc, #100]	; (80011f0 <main+0x638>)
 800118a:	f003 f91d 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DP1_Pin, GPIO_PIN_RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001194:	4816      	ldr	r0, [pc, #88]	; (80011f0 <main+0x638>)
 8001196:	f003 f917 	bl	80043c8 <HAL_GPIO_WritePin>

	// Right num:
	HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	2102      	movs	r1, #2
 800119e:	4815      	ldr	r0, [pc, #84]	; (80011f4 <main+0x63c>)
 80011a0:	f003 f912 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, B2_Pin, GPIO_PIN_RESET);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2104      	movs	r1, #4
 80011a8:	4812      	ldr	r0, [pc, #72]	; (80011f4 <main+0x63c>)
 80011aa:	f003 f90d 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, C2_Pin, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2108      	movs	r1, #8
 80011b2:	4810      	ldr	r0, [pc, #64]	; (80011f4 <main+0x63c>)
 80011b4:	f003 f908 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, D2_Pin, GPIO_PIN_SET);
 80011b8:	2201      	movs	r2, #1
 80011ba:	2110      	movs	r1, #16
 80011bc:	480d      	ldr	r0, [pc, #52]	; (80011f4 <main+0x63c>)
 80011be:	f003 f903 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, E2_Pin, GPIO_PIN_SET);
 80011c2:	2201      	movs	r2, #1
 80011c4:	2120      	movs	r1, #32
 80011c6:	480b      	ldr	r0, [pc, #44]	; (80011f4 <main+0x63c>)
 80011c8:	f003 f8fe 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, F2_Pin, GPIO_PIN_SET);
 80011cc:	2201      	movs	r2, #1
 80011ce:	2140      	movs	r1, #64	; 0x40
 80011d0:	4808      	ldr	r0, [pc, #32]	; (80011f4 <main+0x63c>)
 80011d2:	f003 f8f9 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, G2_Pin, GPIO_PIN_SET);
 80011d6:	2201      	movs	r2, #1
 80011d8:	2180      	movs	r1, #128	; 0x80
 80011da:	4806      	ldr	r0, [pc, #24]	; (80011f4 <main+0x63c>)
 80011dc:	f003 f8f4 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DP2_Pin, GPIO_PIN_SET);
 80011e0:	2201      	movs	r2, #1
 80011e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011e6:	4803      	ldr	r0, [pc, #12]	; (80011f4 <main+0x63c>)
 80011e8:	f003 f8ee 	bl	80043c8 <HAL_GPIO_WritePin>
 80011ec:	f001 b9b6 	b.w	800255c <main+0x19a4>
 80011f0:	48000400 	.word	0x48000400
 80011f4:	48000800 	.word	0x48000800

}
else if (raw >= 868 && raw < 992)
 80011f8:	89fb      	ldrh	r3, [r7, #14]
 80011fa:	f5b3 7f59 	cmp.w	r3, #868	; 0x364
 80011fe:	d359      	bcc.n	80012b4 <main+0x6fc>
 8001200:	89fb      	ldrh	r3, [r7, #14]
 8001202:	f5b3 7f78 	cmp.w	r3, #992	; 0x3e0
 8001206:	d255      	bcs.n	80012b4 <main+0x6fc>
{
	// Left num:
	HAL_GPIO_WritePin(GPIOB, A1_Pin, GPIO_PIN_RESET);
 8001208:	2200      	movs	r2, #0
 800120a:	2102      	movs	r1, #2
 800120c:	48b8      	ldr	r0, [pc, #736]	; (80014f0 <main+0x938>)
 800120e:	f003 f8db 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B1_Pin, GPIO_PIN_RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001218:	48b5      	ldr	r0, [pc, #724]	; (80014f0 <main+0x938>)
 800121a:	f003 f8d5 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C1_Pin, GPIO_PIN_RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	2110      	movs	r1, #16
 8001222:	48b3      	ldr	r0, [pc, #716]	; (80014f0 <main+0x938>)
 8001224:	f003 f8d0 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D1_Pin, GPIO_PIN_RESET);
 8001228:	2200      	movs	r2, #0
 800122a:	2120      	movs	r1, #32
 800122c:	48b0      	ldr	r0, [pc, #704]	; (80014f0 <main+0x938>)
 800122e:	f003 f8cb 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, E1_Pin, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	2140      	movs	r1, #64	; 0x40
 8001236:	48ae      	ldr	r0, [pc, #696]	; (80014f0 <main+0x938>)
 8001238:	f003 f8c6 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, F1_Pin, GPIO_PIN_RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	2180      	movs	r1, #128	; 0x80
 8001240:	48ab      	ldr	r0, [pc, #684]	; (80014f0 <main+0x938>)
 8001242:	f003 f8c1 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_SET);
 8001246:	2201      	movs	r2, #1
 8001248:	f44f 7180 	mov.w	r1, #256	; 0x100
 800124c:	48a8      	ldr	r0, [pc, #672]	; (80014f0 <main+0x938>)
 800124e:	f003 f8bb 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DP1_Pin, GPIO_PIN_RESET);
 8001252:	2200      	movs	r2, #0
 8001254:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001258:	48a5      	ldr	r0, [pc, #660]	; (80014f0 <main+0x938>)
 800125a:	f003 f8b5 	bl	80043c8 <HAL_GPIO_WritePin>

	// Right num:
	HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	2102      	movs	r1, #2
 8001262:	48a4      	ldr	r0, [pc, #656]	; (80014f4 <main+0x93c>)
 8001264:	f003 f8b0 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, B2_Pin, GPIO_PIN_RESET);
 8001268:	2200      	movs	r2, #0
 800126a:	2104      	movs	r1, #4
 800126c:	48a1      	ldr	r0, [pc, #644]	; (80014f4 <main+0x93c>)
 800126e:	f003 f8ab 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, C2_Pin, GPIO_PIN_RESET);
 8001272:	2200      	movs	r2, #0
 8001274:	2108      	movs	r1, #8
 8001276:	489f      	ldr	r0, [pc, #636]	; (80014f4 <main+0x93c>)
 8001278:	f003 f8a6 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, D2_Pin, GPIO_PIN_RESET);
 800127c:	2200      	movs	r2, #0
 800127e:	2110      	movs	r1, #16
 8001280:	489c      	ldr	r0, [pc, #624]	; (80014f4 <main+0x93c>)
 8001282:	f003 f8a1 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, E2_Pin, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	2120      	movs	r1, #32
 800128a:	489a      	ldr	r0, [pc, #616]	; (80014f4 <main+0x93c>)
 800128c:	f003 f89c 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, F2_Pin, GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	2140      	movs	r1, #64	; 0x40
 8001294:	4897      	ldr	r0, [pc, #604]	; (80014f4 <main+0x93c>)
 8001296:	f003 f897 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, G2_Pin, GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	2180      	movs	r1, #128	; 0x80
 800129e:	4895      	ldr	r0, [pc, #596]	; (80014f4 <main+0x93c>)
 80012a0:	f003 f892 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DP2_Pin, GPIO_PIN_SET);
 80012a4:	2201      	movs	r2, #1
 80012a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012aa:	4892      	ldr	r0, [pc, #584]	; (80014f4 <main+0x93c>)
 80012ac:	f003 f88c 	bl	80043c8 <HAL_GPIO_WritePin>
 80012b0:	f001 b954 	b.w	800255c <main+0x19a4>
}
else if (raw >= 992 && raw < 1116)
 80012b4:	89fb      	ldrh	r3, [r7, #14]
 80012b6:	f5b3 7f78 	cmp.w	r3, #992	; 0x3e0
 80012ba:	d35a      	bcc.n	8001372 <main+0x7ba>
 80012bc:	89fb      	ldrh	r3, [r7, #14]
 80012be:	f240 425b 	movw	r2, #1115	; 0x45b
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d855      	bhi.n	8001372 <main+0x7ba>
{
	// Left num:
	HAL_GPIO_WritePin(GPIOB, A1_Pin, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2102      	movs	r1, #2
 80012ca:	4889      	ldr	r0, [pc, #548]	; (80014f0 <main+0x938>)
 80012cc:	f003 f87c 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B1_Pin, GPIO_PIN_RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d6:	4886      	ldr	r0, [pc, #536]	; (80014f0 <main+0x938>)
 80012d8:	f003 f876 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C1_Pin, GPIO_PIN_RESET);
 80012dc:	2200      	movs	r2, #0
 80012de:	2110      	movs	r1, #16
 80012e0:	4883      	ldr	r0, [pc, #524]	; (80014f0 <main+0x938>)
 80012e2:	f003 f871 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D1_Pin, GPIO_PIN_RESET);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2120      	movs	r1, #32
 80012ea:	4881      	ldr	r0, [pc, #516]	; (80014f0 <main+0x938>)
 80012ec:	f003 f86c 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, E1_Pin, GPIO_PIN_RESET);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2140      	movs	r1, #64	; 0x40
 80012f4:	487e      	ldr	r0, [pc, #504]	; (80014f0 <main+0x938>)
 80012f6:	f003 f867 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, F1_Pin, GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2180      	movs	r1, #128	; 0x80
 80012fe:	487c      	ldr	r0, [pc, #496]	; (80014f0 <main+0x938>)
 8001300:	f003 f862 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_SET);
 8001304:	2201      	movs	r2, #1
 8001306:	f44f 7180 	mov.w	r1, #256	; 0x100
 800130a:	4879      	ldr	r0, [pc, #484]	; (80014f0 <main+0x938>)
 800130c:	f003 f85c 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DP1_Pin, GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001316:	4876      	ldr	r0, [pc, #472]	; (80014f0 <main+0x938>)
 8001318:	f003 f856 	bl	80043c8 <HAL_GPIO_WritePin>

	// Right num:
	HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	2102      	movs	r1, #2
 8001320:	4874      	ldr	r0, [pc, #464]	; (80014f4 <main+0x93c>)
 8001322:	f003 f851 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, B2_Pin, GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	2104      	movs	r1, #4
 800132a:	4872      	ldr	r0, [pc, #456]	; (80014f4 <main+0x93c>)
 800132c:	f003 f84c 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, C2_Pin, GPIO_PIN_RESET);
 8001330:	2200      	movs	r2, #0
 8001332:	2108      	movs	r1, #8
 8001334:	486f      	ldr	r0, [pc, #444]	; (80014f4 <main+0x93c>)
 8001336:	f003 f847 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, D2_Pin, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	2110      	movs	r1, #16
 800133e:	486d      	ldr	r0, [pc, #436]	; (80014f4 <main+0x93c>)
 8001340:	f003 f842 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, E2_Pin, GPIO_PIN_SET);
 8001344:	2201      	movs	r2, #1
 8001346:	2120      	movs	r1, #32
 8001348:	486a      	ldr	r0, [pc, #424]	; (80014f4 <main+0x93c>)
 800134a:	f003 f83d 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, F2_Pin, GPIO_PIN_RESET);
 800134e:	2200      	movs	r2, #0
 8001350:	2140      	movs	r1, #64	; 0x40
 8001352:	4868      	ldr	r0, [pc, #416]	; (80014f4 <main+0x93c>)
 8001354:	f003 f838 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, G2_Pin, GPIO_PIN_RESET);
 8001358:	2200      	movs	r2, #0
 800135a:	2180      	movs	r1, #128	; 0x80
 800135c:	4865      	ldr	r0, [pc, #404]	; (80014f4 <main+0x93c>)
 800135e:	f003 f833 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DP2_Pin, GPIO_PIN_SET);
 8001362:	2201      	movs	r2, #1
 8001364:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001368:	4862      	ldr	r0, [pc, #392]	; (80014f4 <main+0x93c>)
 800136a:	f003 f82d 	bl	80043c8 <HAL_GPIO_WritePin>
 800136e:	f001 b8f5 	b.w	800255c <main+0x19a4>
}
else if (raw >= 1116 && raw < 1240) //1.0
 8001372:	89fb      	ldrh	r3, [r7, #14]
 8001374:	f240 425b 	movw	r2, #1115	; 0x45b
 8001378:	4293      	cmp	r3, r2
 800137a:	d959      	bls.n	8001430 <main+0x878>
 800137c:	89fb      	ldrh	r3, [r7, #14]
 800137e:	f5b3 6f9b 	cmp.w	r3, #1240	; 0x4d8
 8001382:	d255      	bcs.n	8001430 <main+0x878>
{
	// Left num:
	HAL_GPIO_WritePin(GPIOB, A1_Pin, GPIO_PIN_SET);
 8001384:	2201      	movs	r2, #1
 8001386:	2102      	movs	r1, #2
 8001388:	4859      	ldr	r0, [pc, #356]	; (80014f0 <main+0x938>)
 800138a:	f003 f81d 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B1_Pin, GPIO_PIN_RESET);
 800138e:	2200      	movs	r2, #0
 8001390:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001394:	4856      	ldr	r0, [pc, #344]	; (80014f0 <main+0x938>)
 8001396:	f003 f817 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C1_Pin, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	2110      	movs	r1, #16
 800139e:	4854      	ldr	r0, [pc, #336]	; (80014f0 <main+0x938>)
 80013a0:	f003 f812 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D1_Pin, GPIO_PIN_SET);
 80013a4:	2201      	movs	r2, #1
 80013a6:	2120      	movs	r1, #32
 80013a8:	4851      	ldr	r0, [pc, #324]	; (80014f0 <main+0x938>)
 80013aa:	f003 f80d 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, E1_Pin, GPIO_PIN_SET);
 80013ae:	2201      	movs	r2, #1
 80013b0:	2140      	movs	r1, #64	; 0x40
 80013b2:	484f      	ldr	r0, [pc, #316]	; (80014f0 <main+0x938>)
 80013b4:	f003 f808 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, F1_Pin, GPIO_PIN_SET);
 80013b8:	2201      	movs	r2, #1
 80013ba:	2180      	movs	r1, #128	; 0x80
 80013bc:	484c      	ldr	r0, [pc, #304]	; (80014f0 <main+0x938>)
 80013be:	f003 f803 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_SET);
 80013c2:	2201      	movs	r2, #1
 80013c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c8:	4849      	ldr	r0, [pc, #292]	; (80014f0 <main+0x938>)
 80013ca:	f002 fffd 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DP1_Pin, GPIO_PIN_RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013d4:	4846      	ldr	r0, [pc, #280]	; (80014f0 <main+0x938>)
 80013d6:	f002 fff7 	bl	80043c8 <HAL_GPIO_WritePin>

	// Right num:
	HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_RESET);
 80013da:	2200      	movs	r2, #0
 80013dc:	2102      	movs	r1, #2
 80013de:	4845      	ldr	r0, [pc, #276]	; (80014f4 <main+0x93c>)
 80013e0:	f002 fff2 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, B2_Pin, GPIO_PIN_RESET);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2104      	movs	r1, #4
 80013e8:	4842      	ldr	r0, [pc, #264]	; (80014f4 <main+0x93c>)
 80013ea:	f002 ffed 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, C2_Pin, GPIO_PIN_RESET);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2108      	movs	r1, #8
 80013f2:	4840      	ldr	r0, [pc, #256]	; (80014f4 <main+0x93c>)
 80013f4:	f002 ffe8 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, D2_Pin, GPIO_PIN_RESET);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2110      	movs	r1, #16
 80013fc:	483d      	ldr	r0, [pc, #244]	; (80014f4 <main+0x93c>)
 80013fe:	f002 ffe3 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, E2_Pin, GPIO_PIN_RESET);
 8001402:	2200      	movs	r2, #0
 8001404:	2120      	movs	r1, #32
 8001406:	483b      	ldr	r0, [pc, #236]	; (80014f4 <main+0x93c>)
 8001408:	f002 ffde 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, F2_Pin, GPIO_PIN_RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	2140      	movs	r1, #64	; 0x40
 8001410:	4838      	ldr	r0, [pc, #224]	; (80014f4 <main+0x93c>)
 8001412:	f002 ffd9 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, G2_Pin, GPIO_PIN_SET);
 8001416:	2201      	movs	r2, #1
 8001418:	2180      	movs	r1, #128	; 0x80
 800141a:	4836      	ldr	r0, [pc, #216]	; (80014f4 <main+0x93c>)
 800141c:	f002 ffd4 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DP2_Pin, GPIO_PIN_SET);
 8001420:	2201      	movs	r2, #1
 8001422:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001426:	4833      	ldr	r0, [pc, #204]	; (80014f4 <main+0x93c>)
 8001428:	f002 ffce 	bl	80043c8 <HAL_GPIO_WritePin>
 800142c:	f001 b896 	b.w	800255c <main+0x19a4>
}
else if (raw >= 1240 && raw < 1364)
 8001430:	89fb      	ldrh	r3, [r7, #14]
 8001432:	f5b3 6f9b 	cmp.w	r3, #1240	; 0x4d8
 8001436:	d35f      	bcc.n	80014f8 <main+0x940>
 8001438:	89fb      	ldrh	r3, [r7, #14]
 800143a:	f240 5253 	movw	r2, #1363	; 0x553
 800143e:	4293      	cmp	r3, r2
 8001440:	d85a      	bhi.n	80014f8 <main+0x940>
{
	// Left num:
	HAL_GPIO_WritePin(GPIOB, A1_Pin, GPIO_PIN_SET);
 8001442:	2201      	movs	r2, #1
 8001444:	2102      	movs	r1, #2
 8001446:	482a      	ldr	r0, [pc, #168]	; (80014f0 <main+0x938>)
 8001448:	f002 ffbe 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B1_Pin, GPIO_PIN_RESET);
 800144c:	2200      	movs	r2, #0
 800144e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001452:	4827      	ldr	r0, [pc, #156]	; (80014f0 <main+0x938>)
 8001454:	f002 ffb8 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C1_Pin, GPIO_PIN_RESET);
 8001458:	2200      	movs	r2, #0
 800145a:	2110      	movs	r1, #16
 800145c:	4824      	ldr	r0, [pc, #144]	; (80014f0 <main+0x938>)
 800145e:	f002 ffb3 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D1_Pin, GPIO_PIN_SET);
 8001462:	2201      	movs	r2, #1
 8001464:	2120      	movs	r1, #32
 8001466:	4822      	ldr	r0, [pc, #136]	; (80014f0 <main+0x938>)
 8001468:	f002 ffae 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, E1_Pin, GPIO_PIN_SET);
 800146c:	2201      	movs	r2, #1
 800146e:	2140      	movs	r1, #64	; 0x40
 8001470:	481f      	ldr	r0, [pc, #124]	; (80014f0 <main+0x938>)
 8001472:	f002 ffa9 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, F1_Pin, GPIO_PIN_SET);
 8001476:	2201      	movs	r2, #1
 8001478:	2180      	movs	r1, #128	; 0x80
 800147a:	481d      	ldr	r0, [pc, #116]	; (80014f0 <main+0x938>)
 800147c:	f002 ffa4 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_SET);
 8001480:	2201      	movs	r2, #1
 8001482:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001486:	481a      	ldr	r0, [pc, #104]	; (80014f0 <main+0x938>)
 8001488:	f002 ff9e 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DP1_Pin, GPIO_PIN_RESET);
 800148c:	2200      	movs	r2, #0
 800148e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001492:	4817      	ldr	r0, [pc, #92]	; (80014f0 <main+0x938>)
 8001494:	f002 ff98 	bl	80043c8 <HAL_GPIO_WritePin>

	// Right num:
	HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_SET);
 8001498:	2201      	movs	r2, #1
 800149a:	2102      	movs	r1, #2
 800149c:	4815      	ldr	r0, [pc, #84]	; (80014f4 <main+0x93c>)
 800149e:	f002 ff93 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, B2_Pin, GPIO_PIN_RESET);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2104      	movs	r1, #4
 80014a6:	4813      	ldr	r0, [pc, #76]	; (80014f4 <main+0x93c>)
 80014a8:	f002 ff8e 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, C2_Pin, GPIO_PIN_RESET);
 80014ac:	2200      	movs	r2, #0
 80014ae:	2108      	movs	r1, #8
 80014b0:	4810      	ldr	r0, [pc, #64]	; (80014f4 <main+0x93c>)
 80014b2:	f002 ff89 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, D2_Pin, GPIO_PIN_SET);
 80014b6:	2201      	movs	r2, #1
 80014b8:	2110      	movs	r1, #16
 80014ba:	480e      	ldr	r0, [pc, #56]	; (80014f4 <main+0x93c>)
 80014bc:	f002 ff84 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, E2_Pin, GPIO_PIN_SET);
 80014c0:	2201      	movs	r2, #1
 80014c2:	2120      	movs	r1, #32
 80014c4:	480b      	ldr	r0, [pc, #44]	; (80014f4 <main+0x93c>)
 80014c6:	f002 ff7f 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, F2_Pin, GPIO_PIN_SET);
 80014ca:	2201      	movs	r2, #1
 80014cc:	2140      	movs	r1, #64	; 0x40
 80014ce:	4809      	ldr	r0, [pc, #36]	; (80014f4 <main+0x93c>)
 80014d0:	f002 ff7a 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, G2_Pin, GPIO_PIN_SET);
 80014d4:	2201      	movs	r2, #1
 80014d6:	2180      	movs	r1, #128	; 0x80
 80014d8:	4806      	ldr	r0, [pc, #24]	; (80014f4 <main+0x93c>)
 80014da:	f002 ff75 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DP2_Pin, GPIO_PIN_SET);
 80014de:	2201      	movs	r2, #1
 80014e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014e4:	4803      	ldr	r0, [pc, #12]	; (80014f4 <main+0x93c>)
 80014e6:	f002 ff6f 	bl	80043c8 <HAL_GPIO_WritePin>
 80014ea:	f001 b837 	b.w	800255c <main+0x19a4>
 80014ee:	bf00      	nop
 80014f0:	48000400 	.word	0x48000400
 80014f4:	48000800 	.word	0x48000800
}
else if (raw >= 1364 && raw < 1488)
 80014f8:	89fb      	ldrh	r3, [r7, #14]
 80014fa:	f240 5253 	movw	r2, #1363	; 0x553
 80014fe:	4293      	cmp	r3, r2
 8001500:	d959      	bls.n	80015b6 <main+0x9fe>
 8001502:	89fb      	ldrh	r3, [r7, #14]
 8001504:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 8001508:	d255      	bcs.n	80015b6 <main+0x9fe>
{
	// Left num:
	HAL_GPIO_WritePin(GPIOB, A1_Pin, GPIO_PIN_SET);
 800150a:	2201      	movs	r2, #1
 800150c:	2102      	movs	r1, #2
 800150e:	48b8      	ldr	r0, [pc, #736]	; (80017f0 <main+0xc38>)
 8001510:	f002 ff5a 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B1_Pin, GPIO_PIN_RESET);
 8001514:	2200      	movs	r2, #0
 8001516:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800151a:	48b5      	ldr	r0, [pc, #724]	; (80017f0 <main+0xc38>)
 800151c:	f002 ff54 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C1_Pin, GPIO_PIN_RESET);
 8001520:	2200      	movs	r2, #0
 8001522:	2110      	movs	r1, #16
 8001524:	48b2      	ldr	r0, [pc, #712]	; (80017f0 <main+0xc38>)
 8001526:	f002 ff4f 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D1_Pin, GPIO_PIN_SET);
 800152a:	2201      	movs	r2, #1
 800152c:	2120      	movs	r1, #32
 800152e:	48b0      	ldr	r0, [pc, #704]	; (80017f0 <main+0xc38>)
 8001530:	f002 ff4a 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, E1_Pin, GPIO_PIN_SET);
 8001534:	2201      	movs	r2, #1
 8001536:	2140      	movs	r1, #64	; 0x40
 8001538:	48ad      	ldr	r0, [pc, #692]	; (80017f0 <main+0xc38>)
 800153a:	f002 ff45 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, F1_Pin, GPIO_PIN_SET);
 800153e:	2201      	movs	r2, #1
 8001540:	2180      	movs	r1, #128	; 0x80
 8001542:	48ab      	ldr	r0, [pc, #684]	; (80017f0 <main+0xc38>)
 8001544:	f002 ff40 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_SET);
 8001548:	2201      	movs	r2, #1
 800154a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800154e:	48a8      	ldr	r0, [pc, #672]	; (80017f0 <main+0xc38>)
 8001550:	f002 ff3a 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DP1_Pin, GPIO_PIN_RESET);
 8001554:	2200      	movs	r2, #0
 8001556:	f44f 7100 	mov.w	r1, #512	; 0x200
 800155a:	48a5      	ldr	r0, [pc, #660]	; (80017f0 <main+0xc38>)
 800155c:	f002 ff34 	bl	80043c8 <HAL_GPIO_WritePin>

	// Right num:
	HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_RESET);
 8001560:	2200      	movs	r2, #0
 8001562:	2102      	movs	r1, #2
 8001564:	48a3      	ldr	r0, [pc, #652]	; (80017f4 <main+0xc3c>)
 8001566:	f002 ff2f 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, B2_Pin, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	2104      	movs	r1, #4
 800156e:	48a1      	ldr	r0, [pc, #644]	; (80017f4 <main+0xc3c>)
 8001570:	f002 ff2a 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, C2_Pin, GPIO_PIN_SET);
 8001574:	2201      	movs	r2, #1
 8001576:	2108      	movs	r1, #8
 8001578:	489e      	ldr	r0, [pc, #632]	; (80017f4 <main+0xc3c>)
 800157a:	f002 ff25 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, D2_Pin, GPIO_PIN_RESET);
 800157e:	2200      	movs	r2, #0
 8001580:	2110      	movs	r1, #16
 8001582:	489c      	ldr	r0, [pc, #624]	; (80017f4 <main+0xc3c>)
 8001584:	f002 ff20 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, E2_Pin, GPIO_PIN_RESET);
 8001588:	2200      	movs	r2, #0
 800158a:	2120      	movs	r1, #32
 800158c:	4899      	ldr	r0, [pc, #612]	; (80017f4 <main+0xc3c>)
 800158e:	f002 ff1b 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, F2_Pin, GPIO_PIN_SET);
 8001592:	2201      	movs	r2, #1
 8001594:	2140      	movs	r1, #64	; 0x40
 8001596:	4897      	ldr	r0, [pc, #604]	; (80017f4 <main+0xc3c>)
 8001598:	f002 ff16 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, G2_Pin, GPIO_PIN_RESET);
 800159c:	2200      	movs	r2, #0
 800159e:	2180      	movs	r1, #128	; 0x80
 80015a0:	4894      	ldr	r0, [pc, #592]	; (80017f4 <main+0xc3c>)
 80015a2:	f002 ff11 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DP2_Pin, GPIO_PIN_SET);
 80015a6:	2201      	movs	r2, #1
 80015a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ac:	4891      	ldr	r0, [pc, #580]	; (80017f4 <main+0xc3c>)
 80015ae:	f002 ff0b 	bl	80043c8 <HAL_GPIO_WritePin>
 80015b2:	f000 bfd3 	b.w	800255c <main+0x19a4>
}
else if (raw >= 1488 && raw < 1612)
 80015b6:	89fb      	ldrh	r3, [r7, #14]
 80015b8:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 80015bc:	d35a      	bcc.n	8001674 <main+0xabc>
 80015be:	89fb      	ldrh	r3, [r7, #14]
 80015c0:	f240 624b 	movw	r2, #1611	; 0x64b
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d855      	bhi.n	8001674 <main+0xabc>
{
	// Left num:
	HAL_GPIO_WritePin(GPIOB, A1_Pin, GPIO_PIN_SET);
 80015c8:	2201      	movs	r2, #1
 80015ca:	2102      	movs	r1, #2
 80015cc:	4888      	ldr	r0, [pc, #544]	; (80017f0 <main+0xc38>)
 80015ce:	f002 fefb 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B1_Pin, GPIO_PIN_RESET);
 80015d2:	2200      	movs	r2, #0
 80015d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015d8:	4885      	ldr	r0, [pc, #532]	; (80017f0 <main+0xc38>)
 80015da:	f002 fef5 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C1_Pin, GPIO_PIN_RESET);
 80015de:	2200      	movs	r2, #0
 80015e0:	2110      	movs	r1, #16
 80015e2:	4883      	ldr	r0, [pc, #524]	; (80017f0 <main+0xc38>)
 80015e4:	f002 fef0 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D1_Pin, GPIO_PIN_SET);
 80015e8:	2201      	movs	r2, #1
 80015ea:	2120      	movs	r1, #32
 80015ec:	4880      	ldr	r0, [pc, #512]	; (80017f0 <main+0xc38>)
 80015ee:	f002 feeb 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, E1_Pin, GPIO_PIN_SET);
 80015f2:	2201      	movs	r2, #1
 80015f4:	2140      	movs	r1, #64	; 0x40
 80015f6:	487e      	ldr	r0, [pc, #504]	; (80017f0 <main+0xc38>)
 80015f8:	f002 fee6 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, F1_Pin, GPIO_PIN_SET);
 80015fc:	2201      	movs	r2, #1
 80015fe:	2180      	movs	r1, #128	; 0x80
 8001600:	487b      	ldr	r0, [pc, #492]	; (80017f0 <main+0xc38>)
 8001602:	f002 fee1 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_SET);
 8001606:	2201      	movs	r2, #1
 8001608:	f44f 7180 	mov.w	r1, #256	; 0x100
 800160c:	4878      	ldr	r0, [pc, #480]	; (80017f0 <main+0xc38>)
 800160e:	f002 fedb 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DP1_Pin, GPIO_PIN_RESET);
 8001612:	2200      	movs	r2, #0
 8001614:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001618:	4875      	ldr	r0, [pc, #468]	; (80017f0 <main+0xc38>)
 800161a:	f002 fed5 	bl	80043c8 <HAL_GPIO_WritePin>

	// Right num:
	HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_RESET);
 800161e:	2200      	movs	r2, #0
 8001620:	2102      	movs	r1, #2
 8001622:	4874      	ldr	r0, [pc, #464]	; (80017f4 <main+0xc3c>)
 8001624:	f002 fed0 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, B2_Pin, GPIO_PIN_RESET);
 8001628:	2200      	movs	r2, #0
 800162a:	2104      	movs	r1, #4
 800162c:	4871      	ldr	r0, [pc, #452]	; (80017f4 <main+0xc3c>)
 800162e:	f002 fecb 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, C2_Pin, GPIO_PIN_RESET);
 8001632:	2200      	movs	r2, #0
 8001634:	2108      	movs	r1, #8
 8001636:	486f      	ldr	r0, [pc, #444]	; (80017f4 <main+0xc3c>)
 8001638:	f002 fec6 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, D2_Pin, GPIO_PIN_RESET);
 800163c:	2200      	movs	r2, #0
 800163e:	2110      	movs	r1, #16
 8001640:	486c      	ldr	r0, [pc, #432]	; (80017f4 <main+0xc3c>)
 8001642:	f002 fec1 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, E2_Pin, GPIO_PIN_SET);
 8001646:	2201      	movs	r2, #1
 8001648:	2120      	movs	r1, #32
 800164a:	486a      	ldr	r0, [pc, #424]	; (80017f4 <main+0xc3c>)
 800164c:	f002 febc 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, F2_Pin, GPIO_PIN_SET);
 8001650:	2201      	movs	r2, #1
 8001652:	2140      	movs	r1, #64	; 0x40
 8001654:	4867      	ldr	r0, [pc, #412]	; (80017f4 <main+0xc3c>)
 8001656:	f002 feb7 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, G2_Pin, GPIO_PIN_RESET);
 800165a:	2200      	movs	r2, #0
 800165c:	2180      	movs	r1, #128	; 0x80
 800165e:	4865      	ldr	r0, [pc, #404]	; (80017f4 <main+0xc3c>)
 8001660:	f002 feb2 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DP2_Pin, GPIO_PIN_SET);
 8001664:	2201      	movs	r2, #1
 8001666:	f44f 7180 	mov.w	r1, #256	; 0x100
 800166a:	4862      	ldr	r0, [pc, #392]	; (80017f4 <main+0xc3c>)
 800166c:	f002 feac 	bl	80043c8 <HAL_GPIO_WritePin>
 8001670:	f000 bf74 	b.w	800255c <main+0x19a4>
}
else if (raw >= 1612 && raw < 1736) //1.4
 8001674:	89fb      	ldrh	r3, [r7, #14]
 8001676:	f240 624b 	movw	r2, #1611	; 0x64b
 800167a:	4293      	cmp	r3, r2
 800167c:	d959      	bls.n	8001732 <main+0xb7a>
 800167e:	89fb      	ldrh	r3, [r7, #14]
 8001680:	f5b3 6fd9 	cmp.w	r3, #1736	; 0x6c8
 8001684:	d255      	bcs.n	8001732 <main+0xb7a>
{
	// Left num:
	HAL_GPIO_WritePin(GPIOB, A1_Pin, GPIO_PIN_SET);
 8001686:	2201      	movs	r2, #1
 8001688:	2102      	movs	r1, #2
 800168a:	4859      	ldr	r0, [pc, #356]	; (80017f0 <main+0xc38>)
 800168c:	f002 fe9c 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B1_Pin, GPIO_PIN_RESET);
 8001690:	2200      	movs	r2, #0
 8001692:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001696:	4856      	ldr	r0, [pc, #344]	; (80017f0 <main+0xc38>)
 8001698:	f002 fe96 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C1_Pin, GPIO_PIN_RESET);
 800169c:	2200      	movs	r2, #0
 800169e:	2110      	movs	r1, #16
 80016a0:	4853      	ldr	r0, [pc, #332]	; (80017f0 <main+0xc38>)
 80016a2:	f002 fe91 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D1_Pin, GPIO_PIN_SET);
 80016a6:	2201      	movs	r2, #1
 80016a8:	2120      	movs	r1, #32
 80016aa:	4851      	ldr	r0, [pc, #324]	; (80017f0 <main+0xc38>)
 80016ac:	f002 fe8c 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, E1_Pin, GPIO_PIN_SET);
 80016b0:	2201      	movs	r2, #1
 80016b2:	2140      	movs	r1, #64	; 0x40
 80016b4:	484e      	ldr	r0, [pc, #312]	; (80017f0 <main+0xc38>)
 80016b6:	f002 fe87 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, F1_Pin, GPIO_PIN_SET);
 80016ba:	2201      	movs	r2, #1
 80016bc:	2180      	movs	r1, #128	; 0x80
 80016be:	484c      	ldr	r0, [pc, #304]	; (80017f0 <main+0xc38>)
 80016c0:	f002 fe82 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_SET);
 80016c4:	2201      	movs	r2, #1
 80016c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ca:	4849      	ldr	r0, [pc, #292]	; (80017f0 <main+0xc38>)
 80016cc:	f002 fe7c 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DP1_Pin, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016d6:	4846      	ldr	r0, [pc, #280]	; (80017f0 <main+0xc38>)
 80016d8:	f002 fe76 	bl	80043c8 <HAL_GPIO_WritePin>

	// Right num:
	HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_SET);
 80016dc:	2201      	movs	r2, #1
 80016de:	2102      	movs	r1, #2
 80016e0:	4844      	ldr	r0, [pc, #272]	; (80017f4 <main+0xc3c>)
 80016e2:	f002 fe71 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, B2_Pin, GPIO_PIN_RESET);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2104      	movs	r1, #4
 80016ea:	4842      	ldr	r0, [pc, #264]	; (80017f4 <main+0xc3c>)
 80016ec:	f002 fe6c 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, C2_Pin, GPIO_PIN_RESET);
 80016f0:	2200      	movs	r2, #0
 80016f2:	2108      	movs	r1, #8
 80016f4:	483f      	ldr	r0, [pc, #252]	; (80017f4 <main+0xc3c>)
 80016f6:	f002 fe67 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, D2_Pin, GPIO_PIN_SET);
 80016fa:	2201      	movs	r2, #1
 80016fc:	2110      	movs	r1, #16
 80016fe:	483d      	ldr	r0, [pc, #244]	; (80017f4 <main+0xc3c>)
 8001700:	f002 fe62 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, E2_Pin, GPIO_PIN_SET);
 8001704:	2201      	movs	r2, #1
 8001706:	2120      	movs	r1, #32
 8001708:	483a      	ldr	r0, [pc, #232]	; (80017f4 <main+0xc3c>)
 800170a:	f002 fe5d 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, F2_Pin, GPIO_PIN_RESET);
 800170e:	2200      	movs	r2, #0
 8001710:	2140      	movs	r1, #64	; 0x40
 8001712:	4838      	ldr	r0, [pc, #224]	; (80017f4 <main+0xc3c>)
 8001714:	f002 fe58 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, G2_Pin, GPIO_PIN_RESET);
 8001718:	2200      	movs	r2, #0
 800171a:	2180      	movs	r1, #128	; 0x80
 800171c:	4835      	ldr	r0, [pc, #212]	; (80017f4 <main+0xc3c>)
 800171e:	f002 fe53 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DP2_Pin, GPIO_PIN_SET);
 8001722:	2201      	movs	r2, #1
 8001724:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001728:	4832      	ldr	r0, [pc, #200]	; (80017f4 <main+0xc3c>)
 800172a:	f002 fe4d 	bl	80043c8 <HAL_GPIO_WritePin>
 800172e:	f000 bf15 	b.w	800255c <main+0x19a4>
}
else if (raw >= 1736 && raw < 1860)
 8001732:	89fb      	ldrh	r3, [r7, #14]
 8001734:	f5b3 6fd9 	cmp.w	r3, #1736	; 0x6c8
 8001738:	d35e      	bcc.n	80017f8 <main+0xc40>
 800173a:	89fb      	ldrh	r3, [r7, #14]
 800173c:	f240 7243 	movw	r2, #1859	; 0x743
 8001740:	4293      	cmp	r3, r2
 8001742:	d859      	bhi.n	80017f8 <main+0xc40>
{
	// Left num:
	HAL_GPIO_WritePin(GPIOB, A1_Pin, GPIO_PIN_SET);
 8001744:	2201      	movs	r2, #1
 8001746:	2102      	movs	r1, #2
 8001748:	4829      	ldr	r0, [pc, #164]	; (80017f0 <main+0xc38>)
 800174a:	f002 fe3d 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B1_Pin, GPIO_PIN_RESET);
 800174e:	2200      	movs	r2, #0
 8001750:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001754:	4826      	ldr	r0, [pc, #152]	; (80017f0 <main+0xc38>)
 8001756:	f002 fe37 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C1_Pin, GPIO_PIN_RESET);
 800175a:	2200      	movs	r2, #0
 800175c:	2110      	movs	r1, #16
 800175e:	4824      	ldr	r0, [pc, #144]	; (80017f0 <main+0xc38>)
 8001760:	f002 fe32 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D1_Pin, GPIO_PIN_SET);
 8001764:	2201      	movs	r2, #1
 8001766:	2120      	movs	r1, #32
 8001768:	4821      	ldr	r0, [pc, #132]	; (80017f0 <main+0xc38>)
 800176a:	f002 fe2d 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, E1_Pin, GPIO_PIN_SET);
 800176e:	2201      	movs	r2, #1
 8001770:	2140      	movs	r1, #64	; 0x40
 8001772:	481f      	ldr	r0, [pc, #124]	; (80017f0 <main+0xc38>)
 8001774:	f002 fe28 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, F1_Pin, GPIO_PIN_SET);
 8001778:	2201      	movs	r2, #1
 800177a:	2180      	movs	r1, #128	; 0x80
 800177c:	481c      	ldr	r0, [pc, #112]	; (80017f0 <main+0xc38>)
 800177e:	f002 fe23 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_SET);
 8001782:	2201      	movs	r2, #1
 8001784:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001788:	4819      	ldr	r0, [pc, #100]	; (80017f0 <main+0xc38>)
 800178a:	f002 fe1d 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DP1_Pin, GPIO_PIN_RESET);
 800178e:	2200      	movs	r2, #0
 8001790:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001794:	4816      	ldr	r0, [pc, #88]	; (80017f0 <main+0xc38>)
 8001796:	f002 fe17 	bl	80043c8 <HAL_GPIO_WritePin>

	// Right num:
	HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_RESET);
 800179a:	2200      	movs	r2, #0
 800179c:	2102      	movs	r1, #2
 800179e:	4815      	ldr	r0, [pc, #84]	; (80017f4 <main+0xc3c>)
 80017a0:	f002 fe12 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, B2_Pin, GPIO_PIN_SET);
 80017a4:	2201      	movs	r2, #1
 80017a6:	2104      	movs	r1, #4
 80017a8:	4812      	ldr	r0, [pc, #72]	; (80017f4 <main+0xc3c>)
 80017aa:	f002 fe0d 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, C2_Pin, GPIO_PIN_RESET);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2108      	movs	r1, #8
 80017b2:	4810      	ldr	r0, [pc, #64]	; (80017f4 <main+0xc3c>)
 80017b4:	f002 fe08 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, D2_Pin, GPIO_PIN_RESET);
 80017b8:	2200      	movs	r2, #0
 80017ba:	2110      	movs	r1, #16
 80017bc:	480d      	ldr	r0, [pc, #52]	; (80017f4 <main+0xc3c>)
 80017be:	f002 fe03 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, E2_Pin, GPIO_PIN_SET);
 80017c2:	2201      	movs	r2, #1
 80017c4:	2120      	movs	r1, #32
 80017c6:	480b      	ldr	r0, [pc, #44]	; (80017f4 <main+0xc3c>)
 80017c8:	f002 fdfe 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, F2_Pin, GPIO_PIN_RESET);
 80017cc:	2200      	movs	r2, #0
 80017ce:	2140      	movs	r1, #64	; 0x40
 80017d0:	4808      	ldr	r0, [pc, #32]	; (80017f4 <main+0xc3c>)
 80017d2:	f002 fdf9 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, G2_Pin, GPIO_PIN_RESET);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2180      	movs	r1, #128	; 0x80
 80017da:	4806      	ldr	r0, [pc, #24]	; (80017f4 <main+0xc3c>)
 80017dc:	f002 fdf4 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DP2_Pin, GPIO_PIN_SET);
 80017e0:	2201      	movs	r2, #1
 80017e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017e6:	4803      	ldr	r0, [pc, #12]	; (80017f4 <main+0xc3c>)
 80017e8:	f002 fdee 	bl	80043c8 <HAL_GPIO_WritePin>
 80017ec:	f000 beb6 	b.w	800255c <main+0x19a4>
 80017f0:	48000400 	.word	0x48000400
 80017f4:	48000800 	.word	0x48000800
}
else if (raw >= 1860 && raw < 1984)
 80017f8:	89fb      	ldrh	r3, [r7, #14]
 80017fa:	f240 7243 	movw	r2, #1859	; 0x743
 80017fe:	4293      	cmp	r3, r2
 8001800:	d959      	bls.n	80018b6 <main+0xcfe>
 8001802:	89fb      	ldrh	r3, [r7, #14]
 8001804:	f5b3 6ff8 	cmp.w	r3, #1984	; 0x7c0
 8001808:	d255      	bcs.n	80018b6 <main+0xcfe>
{
	// Left num:
	HAL_GPIO_WritePin(GPIOB, A1_Pin, GPIO_PIN_SET);
 800180a:	2201      	movs	r2, #1
 800180c:	2102      	movs	r1, #2
 800180e:	48b9      	ldr	r0, [pc, #740]	; (8001af4 <main+0xf3c>)
 8001810:	f002 fdda 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B1_Pin, GPIO_PIN_RESET);
 8001814:	2200      	movs	r2, #0
 8001816:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800181a:	48b6      	ldr	r0, [pc, #728]	; (8001af4 <main+0xf3c>)
 800181c:	f002 fdd4 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C1_Pin, GPIO_PIN_RESET);
 8001820:	2200      	movs	r2, #0
 8001822:	2110      	movs	r1, #16
 8001824:	48b3      	ldr	r0, [pc, #716]	; (8001af4 <main+0xf3c>)
 8001826:	f002 fdcf 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D1_Pin, GPIO_PIN_SET);
 800182a:	2201      	movs	r2, #1
 800182c:	2120      	movs	r1, #32
 800182e:	48b1      	ldr	r0, [pc, #708]	; (8001af4 <main+0xf3c>)
 8001830:	f002 fdca 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, E1_Pin, GPIO_PIN_SET);
 8001834:	2201      	movs	r2, #1
 8001836:	2140      	movs	r1, #64	; 0x40
 8001838:	48ae      	ldr	r0, [pc, #696]	; (8001af4 <main+0xf3c>)
 800183a:	f002 fdc5 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, F1_Pin, GPIO_PIN_SET);
 800183e:	2201      	movs	r2, #1
 8001840:	2180      	movs	r1, #128	; 0x80
 8001842:	48ac      	ldr	r0, [pc, #688]	; (8001af4 <main+0xf3c>)
 8001844:	f002 fdc0 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_SET);
 8001848:	2201      	movs	r2, #1
 800184a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800184e:	48a9      	ldr	r0, [pc, #676]	; (8001af4 <main+0xf3c>)
 8001850:	f002 fdba 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DP1_Pin, GPIO_PIN_RESET);
 8001854:	2200      	movs	r2, #0
 8001856:	f44f 7100 	mov.w	r1, #512	; 0x200
 800185a:	48a6      	ldr	r0, [pc, #664]	; (8001af4 <main+0xf3c>)
 800185c:	f002 fdb4 	bl	80043c8 <HAL_GPIO_WritePin>

	// Right num:
	HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_RESET);
 8001860:	2200      	movs	r2, #0
 8001862:	2102      	movs	r1, #2
 8001864:	48a4      	ldr	r0, [pc, #656]	; (8001af8 <main+0xf40>)
 8001866:	f002 fdaf 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, B2_Pin, GPIO_PIN_SET);
 800186a:	2201      	movs	r2, #1
 800186c:	2104      	movs	r1, #4
 800186e:	48a2      	ldr	r0, [pc, #648]	; (8001af8 <main+0xf40>)
 8001870:	f002 fdaa 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, C2_Pin, GPIO_PIN_RESET);
 8001874:	2200      	movs	r2, #0
 8001876:	2108      	movs	r1, #8
 8001878:	489f      	ldr	r0, [pc, #636]	; (8001af8 <main+0xf40>)
 800187a:	f002 fda5 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, D2_Pin, GPIO_PIN_RESET);
 800187e:	2200      	movs	r2, #0
 8001880:	2110      	movs	r1, #16
 8001882:	489d      	ldr	r0, [pc, #628]	; (8001af8 <main+0xf40>)
 8001884:	f002 fda0 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, E2_Pin, GPIO_PIN_RESET);
 8001888:	2200      	movs	r2, #0
 800188a:	2120      	movs	r1, #32
 800188c:	489a      	ldr	r0, [pc, #616]	; (8001af8 <main+0xf40>)
 800188e:	f002 fd9b 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, F2_Pin, GPIO_PIN_RESET);
 8001892:	2200      	movs	r2, #0
 8001894:	2140      	movs	r1, #64	; 0x40
 8001896:	4898      	ldr	r0, [pc, #608]	; (8001af8 <main+0xf40>)
 8001898:	f002 fd96 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, G2_Pin, GPIO_PIN_RESET);
 800189c:	2200      	movs	r2, #0
 800189e:	2180      	movs	r1, #128	; 0x80
 80018a0:	4895      	ldr	r0, [pc, #596]	; (8001af8 <main+0xf40>)
 80018a2:	f002 fd91 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DP2_Pin, GPIO_PIN_SET);
 80018a6:	2201      	movs	r2, #1
 80018a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018ac:	4892      	ldr	r0, [pc, #584]	; (8001af8 <main+0xf40>)
 80018ae:	f002 fd8b 	bl	80043c8 <HAL_GPIO_WritePin>
 80018b2:	f000 be53 	b.w	800255c <main+0x19a4>
}
else if (raw >= 1984 && raw < 2108)
 80018b6:	89fb      	ldrh	r3, [r7, #14]
 80018b8:	f5b3 6ff8 	cmp.w	r3, #1984	; 0x7c0
 80018bc:	d35a      	bcc.n	8001974 <main+0xdbc>
 80018be:	89fb      	ldrh	r3, [r7, #14]
 80018c0:	f640 023b 	movw	r2, #2107	; 0x83b
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d855      	bhi.n	8001974 <main+0xdbc>
{
	// Left num:
	HAL_GPIO_WritePin(GPIOB, A1_Pin, GPIO_PIN_SET);
 80018c8:	2201      	movs	r2, #1
 80018ca:	2102      	movs	r1, #2
 80018cc:	4889      	ldr	r0, [pc, #548]	; (8001af4 <main+0xf3c>)
 80018ce:	f002 fd7b 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B1_Pin, GPIO_PIN_RESET);
 80018d2:	2200      	movs	r2, #0
 80018d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018d8:	4886      	ldr	r0, [pc, #536]	; (8001af4 <main+0xf3c>)
 80018da:	f002 fd75 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C1_Pin, GPIO_PIN_RESET);
 80018de:	2200      	movs	r2, #0
 80018e0:	2110      	movs	r1, #16
 80018e2:	4884      	ldr	r0, [pc, #528]	; (8001af4 <main+0xf3c>)
 80018e4:	f002 fd70 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D1_Pin, GPIO_PIN_SET);
 80018e8:	2201      	movs	r2, #1
 80018ea:	2120      	movs	r1, #32
 80018ec:	4881      	ldr	r0, [pc, #516]	; (8001af4 <main+0xf3c>)
 80018ee:	f002 fd6b 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, E1_Pin, GPIO_PIN_SET);
 80018f2:	2201      	movs	r2, #1
 80018f4:	2140      	movs	r1, #64	; 0x40
 80018f6:	487f      	ldr	r0, [pc, #508]	; (8001af4 <main+0xf3c>)
 80018f8:	f002 fd66 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, F1_Pin, GPIO_PIN_SET);
 80018fc:	2201      	movs	r2, #1
 80018fe:	2180      	movs	r1, #128	; 0x80
 8001900:	487c      	ldr	r0, [pc, #496]	; (8001af4 <main+0xf3c>)
 8001902:	f002 fd61 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_SET);
 8001906:	2201      	movs	r2, #1
 8001908:	f44f 7180 	mov.w	r1, #256	; 0x100
 800190c:	4879      	ldr	r0, [pc, #484]	; (8001af4 <main+0xf3c>)
 800190e:	f002 fd5b 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DP1_Pin, GPIO_PIN_RESET);
 8001912:	2200      	movs	r2, #0
 8001914:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001918:	4876      	ldr	r0, [pc, #472]	; (8001af4 <main+0xf3c>)
 800191a:	f002 fd55 	bl	80043c8 <HAL_GPIO_WritePin>

	// Right num:
	HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	2102      	movs	r1, #2
 8001922:	4875      	ldr	r0, [pc, #468]	; (8001af8 <main+0xf40>)
 8001924:	f002 fd50 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, B2_Pin, GPIO_PIN_RESET);
 8001928:	2200      	movs	r2, #0
 800192a:	2104      	movs	r1, #4
 800192c:	4872      	ldr	r0, [pc, #456]	; (8001af8 <main+0xf40>)
 800192e:	f002 fd4b 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, C2_Pin, GPIO_PIN_RESET);
 8001932:	2200      	movs	r2, #0
 8001934:	2108      	movs	r1, #8
 8001936:	4870      	ldr	r0, [pc, #448]	; (8001af8 <main+0xf40>)
 8001938:	f002 fd46 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, D2_Pin, GPIO_PIN_SET);
 800193c:	2201      	movs	r2, #1
 800193e:	2110      	movs	r1, #16
 8001940:	486d      	ldr	r0, [pc, #436]	; (8001af8 <main+0xf40>)
 8001942:	f002 fd41 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, E2_Pin, GPIO_PIN_SET);
 8001946:	2201      	movs	r2, #1
 8001948:	2120      	movs	r1, #32
 800194a:	486b      	ldr	r0, [pc, #428]	; (8001af8 <main+0xf40>)
 800194c:	f002 fd3c 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, F2_Pin, GPIO_PIN_SET);
 8001950:	2201      	movs	r2, #1
 8001952:	2140      	movs	r1, #64	; 0x40
 8001954:	4868      	ldr	r0, [pc, #416]	; (8001af8 <main+0xf40>)
 8001956:	f002 fd37 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, G2_Pin, GPIO_PIN_SET);
 800195a:	2201      	movs	r2, #1
 800195c:	2180      	movs	r1, #128	; 0x80
 800195e:	4866      	ldr	r0, [pc, #408]	; (8001af8 <main+0xf40>)
 8001960:	f002 fd32 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DP2_Pin, GPIO_PIN_SET);
 8001964:	2201      	movs	r2, #1
 8001966:	f44f 7180 	mov.w	r1, #256	; 0x100
 800196a:	4863      	ldr	r0, [pc, #396]	; (8001af8 <main+0xf40>)
 800196c:	f002 fd2c 	bl	80043c8 <HAL_GPIO_WritePin>
 8001970:	f000 bdf4 	b.w	800255c <main+0x19a4>
}
else if (raw >= 2108 && raw < 2232)
 8001974:	89fb      	ldrh	r3, [r7, #14]
 8001976:	f640 023b 	movw	r2, #2107	; 0x83b
 800197a:	4293      	cmp	r3, r2
 800197c:	d95a      	bls.n	8001a34 <main+0xe7c>
 800197e:	89fb      	ldrh	r3, [r7, #14]
 8001980:	f640 02b7 	movw	r2, #2231	; 0x8b7
 8001984:	4293      	cmp	r3, r2
 8001986:	d855      	bhi.n	8001a34 <main+0xe7c>
{
	// Left num:
	HAL_GPIO_WritePin(GPIOB, A1_Pin, GPIO_PIN_SET);
 8001988:	2201      	movs	r2, #1
 800198a:	2102      	movs	r1, #2
 800198c:	4859      	ldr	r0, [pc, #356]	; (8001af4 <main+0xf3c>)
 800198e:	f002 fd1b 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B1_Pin, GPIO_PIN_RESET);
 8001992:	2200      	movs	r2, #0
 8001994:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001998:	4856      	ldr	r0, [pc, #344]	; (8001af4 <main+0xf3c>)
 800199a:	f002 fd15 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C1_Pin, GPIO_PIN_RESET);
 800199e:	2200      	movs	r2, #0
 80019a0:	2110      	movs	r1, #16
 80019a2:	4854      	ldr	r0, [pc, #336]	; (8001af4 <main+0xf3c>)
 80019a4:	f002 fd10 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D1_Pin, GPIO_PIN_SET);
 80019a8:	2201      	movs	r2, #1
 80019aa:	2120      	movs	r1, #32
 80019ac:	4851      	ldr	r0, [pc, #324]	; (8001af4 <main+0xf3c>)
 80019ae:	f002 fd0b 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, E1_Pin, GPIO_PIN_SET);
 80019b2:	2201      	movs	r2, #1
 80019b4:	2140      	movs	r1, #64	; 0x40
 80019b6:	484f      	ldr	r0, [pc, #316]	; (8001af4 <main+0xf3c>)
 80019b8:	f002 fd06 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, F1_Pin, GPIO_PIN_SET);
 80019bc:	2201      	movs	r2, #1
 80019be:	2180      	movs	r1, #128	; 0x80
 80019c0:	484c      	ldr	r0, [pc, #304]	; (8001af4 <main+0xf3c>)
 80019c2:	f002 fd01 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_SET);
 80019c6:	2201      	movs	r2, #1
 80019c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019cc:	4849      	ldr	r0, [pc, #292]	; (8001af4 <main+0xf3c>)
 80019ce:	f002 fcfb 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DP1_Pin, GPIO_PIN_RESET);
 80019d2:	2200      	movs	r2, #0
 80019d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019d8:	4846      	ldr	r0, [pc, #280]	; (8001af4 <main+0xf3c>)
 80019da:	f002 fcf5 	bl	80043c8 <HAL_GPIO_WritePin>

	// Right num:
	HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_RESET);
 80019de:	2200      	movs	r2, #0
 80019e0:	2102      	movs	r1, #2
 80019e2:	4845      	ldr	r0, [pc, #276]	; (8001af8 <main+0xf40>)
 80019e4:	f002 fcf0 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, B2_Pin, GPIO_PIN_RESET);
 80019e8:	2200      	movs	r2, #0
 80019ea:	2104      	movs	r1, #4
 80019ec:	4842      	ldr	r0, [pc, #264]	; (8001af8 <main+0xf40>)
 80019ee:	f002 fceb 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, C2_Pin, GPIO_PIN_RESET);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2108      	movs	r1, #8
 80019f6:	4840      	ldr	r0, [pc, #256]	; (8001af8 <main+0xf40>)
 80019f8:	f002 fce6 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, D2_Pin, GPIO_PIN_RESET);
 80019fc:	2200      	movs	r2, #0
 80019fe:	2110      	movs	r1, #16
 8001a00:	483d      	ldr	r0, [pc, #244]	; (8001af8 <main+0xf40>)
 8001a02:	f002 fce1 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, E2_Pin, GPIO_PIN_RESET);
 8001a06:	2200      	movs	r2, #0
 8001a08:	2120      	movs	r1, #32
 8001a0a:	483b      	ldr	r0, [pc, #236]	; (8001af8 <main+0xf40>)
 8001a0c:	f002 fcdc 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, F2_Pin, GPIO_PIN_RESET);
 8001a10:	2200      	movs	r2, #0
 8001a12:	2140      	movs	r1, #64	; 0x40
 8001a14:	4838      	ldr	r0, [pc, #224]	; (8001af8 <main+0xf40>)
 8001a16:	f002 fcd7 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, G2_Pin, GPIO_PIN_RESET);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2180      	movs	r1, #128	; 0x80
 8001a1e:	4836      	ldr	r0, [pc, #216]	; (8001af8 <main+0xf40>)
 8001a20:	f002 fcd2 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DP2_Pin, GPIO_PIN_SET);
 8001a24:	2201      	movs	r2, #1
 8001a26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a2a:	4833      	ldr	r0, [pc, #204]	; (8001af8 <main+0xf40>)
 8001a2c:	f002 fccc 	bl	80043c8 <HAL_GPIO_WritePin>
 8001a30:	f000 bd94 	b.w	800255c <main+0x19a4>
}
else if (raw >= 2232 && raw < 2356)
 8001a34:	89fb      	ldrh	r3, [r7, #14]
 8001a36:	f640 02b7 	movw	r2, #2231	; 0x8b7
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d95e      	bls.n	8001afc <main+0xf44>
 8001a3e:	89fb      	ldrh	r3, [r7, #14]
 8001a40:	f640 1233 	movw	r2, #2355	; 0x933
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d859      	bhi.n	8001afc <main+0xf44>
{
	// Left num:
	HAL_GPIO_WritePin(GPIOB, A1_Pin, GPIO_PIN_SET);
 8001a48:	2201      	movs	r2, #1
 8001a4a:	2102      	movs	r1, #2
 8001a4c:	4829      	ldr	r0, [pc, #164]	; (8001af4 <main+0xf3c>)
 8001a4e:	f002 fcbb 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B1_Pin, GPIO_PIN_RESET);
 8001a52:	2200      	movs	r2, #0
 8001a54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a58:	4826      	ldr	r0, [pc, #152]	; (8001af4 <main+0xf3c>)
 8001a5a:	f002 fcb5 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C1_Pin, GPIO_PIN_RESET);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2110      	movs	r1, #16
 8001a62:	4824      	ldr	r0, [pc, #144]	; (8001af4 <main+0xf3c>)
 8001a64:	f002 fcb0 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D1_Pin, GPIO_PIN_SET);
 8001a68:	2201      	movs	r2, #1
 8001a6a:	2120      	movs	r1, #32
 8001a6c:	4821      	ldr	r0, [pc, #132]	; (8001af4 <main+0xf3c>)
 8001a6e:	f002 fcab 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, E1_Pin, GPIO_PIN_SET);
 8001a72:	2201      	movs	r2, #1
 8001a74:	2140      	movs	r1, #64	; 0x40
 8001a76:	481f      	ldr	r0, [pc, #124]	; (8001af4 <main+0xf3c>)
 8001a78:	f002 fca6 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, F1_Pin, GPIO_PIN_SET);
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	2180      	movs	r1, #128	; 0x80
 8001a80:	481c      	ldr	r0, [pc, #112]	; (8001af4 <main+0xf3c>)
 8001a82:	f002 fca1 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_SET);
 8001a86:	2201      	movs	r2, #1
 8001a88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a8c:	4819      	ldr	r0, [pc, #100]	; (8001af4 <main+0xf3c>)
 8001a8e:	f002 fc9b 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DP1_Pin, GPIO_PIN_RESET);
 8001a92:	2200      	movs	r2, #0
 8001a94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a98:	4816      	ldr	r0, [pc, #88]	; (8001af4 <main+0xf3c>)
 8001a9a:	f002 fc95 	bl	80043c8 <HAL_GPIO_WritePin>

	// Right num:
	HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_RESET);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2102      	movs	r1, #2
 8001aa2:	4815      	ldr	r0, [pc, #84]	; (8001af8 <main+0xf40>)
 8001aa4:	f002 fc90 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, B2_Pin, GPIO_PIN_RESET);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2104      	movs	r1, #4
 8001aac:	4812      	ldr	r0, [pc, #72]	; (8001af8 <main+0xf40>)
 8001aae:	f002 fc8b 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, C2_Pin, GPIO_PIN_RESET);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2108      	movs	r1, #8
 8001ab6:	4810      	ldr	r0, [pc, #64]	; (8001af8 <main+0xf40>)
 8001ab8:	f002 fc86 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, D2_Pin, GPIO_PIN_RESET);
 8001abc:	2200      	movs	r2, #0
 8001abe:	2110      	movs	r1, #16
 8001ac0:	480d      	ldr	r0, [pc, #52]	; (8001af8 <main+0xf40>)
 8001ac2:	f002 fc81 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, E2_Pin, GPIO_PIN_SET);
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	2120      	movs	r1, #32
 8001aca:	480b      	ldr	r0, [pc, #44]	; (8001af8 <main+0xf40>)
 8001acc:	f002 fc7c 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, F2_Pin, GPIO_PIN_RESET);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2140      	movs	r1, #64	; 0x40
 8001ad4:	4808      	ldr	r0, [pc, #32]	; (8001af8 <main+0xf40>)
 8001ad6:	f002 fc77 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, G2_Pin, GPIO_PIN_RESET);
 8001ada:	2200      	movs	r2, #0
 8001adc:	2180      	movs	r1, #128	; 0x80
 8001ade:	4806      	ldr	r0, [pc, #24]	; (8001af8 <main+0xf40>)
 8001ae0:	f002 fc72 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DP2_Pin, GPIO_PIN_SET);
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aea:	4803      	ldr	r0, [pc, #12]	; (8001af8 <main+0xf40>)
 8001aec:	f002 fc6c 	bl	80043c8 <HAL_GPIO_WritePin>
 8001af0:	f000 bd34 	b.w	800255c <main+0x19a4>
 8001af4:	48000400 	.word	0x48000400
 8001af8:	48000800 	.word	0x48000800
}
else if (raw >= 2356 && raw < 2480) // 2.0
 8001afc:	89fb      	ldrh	r3, [r7, #14]
 8001afe:	f640 1233 	movw	r2, #2355	; 0x933
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d959      	bls.n	8001bba <main+0x1002>
 8001b06:	89fb      	ldrh	r3, [r7, #14]
 8001b08:	f5b3 6f1b 	cmp.w	r3, #2480	; 0x9b0
 8001b0c:	d255      	bcs.n	8001bba <main+0x1002>
{
	// Left num:
	HAL_GPIO_WritePin(GPIOB, A1_Pin, GPIO_PIN_RESET);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2102      	movs	r1, #2
 8001b12:	48b9      	ldr	r0, [pc, #740]	; (8001df8 <main+0x1240>)
 8001b14:	f002 fc58 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B1_Pin, GPIO_PIN_RESET);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b1e:	48b6      	ldr	r0, [pc, #728]	; (8001df8 <main+0x1240>)
 8001b20:	f002 fc52 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C1_Pin, GPIO_PIN_SET);
 8001b24:	2201      	movs	r2, #1
 8001b26:	2110      	movs	r1, #16
 8001b28:	48b3      	ldr	r0, [pc, #716]	; (8001df8 <main+0x1240>)
 8001b2a:	f002 fc4d 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D1_Pin, GPIO_PIN_RESET);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2120      	movs	r1, #32
 8001b32:	48b1      	ldr	r0, [pc, #708]	; (8001df8 <main+0x1240>)
 8001b34:	f002 fc48 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, E1_Pin, GPIO_PIN_RESET);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2140      	movs	r1, #64	; 0x40
 8001b3c:	48ae      	ldr	r0, [pc, #696]	; (8001df8 <main+0x1240>)
 8001b3e:	f002 fc43 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, F1_Pin, GPIO_PIN_SET);
 8001b42:	2201      	movs	r2, #1
 8001b44:	2180      	movs	r1, #128	; 0x80
 8001b46:	48ac      	ldr	r0, [pc, #688]	; (8001df8 <main+0x1240>)
 8001b48:	f002 fc3e 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_RESET);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b52:	48a9      	ldr	r0, [pc, #676]	; (8001df8 <main+0x1240>)
 8001b54:	f002 fc38 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DP1_Pin, GPIO_PIN_RESET);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b5e:	48a6      	ldr	r0, [pc, #664]	; (8001df8 <main+0x1240>)
 8001b60:	f002 fc32 	bl	80043c8 <HAL_GPIO_WritePin>

	// Right num:
	HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_RESET);
 8001b64:	2200      	movs	r2, #0
 8001b66:	2102      	movs	r1, #2
 8001b68:	48a4      	ldr	r0, [pc, #656]	; (8001dfc <main+0x1244>)
 8001b6a:	f002 fc2d 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, B2_Pin, GPIO_PIN_RESET);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2104      	movs	r1, #4
 8001b72:	48a2      	ldr	r0, [pc, #648]	; (8001dfc <main+0x1244>)
 8001b74:	f002 fc28 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, C2_Pin, GPIO_PIN_RESET);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2108      	movs	r1, #8
 8001b7c:	489f      	ldr	r0, [pc, #636]	; (8001dfc <main+0x1244>)
 8001b7e:	f002 fc23 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, D2_Pin, GPIO_PIN_RESET);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2110      	movs	r1, #16
 8001b86:	489d      	ldr	r0, [pc, #628]	; (8001dfc <main+0x1244>)
 8001b88:	f002 fc1e 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, E2_Pin, GPIO_PIN_RESET);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2120      	movs	r1, #32
 8001b90:	489a      	ldr	r0, [pc, #616]	; (8001dfc <main+0x1244>)
 8001b92:	f002 fc19 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, F2_Pin, GPIO_PIN_RESET);
 8001b96:	2200      	movs	r2, #0
 8001b98:	2140      	movs	r1, #64	; 0x40
 8001b9a:	4898      	ldr	r0, [pc, #608]	; (8001dfc <main+0x1244>)
 8001b9c:	f002 fc14 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, G2_Pin, GPIO_PIN_SET);
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	2180      	movs	r1, #128	; 0x80
 8001ba4:	4895      	ldr	r0, [pc, #596]	; (8001dfc <main+0x1244>)
 8001ba6:	f002 fc0f 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DP2_Pin, GPIO_PIN_SET);
 8001baa:	2201      	movs	r2, #1
 8001bac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bb0:	4892      	ldr	r0, [pc, #584]	; (8001dfc <main+0x1244>)
 8001bb2:	f002 fc09 	bl	80043c8 <HAL_GPIO_WritePin>
 8001bb6:	f000 bcd1 	b.w	800255c <main+0x19a4>
}
else if (raw >= 2480 && raw < 2604)
 8001bba:	89fb      	ldrh	r3, [r7, #14]
 8001bbc:	f5b3 6f1b 	cmp.w	r3, #2480	; 0x9b0
 8001bc0:	d35a      	bcc.n	8001c78 <main+0x10c0>
 8001bc2:	89fb      	ldrh	r3, [r7, #14]
 8001bc4:	f640 222b 	movw	r2, #2603	; 0xa2b
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d855      	bhi.n	8001c78 <main+0x10c0>
{
	// Left num:
	HAL_GPIO_WritePin(GPIOB, A1_Pin, GPIO_PIN_RESET);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2102      	movs	r1, #2
 8001bd0:	4889      	ldr	r0, [pc, #548]	; (8001df8 <main+0x1240>)
 8001bd2:	f002 fbf9 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B1_Pin, GPIO_PIN_RESET);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bdc:	4886      	ldr	r0, [pc, #536]	; (8001df8 <main+0x1240>)
 8001bde:	f002 fbf3 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C1_Pin, GPIO_PIN_SET);
 8001be2:	2201      	movs	r2, #1
 8001be4:	2110      	movs	r1, #16
 8001be6:	4884      	ldr	r0, [pc, #528]	; (8001df8 <main+0x1240>)
 8001be8:	f002 fbee 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D1_Pin, GPIO_PIN_RESET);
 8001bec:	2200      	movs	r2, #0
 8001bee:	2120      	movs	r1, #32
 8001bf0:	4881      	ldr	r0, [pc, #516]	; (8001df8 <main+0x1240>)
 8001bf2:	f002 fbe9 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, E1_Pin, GPIO_PIN_RESET);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2140      	movs	r1, #64	; 0x40
 8001bfa:	487f      	ldr	r0, [pc, #508]	; (8001df8 <main+0x1240>)
 8001bfc:	f002 fbe4 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, F1_Pin, GPIO_PIN_SET);
 8001c00:	2201      	movs	r2, #1
 8001c02:	2180      	movs	r1, #128	; 0x80
 8001c04:	487c      	ldr	r0, [pc, #496]	; (8001df8 <main+0x1240>)
 8001c06:	f002 fbdf 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_RESET);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c10:	4879      	ldr	r0, [pc, #484]	; (8001df8 <main+0x1240>)
 8001c12:	f002 fbd9 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DP1_Pin, GPIO_PIN_RESET);
 8001c16:	2200      	movs	r2, #0
 8001c18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c1c:	4876      	ldr	r0, [pc, #472]	; (8001df8 <main+0x1240>)
 8001c1e:	f002 fbd3 	bl	80043c8 <HAL_GPIO_WritePin>

	// Right num:
	HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_SET);
 8001c22:	2201      	movs	r2, #1
 8001c24:	2102      	movs	r1, #2
 8001c26:	4875      	ldr	r0, [pc, #468]	; (8001dfc <main+0x1244>)
 8001c28:	f002 fbce 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, B2_Pin, GPIO_PIN_RESET);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2104      	movs	r1, #4
 8001c30:	4872      	ldr	r0, [pc, #456]	; (8001dfc <main+0x1244>)
 8001c32:	f002 fbc9 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, C2_Pin, GPIO_PIN_RESET);
 8001c36:	2200      	movs	r2, #0
 8001c38:	2108      	movs	r1, #8
 8001c3a:	4870      	ldr	r0, [pc, #448]	; (8001dfc <main+0x1244>)
 8001c3c:	f002 fbc4 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, D2_Pin, GPIO_PIN_SET);
 8001c40:	2201      	movs	r2, #1
 8001c42:	2110      	movs	r1, #16
 8001c44:	486d      	ldr	r0, [pc, #436]	; (8001dfc <main+0x1244>)
 8001c46:	f002 fbbf 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, E2_Pin, GPIO_PIN_SET);
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	2120      	movs	r1, #32
 8001c4e:	486b      	ldr	r0, [pc, #428]	; (8001dfc <main+0x1244>)
 8001c50:	f002 fbba 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, F2_Pin, GPIO_PIN_SET);
 8001c54:	2201      	movs	r2, #1
 8001c56:	2140      	movs	r1, #64	; 0x40
 8001c58:	4868      	ldr	r0, [pc, #416]	; (8001dfc <main+0x1244>)
 8001c5a:	f002 fbb5 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, G2_Pin, GPIO_PIN_SET);
 8001c5e:	2201      	movs	r2, #1
 8001c60:	2180      	movs	r1, #128	; 0x80
 8001c62:	4866      	ldr	r0, [pc, #408]	; (8001dfc <main+0x1244>)
 8001c64:	f002 fbb0 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DP2_Pin, GPIO_PIN_SET);
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c6e:	4863      	ldr	r0, [pc, #396]	; (8001dfc <main+0x1244>)
 8001c70:	f002 fbaa 	bl	80043c8 <HAL_GPIO_WritePin>
 8001c74:	f000 bc72 	b.w	800255c <main+0x19a4>
}
else if (raw >= 2604 && raw < 2728)
 8001c78:	89fb      	ldrh	r3, [r7, #14]
 8001c7a:	f640 222b 	movw	r2, #2603	; 0xa2b
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d95a      	bls.n	8001d38 <main+0x1180>
 8001c82:	89fb      	ldrh	r3, [r7, #14]
 8001c84:	f640 22a7 	movw	r2, #2727	; 0xaa7
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d855      	bhi.n	8001d38 <main+0x1180>
{
	// Left num:
	HAL_GPIO_WritePin(GPIOB, A1_Pin, GPIO_PIN_RESET);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2102      	movs	r1, #2
 8001c90:	4859      	ldr	r0, [pc, #356]	; (8001df8 <main+0x1240>)
 8001c92:	f002 fb99 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B1_Pin, GPIO_PIN_RESET);
 8001c96:	2200      	movs	r2, #0
 8001c98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c9c:	4856      	ldr	r0, [pc, #344]	; (8001df8 <main+0x1240>)
 8001c9e:	f002 fb93 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C1_Pin, GPIO_PIN_SET);
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	2110      	movs	r1, #16
 8001ca6:	4854      	ldr	r0, [pc, #336]	; (8001df8 <main+0x1240>)
 8001ca8:	f002 fb8e 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D1_Pin, GPIO_PIN_RESET);
 8001cac:	2200      	movs	r2, #0
 8001cae:	2120      	movs	r1, #32
 8001cb0:	4851      	ldr	r0, [pc, #324]	; (8001df8 <main+0x1240>)
 8001cb2:	f002 fb89 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, E1_Pin, GPIO_PIN_RESET);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2140      	movs	r1, #64	; 0x40
 8001cba:	484f      	ldr	r0, [pc, #316]	; (8001df8 <main+0x1240>)
 8001cbc:	f002 fb84 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, F1_Pin, GPIO_PIN_SET);
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	2180      	movs	r1, #128	; 0x80
 8001cc4:	484c      	ldr	r0, [pc, #304]	; (8001df8 <main+0x1240>)
 8001cc6:	f002 fb7f 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_RESET);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cd0:	4849      	ldr	r0, [pc, #292]	; (8001df8 <main+0x1240>)
 8001cd2:	f002 fb79 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DP1_Pin, GPIO_PIN_RESET);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cdc:	4846      	ldr	r0, [pc, #280]	; (8001df8 <main+0x1240>)
 8001cde:	f002 fb73 	bl	80043c8 <HAL_GPIO_WritePin>

	// Right num:
	HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_RESET);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2102      	movs	r1, #2
 8001ce6:	4845      	ldr	r0, [pc, #276]	; (8001dfc <main+0x1244>)
 8001ce8:	f002 fb6e 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, B2_Pin, GPIO_PIN_RESET);
 8001cec:	2200      	movs	r2, #0
 8001cee:	2104      	movs	r1, #4
 8001cf0:	4842      	ldr	r0, [pc, #264]	; (8001dfc <main+0x1244>)
 8001cf2:	f002 fb69 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, C2_Pin, GPIO_PIN_SET);
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	2108      	movs	r1, #8
 8001cfa:	4840      	ldr	r0, [pc, #256]	; (8001dfc <main+0x1244>)
 8001cfc:	f002 fb64 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, D2_Pin, GPIO_PIN_RESET);
 8001d00:	2200      	movs	r2, #0
 8001d02:	2110      	movs	r1, #16
 8001d04:	483d      	ldr	r0, [pc, #244]	; (8001dfc <main+0x1244>)
 8001d06:	f002 fb5f 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, E2_Pin, GPIO_PIN_RESET);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2120      	movs	r1, #32
 8001d0e:	483b      	ldr	r0, [pc, #236]	; (8001dfc <main+0x1244>)
 8001d10:	f002 fb5a 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, F2_Pin, GPIO_PIN_SET);
 8001d14:	2201      	movs	r2, #1
 8001d16:	2140      	movs	r1, #64	; 0x40
 8001d18:	4838      	ldr	r0, [pc, #224]	; (8001dfc <main+0x1244>)
 8001d1a:	f002 fb55 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, G2_Pin, GPIO_PIN_RESET);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2180      	movs	r1, #128	; 0x80
 8001d22:	4836      	ldr	r0, [pc, #216]	; (8001dfc <main+0x1244>)
 8001d24:	f002 fb50 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DP2_Pin, GPIO_PIN_SET);
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d2e:	4833      	ldr	r0, [pc, #204]	; (8001dfc <main+0x1244>)
 8001d30:	f002 fb4a 	bl	80043c8 <HAL_GPIO_WritePin>
 8001d34:	f000 bc12 	b.w	800255c <main+0x19a4>
}
else if (raw >= 2728 && raw < 2852)
 8001d38:	89fb      	ldrh	r3, [r7, #14]
 8001d3a:	f640 22a7 	movw	r2, #2727	; 0xaa7
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d95e      	bls.n	8001e00 <main+0x1248>
 8001d42:	89fb      	ldrh	r3, [r7, #14]
 8001d44:	f640 3223 	movw	r2, #2851	; 0xb23
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d859      	bhi.n	8001e00 <main+0x1248>
{
	// Left num:
	HAL_GPIO_WritePin(GPIOB, A1_Pin, GPIO_PIN_RESET);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2102      	movs	r1, #2
 8001d50:	4829      	ldr	r0, [pc, #164]	; (8001df8 <main+0x1240>)
 8001d52:	f002 fb39 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B1_Pin, GPIO_PIN_RESET);
 8001d56:	2200      	movs	r2, #0
 8001d58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d5c:	4826      	ldr	r0, [pc, #152]	; (8001df8 <main+0x1240>)
 8001d5e:	f002 fb33 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C1_Pin, GPIO_PIN_SET);
 8001d62:	2201      	movs	r2, #1
 8001d64:	2110      	movs	r1, #16
 8001d66:	4824      	ldr	r0, [pc, #144]	; (8001df8 <main+0x1240>)
 8001d68:	f002 fb2e 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D1_Pin, GPIO_PIN_RESET);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2120      	movs	r1, #32
 8001d70:	4821      	ldr	r0, [pc, #132]	; (8001df8 <main+0x1240>)
 8001d72:	f002 fb29 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, E1_Pin, GPIO_PIN_RESET);
 8001d76:	2200      	movs	r2, #0
 8001d78:	2140      	movs	r1, #64	; 0x40
 8001d7a:	481f      	ldr	r0, [pc, #124]	; (8001df8 <main+0x1240>)
 8001d7c:	f002 fb24 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, F1_Pin, GPIO_PIN_SET);
 8001d80:	2201      	movs	r2, #1
 8001d82:	2180      	movs	r1, #128	; 0x80
 8001d84:	481c      	ldr	r0, [pc, #112]	; (8001df8 <main+0x1240>)
 8001d86:	f002 fb1f 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_RESET);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d90:	4819      	ldr	r0, [pc, #100]	; (8001df8 <main+0x1240>)
 8001d92:	f002 fb19 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DP1_Pin, GPIO_PIN_RESET);
 8001d96:	2200      	movs	r2, #0
 8001d98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d9c:	4816      	ldr	r0, [pc, #88]	; (8001df8 <main+0x1240>)
 8001d9e:	f002 fb13 	bl	80043c8 <HAL_GPIO_WritePin>

	// Right num:
	HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_RESET);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2102      	movs	r1, #2
 8001da6:	4815      	ldr	r0, [pc, #84]	; (8001dfc <main+0x1244>)
 8001da8:	f002 fb0e 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, B2_Pin, GPIO_PIN_RESET);
 8001dac:	2200      	movs	r2, #0
 8001dae:	2104      	movs	r1, #4
 8001db0:	4812      	ldr	r0, [pc, #72]	; (8001dfc <main+0x1244>)
 8001db2:	f002 fb09 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, C2_Pin, GPIO_PIN_RESET);
 8001db6:	2200      	movs	r2, #0
 8001db8:	2108      	movs	r1, #8
 8001dba:	4810      	ldr	r0, [pc, #64]	; (8001dfc <main+0x1244>)
 8001dbc:	f002 fb04 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, D2_Pin, GPIO_PIN_RESET);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2110      	movs	r1, #16
 8001dc4:	480d      	ldr	r0, [pc, #52]	; (8001dfc <main+0x1244>)
 8001dc6:	f002 faff 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, E2_Pin, GPIO_PIN_SET);
 8001dca:	2201      	movs	r2, #1
 8001dcc:	2120      	movs	r1, #32
 8001dce:	480b      	ldr	r0, [pc, #44]	; (8001dfc <main+0x1244>)
 8001dd0:	f002 fafa 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, F2_Pin, GPIO_PIN_SET);
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	2140      	movs	r1, #64	; 0x40
 8001dd8:	4808      	ldr	r0, [pc, #32]	; (8001dfc <main+0x1244>)
 8001dda:	f002 faf5 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, G2_Pin, GPIO_PIN_RESET);
 8001dde:	2200      	movs	r2, #0
 8001de0:	2180      	movs	r1, #128	; 0x80
 8001de2:	4806      	ldr	r0, [pc, #24]	; (8001dfc <main+0x1244>)
 8001de4:	f002 faf0 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DP2_Pin, GPIO_PIN_SET);
 8001de8:	2201      	movs	r2, #1
 8001dea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dee:	4803      	ldr	r0, [pc, #12]	; (8001dfc <main+0x1244>)
 8001df0:	f002 faea 	bl	80043c8 <HAL_GPIO_WritePin>
 8001df4:	e3b2      	b.n	800255c <main+0x19a4>
 8001df6:	bf00      	nop
 8001df8:	48000400 	.word	0x48000400
 8001dfc:	48000800 	.word	0x48000800
}
else if (raw >= 2852 && raw < 2976)
 8001e00:	89fb      	ldrh	r3, [r7, #14]
 8001e02:	f640 3223 	movw	r2, #2851	; 0xb23
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d958      	bls.n	8001ebc <main+0x1304>
 8001e0a:	89fb      	ldrh	r3, [r7, #14]
 8001e0c:	f5b3 6f3a 	cmp.w	r3, #2976	; 0xba0
 8001e10:	d254      	bcs.n	8001ebc <main+0x1304>
{
	// Left num:
	HAL_GPIO_WritePin(GPIOB, A1_Pin, GPIO_PIN_RESET);
 8001e12:	2200      	movs	r2, #0
 8001e14:	2102      	movs	r1, #2
 8001e16:	48b7      	ldr	r0, [pc, #732]	; (80020f4 <main+0x153c>)
 8001e18:	f002 fad6 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B1_Pin, GPIO_PIN_RESET);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e22:	48b4      	ldr	r0, [pc, #720]	; (80020f4 <main+0x153c>)
 8001e24:	f002 fad0 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C1_Pin, GPIO_PIN_SET);
 8001e28:	2201      	movs	r2, #1
 8001e2a:	2110      	movs	r1, #16
 8001e2c:	48b1      	ldr	r0, [pc, #708]	; (80020f4 <main+0x153c>)
 8001e2e:	f002 facb 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D1_Pin, GPIO_PIN_RESET);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2120      	movs	r1, #32
 8001e36:	48af      	ldr	r0, [pc, #700]	; (80020f4 <main+0x153c>)
 8001e38:	f002 fac6 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, E1_Pin, GPIO_PIN_RESET);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	2140      	movs	r1, #64	; 0x40
 8001e40:	48ac      	ldr	r0, [pc, #688]	; (80020f4 <main+0x153c>)
 8001e42:	f002 fac1 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, F1_Pin, GPIO_PIN_SET);
 8001e46:	2201      	movs	r2, #1
 8001e48:	2180      	movs	r1, #128	; 0x80
 8001e4a:	48aa      	ldr	r0, [pc, #680]	; (80020f4 <main+0x153c>)
 8001e4c:	f002 fabc 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_RESET);
 8001e50:	2200      	movs	r2, #0
 8001e52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e56:	48a7      	ldr	r0, [pc, #668]	; (80020f4 <main+0x153c>)
 8001e58:	f002 fab6 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DP1_Pin, GPIO_PIN_RESET);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e62:	48a4      	ldr	r0, [pc, #656]	; (80020f4 <main+0x153c>)
 8001e64:	f002 fab0 	bl	80043c8 <HAL_GPIO_WritePin>

	// Right num:
	HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_SET);
 8001e68:	2201      	movs	r2, #1
 8001e6a:	2102      	movs	r1, #2
 8001e6c:	48a2      	ldr	r0, [pc, #648]	; (80020f8 <main+0x1540>)
 8001e6e:	f002 faab 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, B2_Pin, GPIO_PIN_RESET);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2104      	movs	r1, #4
 8001e76:	48a0      	ldr	r0, [pc, #640]	; (80020f8 <main+0x1540>)
 8001e78:	f002 faa6 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, C2_Pin, GPIO_PIN_RESET);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2108      	movs	r1, #8
 8001e80:	489d      	ldr	r0, [pc, #628]	; (80020f8 <main+0x1540>)
 8001e82:	f002 faa1 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, D2_Pin, GPIO_PIN_SET);
 8001e86:	2201      	movs	r2, #1
 8001e88:	2110      	movs	r1, #16
 8001e8a:	489b      	ldr	r0, [pc, #620]	; (80020f8 <main+0x1540>)
 8001e8c:	f002 fa9c 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, E2_Pin, GPIO_PIN_SET);
 8001e90:	2201      	movs	r2, #1
 8001e92:	2120      	movs	r1, #32
 8001e94:	4898      	ldr	r0, [pc, #608]	; (80020f8 <main+0x1540>)
 8001e96:	f002 fa97 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, F2_Pin, GPIO_PIN_RESET);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2140      	movs	r1, #64	; 0x40
 8001e9e:	4896      	ldr	r0, [pc, #600]	; (80020f8 <main+0x1540>)
 8001ea0:	f002 fa92 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, G2_Pin, GPIO_PIN_RESET);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2180      	movs	r1, #128	; 0x80
 8001ea8:	4893      	ldr	r0, [pc, #588]	; (80020f8 <main+0x1540>)
 8001eaa:	f002 fa8d 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DP2_Pin, GPIO_PIN_SET);
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001eb4:	4890      	ldr	r0, [pc, #576]	; (80020f8 <main+0x1540>)
 8001eb6:	f002 fa87 	bl	80043c8 <HAL_GPIO_WritePin>
 8001eba:	e34f      	b.n	800255c <main+0x19a4>
}
else if (raw >= 2976 && raw < 3100)
 8001ebc:	89fb      	ldrh	r3, [r7, #14]
 8001ebe:	f5b3 6f3a 	cmp.w	r3, #2976	; 0xba0
 8001ec2:	d359      	bcc.n	8001f78 <main+0x13c0>
 8001ec4:	89fb      	ldrh	r3, [r7, #14]
 8001ec6:	f640 421b 	movw	r2, #3099	; 0xc1b
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d854      	bhi.n	8001f78 <main+0x13c0>
{
	// Left num:
	HAL_GPIO_WritePin(GPIOB, A1_Pin, GPIO_PIN_RESET);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2102      	movs	r1, #2
 8001ed2:	4888      	ldr	r0, [pc, #544]	; (80020f4 <main+0x153c>)
 8001ed4:	f002 fa78 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B1_Pin, GPIO_PIN_RESET);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ede:	4885      	ldr	r0, [pc, #532]	; (80020f4 <main+0x153c>)
 8001ee0:	f002 fa72 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C1_Pin, GPIO_PIN_SET);
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	2110      	movs	r1, #16
 8001ee8:	4882      	ldr	r0, [pc, #520]	; (80020f4 <main+0x153c>)
 8001eea:	f002 fa6d 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D1_Pin, GPIO_PIN_RESET);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2120      	movs	r1, #32
 8001ef2:	4880      	ldr	r0, [pc, #512]	; (80020f4 <main+0x153c>)
 8001ef4:	f002 fa68 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, E1_Pin, GPIO_PIN_RESET);
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2140      	movs	r1, #64	; 0x40
 8001efc:	487d      	ldr	r0, [pc, #500]	; (80020f4 <main+0x153c>)
 8001efe:	f002 fa63 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, F1_Pin, GPIO_PIN_SET);
 8001f02:	2201      	movs	r2, #1
 8001f04:	2180      	movs	r1, #128	; 0x80
 8001f06:	487b      	ldr	r0, [pc, #492]	; (80020f4 <main+0x153c>)
 8001f08:	f002 fa5e 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_RESET);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f12:	4878      	ldr	r0, [pc, #480]	; (80020f4 <main+0x153c>)
 8001f14:	f002 fa58 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DP1_Pin, GPIO_PIN_RESET);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f1e:	4875      	ldr	r0, [pc, #468]	; (80020f4 <main+0x153c>)
 8001f20:	f002 fa52 	bl	80043c8 <HAL_GPIO_WritePin>

	// Right num:
	HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_RESET);
 8001f24:	2200      	movs	r2, #0
 8001f26:	2102      	movs	r1, #2
 8001f28:	4873      	ldr	r0, [pc, #460]	; (80020f8 <main+0x1540>)
 8001f2a:	f002 fa4d 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, B2_Pin, GPIO_PIN_SET);
 8001f2e:	2201      	movs	r2, #1
 8001f30:	2104      	movs	r1, #4
 8001f32:	4871      	ldr	r0, [pc, #452]	; (80020f8 <main+0x1540>)
 8001f34:	f002 fa48 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, C2_Pin, GPIO_PIN_RESET);
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2108      	movs	r1, #8
 8001f3c:	486e      	ldr	r0, [pc, #440]	; (80020f8 <main+0x1540>)
 8001f3e:	f002 fa43 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, D2_Pin, GPIO_PIN_RESET);
 8001f42:	2200      	movs	r2, #0
 8001f44:	2110      	movs	r1, #16
 8001f46:	486c      	ldr	r0, [pc, #432]	; (80020f8 <main+0x1540>)
 8001f48:	f002 fa3e 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, E2_Pin, GPIO_PIN_SET);
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	2120      	movs	r1, #32
 8001f50:	4869      	ldr	r0, [pc, #420]	; (80020f8 <main+0x1540>)
 8001f52:	f002 fa39 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, F2_Pin, GPIO_PIN_RESET);
 8001f56:	2200      	movs	r2, #0
 8001f58:	2140      	movs	r1, #64	; 0x40
 8001f5a:	4867      	ldr	r0, [pc, #412]	; (80020f8 <main+0x1540>)
 8001f5c:	f002 fa34 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, G2_Pin, GPIO_PIN_RESET);
 8001f60:	2200      	movs	r2, #0
 8001f62:	2180      	movs	r1, #128	; 0x80
 8001f64:	4864      	ldr	r0, [pc, #400]	; (80020f8 <main+0x1540>)
 8001f66:	f002 fa2f 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DP2_Pin, GPIO_PIN_SET);
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f70:	4861      	ldr	r0, [pc, #388]	; (80020f8 <main+0x1540>)
 8001f72:	f002 fa29 	bl	80043c8 <HAL_GPIO_WritePin>
 8001f76:	e2f1      	b.n	800255c <main+0x19a4>
}
else if (raw >= 3100 && raw < 3224)
 8001f78:	89fb      	ldrh	r3, [r7, #14]
 8001f7a:	f640 421b 	movw	r2, #3099	; 0xc1b
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d959      	bls.n	8002036 <main+0x147e>
 8001f82:	89fb      	ldrh	r3, [r7, #14]
 8001f84:	f640 4297 	movw	r2, #3223	; 0xc97
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d854      	bhi.n	8002036 <main+0x147e>
{
	// Left num:
	HAL_GPIO_WritePin(GPIOB, A1_Pin, GPIO_PIN_RESET);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2102      	movs	r1, #2
 8001f90:	4858      	ldr	r0, [pc, #352]	; (80020f4 <main+0x153c>)
 8001f92:	f002 fa19 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B1_Pin, GPIO_PIN_RESET);
 8001f96:	2200      	movs	r2, #0
 8001f98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f9c:	4855      	ldr	r0, [pc, #340]	; (80020f4 <main+0x153c>)
 8001f9e:	f002 fa13 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C1_Pin, GPIO_PIN_SET);
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	2110      	movs	r1, #16
 8001fa6:	4853      	ldr	r0, [pc, #332]	; (80020f4 <main+0x153c>)
 8001fa8:	f002 fa0e 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D1_Pin, GPIO_PIN_RESET);
 8001fac:	2200      	movs	r2, #0
 8001fae:	2120      	movs	r1, #32
 8001fb0:	4850      	ldr	r0, [pc, #320]	; (80020f4 <main+0x153c>)
 8001fb2:	f002 fa09 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, E1_Pin, GPIO_PIN_RESET);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2140      	movs	r1, #64	; 0x40
 8001fba:	484e      	ldr	r0, [pc, #312]	; (80020f4 <main+0x153c>)
 8001fbc:	f002 fa04 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, F1_Pin, GPIO_PIN_SET);
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	2180      	movs	r1, #128	; 0x80
 8001fc4:	484b      	ldr	r0, [pc, #300]	; (80020f4 <main+0x153c>)
 8001fc6:	f002 f9ff 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_RESET);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fd0:	4848      	ldr	r0, [pc, #288]	; (80020f4 <main+0x153c>)
 8001fd2:	f002 f9f9 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DP1_Pin, GPIO_PIN_RESET);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fdc:	4845      	ldr	r0, [pc, #276]	; (80020f4 <main+0x153c>)
 8001fde:	f002 f9f3 	bl	80043c8 <HAL_GPIO_WritePin>

	// Right num:
	HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_RESET);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2102      	movs	r1, #2
 8001fe6:	4844      	ldr	r0, [pc, #272]	; (80020f8 <main+0x1540>)
 8001fe8:	f002 f9ee 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, B2_Pin, GPIO_PIN_SET);
 8001fec:	2201      	movs	r2, #1
 8001fee:	2104      	movs	r1, #4
 8001ff0:	4841      	ldr	r0, [pc, #260]	; (80020f8 <main+0x1540>)
 8001ff2:	f002 f9e9 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, C2_Pin, GPIO_PIN_RESET);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2108      	movs	r1, #8
 8001ffa:	483f      	ldr	r0, [pc, #252]	; (80020f8 <main+0x1540>)
 8001ffc:	f002 f9e4 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, D2_Pin, GPIO_PIN_RESET);
 8002000:	2200      	movs	r2, #0
 8002002:	2110      	movs	r1, #16
 8002004:	483c      	ldr	r0, [pc, #240]	; (80020f8 <main+0x1540>)
 8002006:	f002 f9df 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, E2_Pin, GPIO_PIN_RESET);
 800200a:	2200      	movs	r2, #0
 800200c:	2120      	movs	r1, #32
 800200e:	483a      	ldr	r0, [pc, #232]	; (80020f8 <main+0x1540>)
 8002010:	f002 f9da 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, F2_Pin, GPIO_PIN_RESET);
 8002014:	2200      	movs	r2, #0
 8002016:	2140      	movs	r1, #64	; 0x40
 8002018:	4837      	ldr	r0, [pc, #220]	; (80020f8 <main+0x1540>)
 800201a:	f002 f9d5 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, G2_Pin, GPIO_PIN_RESET);
 800201e:	2200      	movs	r2, #0
 8002020:	2180      	movs	r1, #128	; 0x80
 8002022:	4835      	ldr	r0, [pc, #212]	; (80020f8 <main+0x1540>)
 8002024:	f002 f9d0 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DP2_Pin, GPIO_PIN_SET);
 8002028:	2201      	movs	r2, #1
 800202a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800202e:	4832      	ldr	r0, [pc, #200]	; (80020f8 <main+0x1540>)
 8002030:	f002 f9ca 	bl	80043c8 <HAL_GPIO_WritePin>
 8002034:	e292      	b.n	800255c <main+0x19a4>
}
else if (raw >= 3224 && raw < 3348)
 8002036:	89fb      	ldrh	r3, [r7, #14]
 8002038:	f640 4297 	movw	r2, #3223	; 0xc97
 800203c:	4293      	cmp	r3, r2
 800203e:	d95d      	bls.n	80020fc <main+0x1544>
 8002040:	89fb      	ldrh	r3, [r7, #14]
 8002042:	f640 5213 	movw	r2, #3347	; 0xd13
 8002046:	4293      	cmp	r3, r2
 8002048:	d858      	bhi.n	80020fc <main+0x1544>
{
	// Left num:
	HAL_GPIO_WritePin(GPIOB, A1_Pin, GPIO_PIN_RESET);
 800204a:	2200      	movs	r2, #0
 800204c:	2102      	movs	r1, #2
 800204e:	4829      	ldr	r0, [pc, #164]	; (80020f4 <main+0x153c>)
 8002050:	f002 f9ba 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B1_Pin, GPIO_PIN_RESET);
 8002054:	2200      	movs	r2, #0
 8002056:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800205a:	4826      	ldr	r0, [pc, #152]	; (80020f4 <main+0x153c>)
 800205c:	f002 f9b4 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C1_Pin, GPIO_PIN_SET);
 8002060:	2201      	movs	r2, #1
 8002062:	2110      	movs	r1, #16
 8002064:	4823      	ldr	r0, [pc, #140]	; (80020f4 <main+0x153c>)
 8002066:	f002 f9af 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D1_Pin, GPIO_PIN_RESET);
 800206a:	2200      	movs	r2, #0
 800206c:	2120      	movs	r1, #32
 800206e:	4821      	ldr	r0, [pc, #132]	; (80020f4 <main+0x153c>)
 8002070:	f002 f9aa 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, E1_Pin, GPIO_PIN_RESET);
 8002074:	2200      	movs	r2, #0
 8002076:	2140      	movs	r1, #64	; 0x40
 8002078:	481e      	ldr	r0, [pc, #120]	; (80020f4 <main+0x153c>)
 800207a:	f002 f9a5 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, F1_Pin, GPIO_PIN_SET);
 800207e:	2201      	movs	r2, #1
 8002080:	2180      	movs	r1, #128	; 0x80
 8002082:	481c      	ldr	r0, [pc, #112]	; (80020f4 <main+0x153c>)
 8002084:	f002 f9a0 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_RESET);
 8002088:	2200      	movs	r2, #0
 800208a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800208e:	4819      	ldr	r0, [pc, #100]	; (80020f4 <main+0x153c>)
 8002090:	f002 f99a 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DP1_Pin, GPIO_PIN_RESET);
 8002094:	2200      	movs	r2, #0
 8002096:	f44f 7100 	mov.w	r1, #512	; 0x200
 800209a:	4816      	ldr	r0, [pc, #88]	; (80020f4 <main+0x153c>)
 800209c:	f002 f994 	bl	80043c8 <HAL_GPIO_WritePin>

	// Right num:
	HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_RESET);
 80020a0:	2200      	movs	r2, #0
 80020a2:	2102      	movs	r1, #2
 80020a4:	4814      	ldr	r0, [pc, #80]	; (80020f8 <main+0x1540>)
 80020a6:	f002 f98f 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, B2_Pin, GPIO_PIN_RESET);
 80020aa:	2200      	movs	r2, #0
 80020ac:	2104      	movs	r1, #4
 80020ae:	4812      	ldr	r0, [pc, #72]	; (80020f8 <main+0x1540>)
 80020b0:	f002 f98a 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, C2_Pin, GPIO_PIN_RESET);
 80020b4:	2200      	movs	r2, #0
 80020b6:	2108      	movs	r1, #8
 80020b8:	480f      	ldr	r0, [pc, #60]	; (80020f8 <main+0x1540>)
 80020ba:	f002 f985 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, D2_Pin, GPIO_PIN_SET);
 80020be:	2201      	movs	r2, #1
 80020c0:	2110      	movs	r1, #16
 80020c2:	480d      	ldr	r0, [pc, #52]	; (80020f8 <main+0x1540>)
 80020c4:	f002 f980 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, E2_Pin, GPIO_PIN_SET);
 80020c8:	2201      	movs	r2, #1
 80020ca:	2120      	movs	r1, #32
 80020cc:	480a      	ldr	r0, [pc, #40]	; (80020f8 <main+0x1540>)
 80020ce:	f002 f97b 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, F2_Pin, GPIO_PIN_SET);
 80020d2:	2201      	movs	r2, #1
 80020d4:	2140      	movs	r1, #64	; 0x40
 80020d6:	4808      	ldr	r0, [pc, #32]	; (80020f8 <main+0x1540>)
 80020d8:	f002 f976 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, G2_Pin, GPIO_PIN_SET);
 80020dc:	2201      	movs	r2, #1
 80020de:	2180      	movs	r1, #128	; 0x80
 80020e0:	4805      	ldr	r0, [pc, #20]	; (80020f8 <main+0x1540>)
 80020e2:	f002 f971 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DP2_Pin, GPIO_PIN_SET);
 80020e6:	2201      	movs	r2, #1
 80020e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020ec:	4802      	ldr	r0, [pc, #8]	; (80020f8 <main+0x1540>)
 80020ee:	f002 f96b 	bl	80043c8 <HAL_GPIO_WritePin>
 80020f2:	e233      	b.n	800255c <main+0x19a4>
 80020f4:	48000400 	.word	0x48000400
 80020f8:	48000800 	.word	0x48000800
}
else if (raw >= 3348 && raw < 3472)
 80020fc:	89fb      	ldrh	r3, [r7, #14]
 80020fe:	f640 5213 	movw	r2, #3347	; 0xd13
 8002102:	4293      	cmp	r3, r2
 8002104:	d958      	bls.n	80021b8 <main+0x1600>
 8002106:	89fb      	ldrh	r3, [r7, #14]
 8002108:	f5b3 6f59 	cmp.w	r3, #3472	; 0xd90
 800210c:	d254      	bcs.n	80021b8 <main+0x1600>
{
	// Left num:
	HAL_GPIO_WritePin(GPIOB, A1_Pin, GPIO_PIN_RESET);
 800210e:	2200      	movs	r2, #0
 8002110:	2102      	movs	r1, #2
 8002112:	48b7      	ldr	r0, [pc, #732]	; (80023f0 <main+0x1838>)
 8002114:	f002 f958 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B1_Pin, GPIO_PIN_RESET);
 8002118:	2200      	movs	r2, #0
 800211a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800211e:	48b4      	ldr	r0, [pc, #720]	; (80023f0 <main+0x1838>)
 8002120:	f002 f952 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C1_Pin, GPIO_PIN_SET);
 8002124:	2201      	movs	r2, #1
 8002126:	2110      	movs	r1, #16
 8002128:	48b1      	ldr	r0, [pc, #708]	; (80023f0 <main+0x1838>)
 800212a:	f002 f94d 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D1_Pin, GPIO_PIN_RESET);
 800212e:	2200      	movs	r2, #0
 8002130:	2120      	movs	r1, #32
 8002132:	48af      	ldr	r0, [pc, #700]	; (80023f0 <main+0x1838>)
 8002134:	f002 f948 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, E1_Pin, GPIO_PIN_RESET);
 8002138:	2200      	movs	r2, #0
 800213a:	2140      	movs	r1, #64	; 0x40
 800213c:	48ac      	ldr	r0, [pc, #688]	; (80023f0 <main+0x1838>)
 800213e:	f002 f943 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, F1_Pin, GPIO_PIN_SET);
 8002142:	2201      	movs	r2, #1
 8002144:	2180      	movs	r1, #128	; 0x80
 8002146:	48aa      	ldr	r0, [pc, #680]	; (80023f0 <main+0x1838>)
 8002148:	f002 f93e 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_RESET);
 800214c:	2200      	movs	r2, #0
 800214e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002152:	48a7      	ldr	r0, [pc, #668]	; (80023f0 <main+0x1838>)
 8002154:	f002 f938 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DP1_Pin, GPIO_PIN_RESET);
 8002158:	2200      	movs	r2, #0
 800215a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800215e:	48a4      	ldr	r0, [pc, #656]	; (80023f0 <main+0x1838>)
 8002160:	f002 f932 	bl	80043c8 <HAL_GPIO_WritePin>

	// Right num:
	HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_RESET);
 8002164:	2200      	movs	r2, #0
 8002166:	2102      	movs	r1, #2
 8002168:	48a2      	ldr	r0, [pc, #648]	; (80023f4 <main+0x183c>)
 800216a:	f002 f92d 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, B2_Pin, GPIO_PIN_RESET);
 800216e:	2200      	movs	r2, #0
 8002170:	2104      	movs	r1, #4
 8002172:	48a0      	ldr	r0, [pc, #640]	; (80023f4 <main+0x183c>)
 8002174:	f002 f928 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, C2_Pin, GPIO_PIN_RESET);
 8002178:	2200      	movs	r2, #0
 800217a:	2108      	movs	r1, #8
 800217c:	489d      	ldr	r0, [pc, #628]	; (80023f4 <main+0x183c>)
 800217e:	f002 f923 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, D2_Pin, GPIO_PIN_RESET);
 8002182:	2200      	movs	r2, #0
 8002184:	2110      	movs	r1, #16
 8002186:	489b      	ldr	r0, [pc, #620]	; (80023f4 <main+0x183c>)
 8002188:	f002 f91e 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, E2_Pin, GPIO_PIN_RESET);
 800218c:	2200      	movs	r2, #0
 800218e:	2120      	movs	r1, #32
 8002190:	4898      	ldr	r0, [pc, #608]	; (80023f4 <main+0x183c>)
 8002192:	f002 f919 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, F2_Pin, GPIO_PIN_RESET);
 8002196:	2200      	movs	r2, #0
 8002198:	2140      	movs	r1, #64	; 0x40
 800219a:	4896      	ldr	r0, [pc, #600]	; (80023f4 <main+0x183c>)
 800219c:	f002 f914 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, G2_Pin, GPIO_PIN_RESET);
 80021a0:	2200      	movs	r2, #0
 80021a2:	2180      	movs	r1, #128	; 0x80
 80021a4:	4893      	ldr	r0, [pc, #588]	; (80023f4 <main+0x183c>)
 80021a6:	f002 f90f 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DP2_Pin, GPIO_PIN_SET);
 80021aa:	2201      	movs	r2, #1
 80021ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021b0:	4890      	ldr	r0, [pc, #576]	; (80023f4 <main+0x183c>)
 80021b2:	f002 f909 	bl	80043c8 <HAL_GPIO_WritePin>
 80021b6:	e1d1      	b.n	800255c <main+0x19a4>
}
else if (raw >= 3472 && raw < 3596)
 80021b8:	89fb      	ldrh	r3, [r7, #14]
 80021ba:	f5b3 6f59 	cmp.w	r3, #3472	; 0xd90
 80021be:	d359      	bcc.n	8002274 <main+0x16bc>
 80021c0:	89fb      	ldrh	r3, [r7, #14]
 80021c2:	f640 620b 	movw	r2, #3595	; 0xe0b
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d854      	bhi.n	8002274 <main+0x16bc>
{
	// Left num:
	HAL_GPIO_WritePin(GPIOB, A1_Pin, GPIO_PIN_RESET);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2102      	movs	r1, #2
 80021ce:	4888      	ldr	r0, [pc, #544]	; (80023f0 <main+0x1838>)
 80021d0:	f002 f8fa 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B1_Pin, GPIO_PIN_RESET);
 80021d4:	2200      	movs	r2, #0
 80021d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021da:	4885      	ldr	r0, [pc, #532]	; (80023f0 <main+0x1838>)
 80021dc:	f002 f8f4 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C1_Pin, GPIO_PIN_SET);
 80021e0:	2201      	movs	r2, #1
 80021e2:	2110      	movs	r1, #16
 80021e4:	4882      	ldr	r0, [pc, #520]	; (80023f0 <main+0x1838>)
 80021e6:	f002 f8ef 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D1_Pin, GPIO_PIN_RESET);
 80021ea:	2200      	movs	r2, #0
 80021ec:	2120      	movs	r1, #32
 80021ee:	4880      	ldr	r0, [pc, #512]	; (80023f0 <main+0x1838>)
 80021f0:	f002 f8ea 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, E1_Pin, GPIO_PIN_RESET);
 80021f4:	2200      	movs	r2, #0
 80021f6:	2140      	movs	r1, #64	; 0x40
 80021f8:	487d      	ldr	r0, [pc, #500]	; (80023f0 <main+0x1838>)
 80021fa:	f002 f8e5 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, F1_Pin, GPIO_PIN_SET);
 80021fe:	2201      	movs	r2, #1
 8002200:	2180      	movs	r1, #128	; 0x80
 8002202:	487b      	ldr	r0, [pc, #492]	; (80023f0 <main+0x1838>)
 8002204:	f002 f8e0 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_RESET);
 8002208:	2200      	movs	r2, #0
 800220a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800220e:	4878      	ldr	r0, [pc, #480]	; (80023f0 <main+0x1838>)
 8002210:	f002 f8da 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DP1_Pin, GPIO_PIN_RESET);
 8002214:	2200      	movs	r2, #0
 8002216:	f44f 7100 	mov.w	r1, #512	; 0x200
 800221a:	4875      	ldr	r0, [pc, #468]	; (80023f0 <main+0x1838>)
 800221c:	f002 f8d4 	bl	80043c8 <HAL_GPIO_WritePin>

	// Right num:
	HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_RESET);
 8002220:	2200      	movs	r2, #0
 8002222:	2102      	movs	r1, #2
 8002224:	4873      	ldr	r0, [pc, #460]	; (80023f4 <main+0x183c>)
 8002226:	f002 f8cf 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, B2_Pin, GPIO_PIN_RESET);
 800222a:	2200      	movs	r2, #0
 800222c:	2104      	movs	r1, #4
 800222e:	4871      	ldr	r0, [pc, #452]	; (80023f4 <main+0x183c>)
 8002230:	f002 f8ca 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, C2_Pin, GPIO_PIN_RESET);
 8002234:	2200      	movs	r2, #0
 8002236:	2108      	movs	r1, #8
 8002238:	486e      	ldr	r0, [pc, #440]	; (80023f4 <main+0x183c>)
 800223a:	f002 f8c5 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, D2_Pin, GPIO_PIN_RESET);
 800223e:	2200      	movs	r2, #0
 8002240:	2110      	movs	r1, #16
 8002242:	486c      	ldr	r0, [pc, #432]	; (80023f4 <main+0x183c>)
 8002244:	f002 f8c0 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, E2_Pin, GPIO_PIN_SET);
 8002248:	2201      	movs	r2, #1
 800224a:	2120      	movs	r1, #32
 800224c:	4869      	ldr	r0, [pc, #420]	; (80023f4 <main+0x183c>)
 800224e:	f002 f8bb 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, F2_Pin, GPIO_PIN_RESET);
 8002252:	2200      	movs	r2, #0
 8002254:	2140      	movs	r1, #64	; 0x40
 8002256:	4867      	ldr	r0, [pc, #412]	; (80023f4 <main+0x183c>)
 8002258:	f002 f8b6 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, G2_Pin, GPIO_PIN_RESET);
 800225c:	2200      	movs	r2, #0
 800225e:	2180      	movs	r1, #128	; 0x80
 8002260:	4864      	ldr	r0, [pc, #400]	; (80023f4 <main+0x183c>)
 8002262:	f002 f8b1 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DP2_Pin, GPIO_PIN_SET);
 8002266:	2201      	movs	r2, #1
 8002268:	f44f 7180 	mov.w	r1, #256	; 0x100
 800226c:	4861      	ldr	r0, [pc, #388]	; (80023f4 <main+0x183c>)
 800226e:	f002 f8ab 	bl	80043c8 <HAL_GPIO_WritePin>
 8002272:	e173      	b.n	800255c <main+0x19a4>
}
else if (raw >= 3596 && raw < 3720) // 3.0
 8002274:	89fb      	ldrh	r3, [r7, #14]
 8002276:	f640 620b 	movw	r2, #3595	; 0xe0b
 800227a:	4293      	cmp	r3, r2
 800227c:	d959      	bls.n	8002332 <main+0x177a>
 800227e:	89fb      	ldrh	r3, [r7, #14]
 8002280:	f640 6287 	movw	r2, #3719	; 0xe87
 8002284:	4293      	cmp	r3, r2
 8002286:	d854      	bhi.n	8002332 <main+0x177a>
{
	// Left num:
	HAL_GPIO_WritePin(GPIOB, A1_Pin, GPIO_PIN_RESET);
 8002288:	2200      	movs	r2, #0
 800228a:	2102      	movs	r1, #2
 800228c:	4858      	ldr	r0, [pc, #352]	; (80023f0 <main+0x1838>)
 800228e:	f002 f89b 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B1_Pin, GPIO_PIN_RESET);
 8002292:	2200      	movs	r2, #0
 8002294:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002298:	4855      	ldr	r0, [pc, #340]	; (80023f0 <main+0x1838>)
 800229a:	f002 f895 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C1_Pin, GPIO_PIN_RESET);
 800229e:	2200      	movs	r2, #0
 80022a0:	2110      	movs	r1, #16
 80022a2:	4853      	ldr	r0, [pc, #332]	; (80023f0 <main+0x1838>)
 80022a4:	f002 f890 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D1_Pin, GPIO_PIN_RESET);
 80022a8:	2200      	movs	r2, #0
 80022aa:	2120      	movs	r1, #32
 80022ac:	4850      	ldr	r0, [pc, #320]	; (80023f0 <main+0x1838>)
 80022ae:	f002 f88b 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, E1_Pin, GPIO_PIN_SET);
 80022b2:	2201      	movs	r2, #1
 80022b4:	2140      	movs	r1, #64	; 0x40
 80022b6:	484e      	ldr	r0, [pc, #312]	; (80023f0 <main+0x1838>)
 80022b8:	f002 f886 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, F1_Pin, GPIO_PIN_SET);
 80022bc:	2201      	movs	r2, #1
 80022be:	2180      	movs	r1, #128	; 0x80
 80022c0:	484b      	ldr	r0, [pc, #300]	; (80023f0 <main+0x1838>)
 80022c2:	f002 f881 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_RESET);
 80022c6:	2200      	movs	r2, #0
 80022c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022cc:	4848      	ldr	r0, [pc, #288]	; (80023f0 <main+0x1838>)
 80022ce:	f002 f87b 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DP1_Pin, GPIO_PIN_RESET);
 80022d2:	2200      	movs	r2, #0
 80022d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022d8:	4845      	ldr	r0, [pc, #276]	; (80023f0 <main+0x1838>)
 80022da:	f002 f875 	bl	80043c8 <HAL_GPIO_WritePin>

	// Right num:
	HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_RESET);
 80022de:	2200      	movs	r2, #0
 80022e0:	2102      	movs	r1, #2
 80022e2:	4844      	ldr	r0, [pc, #272]	; (80023f4 <main+0x183c>)
 80022e4:	f002 f870 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, B2_Pin, GPIO_PIN_RESET);
 80022e8:	2200      	movs	r2, #0
 80022ea:	2104      	movs	r1, #4
 80022ec:	4841      	ldr	r0, [pc, #260]	; (80023f4 <main+0x183c>)
 80022ee:	f002 f86b 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, C2_Pin, GPIO_PIN_RESET);
 80022f2:	2200      	movs	r2, #0
 80022f4:	2108      	movs	r1, #8
 80022f6:	483f      	ldr	r0, [pc, #252]	; (80023f4 <main+0x183c>)
 80022f8:	f002 f866 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, D2_Pin, GPIO_PIN_RESET);
 80022fc:	2200      	movs	r2, #0
 80022fe:	2110      	movs	r1, #16
 8002300:	483c      	ldr	r0, [pc, #240]	; (80023f4 <main+0x183c>)
 8002302:	f002 f861 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, E2_Pin, GPIO_PIN_RESET);
 8002306:	2200      	movs	r2, #0
 8002308:	2120      	movs	r1, #32
 800230a:	483a      	ldr	r0, [pc, #232]	; (80023f4 <main+0x183c>)
 800230c:	f002 f85c 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, F2_Pin, GPIO_PIN_RESET);
 8002310:	2200      	movs	r2, #0
 8002312:	2140      	movs	r1, #64	; 0x40
 8002314:	4837      	ldr	r0, [pc, #220]	; (80023f4 <main+0x183c>)
 8002316:	f002 f857 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, G2_Pin, GPIO_PIN_RESET);
 800231a:	2200      	movs	r2, #0
 800231c:	2180      	movs	r1, #128	; 0x80
 800231e:	4835      	ldr	r0, [pc, #212]	; (80023f4 <main+0x183c>)
 8002320:	f002 f852 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DP2_Pin, GPIO_PIN_SET);
 8002324:	2201      	movs	r2, #1
 8002326:	f44f 7180 	mov.w	r1, #256	; 0x100
 800232a:	4832      	ldr	r0, [pc, #200]	; (80023f4 <main+0x183c>)
 800232c:	f002 f84c 	bl	80043c8 <HAL_GPIO_WritePin>
 8002330:	e114      	b.n	800255c <main+0x19a4>
}
else if (raw >= 3720 && raw < 3844)
 8002332:	89fb      	ldrh	r3, [r7, #14]
 8002334:	f640 6287 	movw	r2, #3719	; 0xe87
 8002338:	4293      	cmp	r3, r2
 800233a:	d95d      	bls.n	80023f8 <main+0x1840>
 800233c:	89fb      	ldrh	r3, [r7, #14]
 800233e:	f640 7203 	movw	r2, #3843	; 0xf03
 8002342:	4293      	cmp	r3, r2
 8002344:	d858      	bhi.n	80023f8 <main+0x1840>
{
	// Left num:
	HAL_GPIO_WritePin(GPIOB, A1_Pin, GPIO_PIN_RESET);
 8002346:	2200      	movs	r2, #0
 8002348:	2102      	movs	r1, #2
 800234a:	4829      	ldr	r0, [pc, #164]	; (80023f0 <main+0x1838>)
 800234c:	f002 f83c 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B1_Pin, GPIO_PIN_RESET);
 8002350:	2200      	movs	r2, #0
 8002352:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002356:	4826      	ldr	r0, [pc, #152]	; (80023f0 <main+0x1838>)
 8002358:	f002 f836 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C1_Pin, GPIO_PIN_RESET);
 800235c:	2200      	movs	r2, #0
 800235e:	2110      	movs	r1, #16
 8002360:	4823      	ldr	r0, [pc, #140]	; (80023f0 <main+0x1838>)
 8002362:	f002 f831 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D1_Pin, GPIO_PIN_RESET);
 8002366:	2200      	movs	r2, #0
 8002368:	2120      	movs	r1, #32
 800236a:	4821      	ldr	r0, [pc, #132]	; (80023f0 <main+0x1838>)
 800236c:	f002 f82c 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, E1_Pin, GPIO_PIN_SET);
 8002370:	2201      	movs	r2, #1
 8002372:	2140      	movs	r1, #64	; 0x40
 8002374:	481e      	ldr	r0, [pc, #120]	; (80023f0 <main+0x1838>)
 8002376:	f002 f827 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, F1_Pin, GPIO_PIN_SET);
 800237a:	2201      	movs	r2, #1
 800237c:	2180      	movs	r1, #128	; 0x80
 800237e:	481c      	ldr	r0, [pc, #112]	; (80023f0 <main+0x1838>)
 8002380:	f002 f822 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_RESET);
 8002384:	2200      	movs	r2, #0
 8002386:	f44f 7180 	mov.w	r1, #256	; 0x100
 800238a:	4819      	ldr	r0, [pc, #100]	; (80023f0 <main+0x1838>)
 800238c:	f002 f81c 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DP1_Pin, GPIO_PIN_RESET);
 8002390:	2200      	movs	r2, #0
 8002392:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002396:	4816      	ldr	r0, [pc, #88]	; (80023f0 <main+0x1838>)
 8002398:	f002 f816 	bl	80043c8 <HAL_GPIO_WritePin>

	// Right num:
	HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_SET);
 800239c:	2201      	movs	r2, #1
 800239e:	2102      	movs	r1, #2
 80023a0:	4814      	ldr	r0, [pc, #80]	; (80023f4 <main+0x183c>)
 80023a2:	f002 f811 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, B2_Pin, GPIO_PIN_RESET);
 80023a6:	2200      	movs	r2, #0
 80023a8:	2104      	movs	r1, #4
 80023aa:	4812      	ldr	r0, [pc, #72]	; (80023f4 <main+0x183c>)
 80023ac:	f002 f80c 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, C2_Pin, GPIO_PIN_RESET);
 80023b0:	2200      	movs	r2, #0
 80023b2:	2108      	movs	r1, #8
 80023b4:	480f      	ldr	r0, [pc, #60]	; (80023f4 <main+0x183c>)
 80023b6:	f002 f807 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, D2_Pin, GPIO_PIN_SET);
 80023ba:	2201      	movs	r2, #1
 80023bc:	2110      	movs	r1, #16
 80023be:	480d      	ldr	r0, [pc, #52]	; (80023f4 <main+0x183c>)
 80023c0:	f002 f802 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, E2_Pin, GPIO_PIN_SET);
 80023c4:	2201      	movs	r2, #1
 80023c6:	2120      	movs	r1, #32
 80023c8:	480a      	ldr	r0, [pc, #40]	; (80023f4 <main+0x183c>)
 80023ca:	f001 fffd 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, F2_Pin, GPIO_PIN_SET);
 80023ce:	2201      	movs	r2, #1
 80023d0:	2140      	movs	r1, #64	; 0x40
 80023d2:	4808      	ldr	r0, [pc, #32]	; (80023f4 <main+0x183c>)
 80023d4:	f001 fff8 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, G2_Pin, GPIO_PIN_SET);
 80023d8:	2201      	movs	r2, #1
 80023da:	2180      	movs	r1, #128	; 0x80
 80023dc:	4805      	ldr	r0, [pc, #20]	; (80023f4 <main+0x183c>)
 80023de:	f001 fff3 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DP2_Pin, GPIO_PIN_SET);
 80023e2:	2201      	movs	r2, #1
 80023e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023e8:	4802      	ldr	r0, [pc, #8]	; (80023f4 <main+0x183c>)
 80023ea:	f001 ffed 	bl	80043c8 <HAL_GPIO_WritePin>
 80023ee:	e0b5      	b.n	800255c <main+0x19a4>
 80023f0:	48000400 	.word	0x48000400
 80023f4:	48000800 	.word	0x48000800
}
else if (raw >= 3844 && raw < 3968)
 80023f8:	89fb      	ldrh	r3, [r7, #14]
 80023fa:	f640 7203 	movw	r2, #3843	; 0xf03
 80023fe:	4293      	cmp	r3, r2
 8002400:	d958      	bls.n	80024b4 <main+0x18fc>
 8002402:	89fb      	ldrh	r3, [r7, #14]
 8002404:	f5b3 6f78 	cmp.w	r3, #3968	; 0xf80
 8002408:	d254      	bcs.n	80024b4 <main+0x18fc>
{
	// Left num:
	HAL_GPIO_WritePin(GPIOB, A1_Pin, GPIO_PIN_RESET);
 800240a:	2200      	movs	r2, #0
 800240c:	2102      	movs	r1, #2
 800240e:	4856      	ldr	r0, [pc, #344]	; (8002568 <main+0x19b0>)
 8002410:	f001 ffda 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B1_Pin, GPIO_PIN_RESET);
 8002414:	2200      	movs	r2, #0
 8002416:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800241a:	4853      	ldr	r0, [pc, #332]	; (8002568 <main+0x19b0>)
 800241c:	f001 ffd4 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C1_Pin, GPIO_PIN_RESET);
 8002420:	2200      	movs	r2, #0
 8002422:	2110      	movs	r1, #16
 8002424:	4850      	ldr	r0, [pc, #320]	; (8002568 <main+0x19b0>)
 8002426:	f001 ffcf 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D1_Pin, GPIO_PIN_RESET);
 800242a:	2200      	movs	r2, #0
 800242c:	2120      	movs	r1, #32
 800242e:	484e      	ldr	r0, [pc, #312]	; (8002568 <main+0x19b0>)
 8002430:	f001 ffca 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, E1_Pin, GPIO_PIN_SET);
 8002434:	2201      	movs	r2, #1
 8002436:	2140      	movs	r1, #64	; 0x40
 8002438:	484b      	ldr	r0, [pc, #300]	; (8002568 <main+0x19b0>)
 800243a:	f001 ffc5 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, F1_Pin, GPIO_PIN_SET);
 800243e:	2201      	movs	r2, #1
 8002440:	2180      	movs	r1, #128	; 0x80
 8002442:	4849      	ldr	r0, [pc, #292]	; (8002568 <main+0x19b0>)
 8002444:	f001 ffc0 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_RESET);
 8002448:	2200      	movs	r2, #0
 800244a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800244e:	4846      	ldr	r0, [pc, #280]	; (8002568 <main+0x19b0>)
 8002450:	f001 ffba 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DP1_Pin, GPIO_PIN_RESET);
 8002454:	2200      	movs	r2, #0
 8002456:	f44f 7100 	mov.w	r1, #512	; 0x200
 800245a:	4843      	ldr	r0, [pc, #268]	; (8002568 <main+0x19b0>)
 800245c:	f001 ffb4 	bl	80043c8 <HAL_GPIO_WritePin>

	// Right num:
	HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_RESET);
 8002460:	2200      	movs	r2, #0
 8002462:	2102      	movs	r1, #2
 8002464:	4841      	ldr	r0, [pc, #260]	; (800256c <main+0x19b4>)
 8002466:	f001 ffaf 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, B2_Pin, GPIO_PIN_RESET);
 800246a:	2200      	movs	r2, #0
 800246c:	2104      	movs	r1, #4
 800246e:	483f      	ldr	r0, [pc, #252]	; (800256c <main+0x19b4>)
 8002470:	f001 ffaa 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, C2_Pin, GPIO_PIN_SET);
 8002474:	2201      	movs	r2, #1
 8002476:	2108      	movs	r1, #8
 8002478:	483c      	ldr	r0, [pc, #240]	; (800256c <main+0x19b4>)
 800247a:	f001 ffa5 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, D2_Pin, GPIO_PIN_RESET);
 800247e:	2200      	movs	r2, #0
 8002480:	2110      	movs	r1, #16
 8002482:	483a      	ldr	r0, [pc, #232]	; (800256c <main+0x19b4>)
 8002484:	f001 ffa0 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, E2_Pin, GPIO_PIN_RESET);
 8002488:	2200      	movs	r2, #0
 800248a:	2120      	movs	r1, #32
 800248c:	4837      	ldr	r0, [pc, #220]	; (800256c <main+0x19b4>)
 800248e:	f001 ff9b 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, F2_Pin, GPIO_PIN_SET);
 8002492:	2201      	movs	r2, #1
 8002494:	2140      	movs	r1, #64	; 0x40
 8002496:	4835      	ldr	r0, [pc, #212]	; (800256c <main+0x19b4>)
 8002498:	f001 ff96 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, G2_Pin, GPIO_PIN_RESET);
 800249c:	2200      	movs	r2, #0
 800249e:	2180      	movs	r1, #128	; 0x80
 80024a0:	4832      	ldr	r0, [pc, #200]	; (800256c <main+0x19b4>)
 80024a2:	f001 ff91 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DP2_Pin, GPIO_PIN_SET);
 80024a6:	2201      	movs	r2, #1
 80024a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024ac:	482f      	ldr	r0, [pc, #188]	; (800256c <main+0x19b4>)
 80024ae:	f001 ff8b 	bl	80043c8 <HAL_GPIO_WritePin>
 80024b2:	e053      	b.n	800255c <main+0x19a4>
}
else
{
	// Left num:
	HAL_GPIO_WritePin(GPIOB, A1_Pin, GPIO_PIN_RESET);
 80024b4:	2200      	movs	r2, #0
 80024b6:	2102      	movs	r1, #2
 80024b8:	482b      	ldr	r0, [pc, #172]	; (8002568 <main+0x19b0>)
 80024ba:	f001 ff85 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B1_Pin, GPIO_PIN_RESET);
 80024be:	2200      	movs	r2, #0
 80024c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024c4:	4828      	ldr	r0, [pc, #160]	; (8002568 <main+0x19b0>)
 80024c6:	f001 ff7f 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C1_Pin, GPIO_PIN_RESET);
 80024ca:	2200      	movs	r2, #0
 80024cc:	2110      	movs	r1, #16
 80024ce:	4826      	ldr	r0, [pc, #152]	; (8002568 <main+0x19b0>)
 80024d0:	f001 ff7a 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D1_Pin, GPIO_PIN_RESET);
 80024d4:	2200      	movs	r2, #0
 80024d6:	2120      	movs	r1, #32
 80024d8:	4823      	ldr	r0, [pc, #140]	; (8002568 <main+0x19b0>)
 80024da:	f001 ff75 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, E1_Pin, GPIO_PIN_SET);
 80024de:	2201      	movs	r2, #1
 80024e0:	2140      	movs	r1, #64	; 0x40
 80024e2:	4821      	ldr	r0, [pc, #132]	; (8002568 <main+0x19b0>)
 80024e4:	f001 ff70 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, F1_Pin, GPIO_PIN_SET);
 80024e8:	2201      	movs	r2, #1
 80024ea:	2180      	movs	r1, #128	; 0x80
 80024ec:	481e      	ldr	r0, [pc, #120]	; (8002568 <main+0x19b0>)
 80024ee:	f001 ff6b 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_RESET);
 80024f2:	2200      	movs	r2, #0
 80024f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024f8:	481b      	ldr	r0, [pc, #108]	; (8002568 <main+0x19b0>)
 80024fa:	f001 ff65 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DP1_Pin, GPIO_PIN_RESET);
 80024fe:	2200      	movs	r2, #0
 8002500:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002504:	4818      	ldr	r0, [pc, #96]	; (8002568 <main+0x19b0>)
 8002506:	f001 ff5f 	bl	80043c8 <HAL_GPIO_WritePin>

	// Right num:
	HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_RESET);
 800250a:	2200      	movs	r2, #0
 800250c:	2102      	movs	r1, #2
 800250e:	4817      	ldr	r0, [pc, #92]	; (800256c <main+0x19b4>)
 8002510:	f001 ff5a 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, B2_Pin, GPIO_PIN_RESET);
 8002514:	2200      	movs	r2, #0
 8002516:	2104      	movs	r1, #4
 8002518:	4814      	ldr	r0, [pc, #80]	; (800256c <main+0x19b4>)
 800251a:	f001 ff55 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, C2_Pin, GPIO_PIN_RESET);
 800251e:	2200      	movs	r2, #0
 8002520:	2108      	movs	r1, #8
 8002522:	4812      	ldr	r0, [pc, #72]	; (800256c <main+0x19b4>)
 8002524:	f001 ff50 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, D2_Pin, GPIO_PIN_RESET);
 8002528:	2200      	movs	r2, #0
 800252a:	2110      	movs	r1, #16
 800252c:	480f      	ldr	r0, [pc, #60]	; (800256c <main+0x19b4>)
 800252e:	f001 ff4b 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, E2_Pin, GPIO_PIN_SET);
 8002532:	2201      	movs	r2, #1
 8002534:	2120      	movs	r1, #32
 8002536:	480d      	ldr	r0, [pc, #52]	; (800256c <main+0x19b4>)
 8002538:	f001 ff46 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, F2_Pin, GPIO_PIN_SET);
 800253c:	2201      	movs	r2, #1
 800253e:	2140      	movs	r1, #64	; 0x40
 8002540:	480a      	ldr	r0, [pc, #40]	; (800256c <main+0x19b4>)
 8002542:	f001 ff41 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, G2_Pin, GPIO_PIN_RESET);
 8002546:	2200      	movs	r2, #0
 8002548:	2180      	movs	r1, #128	; 0x80
 800254a:	4808      	ldr	r0, [pc, #32]	; (800256c <main+0x19b4>)
 800254c:	f001 ff3c 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DP2_Pin, GPIO_PIN_SET);
 8002550:	2201      	movs	r2, #1
 8002552:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002556:	4805      	ldr	r0, [pc, #20]	; (800256c <main+0x19b4>)
 8002558:	f001 ff36 	bl	80043c8 <HAL_GPIO_WritePin>
}

HAL_Delay(100);
 800255c:	2064      	movs	r0, #100	; 0x64
 800255e:	f000 fbd7 	bl	8002d10 <HAL_Delay>
HAL_ADC_Start(&hadc1);
 8002562:	f7fe bb36 	b.w	8000bd2 <main+0x1a>
 8002566:	bf00      	nop
 8002568:	48000400 	.word	0x48000400
 800256c:	48000800 	.word	0x48000800

08002570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b0a6      	sub	sp, #152	; 0x98
 8002574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002576:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800257a:	2228      	movs	r2, #40	; 0x28
 800257c:	2100      	movs	r1, #0
 800257e:	4618      	mov	r0, r3
 8002580:	f003 ff80 	bl	8006484 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002584:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	605a      	str	r2, [r3, #4]
 800258e:	609a      	str	r2, [r3, #8]
 8002590:	60da      	str	r2, [r3, #12]
 8002592:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002594:	1d3b      	adds	r3, r7, #4
 8002596:	2258      	movs	r2, #88	; 0x58
 8002598:	2100      	movs	r1, #0
 800259a:	4618      	mov	r0, r3
 800259c:	f003 ff72 	bl	8006484 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025a0:	2302      	movs	r3, #2
 80025a2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025a4:	2301      	movs	r3, #1
 80025a6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025a8:	2310      	movs	r3, #16
 80025aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025ae:	2302      	movs	r3, #2
 80025b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80025bc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80025c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80025c4:	2300      	movs	r3, #0
 80025c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80025ce:	4618      	mov	r0, r3
 80025d0:	f001 ff12 	bl	80043f8 <HAL_RCC_OscConfig>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80025da:	f000 f95f 	bl	800289c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025de:	230f      	movs	r3, #15
 80025e0:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025e2:	2302      	movs	r3, #2
 80025e4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025e6:	2300      	movs	r3, #0
 80025e8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025ee:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025f0:	2300      	movs	r3, #0
 80025f2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80025f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80025f8:	2102      	movs	r1, #2
 80025fa:	4618      	mov	r0, r3
 80025fc:	f002 fe12 	bl	8005224 <HAL_RCC_ClockConfig>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002606:	f000 f949 	bl	800289c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 800260a:	2382      	movs	r3, #130	; 0x82
 800260c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800260e:	2300      	movs	r3, #0
 8002610:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8002612:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002616:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002618:	1d3b      	adds	r3, r7, #4
 800261a:	4618      	mov	r0, r3
 800261c:	f003 f822 	bl	8005664 <HAL_RCCEx_PeriphCLKConfig>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8002626:	f000 f939 	bl	800289c <Error_Handler>
  }
}
 800262a:	bf00      	nop
 800262c:	3798      	adds	r7, #152	; 0x98
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
	...

08002634 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08a      	sub	sp, #40	; 0x28
 8002638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800263a:	f107 031c 	add.w	r3, r7, #28
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	605a      	str	r2, [r3, #4]
 8002644:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002646:	1d3b      	adds	r3, r7, #4
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	60da      	str	r2, [r3, #12]
 8002652:	611a      	str	r2, [r3, #16]
 8002654:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002656:	4b2e      	ldr	r3, [pc, #184]	; (8002710 <MX_ADC1_Init+0xdc>)
 8002658:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800265c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800265e:	4b2c      	ldr	r3, [pc, #176]	; (8002710 <MX_ADC1_Init+0xdc>)
 8002660:	2200      	movs	r2, #0
 8002662:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002664:	4b2a      	ldr	r3, [pc, #168]	; (8002710 <MX_ADC1_Init+0xdc>)
 8002666:	2200      	movs	r2, #0
 8002668:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800266a:	4b29      	ldr	r3, [pc, #164]	; (8002710 <MX_ADC1_Init+0xdc>)
 800266c:	2200      	movs	r2, #0
 800266e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002670:	4b27      	ldr	r3, [pc, #156]	; (8002710 <MX_ADC1_Init+0xdc>)
 8002672:	2200      	movs	r2, #0
 8002674:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002676:	4b26      	ldr	r3, [pc, #152]	; (8002710 <MX_ADC1_Init+0xdc>)
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800267e:	4b24      	ldr	r3, [pc, #144]	; (8002710 <MX_ADC1_Init+0xdc>)
 8002680:	2200      	movs	r2, #0
 8002682:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002684:	4b22      	ldr	r3, [pc, #136]	; (8002710 <MX_ADC1_Init+0xdc>)
 8002686:	2201      	movs	r2, #1
 8002688:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800268a:	4b21      	ldr	r3, [pc, #132]	; (8002710 <MX_ADC1_Init+0xdc>)
 800268c:	2200      	movs	r2, #0
 800268e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002690:	4b1f      	ldr	r3, [pc, #124]	; (8002710 <MX_ADC1_Init+0xdc>)
 8002692:	2201      	movs	r2, #1
 8002694:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002696:	4b1e      	ldr	r3, [pc, #120]	; (8002710 <MX_ADC1_Init+0xdc>)
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800269e:	4b1c      	ldr	r3, [pc, #112]	; (8002710 <MX_ADC1_Init+0xdc>)
 80026a0:	2204      	movs	r2, #4
 80026a2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80026a4:	4b1a      	ldr	r3, [pc, #104]	; (8002710 <MX_ADC1_Init+0xdc>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80026aa:	4b19      	ldr	r3, [pc, #100]	; (8002710 <MX_ADC1_Init+0xdc>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80026b0:	4817      	ldr	r0, [pc, #92]	; (8002710 <MX_ADC1_Init+0xdc>)
 80026b2:	f000 fb51 	bl	8002d58 <HAL_ADC_Init>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80026bc:	f000 f8ee 	bl	800289c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80026c0:	2300      	movs	r3, #0
 80026c2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80026c4:	f107 031c 	add.w	r3, r7, #28
 80026c8:	4619      	mov	r1, r3
 80026ca:	4811      	ldr	r0, [pc, #68]	; (8002710 <MX_ADC1_Init+0xdc>)
 80026cc:	f001 fa50 	bl	8003b70 <HAL_ADCEx_MultiModeConfigChannel>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80026d6:	f000 f8e1 	bl	800289c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80026da:	2301      	movs	r3, #1
 80026dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80026de:	2301      	movs	r3, #1
 80026e0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80026ea:	2300      	movs	r3, #0
 80026ec:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80026ee:	2300      	movs	r3, #0
 80026f0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026f2:	1d3b      	adds	r3, r7, #4
 80026f4:	4619      	mov	r1, r3
 80026f6:	4806      	ldr	r0, [pc, #24]	; (8002710 <MX_ADC1_Init+0xdc>)
 80026f8:	f000 ff4e 	bl	8003598 <HAL_ADC_ConfigChannel>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8002702:	f000 f8cb 	bl	800289c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002706:	bf00      	nop
 8002708:	3728      	adds	r7, #40	; 0x28
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20000204 	.word	0x20000204

08002714 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002718:	4b14      	ldr	r3, [pc, #80]	; (800276c <MX_USART2_UART_Init+0x58>)
 800271a:	4a15      	ldr	r2, [pc, #84]	; (8002770 <MX_USART2_UART_Init+0x5c>)
 800271c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800271e:	4b13      	ldr	r3, [pc, #76]	; (800276c <MX_USART2_UART_Init+0x58>)
 8002720:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002724:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002726:	4b11      	ldr	r3, [pc, #68]	; (800276c <MX_USART2_UART_Init+0x58>)
 8002728:	2200      	movs	r2, #0
 800272a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800272c:	4b0f      	ldr	r3, [pc, #60]	; (800276c <MX_USART2_UART_Init+0x58>)
 800272e:	2200      	movs	r2, #0
 8002730:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002732:	4b0e      	ldr	r3, [pc, #56]	; (800276c <MX_USART2_UART_Init+0x58>)
 8002734:	2200      	movs	r2, #0
 8002736:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002738:	4b0c      	ldr	r3, [pc, #48]	; (800276c <MX_USART2_UART_Init+0x58>)
 800273a:	220c      	movs	r2, #12
 800273c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800273e:	4b0b      	ldr	r3, [pc, #44]	; (800276c <MX_USART2_UART_Init+0x58>)
 8002740:	2200      	movs	r2, #0
 8002742:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002744:	4b09      	ldr	r3, [pc, #36]	; (800276c <MX_USART2_UART_Init+0x58>)
 8002746:	2200      	movs	r2, #0
 8002748:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800274a:	4b08      	ldr	r3, [pc, #32]	; (800276c <MX_USART2_UART_Init+0x58>)
 800274c:	2200      	movs	r2, #0
 800274e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <MX_USART2_UART_Init+0x58>)
 8002752:	2200      	movs	r2, #0
 8002754:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002756:	4805      	ldr	r0, [pc, #20]	; (800276c <MX_USART2_UART_Init+0x58>)
 8002758:	f003 f9a2 	bl	8005aa0 <HAL_UART_Init>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002762:	f000 f89b 	bl	800289c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20000254 	.word	0x20000254
 8002770:	40004400 	.word	0x40004400

08002774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08a      	sub	sp, #40	; 0x28
 8002778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800277a:	f107 0314 	add.w	r3, r7, #20
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	605a      	str	r2, [r3, #4]
 8002784:	609a      	str	r2, [r3, #8]
 8002786:	60da      	str	r2, [r3, #12]
 8002788:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800278a:	4b41      	ldr	r3, [pc, #260]	; (8002890 <MX_GPIO_Init+0x11c>)
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	4a40      	ldr	r2, [pc, #256]	; (8002890 <MX_GPIO_Init+0x11c>)
 8002790:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002794:	6153      	str	r3, [r2, #20]
 8002796:	4b3e      	ldr	r3, [pc, #248]	; (8002890 <MX_GPIO_Init+0x11c>)
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800279e:	613b      	str	r3, [r7, #16]
 80027a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80027a2:	4b3b      	ldr	r3, [pc, #236]	; (8002890 <MX_GPIO_Init+0x11c>)
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	4a3a      	ldr	r2, [pc, #232]	; (8002890 <MX_GPIO_Init+0x11c>)
 80027a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027ac:	6153      	str	r3, [r2, #20]
 80027ae:	4b38      	ldr	r3, [pc, #224]	; (8002890 <MX_GPIO_Init+0x11c>)
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ba:	4b35      	ldr	r3, [pc, #212]	; (8002890 <MX_GPIO_Init+0x11c>)
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	4a34      	ldr	r2, [pc, #208]	; (8002890 <MX_GPIO_Init+0x11c>)
 80027c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c4:	6153      	str	r3, [r2, #20]
 80027c6:	4b32      	ldr	r3, [pc, #200]	; (8002890 <MX_GPIO_Init+0x11c>)
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027d2:	4b2f      	ldr	r3, [pc, #188]	; (8002890 <MX_GPIO_Init+0x11c>)
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	4a2e      	ldr	r2, [pc, #184]	; (8002890 <MX_GPIO_Init+0x11c>)
 80027d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027dc:	6153      	str	r3, [r2, #20]
 80027de:	4b2c      	ldr	r3, [pc, #176]	; (8002890 <MX_GPIO_Init+0x11c>)
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027e6:	607b      	str	r3, [r7, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A2_Pin|B2_Pin|C2_Pin|D2_Pin
 80027ea:	2200      	movs	r2, #0
 80027ec:	f640 51fe 	movw	r1, #3582	; 0xdfe
 80027f0:	4828      	ldr	r0, [pc, #160]	; (8002894 <MX_GPIO_Init+0x120>)
 80027f2:	f001 fde9 	bl	80043c8 <HAL_GPIO_WritePin>
                          |E2_Pin|F2_Pin|G2_Pin|DP2_Pin
                          |LEFT_DISPLAY_Pin|RIGHT_DISPLAY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 80027f6:	2200      	movs	r2, #0
 80027f8:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80027fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002800:	f001 fde2 	bl	80043c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A1_Pin|B1B2_Pin|C1_Pin|D1_Pin
 8002804:	2200      	movs	r2, #0
 8002806:	f240 31f6 	movw	r1, #1014	; 0x3f6
 800280a:	4823      	ldr	r0, [pc, #140]	; (8002898 <MX_GPIO_Init+0x124>)
 800280c:	f001 fddc 	bl	80043c8 <HAL_GPIO_WritePin>
                          |E1_Pin|F1_Pin|G1_Pin|DP1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002810:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002816:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800281a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281c:	2300      	movs	r3, #0
 800281e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002820:	f107 0314 	add.w	r3, r7, #20
 8002824:	4619      	mov	r1, r3
 8002826:	481b      	ldr	r0, [pc, #108]	; (8002894 <MX_GPIO_Init+0x120>)
 8002828:	f001 fc44 	bl	80040b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A2_Pin B2_Pin C2_Pin D2_Pin
                           E2_Pin F2_Pin G2_Pin DP2_Pin
                           LEFT_DISPLAY_Pin RIGHT_DISPLAY_Pin */
  GPIO_InitStruct.Pin = A2_Pin|B2_Pin|C2_Pin|D2_Pin
 800282c:	f640 53fe 	movw	r3, #3582	; 0xdfe
 8002830:	617b      	str	r3, [r7, #20]
                          |E2_Pin|F2_Pin|G2_Pin|DP2_Pin
                          |LEFT_DISPLAY_Pin|RIGHT_DISPLAY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002832:	2301      	movs	r3, #1
 8002834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002836:	2300      	movs	r3, #0
 8002838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283a:	2300      	movs	r3, #0
 800283c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800283e:	f107 0314 	add.w	r3, r7, #20
 8002842:	4619      	mov	r1, r3
 8002844:	4813      	ldr	r0, [pc, #76]	; (8002894 <MX_GPIO_Init+0x120>)
 8002846:	f001 fc35 	bl	80040b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 800284a:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800284e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002850:	2301      	movs	r3, #1
 8002852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002858:	2300      	movs	r3, #0
 800285a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800285c:	f107 0314 	add.w	r3, r7, #20
 8002860:	4619      	mov	r1, r3
 8002862:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002866:	f001 fc25 	bl	80040b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A1_Pin B1B2_Pin C1_Pin D1_Pin
                           E1_Pin F1_Pin G1_Pin DP1_Pin */
  GPIO_InitStruct.Pin = A1_Pin|B1B2_Pin|C1_Pin|D1_Pin
 800286a:	f240 33f6 	movw	r3, #1014	; 0x3f6
 800286e:	617b      	str	r3, [r7, #20]
                          |E1_Pin|F1_Pin|G1_Pin|DP1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002870:	2301      	movs	r3, #1
 8002872:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002878:	2300      	movs	r3, #0
 800287a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800287c:	f107 0314 	add.w	r3, r7, #20
 8002880:	4619      	mov	r1, r3
 8002882:	4805      	ldr	r0, [pc, #20]	; (8002898 <MX_GPIO_Init+0x124>)
 8002884:	f001 fc16 	bl	80040b4 <HAL_GPIO_Init>

}
 8002888:	bf00      	nop
 800288a:	3728      	adds	r7, #40	; 0x28
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40021000 	.word	0x40021000
 8002894:	48000800 	.word	0x48000800
 8002898:	48000400 	.word	0x48000400

0800289c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028a0:	b672      	cpsid	i
}
 80028a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028a4:	e7fe      	b.n	80028a4 <Error_Handler+0x8>
	...

080028a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ae:	4b0f      	ldr	r3, [pc, #60]	; (80028ec <HAL_MspInit+0x44>)
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	4a0e      	ldr	r2, [pc, #56]	; (80028ec <HAL_MspInit+0x44>)
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	6193      	str	r3, [r2, #24]
 80028ba:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <HAL_MspInit+0x44>)
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	607b      	str	r3, [r7, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028c6:	4b09      	ldr	r3, [pc, #36]	; (80028ec <HAL_MspInit+0x44>)
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	4a08      	ldr	r2, [pc, #32]	; (80028ec <HAL_MspInit+0x44>)
 80028cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d0:	61d3      	str	r3, [r2, #28]
 80028d2:	4b06      	ldr	r3, [pc, #24]	; (80028ec <HAL_MspInit+0x44>)
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028da:	603b      	str	r3, [r7, #0]
 80028dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80028de:	2007      	movs	r0, #7
 80028e0:	f001 fbb4 	bl	800404c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028e4:	bf00      	nop
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40021000 	.word	0x40021000

080028f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08a      	sub	sp, #40	; 0x28
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f8:	f107 0314 	add.w	r3, r7, #20
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	605a      	str	r2, [r3, #4]
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	60da      	str	r2, [r3, #12]
 8002906:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002910:	d124      	bne.n	800295c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002912:	4b14      	ldr	r3, [pc, #80]	; (8002964 <HAL_ADC_MspInit+0x74>)
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	4a13      	ldr	r2, [pc, #76]	; (8002964 <HAL_ADC_MspInit+0x74>)
 8002918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800291c:	6153      	str	r3, [r2, #20]
 800291e:	4b11      	ldr	r3, [pc, #68]	; (8002964 <HAL_ADC_MspInit+0x74>)
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002926:	613b      	str	r3, [r7, #16]
 8002928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800292a:	4b0e      	ldr	r3, [pc, #56]	; (8002964 <HAL_ADC_MspInit+0x74>)
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	4a0d      	ldr	r2, [pc, #52]	; (8002964 <HAL_ADC_MspInit+0x74>)
 8002930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002934:	6153      	str	r3, [r2, #20]
 8002936:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <HAL_ADC_MspInit+0x74>)
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002942:	2301      	movs	r3, #1
 8002944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002946:	2303      	movs	r3, #3
 8002948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294a:	2300      	movs	r3, #0
 800294c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800294e:	f107 0314 	add.w	r3, r7, #20
 8002952:	4619      	mov	r1, r3
 8002954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002958:	f001 fbac 	bl	80040b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800295c:	bf00      	nop
 800295e:	3728      	adds	r7, #40	; 0x28
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40021000 	.word	0x40021000

08002968 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b08a      	sub	sp, #40	; 0x28
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002970:	f107 0314 	add.w	r3, r7, #20
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	605a      	str	r2, [r3, #4]
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	60da      	str	r2, [r3, #12]
 800297e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a17      	ldr	r2, [pc, #92]	; (80029e4 <HAL_UART_MspInit+0x7c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d128      	bne.n	80029dc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800298a:	4b17      	ldr	r3, [pc, #92]	; (80029e8 <HAL_UART_MspInit+0x80>)
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	4a16      	ldr	r2, [pc, #88]	; (80029e8 <HAL_UART_MspInit+0x80>)
 8002990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002994:	61d3      	str	r3, [r2, #28]
 8002996:	4b14      	ldr	r3, [pc, #80]	; (80029e8 <HAL_UART_MspInit+0x80>)
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299e:	613b      	str	r3, [r7, #16]
 80029a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a2:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <HAL_UART_MspInit+0x80>)
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	4a10      	ldr	r2, [pc, #64]	; (80029e8 <HAL_UART_MspInit+0x80>)
 80029a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ac:	6153      	str	r3, [r2, #20]
 80029ae:	4b0e      	ldr	r3, [pc, #56]	; (80029e8 <HAL_UART_MspInit+0x80>)
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80029ba:	230c      	movs	r3, #12
 80029bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029be:	2302      	movs	r3, #2
 80029c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c2:	2300      	movs	r3, #0
 80029c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c6:	2300      	movs	r3, #0
 80029c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029ca:	2307      	movs	r3, #7
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ce:	f107 0314 	add.w	r3, r7, #20
 80029d2:	4619      	mov	r1, r3
 80029d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029d8:	f001 fb6c 	bl	80040b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80029dc:	bf00      	nop
 80029de:	3728      	adds	r7, #40	; 0x28
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40004400 	.word	0x40004400
 80029e8:	40021000 	.word	0x40021000

080029ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029f0:	e7fe      	b.n	80029f0 <NMI_Handler+0x4>

080029f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029f2:	b480      	push	{r7}
 80029f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029f6:	e7fe      	b.n	80029f6 <HardFault_Handler+0x4>

080029f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029fc:	e7fe      	b.n	80029fc <MemManage_Handler+0x4>

080029fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029fe:	b480      	push	{r7}
 8002a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a02:	e7fe      	b.n	8002a02 <BusFault_Handler+0x4>

08002a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a08:	e7fe      	b.n	8002a08 <UsageFault_Handler+0x4>

08002a0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a0e:	bf00      	nop
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a1c:	bf00      	nop
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a26:	b480      	push	{r7}
 8002a28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a2a:	bf00      	nop
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a38:	f000 f94a 	bl	8002cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a3c:	bf00      	nop
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
	return 1;
 8002a44:	2301      	movs	r3, #1
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <_kill>:

int _kill(int pid, int sig)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a5a:	f003 fce9 	bl	8006430 <__errno>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2216      	movs	r2, #22
 8002a62:	601a      	str	r2, [r3, #0]
	return -1;
 8002a64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <_exit>:

void _exit (int status)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a78:	f04f 31ff 	mov.w	r1, #4294967295
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7ff ffe7 	bl	8002a50 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a82:	e7fe      	b.n	8002a82 <_exit+0x12>

08002a84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	e00a      	b.n	8002aac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a96:	f3af 8000 	nop.w
 8002a9a:	4601      	mov	r1, r0
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	1c5a      	adds	r2, r3, #1
 8002aa0:	60ba      	str	r2, [r7, #8]
 8002aa2:	b2ca      	uxtb	r2, r1
 8002aa4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	dbf0      	blt.n	8002a96 <_read+0x12>
	}

return len;
 8002ab4:	687b      	ldr	r3, [r7, #4]
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b086      	sub	sp, #24
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	60f8      	str	r0, [r7, #12]
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
 8002ace:	e009      	b.n	8002ae4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	1c5a      	adds	r2, r3, #1
 8002ad4:	60ba      	str	r2, [r7, #8]
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	617b      	str	r3, [r7, #20]
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	dbf1      	blt.n	8002ad0 <_write+0x12>
	}
	return len;
 8002aec:	687b      	ldr	r3, [r7, #4]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <_close>:

int _close(int file)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
	return -1;
 8002afe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
 8002b16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b1e:	605a      	str	r2, [r3, #4]
	return 0;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <_isatty>:

int _isatty(int file)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b083      	sub	sp, #12
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
	return 1;
 8002b36:	2301      	movs	r3, #1
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
	return 0;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
	...

08002b60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b68:	4a14      	ldr	r2, [pc, #80]	; (8002bbc <_sbrk+0x5c>)
 8002b6a:	4b15      	ldr	r3, [pc, #84]	; (8002bc0 <_sbrk+0x60>)
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b74:	4b13      	ldr	r3, [pc, #76]	; (8002bc4 <_sbrk+0x64>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d102      	bne.n	8002b82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b7c:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <_sbrk+0x64>)
 8002b7e:	4a12      	ldr	r2, [pc, #72]	; (8002bc8 <_sbrk+0x68>)
 8002b80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b82:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <_sbrk+0x64>)
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4413      	add	r3, r2
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d207      	bcs.n	8002ba0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b90:	f003 fc4e 	bl	8006430 <__errno>
 8002b94:	4603      	mov	r3, r0
 8002b96:	220c      	movs	r2, #12
 8002b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b9e:	e009      	b.n	8002bb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ba0:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <_sbrk+0x64>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ba6:	4b07      	ldr	r3, [pc, #28]	; (8002bc4 <_sbrk+0x64>)
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4413      	add	r3, r2
 8002bae:	4a05      	ldr	r2, [pc, #20]	; (8002bc4 <_sbrk+0x64>)
 8002bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	20010000 	.word	0x20010000
 8002bc0:	00000400 	.word	0x00000400
 8002bc4:	200001f8 	.word	0x200001f8
 8002bc8:	200002f0 	.word	0x200002f0

08002bcc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bd0:	4b06      	ldr	r3, [pc, #24]	; (8002bec <SystemInit+0x20>)
 8002bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd6:	4a05      	ldr	r2, [pc, #20]	; (8002bec <SystemInit+0x20>)
 8002bd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002be0:	bf00      	nop
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	e000ed00 	.word	0xe000ed00

08002bf0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002bf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c28 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002bf4:	f7ff ffea 	bl	8002bcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bf8:	480c      	ldr	r0, [pc, #48]	; (8002c2c <LoopForever+0x6>)
  ldr r1, =_edata
 8002bfa:	490d      	ldr	r1, [pc, #52]	; (8002c30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bfc:	4a0d      	ldr	r2, [pc, #52]	; (8002c34 <LoopForever+0xe>)
  movs r3, #0
 8002bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c00:	e002      	b.n	8002c08 <LoopCopyDataInit>

08002c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c06:	3304      	adds	r3, #4

08002c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c0c:	d3f9      	bcc.n	8002c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c0e:	4a0a      	ldr	r2, [pc, #40]	; (8002c38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c10:	4c0a      	ldr	r4, [pc, #40]	; (8002c3c <LoopForever+0x16>)
  movs r3, #0
 8002c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c14:	e001      	b.n	8002c1a <LoopFillZerobss>

08002c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c18:	3204      	adds	r2, #4

08002c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c1c:	d3fb      	bcc.n	8002c16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c1e:	f003 fc0d 	bl	800643c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c22:	f7fd ffc9 	bl	8000bb8 <main>

08002c26 <LoopForever>:

LoopForever:
    b LoopForever
 8002c26:	e7fe      	b.n	8002c26 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002c28:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c30:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002c34:	08009604 	.word	0x08009604
  ldr r2, =_sbss
 8002c38:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002c3c:	200002f0 	.word	0x200002f0

08002c40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c40:	e7fe      	b.n	8002c40 <ADC1_2_IRQHandler>
	...

08002c44 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c48:	4b08      	ldr	r3, [pc, #32]	; (8002c6c <HAL_Init+0x28>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a07      	ldr	r2, [pc, #28]	; (8002c6c <HAL_Init+0x28>)
 8002c4e:	f043 0310 	orr.w	r3, r3, #16
 8002c52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c54:	2003      	movs	r0, #3
 8002c56:	f001 f9f9 	bl	800404c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	f000 f808 	bl	8002c70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c60:	f7ff fe22 	bl	80028a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40022000 	.word	0x40022000

08002c70 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c78:	4b12      	ldr	r3, [pc, #72]	; (8002cc4 <HAL_InitTick+0x54>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <HAL_InitTick+0x58>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	4619      	mov	r1, r3
 8002c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f001 fa03 	bl	800409a <HAL_SYSTICK_Config>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e00e      	b.n	8002cbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b0f      	cmp	r3, #15
 8002ca2:	d80a      	bhi.n	8002cba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cac:	f001 f9d9 	bl	8004062 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cb0:	4a06      	ldr	r2, [pc, #24]	; (8002ccc <HAL_InitTick+0x5c>)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	e000      	b.n	8002cbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	20000000 	.word	0x20000000
 8002cc8:	20000008 	.word	0x20000008
 8002ccc:	20000004 	.word	0x20000004

08002cd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cd4:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <HAL_IncTick+0x20>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <HAL_IncTick+0x24>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4413      	add	r3, r2
 8002ce0:	4a04      	ldr	r2, [pc, #16]	; (8002cf4 <HAL_IncTick+0x24>)
 8002ce2:	6013      	str	r3, [r2, #0]
}
 8002ce4:	bf00      	nop
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	20000008 	.word	0x20000008
 8002cf4:	200002dc 	.word	0x200002dc

08002cf8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  return uwTick;  
 8002cfc:	4b03      	ldr	r3, [pc, #12]	; (8002d0c <HAL_GetTick+0x14>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	200002dc 	.word	0x200002dc

08002d10 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d18:	f7ff ffee 	bl	8002cf8 <HAL_GetTick>
 8002d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d28:	d005      	beq.n	8002d36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <HAL_Delay+0x44>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4413      	add	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002d36:	bf00      	nop
 8002d38:	f7ff ffde 	bl	8002cf8 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d8f7      	bhi.n	8002d38 <HAL_Delay+0x28>
  {
  }
}
 8002d48:	bf00      	nop
 8002d4a:	bf00      	nop
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000008 	.word	0x20000008

08002d58 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b09a      	sub	sp, #104	; 0x68
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d60:	2300      	movs	r3, #0
 8002d62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e1e3      	b.n	8003140 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	f003 0310 	and.w	r3, r3, #16
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d176      	bne.n	8002e78 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d152      	bne.n	8002e38 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f7ff fd9f 	bl	80028f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d13b      	bne.n	8002e38 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f001 f82b 	bl	8003e1c <ADC_Disable>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	f003 0310 	and.w	r3, r3, #16
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d12f      	bne.n	8002e38 <HAL_ADC_Init+0xe0>
 8002dd8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d12b      	bne.n	8002e38 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002de8:	f023 0302 	bic.w	r3, r3, #2
 8002dec:	f043 0202 	orr.w	r2, r3, #2
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e02:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e12:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e14:	4b92      	ldr	r3, [pc, #584]	; (8003060 <HAL_ADC_Init+0x308>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a92      	ldr	r2, [pc, #584]	; (8003064 <HAL_ADC_Init+0x30c>)
 8002e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1e:	0c9a      	lsrs	r2, r3, #18
 8002e20:	4613      	mov	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e2a:	e002      	b.n	8002e32 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1f9      	bne.n	8002e2c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d007      	beq.n	8002e56 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002e50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e54:	d110      	bne.n	8002e78 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f023 0312 	bic.w	r3, r3, #18
 8002e5e:	f043 0210 	orr.w	r2, r3, #16
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6a:	f043 0201 	orr.w	r2, r3, #1
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7c:	f003 0310 	and.w	r3, r3, #16
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f040 8150 	bne.w	8003126 <HAL_ADC_Init+0x3ce>
 8002e86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f040 814b 	bne.w	8003126 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f040 8143 	bne.w	8003126 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002ea8:	f043 0202 	orr.w	r2, r3, #2
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eb8:	d004      	beq.n	8002ec4 <HAL_ADC_Init+0x16c>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a6a      	ldr	r2, [pc, #424]	; (8003068 <HAL_ADC_Init+0x310>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d101      	bne.n	8002ec8 <HAL_ADC_Init+0x170>
 8002ec4:	4b69      	ldr	r3, [pc, #420]	; (800306c <HAL_ADC_Init+0x314>)
 8002ec6:	e000      	b.n	8002eca <HAL_ADC_Init+0x172>
 8002ec8:	4b69      	ldr	r3, [pc, #420]	; (8003070 <HAL_ADC_Init+0x318>)
 8002eca:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ed4:	d102      	bne.n	8002edc <HAL_ADC_Init+0x184>
 8002ed6:	4b64      	ldr	r3, [pc, #400]	; (8003068 <HAL_ADC_Init+0x310>)
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	e01a      	b.n	8002f12 <HAL_ADC_Init+0x1ba>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a61      	ldr	r2, [pc, #388]	; (8003068 <HAL_ADC_Init+0x310>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d103      	bne.n	8002eee <HAL_ADC_Init+0x196>
 8002ee6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	e011      	b.n	8002f12 <HAL_ADC_Init+0x1ba>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a60      	ldr	r2, [pc, #384]	; (8003074 <HAL_ADC_Init+0x31c>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d102      	bne.n	8002efe <HAL_ADC_Init+0x1a6>
 8002ef8:	4b5f      	ldr	r3, [pc, #380]	; (8003078 <HAL_ADC_Init+0x320>)
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	e009      	b.n	8002f12 <HAL_ADC_Init+0x1ba>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a5d      	ldr	r2, [pc, #372]	; (8003078 <HAL_ADC_Init+0x320>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d102      	bne.n	8002f0e <HAL_ADC_Init+0x1b6>
 8002f08:	4b5a      	ldr	r3, [pc, #360]	; (8003074 <HAL_ADC_Init+0x31c>)
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	e001      	b.n	8002f12 <HAL_ADC_Init+0x1ba>
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 0303 	and.w	r3, r3, #3
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d108      	bne.n	8002f32 <HAL_ADC_Init+0x1da>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d101      	bne.n	8002f32 <HAL_ADC_Init+0x1da>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <HAL_ADC_Init+0x1dc>
 8002f32:	2300      	movs	r3, #0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d11c      	bne.n	8002f72 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002f38:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d010      	beq.n	8002f60 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d107      	bne.n	8002f5a <HAL_ADC_Init+0x202>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d101      	bne.n	8002f5a <HAL_ADC_Init+0x202>
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <HAL_ADC_Init+0x204>
 8002f5a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d108      	bne.n	8002f72 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002f60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f70:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	7e5b      	ldrb	r3, [r3, #25]
 8002f76:	035b      	lsls	r3, r3, #13
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f7c:	2a01      	cmp	r2, #1
 8002f7e:	d002      	beq.n	8002f86 <HAL_ADC_Init+0x22e>
 8002f80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f84:	e000      	b.n	8002f88 <HAL_ADC_Init+0x230>
 8002f86:	2200      	movs	r2, #0
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d11b      	bne.n	8002fde <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	7e5b      	ldrb	r3, [r3, #25]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d109      	bne.n	8002fc2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	045a      	lsls	r2, r3, #17
 8002fb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fbe:	663b      	str	r3, [r7, #96]	; 0x60
 8002fc0:	e00d      	b.n	8002fde <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002fca:	f043 0220 	orr.w	r2, r3, #32
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd6:	f043 0201 	orr.w	r2, r3, #1
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d054      	beq.n	8003090 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a22      	ldr	r2, [pc, #136]	; (8003074 <HAL_ADC_Init+0x31c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d004      	beq.n	8002ffa <HAL_ADC_Init+0x2a2>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a20      	ldr	r2, [pc, #128]	; (8003078 <HAL_ADC_Init+0x320>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d140      	bne.n	800307c <HAL_ADC_Init+0x324>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffe:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8003002:	d02a      	beq.n	800305a <HAL_ADC_Init+0x302>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800300c:	d022      	beq.n	8003054 <HAL_ADC_Init+0x2fc>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003012:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8003016:	d01a      	beq.n	800304e <HAL_ADC_Init+0x2f6>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301c:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8003020:	d012      	beq.n	8003048 <HAL_ADC_Init+0x2f0>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003026:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 800302a:	d00a      	beq.n	8003042 <HAL_ADC_Init+0x2ea>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003030:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8003034:	d002      	beq.n	800303c <HAL_ADC_Init+0x2e4>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303a:	e023      	b.n	8003084 <HAL_ADC_Init+0x32c>
 800303c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003040:	e020      	b.n	8003084 <HAL_ADC_Init+0x32c>
 8003042:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003046:	e01d      	b.n	8003084 <HAL_ADC_Init+0x32c>
 8003048:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800304c:	e01a      	b.n	8003084 <HAL_ADC_Init+0x32c>
 800304e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003052:	e017      	b.n	8003084 <HAL_ADC_Init+0x32c>
 8003054:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8003058:	e014      	b.n	8003084 <HAL_ADC_Init+0x32c>
 800305a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800305e:	e011      	b.n	8003084 <HAL_ADC_Init+0x32c>
 8003060:	20000000 	.word	0x20000000
 8003064:	431bde83 	.word	0x431bde83
 8003068:	50000100 	.word	0x50000100
 800306c:	50000300 	.word	0x50000300
 8003070:	50000700 	.word	0x50000700
 8003074:	50000400 	.word	0x50000400
 8003078:	50000500 	.word	0x50000500
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003080:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003088:	4313      	orrs	r3, r2
 800308a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800308c:	4313      	orrs	r3, r2
 800308e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 030c 	and.w	r3, r3, #12
 800309a:	2b00      	cmp	r3, #0
 800309c:	d114      	bne.n	80030c8 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6812      	ldr	r2, [r2, #0]
 80030a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030ac:	f023 0302 	bic.w	r3, r3, #2
 80030b0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	7e1b      	ldrb	r3, [r3, #24]
 80030b6:	039a      	lsls	r2, r3, #14
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	4313      	orrs	r3, r2
 80030c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80030c4:	4313      	orrs	r3, r2
 80030c6:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	4b1e      	ldr	r3, [pc, #120]	; (8003148 <HAL_ADC_Init+0x3f0>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6812      	ldr	r2, [r2, #0]
 80030d6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80030d8:	430b      	orrs	r3, r1
 80030da:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d10c      	bne.n	80030fe <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	f023 010f 	bic.w	r1, r3, #15
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	1e5a      	subs	r2, r3, #1
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	631a      	str	r2, [r3, #48]	; 0x30
 80030fc:	e007      	b.n	800310e <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 020f 	bic.w	r2, r2, #15
 800310c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003118:	f023 0303 	bic.w	r3, r3, #3
 800311c:	f043 0201 	orr.w	r2, r3, #1
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	641a      	str	r2, [r3, #64]	; 0x40
 8003124:	e00a      	b.n	800313c <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	f023 0312 	bic.w	r3, r3, #18
 800312e:	f043 0210 	orr.w	r2, r3, #16
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8003136:	2301      	movs	r3, #1
 8003138:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800313c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003140:	4618      	mov	r0, r3
 8003142:	3768      	adds	r7, #104	; 0x68
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	fff0c007 	.word	0xfff0c007

0800314c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003154:	2300      	movs	r3, #0
 8003156:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 0304 	and.w	r3, r3, #4
 8003162:	2b00      	cmp	r3, #0
 8003164:	f040 80f9 	bne.w	800335a <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800316e:	2b01      	cmp	r3, #1
 8003170:	d101      	bne.n	8003176 <HAL_ADC_Start+0x2a>
 8003172:	2302      	movs	r3, #2
 8003174:	e0f4      	b.n	8003360 <HAL_ADC_Start+0x214>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 fde8 	bl	8003d54 <ADC_Enable>
 8003184:	4603      	mov	r3, r0
 8003186:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003188:	7bfb      	ldrb	r3, [r7, #15]
 800318a:	2b00      	cmp	r3, #0
 800318c:	f040 80e0 	bne.w	8003350 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003198:	f023 0301 	bic.w	r3, r3, #1
 800319c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031ac:	d004      	beq.n	80031b8 <HAL_ADC_Start+0x6c>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a6d      	ldr	r2, [pc, #436]	; (8003368 <HAL_ADC_Start+0x21c>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d106      	bne.n	80031c6 <HAL_ADC_Start+0x7a>
 80031b8:	4b6c      	ldr	r3, [pc, #432]	; (800336c <HAL_ADC_Start+0x220>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 031f 	and.w	r3, r3, #31
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d010      	beq.n	80031e6 <HAL_ADC_Start+0x9a>
 80031c4:	e005      	b.n	80031d2 <HAL_ADC_Start+0x86>
 80031c6:	4b6a      	ldr	r3, [pc, #424]	; (8003370 <HAL_ADC_Start+0x224>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 031f 	and.w	r3, r3, #31
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d009      	beq.n	80031e6 <HAL_ADC_Start+0x9a>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031da:	d004      	beq.n	80031e6 <HAL_ADC_Start+0x9a>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a64      	ldr	r2, [pc, #400]	; (8003374 <HAL_ADC_Start+0x228>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d115      	bne.n	8003212 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d036      	beq.n	800326e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003204:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003208:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003210:	e02d      	b.n	800326e <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003226:	d004      	beq.n	8003232 <HAL_ADC_Start+0xe6>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a4e      	ldr	r2, [pc, #312]	; (8003368 <HAL_ADC_Start+0x21c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d10a      	bne.n	8003248 <HAL_ADC_Start+0xfc>
 8003232:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323c:	2b00      	cmp	r3, #0
 800323e:	bf14      	ite	ne
 8003240:	2301      	movne	r3, #1
 8003242:	2300      	moveq	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	e008      	b.n	800325a <HAL_ADC_Start+0x10e>
 8003248:	4b4a      	ldr	r3, [pc, #296]	; (8003374 <HAL_ADC_Start+0x228>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003250:	2b00      	cmp	r3, #0
 8003252:	bf14      	ite	ne
 8003254:	2301      	movne	r3, #1
 8003256:	2300      	moveq	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d007      	beq.n	800326e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003266:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800327a:	d106      	bne.n	800328a <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003280:	f023 0206 	bic.w	r2, r3, #6
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	645a      	str	r2, [r3, #68]	; 0x44
 8003288:	e002      	b.n	8003290 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	221c      	movs	r2, #28
 800329e:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032a8:	d004      	beq.n	80032b4 <HAL_ADC_Start+0x168>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a2e      	ldr	r2, [pc, #184]	; (8003368 <HAL_ADC_Start+0x21c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d106      	bne.n	80032c2 <HAL_ADC_Start+0x176>
 80032b4:	4b2d      	ldr	r3, [pc, #180]	; (800336c <HAL_ADC_Start+0x220>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 031f 	and.w	r3, r3, #31
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d03e      	beq.n	800333e <HAL_ADC_Start+0x1f2>
 80032c0:	e005      	b.n	80032ce <HAL_ADC_Start+0x182>
 80032c2:	4b2b      	ldr	r3, [pc, #172]	; (8003370 <HAL_ADC_Start+0x224>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 031f 	and.w	r3, r3, #31
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d037      	beq.n	800333e <HAL_ADC_Start+0x1f2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032d6:	d004      	beq.n	80032e2 <HAL_ADC_Start+0x196>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a22      	ldr	r2, [pc, #136]	; (8003368 <HAL_ADC_Start+0x21c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d106      	bne.n	80032f0 <HAL_ADC_Start+0x1a4>
 80032e2:	4b22      	ldr	r3, [pc, #136]	; (800336c <HAL_ADC_Start+0x220>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 031f 	and.w	r3, r3, #31
 80032ea:	2b05      	cmp	r3, #5
 80032ec:	d027      	beq.n	800333e <HAL_ADC_Start+0x1f2>
 80032ee:	e005      	b.n	80032fc <HAL_ADC_Start+0x1b0>
 80032f0:	4b1f      	ldr	r3, [pc, #124]	; (8003370 <HAL_ADC_Start+0x224>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 031f 	and.w	r3, r3, #31
 80032f8:	2b05      	cmp	r3, #5
 80032fa:	d020      	beq.n	800333e <HAL_ADC_Start+0x1f2>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003304:	d004      	beq.n	8003310 <HAL_ADC_Start+0x1c4>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a17      	ldr	r2, [pc, #92]	; (8003368 <HAL_ADC_Start+0x21c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d106      	bne.n	800331e <HAL_ADC_Start+0x1d2>
 8003310:	4b16      	ldr	r3, [pc, #88]	; (800336c <HAL_ADC_Start+0x220>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 031f 	and.w	r3, r3, #31
 8003318:	2b09      	cmp	r3, #9
 800331a:	d010      	beq.n	800333e <HAL_ADC_Start+0x1f2>
 800331c:	e005      	b.n	800332a <HAL_ADC_Start+0x1de>
 800331e:	4b14      	ldr	r3, [pc, #80]	; (8003370 <HAL_ADC_Start+0x224>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 031f 	and.w	r3, r3, #31
 8003326:	2b09      	cmp	r3, #9
 8003328:	d009      	beq.n	800333e <HAL_ADC_Start+0x1f2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003332:	d004      	beq.n	800333e <HAL_ADC_Start+0x1f2>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a0e      	ldr	r2, [pc, #56]	; (8003374 <HAL_ADC_Start+0x228>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d10f      	bne.n	800335e <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f042 0204 	orr.w	r2, r2, #4
 800334c:	609a      	str	r2, [r3, #8]
 800334e:	e006      	b.n	800335e <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003358:	e001      	b.n	800335e <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800335a:	2302      	movs	r3, #2
 800335c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800335e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	50000100 	.word	0x50000100
 800336c:	50000300 	.word	0x50000300
 8003370:	50000700 	.word	0x50000700
 8003374:	50000400 	.word	0x50000400

08003378 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8003382:	2300      	movs	r3, #0
 8003384:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	2b08      	cmp	r3, #8
 800338c:	d102      	bne.n	8003394 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800338e:	2308      	movs	r3, #8
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	e03a      	b.n	800340a <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800339c:	d004      	beq.n	80033a8 <HAL_ADC_PollForConversion+0x30>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a72      	ldr	r2, [pc, #456]	; (800356c <HAL_ADC_PollForConversion+0x1f4>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d101      	bne.n	80033ac <HAL_ADC_PollForConversion+0x34>
 80033a8:	4b71      	ldr	r3, [pc, #452]	; (8003570 <HAL_ADC_PollForConversion+0x1f8>)
 80033aa:	e000      	b.n	80033ae <HAL_ADC_PollForConversion+0x36>
 80033ac:	4b71      	ldr	r3, [pc, #452]	; (8003574 <HAL_ADC_PollForConversion+0x1fc>)
 80033ae:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 031f 	and.w	r3, r3, #31
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d112      	bne.n	80033e2 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d11d      	bne.n	8003406 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	f043 0220 	orr.w	r2, r3, #32
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e0bf      	b.n	8003562 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00b      	beq.n	8003406 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	f043 0220 	orr.w	r2, r3, #32
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e0ad      	b.n	8003562 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8003406:	230c      	movs	r3, #12
 8003408:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003412:	d004      	beq.n	800341e <HAL_ADC_PollForConversion+0xa6>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a54      	ldr	r2, [pc, #336]	; (800356c <HAL_ADC_PollForConversion+0x1f4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d106      	bne.n	800342c <HAL_ADC_PollForConversion+0xb4>
 800341e:	4b54      	ldr	r3, [pc, #336]	; (8003570 <HAL_ADC_PollForConversion+0x1f8>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 031f 	and.w	r3, r3, #31
 8003426:	2b00      	cmp	r3, #0
 8003428:	d010      	beq.n	800344c <HAL_ADC_PollForConversion+0xd4>
 800342a:	e005      	b.n	8003438 <HAL_ADC_PollForConversion+0xc0>
 800342c:	4b51      	ldr	r3, [pc, #324]	; (8003574 <HAL_ADC_PollForConversion+0x1fc>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f003 031f 	and.w	r3, r3, #31
 8003434:	2b00      	cmp	r3, #0
 8003436:	d009      	beq.n	800344c <HAL_ADC_PollForConversion+0xd4>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003440:	d004      	beq.n	800344c <HAL_ADC_PollForConversion+0xd4>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a4c      	ldr	r2, [pc, #304]	; (8003578 <HAL_ADC_PollForConversion+0x200>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d104      	bne.n	8003456 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	613b      	str	r3, [r7, #16]
 8003454:	e00f      	b.n	8003476 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800345e:	d004      	beq.n	800346a <HAL_ADC_PollForConversion+0xf2>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a41      	ldr	r2, [pc, #260]	; (800356c <HAL_ADC_PollForConversion+0x1f4>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d102      	bne.n	8003470 <HAL_ADC_PollForConversion+0xf8>
 800346a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800346e:	e000      	b.n	8003472 <HAL_ADC_PollForConversion+0xfa>
 8003470:	4b41      	ldr	r3, [pc, #260]	; (8003578 <HAL_ADC_PollForConversion+0x200>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8003476:	f7ff fc3f 	bl	8002cf8 <HAL_GetTick>
 800347a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800347c:	e021      	b.n	80034c2 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003484:	d01d      	beq.n	80034c2 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d007      	beq.n	800349c <HAL_ADC_PollForConversion+0x124>
 800348c:	f7ff fc34 	bl	8002cf8 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	429a      	cmp	r2, r3
 800349a:	d212      	bcs.n	80034c2 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	4013      	ands	r3, r2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10b      	bne.n	80034c2 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	f043 0204 	orr.w	r2, r3, #4
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e04f      	b.n	8003562 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	4013      	ands	r3, r2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0d6      	beq.n	800347e <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d131      	bne.n	800354e <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d12c      	bne.n	800354e <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	2b08      	cmp	r3, #8
 8003500:	d125      	bne.n	800354e <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b00      	cmp	r3, #0
 800350e:	d112      	bne.n	8003536 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003520:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d112      	bne.n	800354e <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352c:	f043 0201 	orr.w	r2, r3, #1
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	641a      	str	r2, [r3, #64]	; 0x40
 8003534:	e00b      	b.n	800354e <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	f043 0220 	orr.w	r2, r3, #32
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003546:	f043 0201 	orr.w	r2, r3, #1
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d103      	bne.n	8003560 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3718      	adds	r7, #24
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	50000100 	.word	0x50000100
 8003570:	50000300 	.word	0x50000300
 8003574:	50000700 	.word	0x50000700
 8003578:	50000400 	.word	0x50000400

0800357c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800358a:	4618      	mov	r0, r3
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
	...

08003598 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003598:	b480      	push	{r7}
 800359a:	b09b      	sub	sp, #108	; 0x6c
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80035a8:	2300      	movs	r3, #0
 80035aa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d101      	bne.n	80035ba <HAL_ADC_ConfigChannel+0x22>
 80035b6:	2302      	movs	r3, #2
 80035b8:	e2cb      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x5ba>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f040 82af 	bne.w	8003b30 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	d81c      	bhi.n	8003614 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	4413      	add	r3, r2
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	461a      	mov	r2, r3
 80035ee:	231f      	movs	r3, #31
 80035f0:	4093      	lsls	r3, r2
 80035f2:	43db      	mvns	r3, r3
 80035f4:	4019      	ands	r1, r3
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	6818      	ldr	r0, [r3, #0]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	4413      	add	r3, r2
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	fa00 f203 	lsl.w	r2, r0, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	631a      	str	r2, [r3, #48]	; 0x30
 8003612:	e063      	b.n	80036dc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b09      	cmp	r3, #9
 800361a:	d81e      	bhi.n	800365a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	4613      	mov	r3, r2
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	4413      	add	r3, r2
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	3b1e      	subs	r3, #30
 8003630:	221f      	movs	r2, #31
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	43db      	mvns	r3, r3
 8003638:	4019      	ands	r1, r3
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	6818      	ldr	r0, [r3, #0]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	4613      	mov	r3, r2
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	4413      	add	r3, r2
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	3b1e      	subs	r3, #30
 800364c:	fa00 f203 	lsl.w	r2, r0, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	635a      	str	r2, [r3, #52]	; 0x34
 8003658:	e040      	b.n	80036dc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2b0e      	cmp	r3, #14
 8003660:	d81e      	bhi.n	80036a0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	4413      	add	r3, r2
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	3b3c      	subs	r3, #60	; 0x3c
 8003676:	221f      	movs	r2, #31
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	43db      	mvns	r3, r3
 800367e:	4019      	ands	r1, r3
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	6818      	ldr	r0, [r3, #0]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	4613      	mov	r3, r2
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	4413      	add	r3, r2
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	3b3c      	subs	r3, #60	; 0x3c
 8003692:	fa00 f203 	lsl.w	r2, r0, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	639a      	str	r2, [r3, #56]	; 0x38
 800369e:	e01d      	b.n	80036dc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	4613      	mov	r3, r2
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	4413      	add	r3, r2
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	3b5a      	subs	r3, #90	; 0x5a
 80036b4:	221f      	movs	r2, #31
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	43db      	mvns	r3, r3
 80036bc:	4019      	ands	r1, r3
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	6818      	ldr	r0, [r3, #0]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	4613      	mov	r3, r2
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	4413      	add	r3, r2
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	3b5a      	subs	r3, #90	; 0x5a
 80036d0:	fa00 f203 	lsl.w	r2, r0, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 030c 	and.w	r3, r3, #12
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f040 80e5 	bne.w	80038b6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b09      	cmp	r3, #9
 80036f2:	d91c      	bls.n	800372e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6999      	ldr	r1, [r3, #24]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	4613      	mov	r3, r2
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	4413      	add	r3, r2
 8003704:	3b1e      	subs	r3, #30
 8003706:	2207      	movs	r2, #7
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	43db      	mvns	r3, r3
 800370e:	4019      	ands	r1, r3
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	6898      	ldr	r0, [r3, #8]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	4613      	mov	r3, r2
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	4413      	add	r3, r2
 800371e:	3b1e      	subs	r3, #30
 8003720:	fa00 f203 	lsl.w	r2, r0, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	619a      	str	r2, [r3, #24]
 800372c:	e019      	b.n	8003762 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6959      	ldr	r1, [r3, #20]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	4613      	mov	r3, r2
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	4413      	add	r3, r2
 800373e:	2207      	movs	r2, #7
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	43db      	mvns	r3, r3
 8003746:	4019      	ands	r1, r3
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	6898      	ldr	r0, [r3, #8]
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	4613      	mov	r3, r2
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	4413      	add	r3, r2
 8003756:	fa00 f203 	lsl.w	r2, r0, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	695a      	ldr	r2, [r3, #20]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	08db      	lsrs	r3, r3, #3
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	3b01      	subs	r3, #1
 8003780:	2b03      	cmp	r3, #3
 8003782:	d84f      	bhi.n	8003824 <HAL_ADC_ConfigChannel+0x28c>
 8003784:	a201      	add	r2, pc, #4	; (adr r2, 800378c <HAL_ADC_ConfigChannel+0x1f4>)
 8003786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800378a:	bf00      	nop
 800378c:	0800379d 	.word	0x0800379d
 8003790:	080037bf 	.word	0x080037bf
 8003794:	080037e1 	.word	0x080037e1
 8003798:	08003803 	.word	0x08003803
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037a2:	4b9f      	ldr	r3, [pc, #636]	; (8003a20 <HAL_ADC_ConfigChannel+0x488>)
 80037a4:	4013      	ands	r3, r2
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	6812      	ldr	r2, [r2, #0]
 80037aa:	0691      	lsls	r1, r2, #26
 80037ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037ae:	430a      	orrs	r2, r1
 80037b0:	431a      	orrs	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80037ba:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80037bc:	e07e      	b.n	80038bc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80037c4:	4b96      	ldr	r3, [pc, #600]	; (8003a20 <HAL_ADC_ConfigChannel+0x488>)
 80037c6:	4013      	ands	r3, r2
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	6812      	ldr	r2, [r2, #0]
 80037cc:	0691      	lsls	r1, r2, #26
 80037ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037d0:	430a      	orrs	r2, r1
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80037dc:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80037de:	e06d      	b.n	80038bc <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80037e6:	4b8e      	ldr	r3, [pc, #568]	; (8003a20 <HAL_ADC_ConfigChannel+0x488>)
 80037e8:	4013      	ands	r3, r2
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	6812      	ldr	r2, [r2, #0]
 80037ee:	0691      	lsls	r1, r2, #26
 80037f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037f2:	430a      	orrs	r2, r1
 80037f4:	431a      	orrs	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80037fe:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003800:	e05c      	b.n	80038bc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003808:	4b85      	ldr	r3, [pc, #532]	; (8003a20 <HAL_ADC_ConfigChannel+0x488>)
 800380a:	4013      	ands	r3, r2
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	6812      	ldr	r2, [r2, #0]
 8003810:	0691      	lsls	r1, r2, #26
 8003812:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003814:	430a      	orrs	r2, r1
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003820:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003822:	e04b      	b.n	80038bc <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800382a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	069b      	lsls	r3, r3, #26
 8003834:	429a      	cmp	r2, r3
 8003836:	d107      	bne.n	8003848 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003846:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800384e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	069b      	lsls	r3, r3, #26
 8003858:	429a      	cmp	r2, r3
 800385a:	d107      	bne.n	800386c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800386a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003872:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	069b      	lsls	r3, r3, #26
 800387c:	429a      	cmp	r2, r3
 800387e:	d107      	bne.n	8003890 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800388e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003896:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	069b      	lsls	r3, r3, #26
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d10a      	bne.n	80038ba <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80038b2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80038b4:	e001      	b.n	80038ba <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80038b6:	bf00      	nop
 80038b8:	e000      	b.n	80038bc <HAL_ADC_ConfigChannel+0x324>
      break;
 80038ba:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 0303 	and.w	r3, r3, #3
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d108      	bne.n	80038dc <HAL_ADC_ConfigChannel+0x344>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d101      	bne.n	80038dc <HAL_ADC_ConfigChannel+0x344>
 80038d8:	2301      	movs	r3, #1
 80038da:	e000      	b.n	80038de <HAL_ADC_ConfigChannel+0x346>
 80038dc:	2300      	movs	r3, #0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f040 8131 	bne.w	8003b46 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d00f      	beq.n	800390c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2201      	movs	r2, #1
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	43da      	mvns	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	400a      	ands	r2, r1
 8003906:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800390a:	e049      	b.n	80039a0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2201      	movs	r2, #1
 800391a:	409a      	lsls	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2b09      	cmp	r3, #9
 800392c:	d91c      	bls.n	8003968 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6999      	ldr	r1, [r3, #24]
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	4613      	mov	r3, r2
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	4413      	add	r3, r2
 800393e:	3b1b      	subs	r3, #27
 8003940:	2207      	movs	r2, #7
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	43db      	mvns	r3, r3
 8003948:	4019      	ands	r1, r3
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	6898      	ldr	r0, [r3, #8]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	4613      	mov	r3, r2
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	4413      	add	r3, r2
 8003958:	3b1b      	subs	r3, #27
 800395a:	fa00 f203 	lsl.w	r2, r0, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	619a      	str	r2, [r3, #24]
 8003966:	e01b      	b.n	80039a0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6959      	ldr	r1, [r3, #20]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	1c5a      	adds	r2, r3, #1
 8003974:	4613      	mov	r3, r2
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	4413      	add	r3, r2
 800397a:	2207      	movs	r2, #7
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	4019      	ands	r1, r3
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	6898      	ldr	r0, [r3, #8]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	1c5a      	adds	r2, r3, #1
 800398e:	4613      	mov	r3, r2
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	4413      	add	r3, r2
 8003994:	fa00 f203 	lsl.w	r2, r0, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	430a      	orrs	r2, r1
 800399e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039a8:	d004      	beq.n	80039b4 <HAL_ADC_ConfigChannel+0x41c>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a1d      	ldr	r2, [pc, #116]	; (8003a24 <HAL_ADC_ConfigChannel+0x48c>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d101      	bne.n	80039b8 <HAL_ADC_ConfigChannel+0x420>
 80039b4:	4b1c      	ldr	r3, [pc, #112]	; (8003a28 <HAL_ADC_ConfigChannel+0x490>)
 80039b6:	e000      	b.n	80039ba <HAL_ADC_ConfigChannel+0x422>
 80039b8:	4b1c      	ldr	r3, [pc, #112]	; (8003a2c <HAL_ADC_ConfigChannel+0x494>)
 80039ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2b10      	cmp	r3, #16
 80039c2:	d105      	bne.n	80039d0 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80039c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d015      	beq.n	80039fc <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80039d4:	2b11      	cmp	r3, #17
 80039d6:	d105      	bne.n	80039e4 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80039d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00b      	beq.n	80039fc <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80039e8:	2b12      	cmp	r3, #18
 80039ea:	f040 80ac 	bne.w	8003b46 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80039ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f040 80a5 	bne.w	8003b46 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a04:	d102      	bne.n	8003a0c <HAL_ADC_ConfigChannel+0x474>
 8003a06:	4b07      	ldr	r3, [pc, #28]	; (8003a24 <HAL_ADC_ConfigChannel+0x48c>)
 8003a08:	60fb      	str	r3, [r7, #12]
 8003a0a:	e023      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x4bc>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a04      	ldr	r2, [pc, #16]	; (8003a24 <HAL_ADC_ConfigChannel+0x48c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d10c      	bne.n	8003a30 <HAL_ADC_ConfigChannel+0x498>
 8003a16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	e01a      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x4bc>
 8003a1e:	bf00      	nop
 8003a20:	83fff000 	.word	0x83fff000
 8003a24:	50000100 	.word	0x50000100
 8003a28:	50000300 	.word	0x50000300
 8003a2c:	50000700 	.word	0x50000700
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a4a      	ldr	r2, [pc, #296]	; (8003b60 <HAL_ADC_ConfigChannel+0x5c8>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d102      	bne.n	8003a40 <HAL_ADC_ConfigChannel+0x4a8>
 8003a3a:	4b4a      	ldr	r3, [pc, #296]	; (8003b64 <HAL_ADC_ConfigChannel+0x5cc>)
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	e009      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x4bc>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a47      	ldr	r2, [pc, #284]	; (8003b64 <HAL_ADC_ConfigChannel+0x5cc>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d102      	bne.n	8003a50 <HAL_ADC_ConfigChannel+0x4b8>
 8003a4a:	4b45      	ldr	r3, [pc, #276]	; (8003b60 <HAL_ADC_ConfigChannel+0x5c8>)
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	e001      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x4bc>
 8003a50:	2300      	movs	r3, #0
 8003a52:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d108      	bne.n	8003a74 <HAL_ADC_ConfigChannel+0x4dc>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d101      	bne.n	8003a74 <HAL_ADC_ConfigChannel+0x4dc>
 8003a70:	2301      	movs	r3, #1
 8003a72:	e000      	b.n	8003a76 <HAL_ADC_ConfigChannel+0x4de>
 8003a74:	2300      	movs	r3, #0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d150      	bne.n	8003b1c <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003a7a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d010      	beq.n	8003aa2 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 0303 	and.w	r3, r3, #3
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d107      	bne.n	8003a9c <HAL_ADC_ConfigChannel+0x504>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d101      	bne.n	8003a9c <HAL_ADC_ConfigChannel+0x504>
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e000      	b.n	8003a9e <HAL_ADC_ConfigChannel+0x506>
 8003a9c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d13c      	bne.n	8003b1c <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b10      	cmp	r3, #16
 8003aa8:	d11d      	bne.n	8003ae6 <HAL_ADC_ConfigChannel+0x54e>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ab2:	d118      	bne.n	8003ae6 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003ab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003abc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003abe:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ac0:	4b29      	ldr	r3, [pc, #164]	; (8003b68 <HAL_ADC_ConfigChannel+0x5d0>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a29      	ldr	r2, [pc, #164]	; (8003b6c <HAL_ADC_ConfigChannel+0x5d4>)
 8003ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aca:	0c9a      	lsrs	r2, r3, #18
 8003acc:	4613      	mov	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ad6:	e002      	b.n	8003ade <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1f9      	bne.n	8003ad8 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003ae4:	e02e      	b.n	8003b44 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b11      	cmp	r3, #17
 8003aec:	d10b      	bne.n	8003b06 <HAL_ADC_ConfigChannel+0x56e>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003af6:	d106      	bne.n	8003b06 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003af8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003b00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b02:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003b04:	e01e      	b.n	8003b44 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2b12      	cmp	r3, #18
 8003b0c:	d11a      	bne.n	8003b44 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003b0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b18:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003b1a:	e013      	b.n	8003b44 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b20:	f043 0220 	orr.w	r2, r3, #32
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003b2e:	e00a      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b34:	f043 0220 	orr.w	r2, r3, #32
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003b42:	e000      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003b44:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003b4e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	376c      	adds	r7, #108	; 0x6c
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	50000400 	.word	0x50000400
 8003b64:	50000500 	.word	0x50000500
 8003b68:	20000000 	.word	0x20000000
 8003b6c:	431bde83 	.word	0x431bde83

08003b70 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b099      	sub	sp, #100	; 0x64
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b88:	d102      	bne.n	8003b90 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8003b8a:	4b6d      	ldr	r3, [pc, #436]	; (8003d40 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003b8c:	60bb      	str	r3, [r7, #8]
 8003b8e:	e01a      	b.n	8003bc6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a6a      	ldr	r2, [pc, #424]	; (8003d40 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d103      	bne.n	8003ba2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8003b9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003b9e:	60bb      	str	r3, [r7, #8]
 8003ba0:	e011      	b.n	8003bc6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a67      	ldr	r2, [pc, #412]	; (8003d44 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d102      	bne.n	8003bb2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003bac:	4b66      	ldr	r3, [pc, #408]	; (8003d48 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003bae:	60bb      	str	r3, [r7, #8]
 8003bb0:	e009      	b.n	8003bc6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a64      	ldr	r2, [pc, #400]	; (8003d48 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d102      	bne.n	8003bc2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003bbc:	4b61      	ldr	r3, [pc, #388]	; (8003d44 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003bbe:	60bb      	str	r3, [r7, #8]
 8003bc0:	e001      	b.n	8003bc6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0b0      	b.n	8003d32 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d101      	bne.n	8003bde <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003bda:	2302      	movs	r3, #2
 8003bdc:	e0a9      	b.n	8003d32 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f040 808d 	bne.w	8003d10 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 0304 	and.w	r3, r3, #4
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f040 8086 	bne.w	8003d10 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c0c:	d004      	beq.n	8003c18 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a4b      	ldr	r2, [pc, #300]	; (8003d40 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d101      	bne.n	8003c1c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003c18:	4b4c      	ldr	r3, [pc, #304]	; (8003d4c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8003c1a:	e000      	b.n	8003c1e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003c1c:	4b4c      	ldr	r3, [pc, #304]	; (8003d50 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8003c1e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d040      	beq.n	8003caa <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003c28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	6859      	ldr	r1, [r3, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c3a:	035b      	lsls	r3, r3, #13
 8003c3c:	430b      	orrs	r3, r1
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c42:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d108      	bne.n	8003c64 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d101      	bne.n	8003c64 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003c60:	2301      	movs	r3, #1
 8003c62:	e000      	b.n	8003c66 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003c64:	2300      	movs	r3, #0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d15c      	bne.n	8003d24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 0303 	and.w	r3, r3, #3
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d107      	bne.n	8003c86 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d101      	bne.n	8003c86 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8003c86:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d14b      	bne.n	8003d24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003c8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003c94:	f023 030f 	bic.w	r3, r3, #15
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	6811      	ldr	r1, [r2, #0]
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	6892      	ldr	r2, [r2, #8]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ca6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ca8:	e03c      	b.n	8003d24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003caa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cb4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f003 0303 	and.w	r3, r3, #3
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d108      	bne.n	8003cd6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d101      	bne.n	8003cd6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e000      	b.n	8003cd8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d123      	bne.n	8003d24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 0303 	and.w	r3, r3, #3
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d107      	bne.n	8003cf8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d101      	bne.n	8003cf8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e000      	b.n	8003cfa <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003cf8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d112      	bne.n	8003d24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003cfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003d06:	f023 030f 	bic.w	r3, r3, #15
 8003d0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d0c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d0e:	e009      	b.n	8003d24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d14:	f043 0220 	orr.w	r2, r3, #32
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003d22:	e000      	b.n	8003d26 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d24:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003d2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003d32:	4618      	mov	r0, r3
 8003d34:	3764      	adds	r7, #100	; 0x64
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	50000100 	.word	0x50000100
 8003d44:	50000400 	.word	0x50000400
 8003d48:	50000500 	.word	0x50000500
 8003d4c:	50000300 	.word	0x50000300
 8003d50:	50000700 	.word	0x50000700

08003d54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d108      	bne.n	8003d80 <ADC_Enable+0x2c>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d101      	bne.n	8003d80 <ADC_Enable+0x2c>
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e000      	b.n	8003d82 <ADC_Enable+0x2e>
 8003d80:	2300      	movs	r3, #0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d143      	bne.n	8003e0e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	4b22      	ldr	r3, [pc, #136]	; (8003e18 <ADC_Enable+0xc4>)
 8003d8e:	4013      	ands	r3, r2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00d      	beq.n	8003db0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d98:	f043 0210 	orr.w	r2, r3, #16
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da4:	f043 0201 	orr.w	r2, r3, #1
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e02f      	b.n	8003e10 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689a      	ldr	r2, [r3, #8]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f042 0201 	orr.w	r2, r2, #1
 8003dbe:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003dc0:	f7fe ff9a 	bl	8002cf8 <HAL_GetTick>
 8003dc4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003dc6:	e01b      	b.n	8003e00 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003dc8:	f7fe ff96 	bl	8002cf8 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d914      	bls.n	8003e00 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d00d      	beq.n	8003e00 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	f043 0210 	orr.w	r2, r3, #16
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df4:	f043 0201 	orr.w	r2, r3, #1
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e007      	b.n	8003e10 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d1dc      	bne.n	8003dc8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	8000003f 	.word	0x8000003f

08003e1c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 0303 	and.w	r3, r3, #3
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d108      	bne.n	8003e48 <ADC_Disable+0x2c>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d101      	bne.n	8003e48 <ADC_Disable+0x2c>
 8003e44:	2301      	movs	r3, #1
 8003e46:	e000      	b.n	8003e4a <ADC_Disable+0x2e>
 8003e48:	2300      	movs	r3, #0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d047      	beq.n	8003ede <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 030d 	and.w	r3, r3, #13
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d10f      	bne.n	8003e7c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0202 	orr.w	r2, r2, #2
 8003e6a:	609a      	str	r2, [r3, #8]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2203      	movs	r2, #3
 8003e72:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003e74:	f7fe ff40 	bl	8002cf8 <HAL_GetTick>
 8003e78:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003e7a:	e029      	b.n	8003ed0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	f043 0210 	orr.w	r2, r3, #16
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8c:	f043 0201 	orr.w	r2, r3, #1
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e023      	b.n	8003ee0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e98:	f7fe ff2e 	bl	8002cf8 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d914      	bls.n	8003ed0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d10d      	bne.n	8003ed0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	f043 0210 	orr.w	r2, r3, #16
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec4:	f043 0201 	orr.w	r2, r3, #1
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e007      	b.n	8003ee0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d0dc      	beq.n	8003e98 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f003 0307 	and.w	r3, r3, #7
 8003ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ef8:	4b0c      	ldr	r3, [pc, #48]	; (8003f2c <__NVIC_SetPriorityGrouping+0x44>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f04:	4013      	ands	r3, r2
 8003f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f1a:	4a04      	ldr	r2, [pc, #16]	; (8003f2c <__NVIC_SetPriorityGrouping+0x44>)
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	60d3      	str	r3, [r2, #12]
}
 8003f20:	bf00      	nop
 8003f22:	3714      	adds	r7, #20
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr
 8003f2c:	e000ed00 	.word	0xe000ed00

08003f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f34:	4b04      	ldr	r3, [pc, #16]	; (8003f48 <__NVIC_GetPriorityGrouping+0x18>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	0a1b      	lsrs	r3, r3, #8
 8003f3a:	f003 0307 	and.w	r3, r3, #7
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	e000ed00 	.word	0xe000ed00

08003f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	4603      	mov	r3, r0
 8003f54:	6039      	str	r1, [r7, #0]
 8003f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	db0a      	blt.n	8003f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	490c      	ldr	r1, [pc, #48]	; (8003f98 <__NVIC_SetPriority+0x4c>)
 8003f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f6a:	0112      	lsls	r2, r2, #4
 8003f6c:	b2d2      	uxtb	r2, r2
 8003f6e:	440b      	add	r3, r1
 8003f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f74:	e00a      	b.n	8003f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	4908      	ldr	r1, [pc, #32]	; (8003f9c <__NVIC_SetPriority+0x50>)
 8003f7c:	79fb      	ldrb	r3, [r7, #7]
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	3b04      	subs	r3, #4
 8003f84:	0112      	lsls	r2, r2, #4
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	440b      	add	r3, r1
 8003f8a:	761a      	strb	r2, [r3, #24]
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr
 8003f98:	e000e100 	.word	0xe000e100
 8003f9c:	e000ed00 	.word	0xe000ed00

08003fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b089      	sub	sp, #36	; 0x24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f003 0307 	and.w	r3, r3, #7
 8003fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	f1c3 0307 	rsb	r3, r3, #7
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	bf28      	it	cs
 8003fbe:	2304      	movcs	r3, #4
 8003fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	2b06      	cmp	r3, #6
 8003fc8:	d902      	bls.n	8003fd0 <NVIC_EncodePriority+0x30>
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	3b03      	subs	r3, #3
 8003fce:	e000      	b.n	8003fd2 <NVIC_EncodePriority+0x32>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	fa02 f303 	lsl.w	r3, r2, r3
 8003fde:	43da      	mvns	r2, r3
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	401a      	ands	r2, r3
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff2:	43d9      	mvns	r1, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ff8:	4313      	orrs	r3, r2
         );
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3724      	adds	r7, #36	; 0x24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
	...

08004008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3b01      	subs	r3, #1
 8004014:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004018:	d301      	bcc.n	800401e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800401a:	2301      	movs	r3, #1
 800401c:	e00f      	b.n	800403e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800401e:	4a0a      	ldr	r2, [pc, #40]	; (8004048 <SysTick_Config+0x40>)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	3b01      	subs	r3, #1
 8004024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004026:	210f      	movs	r1, #15
 8004028:	f04f 30ff 	mov.w	r0, #4294967295
 800402c:	f7ff ff8e 	bl	8003f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004030:	4b05      	ldr	r3, [pc, #20]	; (8004048 <SysTick_Config+0x40>)
 8004032:	2200      	movs	r2, #0
 8004034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004036:	4b04      	ldr	r3, [pc, #16]	; (8004048 <SysTick_Config+0x40>)
 8004038:	2207      	movs	r2, #7
 800403a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	e000e010 	.word	0xe000e010

0800404c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f7ff ff47 	bl	8003ee8 <__NVIC_SetPriorityGrouping>
}
 800405a:	bf00      	nop
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b086      	sub	sp, #24
 8004066:	af00      	add	r7, sp, #0
 8004068:	4603      	mov	r3, r0
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	607a      	str	r2, [r7, #4]
 800406e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004070:	2300      	movs	r3, #0
 8004072:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004074:	f7ff ff5c 	bl	8003f30 <__NVIC_GetPriorityGrouping>
 8004078:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	68b9      	ldr	r1, [r7, #8]
 800407e:	6978      	ldr	r0, [r7, #20]
 8004080:	f7ff ff8e 	bl	8003fa0 <NVIC_EncodePriority>
 8004084:	4602      	mov	r2, r0
 8004086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800408a:	4611      	mov	r1, r2
 800408c:	4618      	mov	r0, r3
 800408e:	f7ff ff5d 	bl	8003f4c <__NVIC_SetPriority>
}
 8004092:	bf00      	nop
 8004094:	3718      	adds	r7, #24
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b082      	sub	sp, #8
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7ff ffb0 	bl	8004008 <SysTick_Config>
 80040a8:	4603      	mov	r3, r0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
	...

080040b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040be:	2300      	movs	r3, #0
 80040c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040c2:	e160      	b.n	8004386 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	2101      	movs	r1, #1
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	fa01 f303 	lsl.w	r3, r1, r3
 80040d0:	4013      	ands	r3, r2
 80040d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 8152 	beq.w	8004380 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f003 0303 	and.w	r3, r3, #3
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d005      	beq.n	80040f4 <HAL_GPIO_Init+0x40>
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f003 0303 	and.w	r3, r3, #3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d130      	bne.n	8004156 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	2203      	movs	r2, #3
 8004100:	fa02 f303 	lsl.w	r3, r2, r3
 8004104:	43db      	mvns	r3, r3
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	4013      	ands	r3, r2
 800410a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	68da      	ldr	r2, [r3, #12]
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	fa02 f303 	lsl.w	r3, r2, r3
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	4313      	orrs	r3, r2
 800411c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800412a:	2201      	movs	r2, #1
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	fa02 f303 	lsl.w	r3, r2, r3
 8004132:	43db      	mvns	r3, r3
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	4013      	ands	r3, r2
 8004138:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	091b      	lsrs	r3, r3, #4
 8004140:	f003 0201 	and.w	r2, r3, #1
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	fa02 f303 	lsl.w	r3, r2, r3
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	4313      	orrs	r3, r2
 800414e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f003 0303 	and.w	r3, r3, #3
 800415e:	2b03      	cmp	r3, #3
 8004160:	d017      	beq.n	8004192 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	2203      	movs	r2, #3
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	43db      	mvns	r3, r3
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	4013      	ands	r3, r2
 8004178:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	689a      	ldr	r2, [r3, #8]
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	fa02 f303 	lsl.w	r3, r2, r3
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	4313      	orrs	r3, r2
 800418a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d123      	bne.n	80041e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	08da      	lsrs	r2, r3, #3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	3208      	adds	r2, #8
 80041a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	220f      	movs	r2, #15
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	43db      	mvns	r3, r3
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	4013      	ands	r3, r2
 80041c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	691a      	ldr	r2, [r3, #16]
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f003 0307 	and.w	r3, r3, #7
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	fa02 f303 	lsl.w	r3, r2, r3
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	08da      	lsrs	r2, r3, #3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	3208      	adds	r2, #8
 80041e0:	6939      	ldr	r1, [r7, #16]
 80041e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	2203      	movs	r2, #3
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	43db      	mvns	r3, r3
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	4013      	ands	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f003 0203 	and.w	r2, r3, #3
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	005b      	lsls	r3, r3, #1
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	4313      	orrs	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 80ac 	beq.w	8004380 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004228:	4b5e      	ldr	r3, [pc, #376]	; (80043a4 <HAL_GPIO_Init+0x2f0>)
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	4a5d      	ldr	r2, [pc, #372]	; (80043a4 <HAL_GPIO_Init+0x2f0>)
 800422e:	f043 0301 	orr.w	r3, r3, #1
 8004232:	6193      	str	r3, [r2, #24]
 8004234:	4b5b      	ldr	r3, [pc, #364]	; (80043a4 <HAL_GPIO_Init+0x2f0>)
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	60bb      	str	r3, [r7, #8]
 800423e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004240:	4a59      	ldr	r2, [pc, #356]	; (80043a8 <HAL_GPIO_Init+0x2f4>)
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	089b      	lsrs	r3, r3, #2
 8004246:	3302      	adds	r3, #2
 8004248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800424c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f003 0303 	and.w	r3, r3, #3
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	220f      	movs	r2, #15
 8004258:	fa02 f303 	lsl.w	r3, r2, r3
 800425c:	43db      	mvns	r3, r3
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	4013      	ands	r3, r2
 8004262:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800426a:	d025      	beq.n	80042b8 <HAL_GPIO_Init+0x204>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a4f      	ldr	r2, [pc, #316]	; (80043ac <HAL_GPIO_Init+0x2f8>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d01f      	beq.n	80042b4 <HAL_GPIO_Init+0x200>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a4e      	ldr	r2, [pc, #312]	; (80043b0 <HAL_GPIO_Init+0x2fc>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d019      	beq.n	80042b0 <HAL_GPIO_Init+0x1fc>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a4d      	ldr	r2, [pc, #308]	; (80043b4 <HAL_GPIO_Init+0x300>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d013      	beq.n	80042ac <HAL_GPIO_Init+0x1f8>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a4c      	ldr	r2, [pc, #304]	; (80043b8 <HAL_GPIO_Init+0x304>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d00d      	beq.n	80042a8 <HAL_GPIO_Init+0x1f4>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a4b      	ldr	r2, [pc, #300]	; (80043bc <HAL_GPIO_Init+0x308>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d007      	beq.n	80042a4 <HAL_GPIO_Init+0x1f0>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a4a      	ldr	r2, [pc, #296]	; (80043c0 <HAL_GPIO_Init+0x30c>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d101      	bne.n	80042a0 <HAL_GPIO_Init+0x1ec>
 800429c:	2306      	movs	r3, #6
 800429e:	e00c      	b.n	80042ba <HAL_GPIO_Init+0x206>
 80042a0:	2307      	movs	r3, #7
 80042a2:	e00a      	b.n	80042ba <HAL_GPIO_Init+0x206>
 80042a4:	2305      	movs	r3, #5
 80042a6:	e008      	b.n	80042ba <HAL_GPIO_Init+0x206>
 80042a8:	2304      	movs	r3, #4
 80042aa:	e006      	b.n	80042ba <HAL_GPIO_Init+0x206>
 80042ac:	2303      	movs	r3, #3
 80042ae:	e004      	b.n	80042ba <HAL_GPIO_Init+0x206>
 80042b0:	2302      	movs	r3, #2
 80042b2:	e002      	b.n	80042ba <HAL_GPIO_Init+0x206>
 80042b4:	2301      	movs	r3, #1
 80042b6:	e000      	b.n	80042ba <HAL_GPIO_Init+0x206>
 80042b8:	2300      	movs	r3, #0
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	f002 0203 	and.w	r2, r2, #3
 80042c0:	0092      	lsls	r2, r2, #2
 80042c2:	4093      	lsls	r3, r2
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80042ca:	4937      	ldr	r1, [pc, #220]	; (80043a8 <HAL_GPIO_Init+0x2f4>)
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	089b      	lsrs	r3, r3, #2
 80042d0:	3302      	adds	r3, #2
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042d8:	4b3a      	ldr	r3, [pc, #232]	; (80043c4 <HAL_GPIO_Init+0x310>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	43db      	mvns	r3, r3
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4013      	ands	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80042fc:	4a31      	ldr	r2, [pc, #196]	; (80043c4 <HAL_GPIO_Init+0x310>)
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004302:	4b30      	ldr	r3, [pc, #192]	; (80043c4 <HAL_GPIO_Init+0x310>)
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	43db      	mvns	r3, r3
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	4013      	ands	r3, r2
 8004310:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4313      	orrs	r3, r2
 8004324:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004326:	4a27      	ldr	r2, [pc, #156]	; (80043c4 <HAL_GPIO_Init+0x310>)
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800432c:	4b25      	ldr	r3, [pc, #148]	; (80043c4 <HAL_GPIO_Init+0x310>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	43db      	mvns	r3, r3
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	4013      	ands	r3, r2
 800433a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d003      	beq.n	8004350 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	4313      	orrs	r3, r2
 800434e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004350:	4a1c      	ldr	r2, [pc, #112]	; (80043c4 <HAL_GPIO_Init+0x310>)
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004356:	4b1b      	ldr	r3, [pc, #108]	; (80043c4 <HAL_GPIO_Init+0x310>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	43db      	mvns	r3, r3
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	4013      	ands	r3, r2
 8004364:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4313      	orrs	r3, r2
 8004378:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800437a:	4a12      	ldr	r2, [pc, #72]	; (80043c4 <HAL_GPIO_Init+0x310>)
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	3301      	adds	r3, #1
 8004384:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	fa22 f303 	lsr.w	r3, r2, r3
 8004390:	2b00      	cmp	r3, #0
 8004392:	f47f ae97 	bne.w	80040c4 <HAL_GPIO_Init+0x10>
  }
}
 8004396:	bf00      	nop
 8004398:	bf00      	nop
 800439a:	371c      	adds	r7, #28
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr
 80043a4:	40021000 	.word	0x40021000
 80043a8:	40010000 	.word	0x40010000
 80043ac:	48000400 	.word	0x48000400
 80043b0:	48000800 	.word	0x48000800
 80043b4:	48000c00 	.word	0x48000c00
 80043b8:	48001000 	.word	0x48001000
 80043bc:	48001400 	.word	0x48001400
 80043c0:	48001800 	.word	0x48001800
 80043c4:	40010400 	.word	0x40010400

080043c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	460b      	mov	r3, r1
 80043d2:	807b      	strh	r3, [r7, #2]
 80043d4:	4613      	mov	r3, r2
 80043d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043d8:	787b      	ldrb	r3, [r7, #1]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043de:	887a      	ldrh	r2, [r7, #2]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043e4:	e002      	b.n	80043ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043e6:	887a      	ldrh	r2, [r7, #2]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80043fe:	af00      	add	r7, sp, #0
 8004400:	1d3b      	adds	r3, r7, #4
 8004402:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004404:	1d3b      	adds	r3, r7, #4
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d102      	bne.n	8004412 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	f000 bf01 	b.w	8005214 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004412:	1d3b      	adds	r3, r7, #4
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 8160 	beq.w	80046e2 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004422:	4bae      	ldr	r3, [pc, #696]	; (80046dc <HAL_RCC_OscConfig+0x2e4>)
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f003 030c 	and.w	r3, r3, #12
 800442a:	2b04      	cmp	r3, #4
 800442c:	d00c      	beq.n	8004448 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800442e:	4bab      	ldr	r3, [pc, #684]	; (80046dc <HAL_RCC_OscConfig+0x2e4>)
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f003 030c 	and.w	r3, r3, #12
 8004436:	2b08      	cmp	r3, #8
 8004438:	d159      	bne.n	80044ee <HAL_RCC_OscConfig+0xf6>
 800443a:	4ba8      	ldr	r3, [pc, #672]	; (80046dc <HAL_RCC_OscConfig+0x2e4>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004446:	d152      	bne.n	80044ee <HAL_RCC_OscConfig+0xf6>
 8004448:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800444c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004450:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004454:	fa93 f3a3 	rbit	r3, r3
 8004458:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800445c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004460:	fab3 f383 	clz	r3, r3
 8004464:	b2db      	uxtb	r3, r3
 8004466:	095b      	lsrs	r3, r3, #5
 8004468:	b2db      	uxtb	r3, r3
 800446a:	f043 0301 	orr.w	r3, r3, #1
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b01      	cmp	r3, #1
 8004472:	d102      	bne.n	800447a <HAL_RCC_OscConfig+0x82>
 8004474:	4b99      	ldr	r3, [pc, #612]	; (80046dc <HAL_RCC_OscConfig+0x2e4>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	e015      	b.n	80044a6 <HAL_RCC_OscConfig+0xae>
 800447a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800447e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004482:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8004486:	fa93 f3a3 	rbit	r3, r3
 800448a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800448e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004492:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004496:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800449a:	fa93 f3a3 	rbit	r3, r3
 800449e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80044a2:	4b8e      	ldr	r3, [pc, #568]	; (80046dc <HAL_RCC_OscConfig+0x2e4>)
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80044aa:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80044ae:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80044b2:	fa92 f2a2 	rbit	r2, r2
 80044b6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80044ba:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80044be:	fab2 f282 	clz	r2, r2
 80044c2:	b2d2      	uxtb	r2, r2
 80044c4:	f042 0220 	orr.w	r2, r2, #32
 80044c8:	b2d2      	uxtb	r2, r2
 80044ca:	f002 021f 	and.w	r2, r2, #31
 80044ce:	2101      	movs	r1, #1
 80044d0:	fa01 f202 	lsl.w	r2, r1, r2
 80044d4:	4013      	ands	r3, r2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 8102 	beq.w	80046e0 <HAL_RCC_OscConfig+0x2e8>
 80044dc:	1d3b      	adds	r3, r7, #4
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f040 80fc 	bne.w	80046e0 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	f000 be93 	b.w	8005214 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044ee:	1d3b      	adds	r3, r7, #4
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f8:	d106      	bne.n	8004508 <HAL_RCC_OscConfig+0x110>
 80044fa:	4b78      	ldr	r3, [pc, #480]	; (80046dc <HAL_RCC_OscConfig+0x2e4>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a77      	ldr	r2, [pc, #476]	; (80046dc <HAL_RCC_OscConfig+0x2e4>)
 8004500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004504:	6013      	str	r3, [r2, #0]
 8004506:	e030      	b.n	800456a <HAL_RCC_OscConfig+0x172>
 8004508:	1d3b      	adds	r3, r7, #4
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10c      	bne.n	800452c <HAL_RCC_OscConfig+0x134>
 8004512:	4b72      	ldr	r3, [pc, #456]	; (80046dc <HAL_RCC_OscConfig+0x2e4>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a71      	ldr	r2, [pc, #452]	; (80046dc <HAL_RCC_OscConfig+0x2e4>)
 8004518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800451c:	6013      	str	r3, [r2, #0]
 800451e:	4b6f      	ldr	r3, [pc, #444]	; (80046dc <HAL_RCC_OscConfig+0x2e4>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a6e      	ldr	r2, [pc, #440]	; (80046dc <HAL_RCC_OscConfig+0x2e4>)
 8004524:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004528:	6013      	str	r3, [r2, #0]
 800452a:	e01e      	b.n	800456a <HAL_RCC_OscConfig+0x172>
 800452c:	1d3b      	adds	r3, r7, #4
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004536:	d10c      	bne.n	8004552 <HAL_RCC_OscConfig+0x15a>
 8004538:	4b68      	ldr	r3, [pc, #416]	; (80046dc <HAL_RCC_OscConfig+0x2e4>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a67      	ldr	r2, [pc, #412]	; (80046dc <HAL_RCC_OscConfig+0x2e4>)
 800453e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004542:	6013      	str	r3, [r2, #0]
 8004544:	4b65      	ldr	r3, [pc, #404]	; (80046dc <HAL_RCC_OscConfig+0x2e4>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a64      	ldr	r2, [pc, #400]	; (80046dc <HAL_RCC_OscConfig+0x2e4>)
 800454a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800454e:	6013      	str	r3, [r2, #0]
 8004550:	e00b      	b.n	800456a <HAL_RCC_OscConfig+0x172>
 8004552:	4b62      	ldr	r3, [pc, #392]	; (80046dc <HAL_RCC_OscConfig+0x2e4>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a61      	ldr	r2, [pc, #388]	; (80046dc <HAL_RCC_OscConfig+0x2e4>)
 8004558:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	4b5f      	ldr	r3, [pc, #380]	; (80046dc <HAL_RCC_OscConfig+0x2e4>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a5e      	ldr	r2, [pc, #376]	; (80046dc <HAL_RCC_OscConfig+0x2e4>)
 8004564:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004568:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800456a:	1d3b      	adds	r3, r7, #4
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d059      	beq.n	8004628 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004574:	f7fe fbc0 	bl	8002cf8 <HAL_GetTick>
 8004578:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800457c:	e00a      	b.n	8004594 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800457e:	f7fe fbbb 	bl	8002cf8 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b64      	cmp	r3, #100	; 0x64
 800458c:	d902      	bls.n	8004594 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	f000 be40 	b.w	8005214 <HAL_RCC_OscConfig+0xe1c>
 8004594:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004598:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80045a0:	fa93 f3a3 	rbit	r3, r3
 80045a4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80045a8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ac:	fab3 f383 	clz	r3, r3
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	095b      	lsrs	r3, r3, #5
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	f043 0301 	orr.w	r3, r3, #1
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d102      	bne.n	80045c6 <HAL_RCC_OscConfig+0x1ce>
 80045c0:	4b46      	ldr	r3, [pc, #280]	; (80046dc <HAL_RCC_OscConfig+0x2e4>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	e015      	b.n	80045f2 <HAL_RCC_OscConfig+0x1fa>
 80045c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045ca:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ce:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80045d2:	fa93 f3a3 	rbit	r3, r3
 80045d6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80045da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045de:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80045e2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80045e6:	fa93 f3a3 	rbit	r3, r3
 80045ea:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80045ee:	4b3b      	ldr	r3, [pc, #236]	; (80046dc <HAL_RCC_OscConfig+0x2e4>)
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80045f6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80045fa:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80045fe:	fa92 f2a2 	rbit	r2, r2
 8004602:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8004606:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800460a:	fab2 f282 	clz	r2, r2
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	f042 0220 	orr.w	r2, r2, #32
 8004614:	b2d2      	uxtb	r2, r2
 8004616:	f002 021f 	and.w	r2, r2, #31
 800461a:	2101      	movs	r1, #1
 800461c:	fa01 f202 	lsl.w	r2, r1, r2
 8004620:	4013      	ands	r3, r2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0ab      	beq.n	800457e <HAL_RCC_OscConfig+0x186>
 8004626:	e05c      	b.n	80046e2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004628:	f7fe fb66 	bl	8002cf8 <HAL_GetTick>
 800462c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004630:	e00a      	b.n	8004648 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004632:	f7fe fb61 	bl	8002cf8 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b64      	cmp	r3, #100	; 0x64
 8004640:	d902      	bls.n	8004648 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	f000 bde6 	b.w	8005214 <HAL_RCC_OscConfig+0xe1c>
 8004648:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800464c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004650:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8004654:	fa93 f3a3 	rbit	r3, r3
 8004658:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800465c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004660:	fab3 f383 	clz	r3, r3
 8004664:	b2db      	uxtb	r3, r3
 8004666:	095b      	lsrs	r3, r3, #5
 8004668:	b2db      	uxtb	r3, r3
 800466a:	f043 0301 	orr.w	r3, r3, #1
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b01      	cmp	r3, #1
 8004672:	d102      	bne.n	800467a <HAL_RCC_OscConfig+0x282>
 8004674:	4b19      	ldr	r3, [pc, #100]	; (80046dc <HAL_RCC_OscConfig+0x2e4>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	e015      	b.n	80046a6 <HAL_RCC_OscConfig+0x2ae>
 800467a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800467e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004682:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004686:	fa93 f3a3 	rbit	r3, r3
 800468a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800468e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004692:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004696:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800469a:	fa93 f3a3 	rbit	r3, r3
 800469e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80046a2:	4b0e      	ldr	r3, [pc, #56]	; (80046dc <HAL_RCC_OscConfig+0x2e4>)
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80046aa:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80046ae:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80046b2:	fa92 f2a2 	rbit	r2, r2
 80046b6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80046ba:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80046be:	fab2 f282 	clz	r2, r2
 80046c2:	b2d2      	uxtb	r2, r2
 80046c4:	f042 0220 	orr.w	r2, r2, #32
 80046c8:	b2d2      	uxtb	r2, r2
 80046ca:	f002 021f 	and.w	r2, r2, #31
 80046ce:	2101      	movs	r1, #1
 80046d0:	fa01 f202 	lsl.w	r2, r1, r2
 80046d4:	4013      	ands	r3, r2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1ab      	bne.n	8004632 <HAL_RCC_OscConfig+0x23a>
 80046da:	e002      	b.n	80046e2 <HAL_RCC_OscConfig+0x2ea>
 80046dc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046e2:	1d3b      	adds	r3, r7, #4
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 8170 	beq.w	80049d2 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80046f2:	4bd0      	ldr	r3, [pc, #832]	; (8004a34 <HAL_RCC_OscConfig+0x63c>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f003 030c 	and.w	r3, r3, #12
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00c      	beq.n	8004718 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80046fe:	4bcd      	ldr	r3, [pc, #820]	; (8004a34 <HAL_RCC_OscConfig+0x63c>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f003 030c 	and.w	r3, r3, #12
 8004706:	2b08      	cmp	r3, #8
 8004708:	d16d      	bne.n	80047e6 <HAL_RCC_OscConfig+0x3ee>
 800470a:	4bca      	ldr	r3, [pc, #808]	; (8004a34 <HAL_RCC_OscConfig+0x63c>)
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004712:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004716:	d166      	bne.n	80047e6 <HAL_RCC_OscConfig+0x3ee>
 8004718:	2302      	movs	r3, #2
 800471a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004722:	fa93 f3a3 	rbit	r3, r3
 8004726:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800472a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800472e:	fab3 f383 	clz	r3, r3
 8004732:	b2db      	uxtb	r3, r3
 8004734:	095b      	lsrs	r3, r3, #5
 8004736:	b2db      	uxtb	r3, r3
 8004738:	f043 0301 	orr.w	r3, r3, #1
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b01      	cmp	r3, #1
 8004740:	d102      	bne.n	8004748 <HAL_RCC_OscConfig+0x350>
 8004742:	4bbc      	ldr	r3, [pc, #752]	; (8004a34 <HAL_RCC_OscConfig+0x63c>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	e013      	b.n	8004770 <HAL_RCC_OscConfig+0x378>
 8004748:	2302      	movs	r3, #2
 800474a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004752:	fa93 f3a3 	rbit	r3, r3
 8004756:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800475a:	2302      	movs	r3, #2
 800475c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004760:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004764:	fa93 f3a3 	rbit	r3, r3
 8004768:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800476c:	4bb1      	ldr	r3, [pc, #708]	; (8004a34 <HAL_RCC_OscConfig+0x63c>)
 800476e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004770:	2202      	movs	r2, #2
 8004772:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004776:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800477a:	fa92 f2a2 	rbit	r2, r2
 800477e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8004782:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004786:	fab2 f282 	clz	r2, r2
 800478a:	b2d2      	uxtb	r2, r2
 800478c:	f042 0220 	orr.w	r2, r2, #32
 8004790:	b2d2      	uxtb	r2, r2
 8004792:	f002 021f 	and.w	r2, r2, #31
 8004796:	2101      	movs	r1, #1
 8004798:	fa01 f202 	lsl.w	r2, r1, r2
 800479c:	4013      	ands	r3, r2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d007      	beq.n	80047b2 <HAL_RCC_OscConfig+0x3ba>
 80047a2:	1d3b      	adds	r3, r7, #4
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d002      	beq.n	80047b2 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	f000 bd31 	b.w	8005214 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047b2:	4ba0      	ldr	r3, [pc, #640]	; (8004a34 <HAL_RCC_OscConfig+0x63c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047ba:	1d3b      	adds	r3, r7, #4
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	21f8      	movs	r1, #248	; 0xf8
 80047c2:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c6:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80047ca:	fa91 f1a1 	rbit	r1, r1
 80047ce:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80047d2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80047d6:	fab1 f181 	clz	r1, r1
 80047da:	b2c9      	uxtb	r1, r1
 80047dc:	408b      	lsls	r3, r1
 80047de:	4995      	ldr	r1, [pc, #596]	; (8004a34 <HAL_RCC_OscConfig+0x63c>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047e4:	e0f5      	b.n	80049d2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047e6:	1d3b      	adds	r3, r7, #4
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 8085 	beq.w	80048fc <HAL_RCC_OscConfig+0x504>
 80047f2:	2301      	movs	r3, #1
 80047f4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80047fc:	fa93 f3a3 	rbit	r3, r3
 8004800:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8004804:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004808:	fab3 f383 	clz	r3, r3
 800480c:	b2db      	uxtb	r3, r3
 800480e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004812:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	461a      	mov	r2, r3
 800481a:	2301      	movs	r3, #1
 800481c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800481e:	f7fe fa6b 	bl	8002cf8 <HAL_GetTick>
 8004822:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004826:	e00a      	b.n	800483e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004828:	f7fe fa66 	bl	8002cf8 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b02      	cmp	r3, #2
 8004836:	d902      	bls.n	800483e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	f000 bceb 	b.w	8005214 <HAL_RCC_OscConfig+0xe1c>
 800483e:	2302      	movs	r3, #2
 8004840:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004844:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004848:	fa93 f3a3 	rbit	r3, r3
 800484c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8004850:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004854:	fab3 f383 	clz	r3, r3
 8004858:	b2db      	uxtb	r3, r3
 800485a:	095b      	lsrs	r3, r3, #5
 800485c:	b2db      	uxtb	r3, r3
 800485e:	f043 0301 	orr.w	r3, r3, #1
 8004862:	b2db      	uxtb	r3, r3
 8004864:	2b01      	cmp	r3, #1
 8004866:	d102      	bne.n	800486e <HAL_RCC_OscConfig+0x476>
 8004868:	4b72      	ldr	r3, [pc, #456]	; (8004a34 <HAL_RCC_OscConfig+0x63c>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	e013      	b.n	8004896 <HAL_RCC_OscConfig+0x49e>
 800486e:	2302      	movs	r3, #2
 8004870:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004874:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004878:	fa93 f3a3 	rbit	r3, r3
 800487c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004880:	2302      	movs	r3, #2
 8004882:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004886:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800488a:	fa93 f3a3 	rbit	r3, r3
 800488e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004892:	4b68      	ldr	r3, [pc, #416]	; (8004a34 <HAL_RCC_OscConfig+0x63c>)
 8004894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004896:	2202      	movs	r2, #2
 8004898:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800489c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80048a0:	fa92 f2a2 	rbit	r2, r2
 80048a4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80048a8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80048ac:	fab2 f282 	clz	r2, r2
 80048b0:	b2d2      	uxtb	r2, r2
 80048b2:	f042 0220 	orr.w	r2, r2, #32
 80048b6:	b2d2      	uxtb	r2, r2
 80048b8:	f002 021f 	and.w	r2, r2, #31
 80048bc:	2101      	movs	r1, #1
 80048be:	fa01 f202 	lsl.w	r2, r1, r2
 80048c2:	4013      	ands	r3, r2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d0af      	beq.n	8004828 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048c8:	4b5a      	ldr	r3, [pc, #360]	; (8004a34 <HAL_RCC_OscConfig+0x63c>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048d0:	1d3b      	adds	r3, r7, #4
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	21f8      	movs	r1, #248	; 0xf8
 80048d8:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048dc:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80048e0:	fa91 f1a1 	rbit	r1, r1
 80048e4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80048e8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80048ec:	fab1 f181 	clz	r1, r1
 80048f0:	b2c9      	uxtb	r1, r1
 80048f2:	408b      	lsls	r3, r1
 80048f4:	494f      	ldr	r1, [pc, #316]	; (8004a34 <HAL_RCC_OscConfig+0x63c>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	600b      	str	r3, [r1, #0]
 80048fa:	e06a      	b.n	80049d2 <HAL_RCC_OscConfig+0x5da>
 80048fc:	2301      	movs	r3, #1
 80048fe:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004902:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004906:	fa93 f3a3 	rbit	r3, r3
 800490a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800490e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004912:	fab3 f383 	clz	r3, r3
 8004916:	b2db      	uxtb	r3, r3
 8004918:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800491c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	461a      	mov	r2, r3
 8004924:	2300      	movs	r3, #0
 8004926:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004928:	f7fe f9e6 	bl	8002cf8 <HAL_GetTick>
 800492c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004930:	e00a      	b.n	8004948 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004932:	f7fe f9e1 	bl	8002cf8 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d902      	bls.n	8004948 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	f000 bc66 	b.w	8005214 <HAL_RCC_OscConfig+0xe1c>
 8004948:	2302      	movs	r3, #2
 800494a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004952:	fa93 f3a3 	rbit	r3, r3
 8004956:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800495a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800495e:	fab3 f383 	clz	r3, r3
 8004962:	b2db      	uxtb	r3, r3
 8004964:	095b      	lsrs	r3, r3, #5
 8004966:	b2db      	uxtb	r3, r3
 8004968:	f043 0301 	orr.w	r3, r3, #1
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b01      	cmp	r3, #1
 8004970:	d102      	bne.n	8004978 <HAL_RCC_OscConfig+0x580>
 8004972:	4b30      	ldr	r3, [pc, #192]	; (8004a34 <HAL_RCC_OscConfig+0x63c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	e013      	b.n	80049a0 <HAL_RCC_OscConfig+0x5a8>
 8004978:	2302      	movs	r3, #2
 800497a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004982:	fa93 f3a3 	rbit	r3, r3
 8004986:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800498a:	2302      	movs	r3, #2
 800498c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004990:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004994:	fa93 f3a3 	rbit	r3, r3
 8004998:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800499c:	4b25      	ldr	r3, [pc, #148]	; (8004a34 <HAL_RCC_OscConfig+0x63c>)
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	2202      	movs	r2, #2
 80049a2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80049a6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80049aa:	fa92 f2a2 	rbit	r2, r2
 80049ae:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80049b2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80049b6:	fab2 f282 	clz	r2, r2
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	f042 0220 	orr.w	r2, r2, #32
 80049c0:	b2d2      	uxtb	r2, r2
 80049c2:	f002 021f 	and.w	r2, r2, #31
 80049c6:	2101      	movs	r1, #1
 80049c8:	fa01 f202 	lsl.w	r2, r1, r2
 80049cc:	4013      	ands	r3, r2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1af      	bne.n	8004932 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049d2:	1d3b      	adds	r3, r7, #4
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0308 	and.w	r3, r3, #8
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 80da 	beq.w	8004b96 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049e2:	1d3b      	adds	r3, r7, #4
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d069      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x6c8>
 80049ec:	2301      	movs	r3, #1
 80049ee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049f6:	fa93 f3a3 	rbit	r3, r3
 80049fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80049fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a02:	fab3 f383 	clz	r3, r3
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	461a      	mov	r2, r3
 8004a0a:	4b0b      	ldr	r3, [pc, #44]	; (8004a38 <HAL_RCC_OscConfig+0x640>)
 8004a0c:	4413      	add	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	461a      	mov	r2, r3
 8004a12:	2301      	movs	r3, #1
 8004a14:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a16:	f7fe f96f 	bl	8002cf8 <HAL_GetTick>
 8004a1a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a1e:	e00d      	b.n	8004a3c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a20:	f7fe f96a 	bl	8002cf8 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d905      	bls.n	8004a3c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e3ef      	b.n	8005214 <HAL_RCC_OscConfig+0xe1c>
 8004a34:	40021000 	.word	0x40021000
 8004a38:	10908120 	.word	0x10908120
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a46:	fa93 f2a3 	rbit	r2, r3
 8004a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004a54:	2202      	movs	r2, #2
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	fa93 f2a3 	rbit	r2, r3
 8004a62:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004a66:	601a      	str	r2, [r3, #0]
 8004a68:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004a6c:	2202      	movs	r2, #2
 8004a6e:	601a      	str	r2, [r3, #0]
 8004a70:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	fa93 f2a3 	rbit	r2, r3
 8004a7a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004a7e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a80:	4ba4      	ldr	r3, [pc, #656]	; (8004d14 <HAL_RCC_OscConfig+0x91c>)
 8004a82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a84:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004a88:	2102      	movs	r1, #2
 8004a8a:	6019      	str	r1, [r3, #0]
 8004a8c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	fa93 f1a3 	rbit	r1, r3
 8004a96:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004a9a:	6019      	str	r1, [r3, #0]
  return result;
 8004a9c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	fab3 f383 	clz	r3, r3
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	f003 031f 	and.w	r3, r3, #31
 8004ab2:	2101      	movs	r1, #1
 8004ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab8:	4013      	ands	r3, r2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0b0      	beq.n	8004a20 <HAL_RCC_OscConfig+0x628>
 8004abe:	e06a      	b.n	8004b96 <HAL_RCC_OscConfig+0x79e>
 8004ac0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	fa93 f2a3 	rbit	r2, r3
 8004ad2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004ad6:	601a      	str	r2, [r3, #0]
  return result;
 8004ad8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004adc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ade:	fab3 f383 	clz	r3, r3
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	4b8c      	ldr	r3, [pc, #560]	; (8004d18 <HAL_RCC_OscConfig+0x920>)
 8004ae8:	4413      	add	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	461a      	mov	r2, r3
 8004aee:	2300      	movs	r3, #0
 8004af0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004af2:	f7fe f901 	bl	8002cf8 <HAL_GetTick>
 8004af6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004afa:	e009      	b.n	8004b10 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004afc:	f7fe f8fc 	bl	8002cf8 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d901      	bls.n	8004b10 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e381      	b.n	8005214 <HAL_RCC_OscConfig+0xe1c>
 8004b10:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004b14:	2202      	movs	r2, #2
 8004b16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b18:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	fa93 f2a3 	rbit	r2, r3
 8004b22:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004b26:	601a      	str	r2, [r3, #0]
 8004b28:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004b2c:	2202      	movs	r2, #2
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	fa93 f2a3 	rbit	r2, r3
 8004b3a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004b44:	2202      	movs	r2, #2
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	fa93 f2a3 	rbit	r2, r3
 8004b52:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004b56:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b58:	4b6e      	ldr	r3, [pc, #440]	; (8004d14 <HAL_RCC_OscConfig+0x91c>)
 8004b5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b5c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004b60:	2102      	movs	r1, #2
 8004b62:	6019      	str	r1, [r3, #0]
 8004b64:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	fa93 f1a3 	rbit	r1, r3
 8004b6e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004b72:	6019      	str	r1, [r3, #0]
  return result;
 8004b74:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	fab3 f383 	clz	r3, r3
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	f003 031f 	and.w	r3, r3, #31
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b90:	4013      	ands	r3, r2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1b2      	bne.n	8004afc <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b96:	1d3b      	adds	r3, r7, #4
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0304 	and.w	r3, r3, #4
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 8157 	beq.w	8004e54 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bac:	4b59      	ldr	r3, [pc, #356]	; (8004d14 <HAL_RCC_OscConfig+0x91c>)
 8004bae:	69db      	ldr	r3, [r3, #28]
 8004bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d112      	bne.n	8004bde <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bb8:	4b56      	ldr	r3, [pc, #344]	; (8004d14 <HAL_RCC_OscConfig+0x91c>)
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	4a55      	ldr	r2, [pc, #340]	; (8004d14 <HAL_RCC_OscConfig+0x91c>)
 8004bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bc2:	61d3      	str	r3, [r2, #28]
 8004bc4:	4b53      	ldr	r3, [pc, #332]	; (8004d14 <HAL_RCC_OscConfig+0x91c>)
 8004bc6:	69db      	ldr	r3, [r3, #28]
 8004bc8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004bcc:	f107 030c 	add.w	r3, r7, #12
 8004bd0:	601a      	str	r2, [r3, #0]
 8004bd2:	f107 030c 	add.w	r3, r7, #12
 8004bd6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bde:	4b4f      	ldr	r3, [pc, #316]	; (8004d1c <HAL_RCC_OscConfig+0x924>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d11a      	bne.n	8004c20 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bea:	4b4c      	ldr	r3, [pc, #304]	; (8004d1c <HAL_RCC_OscConfig+0x924>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a4b      	ldr	r2, [pc, #300]	; (8004d1c <HAL_RCC_OscConfig+0x924>)
 8004bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bf4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bf6:	f7fe f87f 	bl	8002cf8 <HAL_GetTick>
 8004bfa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bfe:	e009      	b.n	8004c14 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c00:	f7fe f87a 	bl	8002cf8 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b64      	cmp	r3, #100	; 0x64
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e2ff      	b.n	8005214 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c14:	4b41      	ldr	r3, [pc, #260]	; (8004d1c <HAL_RCC_OscConfig+0x924>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d0ef      	beq.n	8004c00 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c20:	1d3b      	adds	r3, r7, #4
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d106      	bne.n	8004c38 <HAL_RCC_OscConfig+0x840>
 8004c2a:	4b3a      	ldr	r3, [pc, #232]	; (8004d14 <HAL_RCC_OscConfig+0x91c>)
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	4a39      	ldr	r2, [pc, #228]	; (8004d14 <HAL_RCC_OscConfig+0x91c>)
 8004c30:	f043 0301 	orr.w	r3, r3, #1
 8004c34:	6213      	str	r3, [r2, #32]
 8004c36:	e02f      	b.n	8004c98 <HAL_RCC_OscConfig+0x8a0>
 8004c38:	1d3b      	adds	r3, r7, #4
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10c      	bne.n	8004c5c <HAL_RCC_OscConfig+0x864>
 8004c42:	4b34      	ldr	r3, [pc, #208]	; (8004d14 <HAL_RCC_OscConfig+0x91c>)
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	4a33      	ldr	r2, [pc, #204]	; (8004d14 <HAL_RCC_OscConfig+0x91c>)
 8004c48:	f023 0301 	bic.w	r3, r3, #1
 8004c4c:	6213      	str	r3, [r2, #32]
 8004c4e:	4b31      	ldr	r3, [pc, #196]	; (8004d14 <HAL_RCC_OscConfig+0x91c>)
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	4a30      	ldr	r2, [pc, #192]	; (8004d14 <HAL_RCC_OscConfig+0x91c>)
 8004c54:	f023 0304 	bic.w	r3, r3, #4
 8004c58:	6213      	str	r3, [r2, #32]
 8004c5a:	e01d      	b.n	8004c98 <HAL_RCC_OscConfig+0x8a0>
 8004c5c:	1d3b      	adds	r3, r7, #4
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	2b05      	cmp	r3, #5
 8004c64:	d10c      	bne.n	8004c80 <HAL_RCC_OscConfig+0x888>
 8004c66:	4b2b      	ldr	r3, [pc, #172]	; (8004d14 <HAL_RCC_OscConfig+0x91c>)
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	4a2a      	ldr	r2, [pc, #168]	; (8004d14 <HAL_RCC_OscConfig+0x91c>)
 8004c6c:	f043 0304 	orr.w	r3, r3, #4
 8004c70:	6213      	str	r3, [r2, #32]
 8004c72:	4b28      	ldr	r3, [pc, #160]	; (8004d14 <HAL_RCC_OscConfig+0x91c>)
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	4a27      	ldr	r2, [pc, #156]	; (8004d14 <HAL_RCC_OscConfig+0x91c>)
 8004c78:	f043 0301 	orr.w	r3, r3, #1
 8004c7c:	6213      	str	r3, [r2, #32]
 8004c7e:	e00b      	b.n	8004c98 <HAL_RCC_OscConfig+0x8a0>
 8004c80:	4b24      	ldr	r3, [pc, #144]	; (8004d14 <HAL_RCC_OscConfig+0x91c>)
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	4a23      	ldr	r2, [pc, #140]	; (8004d14 <HAL_RCC_OscConfig+0x91c>)
 8004c86:	f023 0301 	bic.w	r3, r3, #1
 8004c8a:	6213      	str	r3, [r2, #32]
 8004c8c:	4b21      	ldr	r3, [pc, #132]	; (8004d14 <HAL_RCC_OscConfig+0x91c>)
 8004c8e:	6a1b      	ldr	r3, [r3, #32]
 8004c90:	4a20      	ldr	r2, [pc, #128]	; (8004d14 <HAL_RCC_OscConfig+0x91c>)
 8004c92:	f023 0304 	bic.w	r3, r3, #4
 8004c96:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c98:	1d3b      	adds	r3, r7, #4
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d06a      	beq.n	8004d78 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ca2:	f7fe f829 	bl	8002cf8 <HAL_GetTick>
 8004ca6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004caa:	e00b      	b.n	8004cc4 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cac:	f7fe f824 	bl	8002cf8 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d901      	bls.n	8004cc4 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e2a7      	b.n	8005214 <HAL_RCC_OscConfig+0xe1c>
 8004cc4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004cc8:	2202      	movs	r2, #2
 8004cca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ccc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	fa93 f2a3 	rbit	r2, r3
 8004cd6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004cda:	601a      	str	r2, [r3, #0]
 8004cdc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	fa93 f2a3 	rbit	r2, r3
 8004cee:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004cf2:	601a      	str	r2, [r3, #0]
  return result;
 8004cf4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004cf8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cfa:	fab3 f383 	clz	r3, r3
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	095b      	lsrs	r3, r3, #5
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	f043 0302 	orr.w	r3, r3, #2
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d108      	bne.n	8004d20 <HAL_RCC_OscConfig+0x928>
 8004d0e:	4b01      	ldr	r3, [pc, #4]	; (8004d14 <HAL_RCC_OscConfig+0x91c>)
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	e013      	b.n	8004d3c <HAL_RCC_OscConfig+0x944>
 8004d14:	40021000 	.word	0x40021000
 8004d18:	10908120 	.word	0x10908120
 8004d1c:	40007000 	.word	0x40007000
 8004d20:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004d24:	2202      	movs	r2, #2
 8004d26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d28:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	fa93 f2a3 	rbit	r2, r3
 8004d32:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004d36:	601a      	str	r2, [r3, #0]
 8004d38:	4bc0      	ldr	r3, [pc, #768]	; (800503c <HAL_RCC_OscConfig+0xc44>)
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004d40:	2102      	movs	r1, #2
 8004d42:	6011      	str	r1, [r2, #0]
 8004d44:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004d48:	6812      	ldr	r2, [r2, #0]
 8004d4a:	fa92 f1a2 	rbit	r1, r2
 8004d4e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004d52:	6011      	str	r1, [r2, #0]
  return result;
 8004d54:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004d58:	6812      	ldr	r2, [r2, #0]
 8004d5a:	fab2 f282 	clz	r2, r2
 8004d5e:	b2d2      	uxtb	r2, r2
 8004d60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d64:	b2d2      	uxtb	r2, r2
 8004d66:	f002 021f 	and.w	r2, r2, #31
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8004d70:	4013      	ands	r3, r2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d09a      	beq.n	8004cac <HAL_RCC_OscConfig+0x8b4>
 8004d76:	e063      	b.n	8004e40 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d78:	f7fd ffbe 	bl	8002cf8 <HAL_GetTick>
 8004d7c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d80:	e00b      	b.n	8004d9a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d82:	f7fd ffb9 	bl	8002cf8 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e23c      	b.n	8005214 <HAL_RCC_OscConfig+0xe1c>
 8004d9a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004d9e:	2202      	movs	r2, #2
 8004da0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	fa93 f2a3 	rbit	r2, r3
 8004dac:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004db6:	2202      	movs	r2, #2
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	fa93 f2a3 	rbit	r2, r3
 8004dc4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004dc8:	601a      	str	r2, [r3, #0]
  return result;
 8004dca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004dce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dd0:	fab3 f383 	clz	r3, r3
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	095b      	lsrs	r3, r3, #5
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	f043 0302 	orr.w	r3, r3, #2
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d102      	bne.n	8004dea <HAL_RCC_OscConfig+0x9f2>
 8004de4:	4b95      	ldr	r3, [pc, #596]	; (800503c <HAL_RCC_OscConfig+0xc44>)
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	e00d      	b.n	8004e06 <HAL_RCC_OscConfig+0xa0e>
 8004dea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004dee:	2202      	movs	r2, #2
 8004df0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	fa93 f2a3 	rbit	r2, r3
 8004dfc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	4b8e      	ldr	r3, [pc, #568]	; (800503c <HAL_RCC_OscConfig+0xc44>)
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8004e0a:	2102      	movs	r1, #2
 8004e0c:	6011      	str	r1, [r2, #0]
 8004e0e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8004e12:	6812      	ldr	r2, [r2, #0]
 8004e14:	fa92 f1a2 	rbit	r1, r2
 8004e18:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004e1c:	6011      	str	r1, [r2, #0]
  return result;
 8004e1e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004e22:	6812      	ldr	r2, [r2, #0]
 8004e24:	fab2 f282 	clz	r2, r2
 8004e28:	b2d2      	uxtb	r2, r2
 8004e2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e2e:	b2d2      	uxtb	r2, r2
 8004e30:	f002 021f 	and.w	r2, r2, #31
 8004e34:	2101      	movs	r1, #1
 8004e36:	fa01 f202 	lsl.w	r2, r1, r2
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1a0      	bne.n	8004d82 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e40:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d105      	bne.n	8004e54 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e48:	4b7c      	ldr	r3, [pc, #496]	; (800503c <HAL_RCC_OscConfig+0xc44>)
 8004e4a:	69db      	ldr	r3, [r3, #28]
 8004e4c:	4a7b      	ldr	r2, [pc, #492]	; (800503c <HAL_RCC_OscConfig+0xc44>)
 8004e4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e52:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e54:	1d3b      	adds	r3, r7, #4
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 81d9 	beq.w	8005212 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e60:	4b76      	ldr	r3, [pc, #472]	; (800503c <HAL_RCC_OscConfig+0xc44>)
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f003 030c 	and.w	r3, r3, #12
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	f000 81a6 	beq.w	80051ba <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e6e:	1d3b      	adds	r3, r7, #4
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	f040 811e 	bne.w	80050b6 <HAL_RCC_OscConfig+0xcbe>
 8004e7a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004e7e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e84:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	fa93 f2a3 	rbit	r2, r3
 8004e8e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004e92:	601a      	str	r2, [r3, #0]
  return result;
 8004e94:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004e98:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e9a:	fab3 f383 	clz	r3, r3
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004ea4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	461a      	mov	r2, r3
 8004eac:	2300      	movs	r3, #0
 8004eae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb0:	f7fd ff22 	bl	8002cf8 <HAL_GetTick>
 8004eb4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eb8:	e009      	b.n	8004ece <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eba:	f7fd ff1d 	bl	8002cf8 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e1a2      	b.n	8005214 <HAL_RCC_OscConfig+0xe1c>
 8004ece:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004ed2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ed6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	fa93 f2a3 	rbit	r2, r3
 8004ee2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004ee6:	601a      	str	r2, [r3, #0]
  return result;
 8004ee8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004eec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eee:	fab3 f383 	clz	r3, r3
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	095b      	lsrs	r3, r3, #5
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	f043 0301 	orr.w	r3, r3, #1
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d102      	bne.n	8004f08 <HAL_RCC_OscConfig+0xb10>
 8004f02:	4b4e      	ldr	r3, [pc, #312]	; (800503c <HAL_RCC_OscConfig+0xc44>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	e01b      	b.n	8004f40 <HAL_RCC_OscConfig+0xb48>
 8004f08:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004f0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f12:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	fa93 f2a3 	rbit	r2, r3
 8004f1c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004f26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	fa93 f2a3 	rbit	r2, r3
 8004f36:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004f3a:	601a      	str	r2, [r3, #0]
 8004f3c:	4b3f      	ldr	r3, [pc, #252]	; (800503c <HAL_RCC_OscConfig+0xc44>)
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004f44:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004f48:	6011      	str	r1, [r2, #0]
 8004f4a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004f4e:	6812      	ldr	r2, [r2, #0]
 8004f50:	fa92 f1a2 	rbit	r1, r2
 8004f54:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004f58:	6011      	str	r1, [r2, #0]
  return result;
 8004f5a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004f5e:	6812      	ldr	r2, [r2, #0]
 8004f60:	fab2 f282 	clz	r2, r2
 8004f64:	b2d2      	uxtb	r2, r2
 8004f66:	f042 0220 	orr.w	r2, r2, #32
 8004f6a:	b2d2      	uxtb	r2, r2
 8004f6c:	f002 021f 	and.w	r2, r2, #31
 8004f70:	2101      	movs	r1, #1
 8004f72:	fa01 f202 	lsl.w	r2, r1, r2
 8004f76:	4013      	ands	r3, r2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d19e      	bne.n	8004eba <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f7c:	4b2f      	ldr	r3, [pc, #188]	; (800503c <HAL_RCC_OscConfig+0xc44>)
 8004f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f80:	f023 020f 	bic.w	r2, r3, #15
 8004f84:	1d3b      	adds	r3, r7, #4
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8a:	492c      	ldr	r1, [pc, #176]	; (800503c <HAL_RCC_OscConfig+0xc44>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004f90:	4b2a      	ldr	r3, [pc, #168]	; (800503c <HAL_RCC_OscConfig+0xc44>)
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004f98:	1d3b      	adds	r3, r7, #4
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6a19      	ldr	r1, [r3, #32]
 8004f9e:	1d3b      	adds	r3, r7, #4
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	69db      	ldr	r3, [r3, #28]
 8004fa4:	430b      	orrs	r3, r1
 8004fa6:	4925      	ldr	r1, [pc, #148]	; (800503c <HAL_RCC_OscConfig+0xc44>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	604b      	str	r3, [r1, #4]
 8004fac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004fb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004fb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	fa93 f2a3 	rbit	r2, r3
 8004fc0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004fc4:	601a      	str	r2, [r3, #0]
  return result;
 8004fc6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004fca:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fcc:	fab3 f383 	clz	r3, r3
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004fd6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	461a      	mov	r2, r3
 8004fde:	2301      	movs	r3, #1
 8004fe0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe2:	f7fd fe89 	bl	8002cf8 <HAL_GetTick>
 8004fe6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fea:	e009      	b.n	8005000 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fec:	f7fd fe84 	bl	8002cf8 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d901      	bls.n	8005000 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e109      	b.n	8005214 <HAL_RCC_OscConfig+0xe1c>
 8005000:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005004:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005008:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800500a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	fa93 f2a3 	rbit	r2, r3
 8005014:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005018:	601a      	str	r2, [r3, #0]
  return result;
 800501a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800501e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005020:	fab3 f383 	clz	r3, r3
 8005024:	b2db      	uxtb	r3, r3
 8005026:	095b      	lsrs	r3, r3, #5
 8005028:	b2db      	uxtb	r3, r3
 800502a:	f043 0301 	orr.w	r3, r3, #1
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2b01      	cmp	r3, #1
 8005032:	d105      	bne.n	8005040 <HAL_RCC_OscConfig+0xc48>
 8005034:	4b01      	ldr	r3, [pc, #4]	; (800503c <HAL_RCC_OscConfig+0xc44>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	e01e      	b.n	8005078 <HAL_RCC_OscConfig+0xc80>
 800503a:	bf00      	nop
 800503c:	40021000 	.word	0x40021000
 8005040:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005044:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005048:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800504a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	fa93 f2a3 	rbit	r2, r3
 8005054:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005058:	601a      	str	r2, [r3, #0]
 800505a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800505e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005062:	601a      	str	r2, [r3, #0]
 8005064:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	fa93 f2a3 	rbit	r2, r3
 800506e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	4b6a      	ldr	r3, [pc, #424]	; (8005220 <HAL_RCC_OscConfig+0xe28>)
 8005076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005078:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800507c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005080:	6011      	str	r1, [r2, #0]
 8005082:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005086:	6812      	ldr	r2, [r2, #0]
 8005088:	fa92 f1a2 	rbit	r1, r2
 800508c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005090:	6011      	str	r1, [r2, #0]
  return result;
 8005092:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005096:	6812      	ldr	r2, [r2, #0]
 8005098:	fab2 f282 	clz	r2, r2
 800509c:	b2d2      	uxtb	r2, r2
 800509e:	f042 0220 	orr.w	r2, r2, #32
 80050a2:	b2d2      	uxtb	r2, r2
 80050a4:	f002 021f 	and.w	r2, r2, #31
 80050a8:	2101      	movs	r1, #1
 80050aa:	fa01 f202 	lsl.w	r2, r1, r2
 80050ae:	4013      	ands	r3, r2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d09b      	beq.n	8004fec <HAL_RCC_OscConfig+0xbf4>
 80050b4:	e0ad      	b.n	8005212 <HAL_RCC_OscConfig+0xe1a>
 80050b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80050ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80050be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	fa93 f2a3 	rbit	r2, r3
 80050ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80050ce:	601a      	str	r2, [r3, #0]
  return result;
 80050d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80050d4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050d6:	fab3 f383 	clz	r3, r3
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80050e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	461a      	mov	r2, r3
 80050e8:	2300      	movs	r3, #0
 80050ea:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ec:	f7fd fe04 	bl	8002cf8 <HAL_GetTick>
 80050f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050f4:	e009      	b.n	800510a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050f6:	f7fd fdff 	bl	8002cf8 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b02      	cmp	r3, #2
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e084      	b.n	8005214 <HAL_RCC_OscConfig+0xe1c>
 800510a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800510e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005112:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005114:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	fa93 f2a3 	rbit	r2, r3
 800511e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005122:	601a      	str	r2, [r3, #0]
  return result;
 8005124:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005128:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800512a:	fab3 f383 	clz	r3, r3
 800512e:	b2db      	uxtb	r3, r3
 8005130:	095b      	lsrs	r3, r3, #5
 8005132:	b2db      	uxtb	r3, r3
 8005134:	f043 0301 	orr.w	r3, r3, #1
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b01      	cmp	r3, #1
 800513c:	d102      	bne.n	8005144 <HAL_RCC_OscConfig+0xd4c>
 800513e:	4b38      	ldr	r3, [pc, #224]	; (8005220 <HAL_RCC_OscConfig+0xe28>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	e01b      	b.n	800517c <HAL_RCC_OscConfig+0xd84>
 8005144:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005148:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800514c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800514e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	fa93 f2a3 	rbit	r2, r3
 8005158:	f107 0320 	add.w	r3, r7, #32
 800515c:	601a      	str	r2, [r3, #0]
 800515e:	f107 031c 	add.w	r3, r7, #28
 8005162:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	f107 031c 	add.w	r3, r7, #28
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	fa93 f2a3 	rbit	r2, r3
 8005172:	f107 0318 	add.w	r3, r7, #24
 8005176:	601a      	str	r2, [r3, #0]
 8005178:	4b29      	ldr	r3, [pc, #164]	; (8005220 <HAL_RCC_OscConfig+0xe28>)
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	f107 0214 	add.w	r2, r7, #20
 8005180:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005184:	6011      	str	r1, [r2, #0]
 8005186:	f107 0214 	add.w	r2, r7, #20
 800518a:	6812      	ldr	r2, [r2, #0]
 800518c:	fa92 f1a2 	rbit	r1, r2
 8005190:	f107 0210 	add.w	r2, r7, #16
 8005194:	6011      	str	r1, [r2, #0]
  return result;
 8005196:	f107 0210 	add.w	r2, r7, #16
 800519a:	6812      	ldr	r2, [r2, #0]
 800519c:	fab2 f282 	clz	r2, r2
 80051a0:	b2d2      	uxtb	r2, r2
 80051a2:	f042 0220 	orr.w	r2, r2, #32
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	f002 021f 	and.w	r2, r2, #31
 80051ac:	2101      	movs	r1, #1
 80051ae:	fa01 f202 	lsl.w	r2, r1, r2
 80051b2:	4013      	ands	r3, r2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d19e      	bne.n	80050f6 <HAL_RCC_OscConfig+0xcfe>
 80051b8:	e02b      	b.n	8005212 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051ba:	1d3b      	adds	r3, r7, #4
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d101      	bne.n	80051c8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e025      	b.n	8005214 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80051c8:	4b15      	ldr	r3, [pc, #84]	; (8005220 <HAL_RCC_OscConfig+0xe28>)
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80051d0:	4b13      	ldr	r3, [pc, #76]	; (8005220 <HAL_RCC_OscConfig+0xe28>)
 80051d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80051d8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80051dc:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80051e0:	1d3b      	adds	r3, r7, #4
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d111      	bne.n	800520e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80051ea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80051ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80051f2:	1d3b      	adds	r3, r7, #4
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d108      	bne.n	800520e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80051fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005200:	f003 020f 	and.w	r2, r3, #15
 8005204:	1d3b      	adds	r3, r7, #4
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800520a:	429a      	cmp	r2, r3
 800520c:	d001      	beq.n	8005212 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e000      	b.n	8005214 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	40021000 	.word	0x40021000

08005224 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b09e      	sub	sp, #120	; 0x78
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e162      	b.n	8005502 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800523c:	4b90      	ldr	r3, [pc, #576]	; (8005480 <HAL_RCC_ClockConfig+0x25c>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	429a      	cmp	r2, r3
 8005248:	d910      	bls.n	800526c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800524a:	4b8d      	ldr	r3, [pc, #564]	; (8005480 <HAL_RCC_ClockConfig+0x25c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f023 0207 	bic.w	r2, r3, #7
 8005252:	498b      	ldr	r1, [pc, #556]	; (8005480 <HAL_RCC_ClockConfig+0x25c>)
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	4313      	orrs	r3, r2
 8005258:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800525a:	4b89      	ldr	r3, [pc, #548]	; (8005480 <HAL_RCC_ClockConfig+0x25c>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0307 	and.w	r3, r3, #7
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	429a      	cmp	r2, r3
 8005266:	d001      	beq.n	800526c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e14a      	b.n	8005502 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d008      	beq.n	800528a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005278:	4b82      	ldr	r3, [pc, #520]	; (8005484 <HAL_RCC_ClockConfig+0x260>)
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	497f      	ldr	r1, [pc, #508]	; (8005484 <HAL_RCC_ClockConfig+0x260>)
 8005286:	4313      	orrs	r3, r2
 8005288:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 80dc 	beq.w	8005450 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d13c      	bne.n	800531a <HAL_RCC_ClockConfig+0xf6>
 80052a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052a4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052a8:	fa93 f3a3 	rbit	r3, r3
 80052ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80052ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052b0:	fab3 f383 	clz	r3, r3
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	095b      	lsrs	r3, r3, #5
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	f043 0301 	orr.w	r3, r3, #1
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d102      	bne.n	80052ca <HAL_RCC_ClockConfig+0xa6>
 80052c4:	4b6f      	ldr	r3, [pc, #444]	; (8005484 <HAL_RCC_ClockConfig+0x260>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	e00f      	b.n	80052ea <HAL_RCC_ClockConfig+0xc6>
 80052ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052d2:	fa93 f3a3 	rbit	r3, r3
 80052d6:	667b      	str	r3, [r7, #100]	; 0x64
 80052d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052dc:	663b      	str	r3, [r7, #96]	; 0x60
 80052de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052e0:	fa93 f3a3 	rbit	r3, r3
 80052e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052e6:	4b67      	ldr	r3, [pc, #412]	; (8005484 <HAL_RCC_ClockConfig+0x260>)
 80052e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80052ee:	65ba      	str	r2, [r7, #88]	; 0x58
 80052f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052f2:	fa92 f2a2 	rbit	r2, r2
 80052f6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80052f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80052fa:	fab2 f282 	clz	r2, r2
 80052fe:	b2d2      	uxtb	r2, r2
 8005300:	f042 0220 	orr.w	r2, r2, #32
 8005304:	b2d2      	uxtb	r2, r2
 8005306:	f002 021f 	and.w	r2, r2, #31
 800530a:	2101      	movs	r1, #1
 800530c:	fa01 f202 	lsl.w	r2, r1, r2
 8005310:	4013      	ands	r3, r2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d17b      	bne.n	800540e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e0f3      	b.n	8005502 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	2b02      	cmp	r3, #2
 8005320:	d13c      	bne.n	800539c <HAL_RCC_ClockConfig+0x178>
 8005322:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005326:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005328:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800532a:	fa93 f3a3 	rbit	r3, r3
 800532e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005332:	fab3 f383 	clz	r3, r3
 8005336:	b2db      	uxtb	r3, r3
 8005338:	095b      	lsrs	r3, r3, #5
 800533a:	b2db      	uxtb	r3, r3
 800533c:	f043 0301 	orr.w	r3, r3, #1
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b01      	cmp	r3, #1
 8005344:	d102      	bne.n	800534c <HAL_RCC_ClockConfig+0x128>
 8005346:	4b4f      	ldr	r3, [pc, #316]	; (8005484 <HAL_RCC_ClockConfig+0x260>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	e00f      	b.n	800536c <HAL_RCC_ClockConfig+0x148>
 800534c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005350:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005354:	fa93 f3a3 	rbit	r3, r3
 8005358:	647b      	str	r3, [r7, #68]	; 0x44
 800535a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800535e:	643b      	str	r3, [r7, #64]	; 0x40
 8005360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005362:	fa93 f3a3 	rbit	r3, r3
 8005366:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005368:	4b46      	ldr	r3, [pc, #280]	; (8005484 <HAL_RCC_ClockConfig+0x260>)
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005370:	63ba      	str	r2, [r7, #56]	; 0x38
 8005372:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005374:	fa92 f2a2 	rbit	r2, r2
 8005378:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800537a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800537c:	fab2 f282 	clz	r2, r2
 8005380:	b2d2      	uxtb	r2, r2
 8005382:	f042 0220 	orr.w	r2, r2, #32
 8005386:	b2d2      	uxtb	r2, r2
 8005388:	f002 021f 	and.w	r2, r2, #31
 800538c:	2101      	movs	r1, #1
 800538e:	fa01 f202 	lsl.w	r2, r1, r2
 8005392:	4013      	ands	r3, r2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d13a      	bne.n	800540e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e0b2      	b.n	8005502 <HAL_RCC_ClockConfig+0x2de>
 800539c:	2302      	movs	r3, #2
 800539e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a2:	fa93 f3a3 	rbit	r3, r3
 80053a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80053a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053aa:	fab3 f383 	clz	r3, r3
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	095b      	lsrs	r3, r3, #5
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	f043 0301 	orr.w	r3, r3, #1
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d102      	bne.n	80053c4 <HAL_RCC_ClockConfig+0x1a0>
 80053be:	4b31      	ldr	r3, [pc, #196]	; (8005484 <HAL_RCC_ClockConfig+0x260>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	e00d      	b.n	80053e0 <HAL_RCC_ClockConfig+0x1bc>
 80053c4:	2302      	movs	r3, #2
 80053c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ca:	fa93 f3a3 	rbit	r3, r3
 80053ce:	627b      	str	r3, [r7, #36]	; 0x24
 80053d0:	2302      	movs	r3, #2
 80053d2:	623b      	str	r3, [r7, #32]
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	fa93 f3a3 	rbit	r3, r3
 80053da:	61fb      	str	r3, [r7, #28]
 80053dc:	4b29      	ldr	r3, [pc, #164]	; (8005484 <HAL_RCC_ClockConfig+0x260>)
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	2202      	movs	r2, #2
 80053e2:	61ba      	str	r2, [r7, #24]
 80053e4:	69ba      	ldr	r2, [r7, #24]
 80053e6:	fa92 f2a2 	rbit	r2, r2
 80053ea:	617a      	str	r2, [r7, #20]
  return result;
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	fab2 f282 	clz	r2, r2
 80053f2:	b2d2      	uxtb	r2, r2
 80053f4:	f042 0220 	orr.w	r2, r2, #32
 80053f8:	b2d2      	uxtb	r2, r2
 80053fa:	f002 021f 	and.w	r2, r2, #31
 80053fe:	2101      	movs	r1, #1
 8005400:	fa01 f202 	lsl.w	r2, r1, r2
 8005404:	4013      	ands	r3, r2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e079      	b.n	8005502 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800540e:	4b1d      	ldr	r3, [pc, #116]	; (8005484 <HAL_RCC_ClockConfig+0x260>)
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f023 0203 	bic.w	r2, r3, #3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	491a      	ldr	r1, [pc, #104]	; (8005484 <HAL_RCC_ClockConfig+0x260>)
 800541c:	4313      	orrs	r3, r2
 800541e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005420:	f7fd fc6a 	bl	8002cf8 <HAL_GetTick>
 8005424:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005426:	e00a      	b.n	800543e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005428:	f7fd fc66 	bl	8002cf8 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	f241 3288 	movw	r2, #5000	; 0x1388
 8005436:	4293      	cmp	r3, r2
 8005438:	d901      	bls.n	800543e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e061      	b.n	8005502 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800543e:	4b11      	ldr	r3, [pc, #68]	; (8005484 <HAL_RCC_ClockConfig+0x260>)
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f003 020c 	and.w	r2, r3, #12
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	429a      	cmp	r2, r3
 800544e:	d1eb      	bne.n	8005428 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005450:	4b0b      	ldr	r3, [pc, #44]	; (8005480 <HAL_RCC_ClockConfig+0x25c>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0307 	and.w	r3, r3, #7
 8005458:	683a      	ldr	r2, [r7, #0]
 800545a:	429a      	cmp	r2, r3
 800545c:	d214      	bcs.n	8005488 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800545e:	4b08      	ldr	r3, [pc, #32]	; (8005480 <HAL_RCC_ClockConfig+0x25c>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f023 0207 	bic.w	r2, r3, #7
 8005466:	4906      	ldr	r1, [pc, #24]	; (8005480 <HAL_RCC_ClockConfig+0x25c>)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	4313      	orrs	r3, r2
 800546c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800546e:	4b04      	ldr	r3, [pc, #16]	; (8005480 <HAL_RCC_ClockConfig+0x25c>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0307 	and.w	r3, r3, #7
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	429a      	cmp	r2, r3
 800547a:	d005      	beq.n	8005488 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e040      	b.n	8005502 <HAL_RCC_ClockConfig+0x2de>
 8005480:	40022000 	.word	0x40022000
 8005484:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0304 	and.w	r3, r3, #4
 8005490:	2b00      	cmp	r3, #0
 8005492:	d008      	beq.n	80054a6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005494:	4b1d      	ldr	r3, [pc, #116]	; (800550c <HAL_RCC_ClockConfig+0x2e8>)
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	491a      	ldr	r1, [pc, #104]	; (800550c <HAL_RCC_ClockConfig+0x2e8>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0308 	and.w	r3, r3, #8
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d009      	beq.n	80054c6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054b2:	4b16      	ldr	r3, [pc, #88]	; (800550c <HAL_RCC_ClockConfig+0x2e8>)
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	00db      	lsls	r3, r3, #3
 80054c0:	4912      	ldr	r1, [pc, #72]	; (800550c <HAL_RCC_ClockConfig+0x2e8>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80054c6:	f000 f829 	bl	800551c <HAL_RCC_GetSysClockFreq>
 80054ca:	4601      	mov	r1, r0
 80054cc:	4b0f      	ldr	r3, [pc, #60]	; (800550c <HAL_RCC_ClockConfig+0x2e8>)
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054d4:	22f0      	movs	r2, #240	; 0xf0
 80054d6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	fa92 f2a2 	rbit	r2, r2
 80054de:	60fa      	str	r2, [r7, #12]
  return result;
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	fab2 f282 	clz	r2, r2
 80054e6:	b2d2      	uxtb	r2, r2
 80054e8:	40d3      	lsrs	r3, r2
 80054ea:	4a09      	ldr	r2, [pc, #36]	; (8005510 <HAL_RCC_ClockConfig+0x2ec>)
 80054ec:	5cd3      	ldrb	r3, [r2, r3]
 80054ee:	fa21 f303 	lsr.w	r3, r1, r3
 80054f2:	4a08      	ldr	r2, [pc, #32]	; (8005514 <HAL_RCC_ClockConfig+0x2f0>)
 80054f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80054f6:	4b08      	ldr	r3, [pc, #32]	; (8005518 <HAL_RCC_ClockConfig+0x2f4>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7fd fbb8 	bl	8002c70 <HAL_InitTick>
  
  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3778      	adds	r7, #120	; 0x78
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	40021000 	.word	0x40021000
 8005510:	080091e0 	.word	0x080091e0
 8005514:	20000000 	.word	0x20000000
 8005518:	20000004 	.word	0x20000004

0800551c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800551c:	b480      	push	{r7}
 800551e:	b087      	sub	sp, #28
 8005520:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005522:	2300      	movs	r3, #0
 8005524:	60fb      	str	r3, [r7, #12]
 8005526:	2300      	movs	r3, #0
 8005528:	60bb      	str	r3, [r7, #8]
 800552a:	2300      	movs	r3, #0
 800552c:	617b      	str	r3, [r7, #20]
 800552e:	2300      	movs	r3, #0
 8005530:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005532:	2300      	movs	r3, #0
 8005534:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005536:	4b1f      	ldr	r3, [pc, #124]	; (80055b4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f003 030c 	and.w	r3, r3, #12
 8005542:	2b04      	cmp	r3, #4
 8005544:	d002      	beq.n	800554c <HAL_RCC_GetSysClockFreq+0x30>
 8005546:	2b08      	cmp	r3, #8
 8005548:	d003      	beq.n	8005552 <HAL_RCC_GetSysClockFreq+0x36>
 800554a:	e029      	b.n	80055a0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800554c:	4b1a      	ldr	r3, [pc, #104]	; (80055b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800554e:	613b      	str	r3, [r7, #16]
      break;
 8005550:	e029      	b.n	80055a6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	0c9b      	lsrs	r3, r3, #18
 8005556:	f003 030f 	and.w	r3, r3, #15
 800555a:	4a18      	ldr	r2, [pc, #96]	; (80055bc <HAL_RCC_GetSysClockFreq+0xa0>)
 800555c:	5cd3      	ldrb	r3, [r2, r3]
 800555e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005560:	4b14      	ldr	r3, [pc, #80]	; (80055b4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005564:	f003 030f 	and.w	r3, r3, #15
 8005568:	4a15      	ldr	r2, [pc, #84]	; (80055c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800556a:	5cd3      	ldrb	r3, [r2, r3]
 800556c:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d008      	beq.n	800558a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005578:	4a0f      	ldr	r2, [pc, #60]	; (80055b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	fb02 f303 	mul.w	r3, r2, r3
 8005586:	617b      	str	r3, [r7, #20]
 8005588:	e007      	b.n	800559a <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800558a:	4a0b      	ldr	r2, [pc, #44]	; (80055b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	fb02 f303 	mul.w	r3, r2, r3
 8005598:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	613b      	str	r3, [r7, #16]
      break;
 800559e:	e002      	b.n	80055a6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80055a0:	4b05      	ldr	r3, [pc, #20]	; (80055b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 80055a2:	613b      	str	r3, [r7, #16]
      break;
 80055a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055a6:	693b      	ldr	r3, [r7, #16]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	371c      	adds	r7, #28
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	40021000 	.word	0x40021000
 80055b8:	007a1200 	.word	0x007a1200
 80055bc:	080091f8 	.word	0x080091f8
 80055c0:	08009208 	.word	0x08009208

080055c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055c4:	b480      	push	{r7}
 80055c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055c8:	4b03      	ldr	r3, [pc, #12]	; (80055d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80055ca:	681b      	ldr	r3, [r3, #0]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	20000000 	.word	0x20000000

080055dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80055e2:	f7ff ffef 	bl	80055c4 <HAL_RCC_GetHCLKFreq>
 80055e6:	4601      	mov	r1, r0
 80055e8:	4b0b      	ldr	r3, [pc, #44]	; (8005618 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80055f0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80055f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	fa92 f2a2 	rbit	r2, r2
 80055fc:	603a      	str	r2, [r7, #0]
  return result;
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	fab2 f282 	clz	r2, r2
 8005604:	b2d2      	uxtb	r2, r2
 8005606:	40d3      	lsrs	r3, r2
 8005608:	4a04      	ldr	r2, [pc, #16]	; (800561c <HAL_RCC_GetPCLK1Freq+0x40>)
 800560a:	5cd3      	ldrb	r3, [r2, r3]
 800560c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005610:	4618      	mov	r0, r3
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	40021000 	.word	0x40021000
 800561c:	080091f0 	.word	0x080091f0

08005620 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005626:	f7ff ffcd 	bl	80055c4 <HAL_RCC_GetHCLKFreq>
 800562a:	4601      	mov	r1, r0
 800562c:	4b0b      	ldr	r3, [pc, #44]	; (800565c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005634:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005638:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	fa92 f2a2 	rbit	r2, r2
 8005640:	603a      	str	r2, [r7, #0]
  return result;
 8005642:	683a      	ldr	r2, [r7, #0]
 8005644:	fab2 f282 	clz	r2, r2
 8005648:	b2d2      	uxtb	r2, r2
 800564a:	40d3      	lsrs	r3, r2
 800564c:	4a04      	ldr	r2, [pc, #16]	; (8005660 <HAL_RCC_GetPCLK2Freq+0x40>)
 800564e:	5cd3      	ldrb	r3, [r2, r3]
 8005650:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005654:	4618      	mov	r0, r3
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	40021000 	.word	0x40021000
 8005660:	080091f0 	.word	0x080091f0

08005664 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b092      	sub	sp, #72	; 0x48
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800566c:	2300      	movs	r3, #0
 800566e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005670:	2300      	movs	r3, #0
 8005672:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005674:	2300      	movs	r3, #0
 8005676:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005682:	2b00      	cmp	r3, #0
 8005684:	f000 80d4 	beq.w	8005830 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005688:	4b4e      	ldr	r3, [pc, #312]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800568a:	69db      	ldr	r3, [r3, #28]
 800568c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10e      	bne.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005694:	4b4b      	ldr	r3, [pc, #300]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005696:	69db      	ldr	r3, [r3, #28]
 8005698:	4a4a      	ldr	r2, [pc, #296]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800569a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800569e:	61d3      	str	r3, [r2, #28]
 80056a0:	4b48      	ldr	r3, [pc, #288]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056a2:	69db      	ldr	r3, [r3, #28]
 80056a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056a8:	60bb      	str	r3, [r7, #8]
 80056aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056ac:	2301      	movs	r3, #1
 80056ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056b2:	4b45      	ldr	r3, [pc, #276]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d118      	bne.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056be:	4b42      	ldr	r3, [pc, #264]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a41      	ldr	r2, [pc, #260]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056ca:	f7fd fb15 	bl	8002cf8 <HAL_GetTick>
 80056ce:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056d0:	e008      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056d2:	f7fd fb11 	bl	8002cf8 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	2b64      	cmp	r3, #100	; 0x64
 80056de:	d901      	bls.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e1d6      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056e4:	4b38      	ldr	r3, [pc, #224]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d0f0      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056f0:	4b34      	ldr	r3, [pc, #208]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056f2:	6a1b      	ldr	r3, [r3, #32]
 80056f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 8084 	beq.w	800580a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800570a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800570c:	429a      	cmp	r2, r3
 800570e:	d07c      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005710:	4b2c      	ldr	r3, [pc, #176]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005718:	63fb      	str	r3, [r7, #60]	; 0x3c
 800571a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800571e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005722:	fa93 f3a3 	rbit	r3, r3
 8005726:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800572a:	fab3 f383 	clz	r3, r3
 800572e:	b2db      	uxtb	r3, r3
 8005730:	461a      	mov	r2, r3
 8005732:	4b26      	ldr	r3, [pc, #152]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005734:	4413      	add	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	461a      	mov	r2, r3
 800573a:	2301      	movs	r3, #1
 800573c:	6013      	str	r3, [r2, #0]
 800573e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005742:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005746:	fa93 f3a3 	rbit	r3, r3
 800574a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800574c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800574e:	fab3 f383 	clz	r3, r3
 8005752:	b2db      	uxtb	r3, r3
 8005754:	461a      	mov	r2, r3
 8005756:	4b1d      	ldr	r3, [pc, #116]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005758:	4413      	add	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	461a      	mov	r2, r3
 800575e:	2300      	movs	r3, #0
 8005760:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005762:	4a18      	ldr	r2, [pc, #96]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005766:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	2b00      	cmp	r3, #0
 8005770:	d04b      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005772:	f7fd fac1 	bl	8002cf8 <HAL_GetTick>
 8005776:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005778:	e00a      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800577a:	f7fd fabd 	bl	8002cf8 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	f241 3288 	movw	r2, #5000	; 0x1388
 8005788:	4293      	cmp	r3, r2
 800578a:	d901      	bls.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e180      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005790:	2302      	movs	r3, #2
 8005792:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005796:	fa93 f3a3 	rbit	r3, r3
 800579a:	627b      	str	r3, [r7, #36]	; 0x24
 800579c:	2302      	movs	r3, #2
 800579e:	623b      	str	r3, [r7, #32]
 80057a0:	6a3b      	ldr	r3, [r7, #32]
 80057a2:	fa93 f3a3 	rbit	r3, r3
 80057a6:	61fb      	str	r3, [r7, #28]
  return result;
 80057a8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057aa:	fab3 f383 	clz	r3, r3
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	095b      	lsrs	r3, r3, #5
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	f043 0302 	orr.w	r3, r3, #2
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d108      	bne.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80057be:	4b01      	ldr	r3, [pc, #4]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	e00d      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80057c4:	40021000 	.word	0x40021000
 80057c8:	40007000 	.word	0x40007000
 80057cc:	10908100 	.word	0x10908100
 80057d0:	2302      	movs	r3, #2
 80057d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	fa93 f3a3 	rbit	r3, r3
 80057da:	617b      	str	r3, [r7, #20]
 80057dc:	4ba0      	ldr	r3, [pc, #640]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80057de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e0:	2202      	movs	r2, #2
 80057e2:	613a      	str	r2, [r7, #16]
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	fa92 f2a2 	rbit	r2, r2
 80057ea:	60fa      	str	r2, [r7, #12]
  return result;
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	fab2 f282 	clz	r2, r2
 80057f2:	b2d2      	uxtb	r2, r2
 80057f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057f8:	b2d2      	uxtb	r2, r2
 80057fa:	f002 021f 	and.w	r2, r2, #31
 80057fe:	2101      	movs	r1, #1
 8005800:	fa01 f202 	lsl.w	r2, r1, r2
 8005804:	4013      	ands	r3, r2
 8005806:	2b00      	cmp	r3, #0
 8005808:	d0b7      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800580a:	4b95      	ldr	r3, [pc, #596]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	4992      	ldr	r1, [pc, #584]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005818:	4313      	orrs	r3, r2
 800581a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800581c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005820:	2b01      	cmp	r3, #1
 8005822:	d105      	bne.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005824:	4b8e      	ldr	r3, [pc, #568]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005826:	69db      	ldr	r3, [r3, #28]
 8005828:	4a8d      	ldr	r2, [pc, #564]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800582a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800582e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0301 	and.w	r3, r3, #1
 8005838:	2b00      	cmp	r3, #0
 800583a:	d008      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800583c:	4b88      	ldr	r3, [pc, #544]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800583e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005840:	f023 0203 	bic.w	r2, r3, #3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	4985      	ldr	r1, [pc, #532]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800584a:	4313      	orrs	r3, r2
 800584c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d008      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800585a:	4b81      	ldr	r3, [pc, #516]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800585c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	497e      	ldr	r1, [pc, #504]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005868:	4313      	orrs	r3, r2
 800586a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0304 	and.w	r3, r3, #4
 8005874:	2b00      	cmp	r3, #0
 8005876:	d008      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005878:	4b79      	ldr	r3, [pc, #484]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800587a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	4976      	ldr	r1, [pc, #472]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005886:	4313      	orrs	r3, r2
 8005888:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0320 	and.w	r3, r3, #32
 8005892:	2b00      	cmp	r3, #0
 8005894:	d008      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005896:	4b72      	ldr	r3, [pc, #456]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589a:	f023 0210 	bic.w	r2, r3, #16
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	496f      	ldr	r1, [pc, #444]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d008      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80058b4:	4b6a      	ldr	r3, [pc, #424]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c0:	4967      	ldr	r1, [pc, #412]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d008      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80058d2:	4b63      	ldr	r3, [pc, #396]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80058d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d6:	f023 0220 	bic.w	r2, r3, #32
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	4960      	ldr	r1, [pc, #384]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80058e0:	4313      	orrs	r3, r2
 80058e2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d008      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80058f0:	4b5b      	ldr	r3, [pc, #364]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80058f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fc:	4958      	ldr	r1, [pc, #352]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0308 	and.w	r3, r3, #8
 800590a:	2b00      	cmp	r3, #0
 800590c:	d008      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800590e:	4b54      	ldr	r3, [pc, #336]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005912:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	4951      	ldr	r1, [pc, #324]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800591c:	4313      	orrs	r3, r2
 800591e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0310 	and.w	r3, r3, #16
 8005928:	2b00      	cmp	r3, #0
 800592a:	d008      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800592c:	4b4c      	ldr	r3, [pc, #304]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800592e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005930:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	4949      	ldr	r1, [pc, #292]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800593a:	4313      	orrs	r3, r2
 800593c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005946:	2b00      	cmp	r3, #0
 8005948:	d008      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800594a:	4b45      	ldr	r3, [pc, #276]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005956:	4942      	ldr	r1, [pc, #264]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005958:	4313      	orrs	r3, r2
 800595a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005964:	2b00      	cmp	r3, #0
 8005966:	d008      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005968:	4b3d      	ldr	r3, [pc, #244]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800596a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005974:	493a      	ldr	r1, [pc, #232]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005976:	4313      	orrs	r3, r2
 8005978:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005982:	2b00      	cmp	r3, #0
 8005984:	d008      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005986:	4b36      	ldr	r3, [pc, #216]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005992:	4933      	ldr	r1, [pc, #204]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005994:	4313      	orrs	r3, r2
 8005996:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d008      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80059a4:	4b2e      	ldr	r3, [pc, #184]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80059a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b0:	492b      	ldr	r1, [pc, #172]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d008      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80059c2:	4b27      	ldr	r3, [pc, #156]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80059c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ce:	4924      	ldr	r1, [pc, #144]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d008      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80059e0:	4b1f      	ldr	r3, [pc, #124]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80059e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ec:	491c      	ldr	r1, [pc, #112]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d008      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80059fe:	4b18      	ldr	r3, [pc, #96]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a0a:	4915      	ldr	r1, [pc, #84]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d008      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005a1c:	4b10      	ldr	r3, [pc, #64]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a20:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a28:	490d      	ldr	r1, [pc, #52]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d008      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005a3a:	4b09      	ldr	r3, [pc, #36]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a46:	4906      	ldr	r1, [pc, #24]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00c      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005a58:	4b01      	ldr	r3, [pc, #4]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5c:	e002      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005a5e:	bf00      	nop
 8005a60:	40021000 	.word	0x40021000
 8005a64:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a6c:	490b      	ldr	r1, [pc, #44]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d008      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8005a7e:	4b07      	ldr	r3, [pc, #28]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a82:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a8a:	4904      	ldr	r1, [pc, #16]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3748      	adds	r7, #72	; 0x48
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	40021000 	.word	0x40021000

08005aa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e040      	b.n	8005b34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d106      	bne.n	8005ac8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7fc ff50 	bl	8002968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2224      	movs	r2, #36	; 0x24
 8005acc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 0201 	bic.w	r2, r2, #1
 8005adc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d002      	beq.n	8005aec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fa86 	bl	8005ff8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 f8af 	bl	8005c50 <UART_SetConfig>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d101      	bne.n	8005afc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e01b      	b.n	8005b34 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689a      	ldr	r2, [r3, #8]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f042 0201 	orr.w	r2, r2, #1
 8005b2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 fb05 	bl	800613c <UART_CheckIdleState>
 8005b32:	4603      	mov	r3, r0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b08a      	sub	sp, #40	; 0x28
 8005b40:	af02      	add	r7, sp, #8
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	603b      	str	r3, [r7, #0]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b50:	2b20      	cmp	r3, #32
 8005b52:	d178      	bne.n	8005c46 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d002      	beq.n	8005b60 <HAL_UART_Transmit+0x24>
 8005b5a:	88fb      	ldrh	r3, [r7, #6]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d101      	bne.n	8005b64 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e071      	b.n	8005c48 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2221      	movs	r2, #33	; 0x21
 8005b70:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b72:	f7fd f8c1 	bl	8002cf8 <HAL_GetTick>
 8005b76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	88fa      	ldrh	r2, [r7, #6]
 8005b7c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	88fa      	ldrh	r2, [r7, #6]
 8005b84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b90:	d108      	bne.n	8005ba4 <HAL_UART_Transmit+0x68>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d104      	bne.n	8005ba4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	61bb      	str	r3, [r7, #24]
 8005ba2:	e003      	b.n	8005bac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005bac:	e030      	b.n	8005c10 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	9300      	str	r3, [sp, #0]
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	2180      	movs	r1, #128	; 0x80
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f000 fb67 	bl	800628c <UART_WaitOnFlagUntilTimeout>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d004      	beq.n	8005bce <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2220      	movs	r2, #32
 8005bc8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e03c      	b.n	8005c48 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10b      	bne.n	8005bec <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	881a      	ldrh	r2, [r3, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005be0:	b292      	uxth	r2, r2
 8005be2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	3302      	adds	r3, #2
 8005be8:	61bb      	str	r3, [r7, #24]
 8005bea:	e008      	b.n	8005bfe <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	781a      	ldrb	r2, [r3, #0]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	b292      	uxth	r2, r2
 8005bf6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	3b01      	subs	r3, #1
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1c8      	bne.n	8005bae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	2200      	movs	r2, #0
 8005c24:	2140      	movs	r1, #64	; 0x40
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	f000 fb30 	bl	800628c <UART_WaitOnFlagUntilTimeout>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d004      	beq.n	8005c3c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2220      	movs	r2, #32
 8005c36:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e005      	b.n	8005c48 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005c42:	2300      	movs	r3, #0
 8005c44:	e000      	b.n	8005c48 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005c46:	2302      	movs	r3, #2
  }
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3720      	adds	r7, #32
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b088      	sub	sp, #32
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	431a      	orrs	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	431a      	orrs	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	69db      	ldr	r3, [r3, #28]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	4baa      	ldr	r3, [pc, #680]	; (8005f24 <UART_SetConfig+0x2d4>)
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	6812      	ldr	r2, [r2, #0]
 8005c82:	6979      	ldr	r1, [r7, #20]
 8005c84:	430b      	orrs	r3, r1
 8005c86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68da      	ldr	r2, [r3, #12]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a98      	ldr	r2, [pc, #608]	; (8005f28 <UART_SetConfig+0x2d8>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d120      	bne.n	8005d0e <UART_SetConfig+0xbe>
 8005ccc:	4b97      	ldr	r3, [pc, #604]	; (8005f2c <UART_SetConfig+0x2dc>)
 8005cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd0:	f003 0303 	and.w	r3, r3, #3
 8005cd4:	2b03      	cmp	r3, #3
 8005cd6:	d817      	bhi.n	8005d08 <UART_SetConfig+0xb8>
 8005cd8:	a201      	add	r2, pc, #4	; (adr r2, 8005ce0 <UART_SetConfig+0x90>)
 8005cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cde:	bf00      	nop
 8005ce0:	08005cf1 	.word	0x08005cf1
 8005ce4:	08005cfd 	.word	0x08005cfd
 8005ce8:	08005d03 	.word	0x08005d03
 8005cec:	08005cf7 	.word	0x08005cf7
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	77fb      	strb	r3, [r7, #31]
 8005cf4:	e0b5      	b.n	8005e62 <UART_SetConfig+0x212>
 8005cf6:	2302      	movs	r3, #2
 8005cf8:	77fb      	strb	r3, [r7, #31]
 8005cfa:	e0b2      	b.n	8005e62 <UART_SetConfig+0x212>
 8005cfc:	2304      	movs	r3, #4
 8005cfe:	77fb      	strb	r3, [r7, #31]
 8005d00:	e0af      	b.n	8005e62 <UART_SetConfig+0x212>
 8005d02:	2308      	movs	r3, #8
 8005d04:	77fb      	strb	r3, [r7, #31]
 8005d06:	e0ac      	b.n	8005e62 <UART_SetConfig+0x212>
 8005d08:	2310      	movs	r3, #16
 8005d0a:	77fb      	strb	r3, [r7, #31]
 8005d0c:	e0a9      	b.n	8005e62 <UART_SetConfig+0x212>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a87      	ldr	r2, [pc, #540]	; (8005f30 <UART_SetConfig+0x2e0>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d124      	bne.n	8005d62 <UART_SetConfig+0x112>
 8005d18:	4b84      	ldr	r3, [pc, #528]	; (8005f2c <UART_SetConfig+0x2dc>)
 8005d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d24:	d011      	beq.n	8005d4a <UART_SetConfig+0xfa>
 8005d26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d2a:	d817      	bhi.n	8005d5c <UART_SetConfig+0x10c>
 8005d2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d30:	d011      	beq.n	8005d56 <UART_SetConfig+0x106>
 8005d32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d36:	d811      	bhi.n	8005d5c <UART_SetConfig+0x10c>
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d003      	beq.n	8005d44 <UART_SetConfig+0xf4>
 8005d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d40:	d006      	beq.n	8005d50 <UART_SetConfig+0x100>
 8005d42:	e00b      	b.n	8005d5c <UART_SetConfig+0x10c>
 8005d44:	2300      	movs	r3, #0
 8005d46:	77fb      	strb	r3, [r7, #31]
 8005d48:	e08b      	b.n	8005e62 <UART_SetConfig+0x212>
 8005d4a:	2302      	movs	r3, #2
 8005d4c:	77fb      	strb	r3, [r7, #31]
 8005d4e:	e088      	b.n	8005e62 <UART_SetConfig+0x212>
 8005d50:	2304      	movs	r3, #4
 8005d52:	77fb      	strb	r3, [r7, #31]
 8005d54:	e085      	b.n	8005e62 <UART_SetConfig+0x212>
 8005d56:	2308      	movs	r3, #8
 8005d58:	77fb      	strb	r3, [r7, #31]
 8005d5a:	e082      	b.n	8005e62 <UART_SetConfig+0x212>
 8005d5c:	2310      	movs	r3, #16
 8005d5e:	77fb      	strb	r3, [r7, #31]
 8005d60:	e07f      	b.n	8005e62 <UART_SetConfig+0x212>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a73      	ldr	r2, [pc, #460]	; (8005f34 <UART_SetConfig+0x2e4>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d124      	bne.n	8005db6 <UART_SetConfig+0x166>
 8005d6c:	4b6f      	ldr	r3, [pc, #444]	; (8005f2c <UART_SetConfig+0x2dc>)
 8005d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d70:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005d74:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005d78:	d011      	beq.n	8005d9e <UART_SetConfig+0x14e>
 8005d7a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005d7e:	d817      	bhi.n	8005db0 <UART_SetConfig+0x160>
 8005d80:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d84:	d011      	beq.n	8005daa <UART_SetConfig+0x15a>
 8005d86:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d8a:	d811      	bhi.n	8005db0 <UART_SetConfig+0x160>
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d003      	beq.n	8005d98 <UART_SetConfig+0x148>
 8005d90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d94:	d006      	beq.n	8005da4 <UART_SetConfig+0x154>
 8005d96:	e00b      	b.n	8005db0 <UART_SetConfig+0x160>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	77fb      	strb	r3, [r7, #31]
 8005d9c:	e061      	b.n	8005e62 <UART_SetConfig+0x212>
 8005d9e:	2302      	movs	r3, #2
 8005da0:	77fb      	strb	r3, [r7, #31]
 8005da2:	e05e      	b.n	8005e62 <UART_SetConfig+0x212>
 8005da4:	2304      	movs	r3, #4
 8005da6:	77fb      	strb	r3, [r7, #31]
 8005da8:	e05b      	b.n	8005e62 <UART_SetConfig+0x212>
 8005daa:	2308      	movs	r3, #8
 8005dac:	77fb      	strb	r3, [r7, #31]
 8005dae:	e058      	b.n	8005e62 <UART_SetConfig+0x212>
 8005db0:	2310      	movs	r3, #16
 8005db2:	77fb      	strb	r3, [r7, #31]
 8005db4:	e055      	b.n	8005e62 <UART_SetConfig+0x212>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a5f      	ldr	r2, [pc, #380]	; (8005f38 <UART_SetConfig+0x2e8>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d124      	bne.n	8005e0a <UART_SetConfig+0x1ba>
 8005dc0:	4b5a      	ldr	r3, [pc, #360]	; (8005f2c <UART_SetConfig+0x2dc>)
 8005dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005dc8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005dcc:	d011      	beq.n	8005df2 <UART_SetConfig+0x1a2>
 8005dce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005dd2:	d817      	bhi.n	8005e04 <UART_SetConfig+0x1b4>
 8005dd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dd8:	d011      	beq.n	8005dfe <UART_SetConfig+0x1ae>
 8005dda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dde:	d811      	bhi.n	8005e04 <UART_SetConfig+0x1b4>
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d003      	beq.n	8005dec <UART_SetConfig+0x19c>
 8005de4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005de8:	d006      	beq.n	8005df8 <UART_SetConfig+0x1a8>
 8005dea:	e00b      	b.n	8005e04 <UART_SetConfig+0x1b4>
 8005dec:	2300      	movs	r3, #0
 8005dee:	77fb      	strb	r3, [r7, #31]
 8005df0:	e037      	b.n	8005e62 <UART_SetConfig+0x212>
 8005df2:	2302      	movs	r3, #2
 8005df4:	77fb      	strb	r3, [r7, #31]
 8005df6:	e034      	b.n	8005e62 <UART_SetConfig+0x212>
 8005df8:	2304      	movs	r3, #4
 8005dfa:	77fb      	strb	r3, [r7, #31]
 8005dfc:	e031      	b.n	8005e62 <UART_SetConfig+0x212>
 8005dfe:	2308      	movs	r3, #8
 8005e00:	77fb      	strb	r3, [r7, #31]
 8005e02:	e02e      	b.n	8005e62 <UART_SetConfig+0x212>
 8005e04:	2310      	movs	r3, #16
 8005e06:	77fb      	strb	r3, [r7, #31]
 8005e08:	e02b      	b.n	8005e62 <UART_SetConfig+0x212>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a4b      	ldr	r2, [pc, #300]	; (8005f3c <UART_SetConfig+0x2ec>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d124      	bne.n	8005e5e <UART_SetConfig+0x20e>
 8005e14:	4b45      	ldr	r3, [pc, #276]	; (8005f2c <UART_SetConfig+0x2dc>)
 8005e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e18:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005e1c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e20:	d011      	beq.n	8005e46 <UART_SetConfig+0x1f6>
 8005e22:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e26:	d817      	bhi.n	8005e58 <UART_SetConfig+0x208>
 8005e28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e2c:	d011      	beq.n	8005e52 <UART_SetConfig+0x202>
 8005e2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e32:	d811      	bhi.n	8005e58 <UART_SetConfig+0x208>
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d003      	beq.n	8005e40 <UART_SetConfig+0x1f0>
 8005e38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e3c:	d006      	beq.n	8005e4c <UART_SetConfig+0x1fc>
 8005e3e:	e00b      	b.n	8005e58 <UART_SetConfig+0x208>
 8005e40:	2300      	movs	r3, #0
 8005e42:	77fb      	strb	r3, [r7, #31]
 8005e44:	e00d      	b.n	8005e62 <UART_SetConfig+0x212>
 8005e46:	2302      	movs	r3, #2
 8005e48:	77fb      	strb	r3, [r7, #31]
 8005e4a:	e00a      	b.n	8005e62 <UART_SetConfig+0x212>
 8005e4c:	2304      	movs	r3, #4
 8005e4e:	77fb      	strb	r3, [r7, #31]
 8005e50:	e007      	b.n	8005e62 <UART_SetConfig+0x212>
 8005e52:	2308      	movs	r3, #8
 8005e54:	77fb      	strb	r3, [r7, #31]
 8005e56:	e004      	b.n	8005e62 <UART_SetConfig+0x212>
 8005e58:	2310      	movs	r3, #16
 8005e5a:	77fb      	strb	r3, [r7, #31]
 8005e5c:	e001      	b.n	8005e62 <UART_SetConfig+0x212>
 8005e5e:	2310      	movs	r3, #16
 8005e60:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e6a:	d16b      	bne.n	8005f44 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8005e6c:	7ffb      	ldrb	r3, [r7, #31]
 8005e6e:	2b08      	cmp	r3, #8
 8005e70:	d827      	bhi.n	8005ec2 <UART_SetConfig+0x272>
 8005e72:	a201      	add	r2, pc, #4	; (adr r2, 8005e78 <UART_SetConfig+0x228>)
 8005e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e78:	08005e9d 	.word	0x08005e9d
 8005e7c:	08005ea5 	.word	0x08005ea5
 8005e80:	08005ead 	.word	0x08005ead
 8005e84:	08005ec3 	.word	0x08005ec3
 8005e88:	08005eb3 	.word	0x08005eb3
 8005e8c:	08005ec3 	.word	0x08005ec3
 8005e90:	08005ec3 	.word	0x08005ec3
 8005e94:	08005ec3 	.word	0x08005ec3
 8005e98:	08005ebb 	.word	0x08005ebb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e9c:	f7ff fb9e 	bl	80055dc <HAL_RCC_GetPCLK1Freq>
 8005ea0:	61b8      	str	r0, [r7, #24]
        break;
 8005ea2:	e013      	b.n	8005ecc <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ea4:	f7ff fbbc 	bl	8005620 <HAL_RCC_GetPCLK2Freq>
 8005ea8:	61b8      	str	r0, [r7, #24]
        break;
 8005eaa:	e00f      	b.n	8005ecc <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005eac:	4b24      	ldr	r3, [pc, #144]	; (8005f40 <UART_SetConfig+0x2f0>)
 8005eae:	61bb      	str	r3, [r7, #24]
        break;
 8005eb0:	e00c      	b.n	8005ecc <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eb2:	f7ff fb33 	bl	800551c <HAL_RCC_GetSysClockFreq>
 8005eb6:	61b8      	str	r0, [r7, #24]
        break;
 8005eb8:	e008      	b.n	8005ecc <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ebe:	61bb      	str	r3, [r7, #24]
        break;
 8005ec0:	e004      	b.n	8005ecc <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	77bb      	strb	r3, [r7, #30]
        break;
 8005eca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f000 8084 	beq.w	8005fdc <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	005a      	lsls	r2, r3, #1
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	085b      	lsrs	r3, r3, #1
 8005ede:	441a      	add	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	2b0f      	cmp	r3, #15
 8005eee:	d916      	bls.n	8005f1e <UART_SetConfig+0x2ce>
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ef6:	d212      	bcs.n	8005f1e <UART_SetConfig+0x2ce>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	f023 030f 	bic.w	r3, r3, #15
 8005f00:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	085b      	lsrs	r3, r3, #1
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	f003 0307 	and.w	r3, r3, #7
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	89fb      	ldrh	r3, [r7, #14]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	89fa      	ldrh	r2, [r7, #14]
 8005f1a:	60da      	str	r2, [r3, #12]
 8005f1c:	e05e      	b.n	8005fdc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	77bb      	strb	r3, [r7, #30]
 8005f22:	e05b      	b.n	8005fdc <UART_SetConfig+0x38c>
 8005f24:	efff69f3 	.word	0xefff69f3
 8005f28:	40013800 	.word	0x40013800
 8005f2c:	40021000 	.word	0x40021000
 8005f30:	40004400 	.word	0x40004400
 8005f34:	40004800 	.word	0x40004800
 8005f38:	40004c00 	.word	0x40004c00
 8005f3c:	40005000 	.word	0x40005000
 8005f40:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f44:	7ffb      	ldrb	r3, [r7, #31]
 8005f46:	2b08      	cmp	r3, #8
 8005f48:	d827      	bhi.n	8005f9a <UART_SetConfig+0x34a>
 8005f4a:	a201      	add	r2, pc, #4	; (adr r2, 8005f50 <UART_SetConfig+0x300>)
 8005f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f50:	08005f75 	.word	0x08005f75
 8005f54:	08005f7d 	.word	0x08005f7d
 8005f58:	08005f85 	.word	0x08005f85
 8005f5c:	08005f9b 	.word	0x08005f9b
 8005f60:	08005f8b 	.word	0x08005f8b
 8005f64:	08005f9b 	.word	0x08005f9b
 8005f68:	08005f9b 	.word	0x08005f9b
 8005f6c:	08005f9b 	.word	0x08005f9b
 8005f70:	08005f93 	.word	0x08005f93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f74:	f7ff fb32 	bl	80055dc <HAL_RCC_GetPCLK1Freq>
 8005f78:	61b8      	str	r0, [r7, #24]
        break;
 8005f7a:	e013      	b.n	8005fa4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f7c:	f7ff fb50 	bl	8005620 <HAL_RCC_GetPCLK2Freq>
 8005f80:	61b8      	str	r0, [r7, #24]
        break;
 8005f82:	e00f      	b.n	8005fa4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f84:	4b1b      	ldr	r3, [pc, #108]	; (8005ff4 <UART_SetConfig+0x3a4>)
 8005f86:	61bb      	str	r3, [r7, #24]
        break;
 8005f88:	e00c      	b.n	8005fa4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f8a:	f7ff fac7 	bl	800551c <HAL_RCC_GetSysClockFreq>
 8005f8e:	61b8      	str	r0, [r7, #24]
        break;
 8005f90:	e008      	b.n	8005fa4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f96:	61bb      	str	r3, [r7, #24]
        break;
 8005f98:	e004      	b.n	8005fa4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	77bb      	strb	r3, [r7, #30]
        break;
 8005fa2:	bf00      	nop
    }

    if (pclk != 0U)
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d018      	beq.n	8005fdc <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	085a      	lsrs	r2, r3, #1
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	441a      	add	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fbc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	2b0f      	cmp	r3, #15
 8005fc2:	d909      	bls.n	8005fd8 <UART_SetConfig+0x388>
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fca:	d205      	bcs.n	8005fd8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	60da      	str	r2, [r3, #12]
 8005fd6:	e001      	b.n	8005fdc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005fe8:	7fbb      	ldrb	r3, [r7, #30]
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3720      	adds	r7, #32
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	007a1200 	.word	0x007a1200

08005ff8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006004:	f003 0308 	and.w	r3, r3, #8
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00a      	beq.n	8006022 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	430a      	orrs	r2, r1
 8006020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00a      	beq.n	8006044 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	430a      	orrs	r2, r1
 8006042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006048:	f003 0302 	and.w	r3, r3, #2
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00a      	beq.n	8006066 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	430a      	orrs	r2, r1
 8006064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606a:	f003 0304 	and.w	r3, r3, #4
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00a      	beq.n	8006088 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	430a      	orrs	r2, r1
 8006086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608c:	f003 0310 	and.w	r3, r3, #16
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00a      	beq.n	80060aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	430a      	orrs	r2, r1
 80060a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ae:	f003 0320 	and.w	r3, r3, #32
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00a      	beq.n	80060cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	430a      	orrs	r2, r1
 80060ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d01a      	beq.n	800610e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	430a      	orrs	r2, r1
 80060ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060f6:	d10a      	bne.n	800610e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	430a      	orrs	r2, r1
 800610c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00a      	beq.n	8006130 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	430a      	orrs	r2, r1
 800612e:	605a      	str	r2, [r3, #4]
  }
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b098      	sub	sp, #96	; 0x60
 8006140:	af02      	add	r7, sp, #8
 8006142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800614c:	f7fc fdd4 	bl	8002cf8 <HAL_GetTick>
 8006150:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0308 	and.w	r3, r3, #8
 800615c:	2b08      	cmp	r3, #8
 800615e:	d12e      	bne.n	80061be <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006160:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006164:	9300      	str	r3, [sp, #0]
 8006166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006168:	2200      	movs	r2, #0
 800616a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 f88c 	bl	800628c <UART_WaitOnFlagUntilTimeout>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d021      	beq.n	80061be <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006182:	e853 3f00 	ldrex	r3, [r3]
 8006186:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800618a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800618e:	653b      	str	r3, [r7, #80]	; 0x50
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	461a      	mov	r2, r3
 8006196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006198:	647b      	str	r3, [r7, #68]	; 0x44
 800619a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800619e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061a0:	e841 2300 	strex	r3, r2, [r1]
 80061a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d1e6      	bne.n	800617a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2220      	movs	r2, #32
 80061b0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e062      	b.n	8006284 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0304 	and.w	r3, r3, #4
 80061c8:	2b04      	cmp	r3, #4
 80061ca:	d149      	bne.n	8006260 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061d0:	9300      	str	r3, [sp, #0]
 80061d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061d4:	2200      	movs	r2, #0
 80061d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f856 	bl	800628c <UART_WaitOnFlagUntilTimeout>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d03c      	beq.n	8006260 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ee:	e853 3f00 	ldrex	r3, [r3]
 80061f2:	623b      	str	r3, [r7, #32]
   return(result);
 80061f4:	6a3b      	ldr	r3, [r7, #32]
 80061f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	461a      	mov	r2, r3
 8006202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006204:	633b      	str	r3, [r7, #48]	; 0x30
 8006206:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006208:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800620a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800620c:	e841 2300 	strex	r3, r2, [r1]
 8006210:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1e6      	bne.n	80061e6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	3308      	adds	r3, #8
 800621e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	e853 3f00 	ldrex	r3, [r3]
 8006226:	60fb      	str	r3, [r7, #12]
   return(result);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f023 0301 	bic.w	r3, r3, #1
 800622e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	3308      	adds	r3, #8
 8006236:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006238:	61fa      	str	r2, [r7, #28]
 800623a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623c:	69b9      	ldr	r1, [r7, #24]
 800623e:	69fa      	ldr	r2, [r7, #28]
 8006240:	e841 2300 	strex	r3, r2, [r1]
 8006244:	617b      	str	r3, [r7, #20]
   return(result);
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1e5      	bne.n	8006218 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2220      	movs	r2, #32
 8006250:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e011      	b.n	8006284 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2220      	movs	r2, #32
 8006264:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2220      	movs	r2, #32
 800626a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3758      	adds	r7, #88	; 0x58
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	603b      	str	r3, [r7, #0]
 8006298:	4613      	mov	r3, r2
 800629a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800629c:	e04f      	b.n	800633e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a4:	d04b      	beq.n	800633e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062a6:	f7fc fd27 	bl	8002cf8 <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	69ba      	ldr	r2, [r7, #24]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d302      	bcc.n	80062bc <UART_WaitOnFlagUntilTimeout+0x30>
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d101      	bne.n	80062c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e04e      	b.n	800635e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0304 	and.w	r3, r3, #4
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d037      	beq.n	800633e <UART_WaitOnFlagUntilTimeout+0xb2>
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2b80      	cmp	r3, #128	; 0x80
 80062d2:	d034      	beq.n	800633e <UART_WaitOnFlagUntilTimeout+0xb2>
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	2b40      	cmp	r3, #64	; 0x40
 80062d8:	d031      	beq.n	800633e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	69db      	ldr	r3, [r3, #28]
 80062e0:	f003 0308 	and.w	r3, r3, #8
 80062e4:	2b08      	cmp	r3, #8
 80062e6:	d110      	bne.n	800630a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2208      	movs	r2, #8
 80062ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f000 f838 	bl	8006366 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2208      	movs	r2, #8
 80062fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e029      	b.n	800635e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	69db      	ldr	r3, [r3, #28]
 8006310:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006314:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006318:	d111      	bne.n	800633e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006322:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f000 f81e 	bl	8006366 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2220      	movs	r2, #32
 800632e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e00f      	b.n	800635e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	69da      	ldr	r2, [r3, #28]
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	4013      	ands	r3, r2
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	429a      	cmp	r2, r3
 800634c:	bf0c      	ite	eq
 800634e:	2301      	moveq	r3, #1
 8006350:	2300      	movne	r3, #0
 8006352:	b2db      	uxtb	r3, r3
 8006354:	461a      	mov	r2, r3
 8006356:	79fb      	ldrb	r3, [r7, #7]
 8006358:	429a      	cmp	r2, r3
 800635a:	d0a0      	beq.n	800629e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006366:	b480      	push	{r7}
 8006368:	b095      	sub	sp, #84	; 0x54
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006376:	e853 3f00 	ldrex	r3, [r3]
 800637a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800637c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006382:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	461a      	mov	r2, r3
 800638a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800638c:	643b      	str	r3, [r7, #64]	; 0x40
 800638e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006390:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006392:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006394:	e841 2300 	strex	r3, r2, [r1]
 8006398:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800639a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1e6      	bne.n	800636e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	3308      	adds	r3, #8
 80063a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a8:	6a3b      	ldr	r3, [r7, #32]
 80063aa:	e853 3f00 	ldrex	r3, [r3]
 80063ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	f023 0301 	bic.w	r3, r3, #1
 80063b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	3308      	adds	r3, #8
 80063be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063c8:	e841 2300 	strex	r3, r2, [r1]
 80063cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1e5      	bne.n	80063a0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d118      	bne.n	800640e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	e853 3f00 	ldrex	r3, [r3]
 80063e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	f023 0310 	bic.w	r3, r3, #16
 80063f0:	647b      	str	r3, [r7, #68]	; 0x44
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	461a      	mov	r2, r3
 80063f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063fa:	61bb      	str	r3, [r7, #24]
 80063fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fe:	6979      	ldr	r1, [r7, #20]
 8006400:	69ba      	ldr	r2, [r7, #24]
 8006402:	e841 2300 	strex	r3, r2, [r1]
 8006406:	613b      	str	r3, [r7, #16]
   return(result);
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1e6      	bne.n	80063dc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2220      	movs	r2, #32
 8006412:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006422:	bf00      	nop
 8006424:	3754      	adds	r7, #84	; 0x54
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
	...

08006430 <__errno>:
 8006430:	4b01      	ldr	r3, [pc, #4]	; (8006438 <__errno+0x8>)
 8006432:	6818      	ldr	r0, [r3, #0]
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	2000000c 	.word	0x2000000c

0800643c <__libc_init_array>:
 800643c:	b570      	push	{r4, r5, r6, lr}
 800643e:	4d0d      	ldr	r5, [pc, #52]	; (8006474 <__libc_init_array+0x38>)
 8006440:	4c0d      	ldr	r4, [pc, #52]	; (8006478 <__libc_init_array+0x3c>)
 8006442:	1b64      	subs	r4, r4, r5
 8006444:	10a4      	asrs	r4, r4, #2
 8006446:	2600      	movs	r6, #0
 8006448:	42a6      	cmp	r6, r4
 800644a:	d109      	bne.n	8006460 <__libc_init_array+0x24>
 800644c:	4d0b      	ldr	r5, [pc, #44]	; (800647c <__libc_init_array+0x40>)
 800644e:	4c0c      	ldr	r4, [pc, #48]	; (8006480 <__libc_init_array+0x44>)
 8006450:	f002 feb4 	bl	80091bc <_init>
 8006454:	1b64      	subs	r4, r4, r5
 8006456:	10a4      	asrs	r4, r4, #2
 8006458:	2600      	movs	r6, #0
 800645a:	42a6      	cmp	r6, r4
 800645c:	d105      	bne.n	800646a <__libc_init_array+0x2e>
 800645e:	bd70      	pop	{r4, r5, r6, pc}
 8006460:	f855 3b04 	ldr.w	r3, [r5], #4
 8006464:	4798      	blx	r3
 8006466:	3601      	adds	r6, #1
 8006468:	e7ee      	b.n	8006448 <__libc_init_array+0xc>
 800646a:	f855 3b04 	ldr.w	r3, [r5], #4
 800646e:	4798      	blx	r3
 8006470:	3601      	adds	r6, #1
 8006472:	e7f2      	b.n	800645a <__libc_init_array+0x1e>
 8006474:	080095fc 	.word	0x080095fc
 8006478:	080095fc 	.word	0x080095fc
 800647c:	080095fc 	.word	0x080095fc
 8006480:	08009600 	.word	0x08009600

08006484 <memset>:
 8006484:	4402      	add	r2, r0
 8006486:	4603      	mov	r3, r0
 8006488:	4293      	cmp	r3, r2
 800648a:	d100      	bne.n	800648e <memset+0xa>
 800648c:	4770      	bx	lr
 800648e:	f803 1b01 	strb.w	r1, [r3], #1
 8006492:	e7f9      	b.n	8006488 <memset+0x4>

08006494 <__cvt>:
 8006494:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006498:	ec55 4b10 	vmov	r4, r5, d0
 800649c:	2d00      	cmp	r5, #0
 800649e:	460e      	mov	r6, r1
 80064a0:	4619      	mov	r1, r3
 80064a2:	462b      	mov	r3, r5
 80064a4:	bfbb      	ittet	lt
 80064a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80064aa:	461d      	movlt	r5, r3
 80064ac:	2300      	movge	r3, #0
 80064ae:	232d      	movlt	r3, #45	; 0x2d
 80064b0:	700b      	strb	r3, [r1, #0]
 80064b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80064b8:	4691      	mov	r9, r2
 80064ba:	f023 0820 	bic.w	r8, r3, #32
 80064be:	bfbc      	itt	lt
 80064c0:	4622      	movlt	r2, r4
 80064c2:	4614      	movlt	r4, r2
 80064c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80064c8:	d005      	beq.n	80064d6 <__cvt+0x42>
 80064ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80064ce:	d100      	bne.n	80064d2 <__cvt+0x3e>
 80064d0:	3601      	adds	r6, #1
 80064d2:	2102      	movs	r1, #2
 80064d4:	e000      	b.n	80064d8 <__cvt+0x44>
 80064d6:	2103      	movs	r1, #3
 80064d8:	ab03      	add	r3, sp, #12
 80064da:	9301      	str	r3, [sp, #4]
 80064dc:	ab02      	add	r3, sp, #8
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	ec45 4b10 	vmov	d0, r4, r5
 80064e4:	4653      	mov	r3, sl
 80064e6:	4632      	mov	r2, r6
 80064e8:	f000 fcea 	bl	8006ec0 <_dtoa_r>
 80064ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80064f0:	4607      	mov	r7, r0
 80064f2:	d102      	bne.n	80064fa <__cvt+0x66>
 80064f4:	f019 0f01 	tst.w	r9, #1
 80064f8:	d022      	beq.n	8006540 <__cvt+0xac>
 80064fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80064fe:	eb07 0906 	add.w	r9, r7, r6
 8006502:	d110      	bne.n	8006526 <__cvt+0x92>
 8006504:	783b      	ldrb	r3, [r7, #0]
 8006506:	2b30      	cmp	r3, #48	; 0x30
 8006508:	d10a      	bne.n	8006520 <__cvt+0x8c>
 800650a:	2200      	movs	r2, #0
 800650c:	2300      	movs	r3, #0
 800650e:	4620      	mov	r0, r4
 8006510:	4629      	mov	r1, r5
 8006512:	f7fa fae1 	bl	8000ad8 <__aeabi_dcmpeq>
 8006516:	b918      	cbnz	r0, 8006520 <__cvt+0x8c>
 8006518:	f1c6 0601 	rsb	r6, r6, #1
 800651c:	f8ca 6000 	str.w	r6, [sl]
 8006520:	f8da 3000 	ldr.w	r3, [sl]
 8006524:	4499      	add	r9, r3
 8006526:	2200      	movs	r2, #0
 8006528:	2300      	movs	r3, #0
 800652a:	4620      	mov	r0, r4
 800652c:	4629      	mov	r1, r5
 800652e:	f7fa fad3 	bl	8000ad8 <__aeabi_dcmpeq>
 8006532:	b108      	cbz	r0, 8006538 <__cvt+0xa4>
 8006534:	f8cd 900c 	str.w	r9, [sp, #12]
 8006538:	2230      	movs	r2, #48	; 0x30
 800653a:	9b03      	ldr	r3, [sp, #12]
 800653c:	454b      	cmp	r3, r9
 800653e:	d307      	bcc.n	8006550 <__cvt+0xbc>
 8006540:	9b03      	ldr	r3, [sp, #12]
 8006542:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006544:	1bdb      	subs	r3, r3, r7
 8006546:	4638      	mov	r0, r7
 8006548:	6013      	str	r3, [r2, #0]
 800654a:	b004      	add	sp, #16
 800654c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006550:	1c59      	adds	r1, r3, #1
 8006552:	9103      	str	r1, [sp, #12]
 8006554:	701a      	strb	r2, [r3, #0]
 8006556:	e7f0      	b.n	800653a <__cvt+0xa6>

08006558 <__exponent>:
 8006558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800655a:	4603      	mov	r3, r0
 800655c:	2900      	cmp	r1, #0
 800655e:	bfb8      	it	lt
 8006560:	4249      	neglt	r1, r1
 8006562:	f803 2b02 	strb.w	r2, [r3], #2
 8006566:	bfb4      	ite	lt
 8006568:	222d      	movlt	r2, #45	; 0x2d
 800656a:	222b      	movge	r2, #43	; 0x2b
 800656c:	2909      	cmp	r1, #9
 800656e:	7042      	strb	r2, [r0, #1]
 8006570:	dd2a      	ble.n	80065c8 <__exponent+0x70>
 8006572:	f10d 0407 	add.w	r4, sp, #7
 8006576:	46a4      	mov	ip, r4
 8006578:	270a      	movs	r7, #10
 800657a:	46a6      	mov	lr, r4
 800657c:	460a      	mov	r2, r1
 800657e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006582:	fb07 1516 	mls	r5, r7, r6, r1
 8006586:	3530      	adds	r5, #48	; 0x30
 8006588:	2a63      	cmp	r2, #99	; 0x63
 800658a:	f104 34ff 	add.w	r4, r4, #4294967295
 800658e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006592:	4631      	mov	r1, r6
 8006594:	dcf1      	bgt.n	800657a <__exponent+0x22>
 8006596:	3130      	adds	r1, #48	; 0x30
 8006598:	f1ae 0502 	sub.w	r5, lr, #2
 800659c:	f804 1c01 	strb.w	r1, [r4, #-1]
 80065a0:	1c44      	adds	r4, r0, #1
 80065a2:	4629      	mov	r1, r5
 80065a4:	4561      	cmp	r1, ip
 80065a6:	d30a      	bcc.n	80065be <__exponent+0x66>
 80065a8:	f10d 0209 	add.w	r2, sp, #9
 80065ac:	eba2 020e 	sub.w	r2, r2, lr
 80065b0:	4565      	cmp	r5, ip
 80065b2:	bf88      	it	hi
 80065b4:	2200      	movhi	r2, #0
 80065b6:	4413      	add	r3, r2
 80065b8:	1a18      	subs	r0, r3, r0
 80065ba:	b003      	add	sp, #12
 80065bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80065c6:	e7ed      	b.n	80065a4 <__exponent+0x4c>
 80065c8:	2330      	movs	r3, #48	; 0x30
 80065ca:	3130      	adds	r1, #48	; 0x30
 80065cc:	7083      	strb	r3, [r0, #2]
 80065ce:	70c1      	strb	r1, [r0, #3]
 80065d0:	1d03      	adds	r3, r0, #4
 80065d2:	e7f1      	b.n	80065b8 <__exponent+0x60>

080065d4 <_printf_float>:
 80065d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d8:	ed2d 8b02 	vpush	{d8}
 80065dc:	b08d      	sub	sp, #52	; 0x34
 80065de:	460c      	mov	r4, r1
 80065e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80065e4:	4616      	mov	r6, r2
 80065e6:	461f      	mov	r7, r3
 80065e8:	4605      	mov	r5, r0
 80065ea:	f001 fa55 	bl	8007a98 <_localeconv_r>
 80065ee:	f8d0 a000 	ldr.w	sl, [r0]
 80065f2:	4650      	mov	r0, sl
 80065f4:	f7f9 fdf4 	bl	80001e0 <strlen>
 80065f8:	2300      	movs	r3, #0
 80065fa:	930a      	str	r3, [sp, #40]	; 0x28
 80065fc:	6823      	ldr	r3, [r4, #0]
 80065fe:	9305      	str	r3, [sp, #20]
 8006600:	f8d8 3000 	ldr.w	r3, [r8]
 8006604:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006608:	3307      	adds	r3, #7
 800660a:	f023 0307 	bic.w	r3, r3, #7
 800660e:	f103 0208 	add.w	r2, r3, #8
 8006612:	f8c8 2000 	str.w	r2, [r8]
 8006616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800661e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006622:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006626:	9307      	str	r3, [sp, #28]
 8006628:	f8cd 8018 	str.w	r8, [sp, #24]
 800662c:	ee08 0a10 	vmov	s16, r0
 8006630:	4b9f      	ldr	r3, [pc, #636]	; (80068b0 <_printf_float+0x2dc>)
 8006632:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006636:	f04f 32ff 	mov.w	r2, #4294967295
 800663a:	f7fa fa7f 	bl	8000b3c <__aeabi_dcmpun>
 800663e:	bb88      	cbnz	r0, 80066a4 <_printf_float+0xd0>
 8006640:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006644:	4b9a      	ldr	r3, [pc, #616]	; (80068b0 <_printf_float+0x2dc>)
 8006646:	f04f 32ff 	mov.w	r2, #4294967295
 800664a:	f7fa fa59 	bl	8000b00 <__aeabi_dcmple>
 800664e:	bb48      	cbnz	r0, 80066a4 <_printf_float+0xd0>
 8006650:	2200      	movs	r2, #0
 8006652:	2300      	movs	r3, #0
 8006654:	4640      	mov	r0, r8
 8006656:	4649      	mov	r1, r9
 8006658:	f7fa fa48 	bl	8000aec <__aeabi_dcmplt>
 800665c:	b110      	cbz	r0, 8006664 <_printf_float+0x90>
 800665e:	232d      	movs	r3, #45	; 0x2d
 8006660:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006664:	4b93      	ldr	r3, [pc, #588]	; (80068b4 <_printf_float+0x2e0>)
 8006666:	4894      	ldr	r0, [pc, #592]	; (80068b8 <_printf_float+0x2e4>)
 8006668:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800666c:	bf94      	ite	ls
 800666e:	4698      	movls	r8, r3
 8006670:	4680      	movhi	r8, r0
 8006672:	2303      	movs	r3, #3
 8006674:	6123      	str	r3, [r4, #16]
 8006676:	9b05      	ldr	r3, [sp, #20]
 8006678:	f023 0204 	bic.w	r2, r3, #4
 800667c:	6022      	str	r2, [r4, #0]
 800667e:	f04f 0900 	mov.w	r9, #0
 8006682:	9700      	str	r7, [sp, #0]
 8006684:	4633      	mov	r3, r6
 8006686:	aa0b      	add	r2, sp, #44	; 0x2c
 8006688:	4621      	mov	r1, r4
 800668a:	4628      	mov	r0, r5
 800668c:	f000 f9d8 	bl	8006a40 <_printf_common>
 8006690:	3001      	adds	r0, #1
 8006692:	f040 8090 	bne.w	80067b6 <_printf_float+0x1e2>
 8006696:	f04f 30ff 	mov.w	r0, #4294967295
 800669a:	b00d      	add	sp, #52	; 0x34
 800669c:	ecbd 8b02 	vpop	{d8}
 80066a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066a4:	4642      	mov	r2, r8
 80066a6:	464b      	mov	r3, r9
 80066a8:	4640      	mov	r0, r8
 80066aa:	4649      	mov	r1, r9
 80066ac:	f7fa fa46 	bl	8000b3c <__aeabi_dcmpun>
 80066b0:	b140      	cbz	r0, 80066c4 <_printf_float+0xf0>
 80066b2:	464b      	mov	r3, r9
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	bfbc      	itt	lt
 80066b8:	232d      	movlt	r3, #45	; 0x2d
 80066ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80066be:	487f      	ldr	r0, [pc, #508]	; (80068bc <_printf_float+0x2e8>)
 80066c0:	4b7f      	ldr	r3, [pc, #508]	; (80068c0 <_printf_float+0x2ec>)
 80066c2:	e7d1      	b.n	8006668 <_printf_float+0x94>
 80066c4:	6863      	ldr	r3, [r4, #4]
 80066c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80066ca:	9206      	str	r2, [sp, #24]
 80066cc:	1c5a      	adds	r2, r3, #1
 80066ce:	d13f      	bne.n	8006750 <_printf_float+0x17c>
 80066d0:	2306      	movs	r3, #6
 80066d2:	6063      	str	r3, [r4, #4]
 80066d4:	9b05      	ldr	r3, [sp, #20]
 80066d6:	6861      	ldr	r1, [r4, #4]
 80066d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80066dc:	2300      	movs	r3, #0
 80066de:	9303      	str	r3, [sp, #12]
 80066e0:	ab0a      	add	r3, sp, #40	; 0x28
 80066e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80066e6:	ab09      	add	r3, sp, #36	; 0x24
 80066e8:	ec49 8b10 	vmov	d0, r8, r9
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	6022      	str	r2, [r4, #0]
 80066f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80066f4:	4628      	mov	r0, r5
 80066f6:	f7ff fecd 	bl	8006494 <__cvt>
 80066fa:	9b06      	ldr	r3, [sp, #24]
 80066fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066fe:	2b47      	cmp	r3, #71	; 0x47
 8006700:	4680      	mov	r8, r0
 8006702:	d108      	bne.n	8006716 <_printf_float+0x142>
 8006704:	1cc8      	adds	r0, r1, #3
 8006706:	db02      	blt.n	800670e <_printf_float+0x13a>
 8006708:	6863      	ldr	r3, [r4, #4]
 800670a:	4299      	cmp	r1, r3
 800670c:	dd41      	ble.n	8006792 <_printf_float+0x1be>
 800670e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006712:	fa5f fb8b 	uxtb.w	fp, fp
 8006716:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800671a:	d820      	bhi.n	800675e <_printf_float+0x18a>
 800671c:	3901      	subs	r1, #1
 800671e:	465a      	mov	r2, fp
 8006720:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006724:	9109      	str	r1, [sp, #36]	; 0x24
 8006726:	f7ff ff17 	bl	8006558 <__exponent>
 800672a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800672c:	1813      	adds	r3, r2, r0
 800672e:	2a01      	cmp	r2, #1
 8006730:	4681      	mov	r9, r0
 8006732:	6123      	str	r3, [r4, #16]
 8006734:	dc02      	bgt.n	800673c <_printf_float+0x168>
 8006736:	6822      	ldr	r2, [r4, #0]
 8006738:	07d2      	lsls	r2, r2, #31
 800673a:	d501      	bpl.n	8006740 <_printf_float+0x16c>
 800673c:	3301      	adds	r3, #1
 800673e:	6123      	str	r3, [r4, #16]
 8006740:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006744:	2b00      	cmp	r3, #0
 8006746:	d09c      	beq.n	8006682 <_printf_float+0xae>
 8006748:	232d      	movs	r3, #45	; 0x2d
 800674a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800674e:	e798      	b.n	8006682 <_printf_float+0xae>
 8006750:	9a06      	ldr	r2, [sp, #24]
 8006752:	2a47      	cmp	r2, #71	; 0x47
 8006754:	d1be      	bne.n	80066d4 <_printf_float+0x100>
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1bc      	bne.n	80066d4 <_printf_float+0x100>
 800675a:	2301      	movs	r3, #1
 800675c:	e7b9      	b.n	80066d2 <_printf_float+0xfe>
 800675e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006762:	d118      	bne.n	8006796 <_printf_float+0x1c2>
 8006764:	2900      	cmp	r1, #0
 8006766:	6863      	ldr	r3, [r4, #4]
 8006768:	dd0b      	ble.n	8006782 <_printf_float+0x1ae>
 800676a:	6121      	str	r1, [r4, #16]
 800676c:	b913      	cbnz	r3, 8006774 <_printf_float+0x1a0>
 800676e:	6822      	ldr	r2, [r4, #0]
 8006770:	07d0      	lsls	r0, r2, #31
 8006772:	d502      	bpl.n	800677a <_printf_float+0x1a6>
 8006774:	3301      	adds	r3, #1
 8006776:	440b      	add	r3, r1
 8006778:	6123      	str	r3, [r4, #16]
 800677a:	65a1      	str	r1, [r4, #88]	; 0x58
 800677c:	f04f 0900 	mov.w	r9, #0
 8006780:	e7de      	b.n	8006740 <_printf_float+0x16c>
 8006782:	b913      	cbnz	r3, 800678a <_printf_float+0x1b6>
 8006784:	6822      	ldr	r2, [r4, #0]
 8006786:	07d2      	lsls	r2, r2, #31
 8006788:	d501      	bpl.n	800678e <_printf_float+0x1ba>
 800678a:	3302      	adds	r3, #2
 800678c:	e7f4      	b.n	8006778 <_printf_float+0x1a4>
 800678e:	2301      	movs	r3, #1
 8006790:	e7f2      	b.n	8006778 <_printf_float+0x1a4>
 8006792:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006798:	4299      	cmp	r1, r3
 800679a:	db05      	blt.n	80067a8 <_printf_float+0x1d4>
 800679c:	6823      	ldr	r3, [r4, #0]
 800679e:	6121      	str	r1, [r4, #16]
 80067a0:	07d8      	lsls	r0, r3, #31
 80067a2:	d5ea      	bpl.n	800677a <_printf_float+0x1a6>
 80067a4:	1c4b      	adds	r3, r1, #1
 80067a6:	e7e7      	b.n	8006778 <_printf_float+0x1a4>
 80067a8:	2900      	cmp	r1, #0
 80067aa:	bfd4      	ite	le
 80067ac:	f1c1 0202 	rsble	r2, r1, #2
 80067b0:	2201      	movgt	r2, #1
 80067b2:	4413      	add	r3, r2
 80067b4:	e7e0      	b.n	8006778 <_printf_float+0x1a4>
 80067b6:	6823      	ldr	r3, [r4, #0]
 80067b8:	055a      	lsls	r2, r3, #21
 80067ba:	d407      	bmi.n	80067cc <_printf_float+0x1f8>
 80067bc:	6923      	ldr	r3, [r4, #16]
 80067be:	4642      	mov	r2, r8
 80067c0:	4631      	mov	r1, r6
 80067c2:	4628      	mov	r0, r5
 80067c4:	47b8      	blx	r7
 80067c6:	3001      	adds	r0, #1
 80067c8:	d12c      	bne.n	8006824 <_printf_float+0x250>
 80067ca:	e764      	b.n	8006696 <_printf_float+0xc2>
 80067cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80067d0:	f240 80e0 	bls.w	8006994 <_printf_float+0x3c0>
 80067d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067d8:	2200      	movs	r2, #0
 80067da:	2300      	movs	r3, #0
 80067dc:	f7fa f97c 	bl	8000ad8 <__aeabi_dcmpeq>
 80067e0:	2800      	cmp	r0, #0
 80067e2:	d034      	beq.n	800684e <_printf_float+0x27a>
 80067e4:	4a37      	ldr	r2, [pc, #220]	; (80068c4 <_printf_float+0x2f0>)
 80067e6:	2301      	movs	r3, #1
 80067e8:	4631      	mov	r1, r6
 80067ea:	4628      	mov	r0, r5
 80067ec:	47b8      	blx	r7
 80067ee:	3001      	adds	r0, #1
 80067f0:	f43f af51 	beq.w	8006696 <_printf_float+0xc2>
 80067f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067f8:	429a      	cmp	r2, r3
 80067fa:	db02      	blt.n	8006802 <_printf_float+0x22e>
 80067fc:	6823      	ldr	r3, [r4, #0]
 80067fe:	07d8      	lsls	r0, r3, #31
 8006800:	d510      	bpl.n	8006824 <_printf_float+0x250>
 8006802:	ee18 3a10 	vmov	r3, s16
 8006806:	4652      	mov	r2, sl
 8006808:	4631      	mov	r1, r6
 800680a:	4628      	mov	r0, r5
 800680c:	47b8      	blx	r7
 800680e:	3001      	adds	r0, #1
 8006810:	f43f af41 	beq.w	8006696 <_printf_float+0xc2>
 8006814:	f04f 0800 	mov.w	r8, #0
 8006818:	f104 091a 	add.w	r9, r4, #26
 800681c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800681e:	3b01      	subs	r3, #1
 8006820:	4543      	cmp	r3, r8
 8006822:	dc09      	bgt.n	8006838 <_printf_float+0x264>
 8006824:	6823      	ldr	r3, [r4, #0]
 8006826:	079b      	lsls	r3, r3, #30
 8006828:	f100 8105 	bmi.w	8006a36 <_printf_float+0x462>
 800682c:	68e0      	ldr	r0, [r4, #12]
 800682e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006830:	4298      	cmp	r0, r3
 8006832:	bfb8      	it	lt
 8006834:	4618      	movlt	r0, r3
 8006836:	e730      	b.n	800669a <_printf_float+0xc6>
 8006838:	2301      	movs	r3, #1
 800683a:	464a      	mov	r2, r9
 800683c:	4631      	mov	r1, r6
 800683e:	4628      	mov	r0, r5
 8006840:	47b8      	blx	r7
 8006842:	3001      	adds	r0, #1
 8006844:	f43f af27 	beq.w	8006696 <_printf_float+0xc2>
 8006848:	f108 0801 	add.w	r8, r8, #1
 800684c:	e7e6      	b.n	800681c <_printf_float+0x248>
 800684e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006850:	2b00      	cmp	r3, #0
 8006852:	dc39      	bgt.n	80068c8 <_printf_float+0x2f4>
 8006854:	4a1b      	ldr	r2, [pc, #108]	; (80068c4 <_printf_float+0x2f0>)
 8006856:	2301      	movs	r3, #1
 8006858:	4631      	mov	r1, r6
 800685a:	4628      	mov	r0, r5
 800685c:	47b8      	blx	r7
 800685e:	3001      	adds	r0, #1
 8006860:	f43f af19 	beq.w	8006696 <_printf_float+0xc2>
 8006864:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006868:	4313      	orrs	r3, r2
 800686a:	d102      	bne.n	8006872 <_printf_float+0x29e>
 800686c:	6823      	ldr	r3, [r4, #0]
 800686e:	07d9      	lsls	r1, r3, #31
 8006870:	d5d8      	bpl.n	8006824 <_printf_float+0x250>
 8006872:	ee18 3a10 	vmov	r3, s16
 8006876:	4652      	mov	r2, sl
 8006878:	4631      	mov	r1, r6
 800687a:	4628      	mov	r0, r5
 800687c:	47b8      	blx	r7
 800687e:	3001      	adds	r0, #1
 8006880:	f43f af09 	beq.w	8006696 <_printf_float+0xc2>
 8006884:	f04f 0900 	mov.w	r9, #0
 8006888:	f104 0a1a 	add.w	sl, r4, #26
 800688c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800688e:	425b      	negs	r3, r3
 8006890:	454b      	cmp	r3, r9
 8006892:	dc01      	bgt.n	8006898 <_printf_float+0x2c4>
 8006894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006896:	e792      	b.n	80067be <_printf_float+0x1ea>
 8006898:	2301      	movs	r3, #1
 800689a:	4652      	mov	r2, sl
 800689c:	4631      	mov	r1, r6
 800689e:	4628      	mov	r0, r5
 80068a0:	47b8      	blx	r7
 80068a2:	3001      	adds	r0, #1
 80068a4:	f43f aef7 	beq.w	8006696 <_printf_float+0xc2>
 80068a8:	f109 0901 	add.w	r9, r9, #1
 80068ac:	e7ee      	b.n	800688c <_printf_float+0x2b8>
 80068ae:	bf00      	nop
 80068b0:	7fefffff 	.word	0x7fefffff
 80068b4:	0800921c 	.word	0x0800921c
 80068b8:	08009220 	.word	0x08009220
 80068bc:	08009228 	.word	0x08009228
 80068c0:	08009224 	.word	0x08009224
 80068c4:	0800922c 	.word	0x0800922c
 80068c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068cc:	429a      	cmp	r2, r3
 80068ce:	bfa8      	it	ge
 80068d0:	461a      	movge	r2, r3
 80068d2:	2a00      	cmp	r2, #0
 80068d4:	4691      	mov	r9, r2
 80068d6:	dc37      	bgt.n	8006948 <_printf_float+0x374>
 80068d8:	f04f 0b00 	mov.w	fp, #0
 80068dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068e0:	f104 021a 	add.w	r2, r4, #26
 80068e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068e6:	9305      	str	r3, [sp, #20]
 80068e8:	eba3 0309 	sub.w	r3, r3, r9
 80068ec:	455b      	cmp	r3, fp
 80068ee:	dc33      	bgt.n	8006958 <_printf_float+0x384>
 80068f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068f4:	429a      	cmp	r2, r3
 80068f6:	db3b      	blt.n	8006970 <_printf_float+0x39c>
 80068f8:	6823      	ldr	r3, [r4, #0]
 80068fa:	07da      	lsls	r2, r3, #31
 80068fc:	d438      	bmi.n	8006970 <_printf_float+0x39c>
 80068fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006900:	9b05      	ldr	r3, [sp, #20]
 8006902:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	eba2 0901 	sub.w	r9, r2, r1
 800690a:	4599      	cmp	r9, r3
 800690c:	bfa8      	it	ge
 800690e:	4699      	movge	r9, r3
 8006910:	f1b9 0f00 	cmp.w	r9, #0
 8006914:	dc35      	bgt.n	8006982 <_printf_float+0x3ae>
 8006916:	f04f 0800 	mov.w	r8, #0
 800691a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800691e:	f104 0a1a 	add.w	sl, r4, #26
 8006922:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006926:	1a9b      	subs	r3, r3, r2
 8006928:	eba3 0309 	sub.w	r3, r3, r9
 800692c:	4543      	cmp	r3, r8
 800692e:	f77f af79 	ble.w	8006824 <_printf_float+0x250>
 8006932:	2301      	movs	r3, #1
 8006934:	4652      	mov	r2, sl
 8006936:	4631      	mov	r1, r6
 8006938:	4628      	mov	r0, r5
 800693a:	47b8      	blx	r7
 800693c:	3001      	adds	r0, #1
 800693e:	f43f aeaa 	beq.w	8006696 <_printf_float+0xc2>
 8006942:	f108 0801 	add.w	r8, r8, #1
 8006946:	e7ec      	b.n	8006922 <_printf_float+0x34e>
 8006948:	4613      	mov	r3, r2
 800694a:	4631      	mov	r1, r6
 800694c:	4642      	mov	r2, r8
 800694e:	4628      	mov	r0, r5
 8006950:	47b8      	blx	r7
 8006952:	3001      	adds	r0, #1
 8006954:	d1c0      	bne.n	80068d8 <_printf_float+0x304>
 8006956:	e69e      	b.n	8006696 <_printf_float+0xc2>
 8006958:	2301      	movs	r3, #1
 800695a:	4631      	mov	r1, r6
 800695c:	4628      	mov	r0, r5
 800695e:	9205      	str	r2, [sp, #20]
 8006960:	47b8      	blx	r7
 8006962:	3001      	adds	r0, #1
 8006964:	f43f ae97 	beq.w	8006696 <_printf_float+0xc2>
 8006968:	9a05      	ldr	r2, [sp, #20]
 800696a:	f10b 0b01 	add.w	fp, fp, #1
 800696e:	e7b9      	b.n	80068e4 <_printf_float+0x310>
 8006970:	ee18 3a10 	vmov	r3, s16
 8006974:	4652      	mov	r2, sl
 8006976:	4631      	mov	r1, r6
 8006978:	4628      	mov	r0, r5
 800697a:	47b8      	blx	r7
 800697c:	3001      	adds	r0, #1
 800697e:	d1be      	bne.n	80068fe <_printf_float+0x32a>
 8006980:	e689      	b.n	8006696 <_printf_float+0xc2>
 8006982:	9a05      	ldr	r2, [sp, #20]
 8006984:	464b      	mov	r3, r9
 8006986:	4442      	add	r2, r8
 8006988:	4631      	mov	r1, r6
 800698a:	4628      	mov	r0, r5
 800698c:	47b8      	blx	r7
 800698e:	3001      	adds	r0, #1
 8006990:	d1c1      	bne.n	8006916 <_printf_float+0x342>
 8006992:	e680      	b.n	8006696 <_printf_float+0xc2>
 8006994:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006996:	2a01      	cmp	r2, #1
 8006998:	dc01      	bgt.n	800699e <_printf_float+0x3ca>
 800699a:	07db      	lsls	r3, r3, #31
 800699c:	d538      	bpl.n	8006a10 <_printf_float+0x43c>
 800699e:	2301      	movs	r3, #1
 80069a0:	4642      	mov	r2, r8
 80069a2:	4631      	mov	r1, r6
 80069a4:	4628      	mov	r0, r5
 80069a6:	47b8      	blx	r7
 80069a8:	3001      	adds	r0, #1
 80069aa:	f43f ae74 	beq.w	8006696 <_printf_float+0xc2>
 80069ae:	ee18 3a10 	vmov	r3, s16
 80069b2:	4652      	mov	r2, sl
 80069b4:	4631      	mov	r1, r6
 80069b6:	4628      	mov	r0, r5
 80069b8:	47b8      	blx	r7
 80069ba:	3001      	adds	r0, #1
 80069bc:	f43f ae6b 	beq.w	8006696 <_printf_float+0xc2>
 80069c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80069c4:	2200      	movs	r2, #0
 80069c6:	2300      	movs	r3, #0
 80069c8:	f7fa f886 	bl	8000ad8 <__aeabi_dcmpeq>
 80069cc:	b9d8      	cbnz	r0, 8006a06 <_printf_float+0x432>
 80069ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069d0:	f108 0201 	add.w	r2, r8, #1
 80069d4:	3b01      	subs	r3, #1
 80069d6:	4631      	mov	r1, r6
 80069d8:	4628      	mov	r0, r5
 80069da:	47b8      	blx	r7
 80069dc:	3001      	adds	r0, #1
 80069de:	d10e      	bne.n	80069fe <_printf_float+0x42a>
 80069e0:	e659      	b.n	8006696 <_printf_float+0xc2>
 80069e2:	2301      	movs	r3, #1
 80069e4:	4652      	mov	r2, sl
 80069e6:	4631      	mov	r1, r6
 80069e8:	4628      	mov	r0, r5
 80069ea:	47b8      	blx	r7
 80069ec:	3001      	adds	r0, #1
 80069ee:	f43f ae52 	beq.w	8006696 <_printf_float+0xc2>
 80069f2:	f108 0801 	add.w	r8, r8, #1
 80069f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069f8:	3b01      	subs	r3, #1
 80069fa:	4543      	cmp	r3, r8
 80069fc:	dcf1      	bgt.n	80069e2 <_printf_float+0x40e>
 80069fe:	464b      	mov	r3, r9
 8006a00:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a04:	e6dc      	b.n	80067c0 <_printf_float+0x1ec>
 8006a06:	f04f 0800 	mov.w	r8, #0
 8006a0a:	f104 0a1a 	add.w	sl, r4, #26
 8006a0e:	e7f2      	b.n	80069f6 <_printf_float+0x422>
 8006a10:	2301      	movs	r3, #1
 8006a12:	4642      	mov	r2, r8
 8006a14:	e7df      	b.n	80069d6 <_printf_float+0x402>
 8006a16:	2301      	movs	r3, #1
 8006a18:	464a      	mov	r2, r9
 8006a1a:	4631      	mov	r1, r6
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	47b8      	blx	r7
 8006a20:	3001      	adds	r0, #1
 8006a22:	f43f ae38 	beq.w	8006696 <_printf_float+0xc2>
 8006a26:	f108 0801 	add.w	r8, r8, #1
 8006a2a:	68e3      	ldr	r3, [r4, #12]
 8006a2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a2e:	1a5b      	subs	r3, r3, r1
 8006a30:	4543      	cmp	r3, r8
 8006a32:	dcf0      	bgt.n	8006a16 <_printf_float+0x442>
 8006a34:	e6fa      	b.n	800682c <_printf_float+0x258>
 8006a36:	f04f 0800 	mov.w	r8, #0
 8006a3a:	f104 0919 	add.w	r9, r4, #25
 8006a3e:	e7f4      	b.n	8006a2a <_printf_float+0x456>

08006a40 <_printf_common>:
 8006a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a44:	4616      	mov	r6, r2
 8006a46:	4699      	mov	r9, r3
 8006a48:	688a      	ldr	r2, [r1, #8]
 8006a4a:	690b      	ldr	r3, [r1, #16]
 8006a4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a50:	4293      	cmp	r3, r2
 8006a52:	bfb8      	it	lt
 8006a54:	4613      	movlt	r3, r2
 8006a56:	6033      	str	r3, [r6, #0]
 8006a58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a5c:	4607      	mov	r7, r0
 8006a5e:	460c      	mov	r4, r1
 8006a60:	b10a      	cbz	r2, 8006a66 <_printf_common+0x26>
 8006a62:	3301      	adds	r3, #1
 8006a64:	6033      	str	r3, [r6, #0]
 8006a66:	6823      	ldr	r3, [r4, #0]
 8006a68:	0699      	lsls	r1, r3, #26
 8006a6a:	bf42      	ittt	mi
 8006a6c:	6833      	ldrmi	r3, [r6, #0]
 8006a6e:	3302      	addmi	r3, #2
 8006a70:	6033      	strmi	r3, [r6, #0]
 8006a72:	6825      	ldr	r5, [r4, #0]
 8006a74:	f015 0506 	ands.w	r5, r5, #6
 8006a78:	d106      	bne.n	8006a88 <_printf_common+0x48>
 8006a7a:	f104 0a19 	add.w	sl, r4, #25
 8006a7e:	68e3      	ldr	r3, [r4, #12]
 8006a80:	6832      	ldr	r2, [r6, #0]
 8006a82:	1a9b      	subs	r3, r3, r2
 8006a84:	42ab      	cmp	r3, r5
 8006a86:	dc26      	bgt.n	8006ad6 <_printf_common+0x96>
 8006a88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a8c:	1e13      	subs	r3, r2, #0
 8006a8e:	6822      	ldr	r2, [r4, #0]
 8006a90:	bf18      	it	ne
 8006a92:	2301      	movne	r3, #1
 8006a94:	0692      	lsls	r2, r2, #26
 8006a96:	d42b      	bmi.n	8006af0 <_printf_common+0xb0>
 8006a98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a9c:	4649      	mov	r1, r9
 8006a9e:	4638      	mov	r0, r7
 8006aa0:	47c0      	blx	r8
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	d01e      	beq.n	8006ae4 <_printf_common+0xa4>
 8006aa6:	6823      	ldr	r3, [r4, #0]
 8006aa8:	68e5      	ldr	r5, [r4, #12]
 8006aaa:	6832      	ldr	r2, [r6, #0]
 8006aac:	f003 0306 	and.w	r3, r3, #6
 8006ab0:	2b04      	cmp	r3, #4
 8006ab2:	bf08      	it	eq
 8006ab4:	1aad      	subeq	r5, r5, r2
 8006ab6:	68a3      	ldr	r3, [r4, #8]
 8006ab8:	6922      	ldr	r2, [r4, #16]
 8006aba:	bf0c      	ite	eq
 8006abc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ac0:	2500      	movne	r5, #0
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	bfc4      	itt	gt
 8006ac6:	1a9b      	subgt	r3, r3, r2
 8006ac8:	18ed      	addgt	r5, r5, r3
 8006aca:	2600      	movs	r6, #0
 8006acc:	341a      	adds	r4, #26
 8006ace:	42b5      	cmp	r5, r6
 8006ad0:	d11a      	bne.n	8006b08 <_printf_common+0xc8>
 8006ad2:	2000      	movs	r0, #0
 8006ad4:	e008      	b.n	8006ae8 <_printf_common+0xa8>
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	4652      	mov	r2, sl
 8006ada:	4649      	mov	r1, r9
 8006adc:	4638      	mov	r0, r7
 8006ade:	47c0      	blx	r8
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	d103      	bne.n	8006aec <_printf_common+0xac>
 8006ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aec:	3501      	adds	r5, #1
 8006aee:	e7c6      	b.n	8006a7e <_printf_common+0x3e>
 8006af0:	18e1      	adds	r1, r4, r3
 8006af2:	1c5a      	adds	r2, r3, #1
 8006af4:	2030      	movs	r0, #48	; 0x30
 8006af6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006afa:	4422      	add	r2, r4
 8006afc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b04:	3302      	adds	r3, #2
 8006b06:	e7c7      	b.n	8006a98 <_printf_common+0x58>
 8006b08:	2301      	movs	r3, #1
 8006b0a:	4622      	mov	r2, r4
 8006b0c:	4649      	mov	r1, r9
 8006b0e:	4638      	mov	r0, r7
 8006b10:	47c0      	blx	r8
 8006b12:	3001      	adds	r0, #1
 8006b14:	d0e6      	beq.n	8006ae4 <_printf_common+0xa4>
 8006b16:	3601      	adds	r6, #1
 8006b18:	e7d9      	b.n	8006ace <_printf_common+0x8e>
	...

08006b1c <_printf_i>:
 8006b1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b20:	460c      	mov	r4, r1
 8006b22:	4691      	mov	r9, r2
 8006b24:	7e27      	ldrb	r7, [r4, #24]
 8006b26:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006b28:	2f78      	cmp	r7, #120	; 0x78
 8006b2a:	4680      	mov	r8, r0
 8006b2c:	469a      	mov	sl, r3
 8006b2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b32:	d807      	bhi.n	8006b44 <_printf_i+0x28>
 8006b34:	2f62      	cmp	r7, #98	; 0x62
 8006b36:	d80a      	bhi.n	8006b4e <_printf_i+0x32>
 8006b38:	2f00      	cmp	r7, #0
 8006b3a:	f000 80d8 	beq.w	8006cee <_printf_i+0x1d2>
 8006b3e:	2f58      	cmp	r7, #88	; 0x58
 8006b40:	f000 80a3 	beq.w	8006c8a <_printf_i+0x16e>
 8006b44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006b48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b4c:	e03a      	b.n	8006bc4 <_printf_i+0xa8>
 8006b4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b52:	2b15      	cmp	r3, #21
 8006b54:	d8f6      	bhi.n	8006b44 <_printf_i+0x28>
 8006b56:	a001      	add	r0, pc, #4	; (adr r0, 8006b5c <_printf_i+0x40>)
 8006b58:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006b5c:	08006bb5 	.word	0x08006bb5
 8006b60:	08006bc9 	.word	0x08006bc9
 8006b64:	08006b45 	.word	0x08006b45
 8006b68:	08006b45 	.word	0x08006b45
 8006b6c:	08006b45 	.word	0x08006b45
 8006b70:	08006b45 	.word	0x08006b45
 8006b74:	08006bc9 	.word	0x08006bc9
 8006b78:	08006b45 	.word	0x08006b45
 8006b7c:	08006b45 	.word	0x08006b45
 8006b80:	08006b45 	.word	0x08006b45
 8006b84:	08006b45 	.word	0x08006b45
 8006b88:	08006cd5 	.word	0x08006cd5
 8006b8c:	08006bf9 	.word	0x08006bf9
 8006b90:	08006cb7 	.word	0x08006cb7
 8006b94:	08006b45 	.word	0x08006b45
 8006b98:	08006b45 	.word	0x08006b45
 8006b9c:	08006cf7 	.word	0x08006cf7
 8006ba0:	08006b45 	.word	0x08006b45
 8006ba4:	08006bf9 	.word	0x08006bf9
 8006ba8:	08006b45 	.word	0x08006b45
 8006bac:	08006b45 	.word	0x08006b45
 8006bb0:	08006cbf 	.word	0x08006cbf
 8006bb4:	680b      	ldr	r3, [r1, #0]
 8006bb6:	1d1a      	adds	r2, r3, #4
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	600a      	str	r2, [r1, #0]
 8006bbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006bc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e0a3      	b.n	8006d10 <_printf_i+0x1f4>
 8006bc8:	6825      	ldr	r5, [r4, #0]
 8006bca:	6808      	ldr	r0, [r1, #0]
 8006bcc:	062e      	lsls	r6, r5, #24
 8006bce:	f100 0304 	add.w	r3, r0, #4
 8006bd2:	d50a      	bpl.n	8006bea <_printf_i+0xce>
 8006bd4:	6805      	ldr	r5, [r0, #0]
 8006bd6:	600b      	str	r3, [r1, #0]
 8006bd8:	2d00      	cmp	r5, #0
 8006bda:	da03      	bge.n	8006be4 <_printf_i+0xc8>
 8006bdc:	232d      	movs	r3, #45	; 0x2d
 8006bde:	426d      	negs	r5, r5
 8006be0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006be4:	485e      	ldr	r0, [pc, #376]	; (8006d60 <_printf_i+0x244>)
 8006be6:	230a      	movs	r3, #10
 8006be8:	e019      	b.n	8006c1e <_printf_i+0x102>
 8006bea:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006bee:	6805      	ldr	r5, [r0, #0]
 8006bf0:	600b      	str	r3, [r1, #0]
 8006bf2:	bf18      	it	ne
 8006bf4:	b22d      	sxthne	r5, r5
 8006bf6:	e7ef      	b.n	8006bd8 <_printf_i+0xbc>
 8006bf8:	680b      	ldr	r3, [r1, #0]
 8006bfa:	6825      	ldr	r5, [r4, #0]
 8006bfc:	1d18      	adds	r0, r3, #4
 8006bfe:	6008      	str	r0, [r1, #0]
 8006c00:	0628      	lsls	r0, r5, #24
 8006c02:	d501      	bpl.n	8006c08 <_printf_i+0xec>
 8006c04:	681d      	ldr	r5, [r3, #0]
 8006c06:	e002      	b.n	8006c0e <_printf_i+0xf2>
 8006c08:	0669      	lsls	r1, r5, #25
 8006c0a:	d5fb      	bpl.n	8006c04 <_printf_i+0xe8>
 8006c0c:	881d      	ldrh	r5, [r3, #0]
 8006c0e:	4854      	ldr	r0, [pc, #336]	; (8006d60 <_printf_i+0x244>)
 8006c10:	2f6f      	cmp	r7, #111	; 0x6f
 8006c12:	bf0c      	ite	eq
 8006c14:	2308      	moveq	r3, #8
 8006c16:	230a      	movne	r3, #10
 8006c18:	2100      	movs	r1, #0
 8006c1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c1e:	6866      	ldr	r6, [r4, #4]
 8006c20:	60a6      	str	r6, [r4, #8]
 8006c22:	2e00      	cmp	r6, #0
 8006c24:	bfa2      	ittt	ge
 8006c26:	6821      	ldrge	r1, [r4, #0]
 8006c28:	f021 0104 	bicge.w	r1, r1, #4
 8006c2c:	6021      	strge	r1, [r4, #0]
 8006c2e:	b90d      	cbnz	r5, 8006c34 <_printf_i+0x118>
 8006c30:	2e00      	cmp	r6, #0
 8006c32:	d04d      	beq.n	8006cd0 <_printf_i+0x1b4>
 8006c34:	4616      	mov	r6, r2
 8006c36:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c3a:	fb03 5711 	mls	r7, r3, r1, r5
 8006c3e:	5dc7      	ldrb	r7, [r0, r7]
 8006c40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c44:	462f      	mov	r7, r5
 8006c46:	42bb      	cmp	r3, r7
 8006c48:	460d      	mov	r5, r1
 8006c4a:	d9f4      	bls.n	8006c36 <_printf_i+0x11a>
 8006c4c:	2b08      	cmp	r3, #8
 8006c4e:	d10b      	bne.n	8006c68 <_printf_i+0x14c>
 8006c50:	6823      	ldr	r3, [r4, #0]
 8006c52:	07df      	lsls	r7, r3, #31
 8006c54:	d508      	bpl.n	8006c68 <_printf_i+0x14c>
 8006c56:	6923      	ldr	r3, [r4, #16]
 8006c58:	6861      	ldr	r1, [r4, #4]
 8006c5a:	4299      	cmp	r1, r3
 8006c5c:	bfde      	ittt	le
 8006c5e:	2330      	movle	r3, #48	; 0x30
 8006c60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c64:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c68:	1b92      	subs	r2, r2, r6
 8006c6a:	6122      	str	r2, [r4, #16]
 8006c6c:	f8cd a000 	str.w	sl, [sp]
 8006c70:	464b      	mov	r3, r9
 8006c72:	aa03      	add	r2, sp, #12
 8006c74:	4621      	mov	r1, r4
 8006c76:	4640      	mov	r0, r8
 8006c78:	f7ff fee2 	bl	8006a40 <_printf_common>
 8006c7c:	3001      	adds	r0, #1
 8006c7e:	d14c      	bne.n	8006d1a <_printf_i+0x1fe>
 8006c80:	f04f 30ff 	mov.w	r0, #4294967295
 8006c84:	b004      	add	sp, #16
 8006c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c8a:	4835      	ldr	r0, [pc, #212]	; (8006d60 <_printf_i+0x244>)
 8006c8c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006c90:	6823      	ldr	r3, [r4, #0]
 8006c92:	680e      	ldr	r6, [r1, #0]
 8006c94:	061f      	lsls	r7, r3, #24
 8006c96:	f856 5b04 	ldr.w	r5, [r6], #4
 8006c9a:	600e      	str	r6, [r1, #0]
 8006c9c:	d514      	bpl.n	8006cc8 <_printf_i+0x1ac>
 8006c9e:	07d9      	lsls	r1, r3, #31
 8006ca0:	bf44      	itt	mi
 8006ca2:	f043 0320 	orrmi.w	r3, r3, #32
 8006ca6:	6023      	strmi	r3, [r4, #0]
 8006ca8:	b91d      	cbnz	r5, 8006cb2 <_printf_i+0x196>
 8006caa:	6823      	ldr	r3, [r4, #0]
 8006cac:	f023 0320 	bic.w	r3, r3, #32
 8006cb0:	6023      	str	r3, [r4, #0]
 8006cb2:	2310      	movs	r3, #16
 8006cb4:	e7b0      	b.n	8006c18 <_printf_i+0xfc>
 8006cb6:	6823      	ldr	r3, [r4, #0]
 8006cb8:	f043 0320 	orr.w	r3, r3, #32
 8006cbc:	6023      	str	r3, [r4, #0]
 8006cbe:	2378      	movs	r3, #120	; 0x78
 8006cc0:	4828      	ldr	r0, [pc, #160]	; (8006d64 <_printf_i+0x248>)
 8006cc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006cc6:	e7e3      	b.n	8006c90 <_printf_i+0x174>
 8006cc8:	065e      	lsls	r6, r3, #25
 8006cca:	bf48      	it	mi
 8006ccc:	b2ad      	uxthmi	r5, r5
 8006cce:	e7e6      	b.n	8006c9e <_printf_i+0x182>
 8006cd0:	4616      	mov	r6, r2
 8006cd2:	e7bb      	b.n	8006c4c <_printf_i+0x130>
 8006cd4:	680b      	ldr	r3, [r1, #0]
 8006cd6:	6826      	ldr	r6, [r4, #0]
 8006cd8:	6960      	ldr	r0, [r4, #20]
 8006cda:	1d1d      	adds	r5, r3, #4
 8006cdc:	600d      	str	r5, [r1, #0]
 8006cde:	0635      	lsls	r5, r6, #24
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	d501      	bpl.n	8006ce8 <_printf_i+0x1cc>
 8006ce4:	6018      	str	r0, [r3, #0]
 8006ce6:	e002      	b.n	8006cee <_printf_i+0x1d2>
 8006ce8:	0671      	lsls	r1, r6, #25
 8006cea:	d5fb      	bpl.n	8006ce4 <_printf_i+0x1c8>
 8006cec:	8018      	strh	r0, [r3, #0]
 8006cee:	2300      	movs	r3, #0
 8006cf0:	6123      	str	r3, [r4, #16]
 8006cf2:	4616      	mov	r6, r2
 8006cf4:	e7ba      	b.n	8006c6c <_printf_i+0x150>
 8006cf6:	680b      	ldr	r3, [r1, #0]
 8006cf8:	1d1a      	adds	r2, r3, #4
 8006cfa:	600a      	str	r2, [r1, #0]
 8006cfc:	681e      	ldr	r6, [r3, #0]
 8006cfe:	6862      	ldr	r2, [r4, #4]
 8006d00:	2100      	movs	r1, #0
 8006d02:	4630      	mov	r0, r6
 8006d04:	f7f9 fa74 	bl	80001f0 <memchr>
 8006d08:	b108      	cbz	r0, 8006d0e <_printf_i+0x1f2>
 8006d0a:	1b80      	subs	r0, r0, r6
 8006d0c:	6060      	str	r0, [r4, #4]
 8006d0e:	6863      	ldr	r3, [r4, #4]
 8006d10:	6123      	str	r3, [r4, #16]
 8006d12:	2300      	movs	r3, #0
 8006d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d18:	e7a8      	b.n	8006c6c <_printf_i+0x150>
 8006d1a:	6923      	ldr	r3, [r4, #16]
 8006d1c:	4632      	mov	r2, r6
 8006d1e:	4649      	mov	r1, r9
 8006d20:	4640      	mov	r0, r8
 8006d22:	47d0      	blx	sl
 8006d24:	3001      	adds	r0, #1
 8006d26:	d0ab      	beq.n	8006c80 <_printf_i+0x164>
 8006d28:	6823      	ldr	r3, [r4, #0]
 8006d2a:	079b      	lsls	r3, r3, #30
 8006d2c:	d413      	bmi.n	8006d56 <_printf_i+0x23a>
 8006d2e:	68e0      	ldr	r0, [r4, #12]
 8006d30:	9b03      	ldr	r3, [sp, #12]
 8006d32:	4298      	cmp	r0, r3
 8006d34:	bfb8      	it	lt
 8006d36:	4618      	movlt	r0, r3
 8006d38:	e7a4      	b.n	8006c84 <_printf_i+0x168>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	4632      	mov	r2, r6
 8006d3e:	4649      	mov	r1, r9
 8006d40:	4640      	mov	r0, r8
 8006d42:	47d0      	blx	sl
 8006d44:	3001      	adds	r0, #1
 8006d46:	d09b      	beq.n	8006c80 <_printf_i+0x164>
 8006d48:	3501      	adds	r5, #1
 8006d4a:	68e3      	ldr	r3, [r4, #12]
 8006d4c:	9903      	ldr	r1, [sp, #12]
 8006d4e:	1a5b      	subs	r3, r3, r1
 8006d50:	42ab      	cmp	r3, r5
 8006d52:	dcf2      	bgt.n	8006d3a <_printf_i+0x21e>
 8006d54:	e7eb      	b.n	8006d2e <_printf_i+0x212>
 8006d56:	2500      	movs	r5, #0
 8006d58:	f104 0619 	add.w	r6, r4, #25
 8006d5c:	e7f5      	b.n	8006d4a <_printf_i+0x22e>
 8006d5e:	bf00      	nop
 8006d60:	0800922e 	.word	0x0800922e
 8006d64:	0800923f 	.word	0x0800923f

08006d68 <siprintf>:
 8006d68:	b40e      	push	{r1, r2, r3}
 8006d6a:	b500      	push	{lr}
 8006d6c:	b09c      	sub	sp, #112	; 0x70
 8006d6e:	ab1d      	add	r3, sp, #116	; 0x74
 8006d70:	9002      	str	r0, [sp, #8]
 8006d72:	9006      	str	r0, [sp, #24]
 8006d74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d78:	4809      	ldr	r0, [pc, #36]	; (8006da0 <siprintf+0x38>)
 8006d7a:	9107      	str	r1, [sp, #28]
 8006d7c:	9104      	str	r1, [sp, #16]
 8006d7e:	4909      	ldr	r1, [pc, #36]	; (8006da4 <siprintf+0x3c>)
 8006d80:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d84:	9105      	str	r1, [sp, #20]
 8006d86:	6800      	ldr	r0, [r0, #0]
 8006d88:	9301      	str	r3, [sp, #4]
 8006d8a:	a902      	add	r1, sp, #8
 8006d8c:	f001 fb32 	bl	80083f4 <_svfiprintf_r>
 8006d90:	9b02      	ldr	r3, [sp, #8]
 8006d92:	2200      	movs	r2, #0
 8006d94:	701a      	strb	r2, [r3, #0]
 8006d96:	b01c      	add	sp, #112	; 0x70
 8006d98:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d9c:	b003      	add	sp, #12
 8006d9e:	4770      	bx	lr
 8006da0:	2000000c 	.word	0x2000000c
 8006da4:	ffff0208 	.word	0xffff0208

08006da8 <quorem>:
 8006da8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dac:	6903      	ldr	r3, [r0, #16]
 8006dae:	690c      	ldr	r4, [r1, #16]
 8006db0:	42a3      	cmp	r3, r4
 8006db2:	4607      	mov	r7, r0
 8006db4:	f2c0 8081 	blt.w	8006eba <quorem+0x112>
 8006db8:	3c01      	subs	r4, #1
 8006dba:	f101 0814 	add.w	r8, r1, #20
 8006dbe:	f100 0514 	add.w	r5, r0, #20
 8006dc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006dc6:	9301      	str	r3, [sp, #4]
 8006dc8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006dcc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006dd8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ddc:	fbb2 f6f3 	udiv	r6, r2, r3
 8006de0:	d331      	bcc.n	8006e46 <quorem+0x9e>
 8006de2:	f04f 0e00 	mov.w	lr, #0
 8006de6:	4640      	mov	r0, r8
 8006de8:	46ac      	mov	ip, r5
 8006dea:	46f2      	mov	sl, lr
 8006dec:	f850 2b04 	ldr.w	r2, [r0], #4
 8006df0:	b293      	uxth	r3, r2
 8006df2:	fb06 e303 	mla	r3, r6, r3, lr
 8006df6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	ebaa 0303 	sub.w	r3, sl, r3
 8006e00:	0c12      	lsrs	r2, r2, #16
 8006e02:	f8dc a000 	ldr.w	sl, [ip]
 8006e06:	fb06 e202 	mla	r2, r6, r2, lr
 8006e0a:	fa13 f38a 	uxtah	r3, r3, sl
 8006e0e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006e12:	fa1f fa82 	uxth.w	sl, r2
 8006e16:	f8dc 2000 	ldr.w	r2, [ip]
 8006e1a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006e1e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e28:	4581      	cmp	r9, r0
 8006e2a:	f84c 3b04 	str.w	r3, [ip], #4
 8006e2e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006e32:	d2db      	bcs.n	8006dec <quorem+0x44>
 8006e34:	f855 300b 	ldr.w	r3, [r5, fp]
 8006e38:	b92b      	cbnz	r3, 8006e46 <quorem+0x9e>
 8006e3a:	9b01      	ldr	r3, [sp, #4]
 8006e3c:	3b04      	subs	r3, #4
 8006e3e:	429d      	cmp	r5, r3
 8006e40:	461a      	mov	r2, r3
 8006e42:	d32e      	bcc.n	8006ea2 <quorem+0xfa>
 8006e44:	613c      	str	r4, [r7, #16]
 8006e46:	4638      	mov	r0, r7
 8006e48:	f001 f8be 	bl	8007fc8 <__mcmp>
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	db24      	blt.n	8006e9a <quorem+0xf2>
 8006e50:	3601      	adds	r6, #1
 8006e52:	4628      	mov	r0, r5
 8006e54:	f04f 0c00 	mov.w	ip, #0
 8006e58:	f858 2b04 	ldr.w	r2, [r8], #4
 8006e5c:	f8d0 e000 	ldr.w	lr, [r0]
 8006e60:	b293      	uxth	r3, r2
 8006e62:	ebac 0303 	sub.w	r3, ip, r3
 8006e66:	0c12      	lsrs	r2, r2, #16
 8006e68:	fa13 f38e 	uxtah	r3, r3, lr
 8006e6c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006e70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e7a:	45c1      	cmp	r9, r8
 8006e7c:	f840 3b04 	str.w	r3, [r0], #4
 8006e80:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006e84:	d2e8      	bcs.n	8006e58 <quorem+0xb0>
 8006e86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e8e:	b922      	cbnz	r2, 8006e9a <quorem+0xf2>
 8006e90:	3b04      	subs	r3, #4
 8006e92:	429d      	cmp	r5, r3
 8006e94:	461a      	mov	r2, r3
 8006e96:	d30a      	bcc.n	8006eae <quorem+0x106>
 8006e98:	613c      	str	r4, [r7, #16]
 8006e9a:	4630      	mov	r0, r6
 8006e9c:	b003      	add	sp, #12
 8006e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea2:	6812      	ldr	r2, [r2, #0]
 8006ea4:	3b04      	subs	r3, #4
 8006ea6:	2a00      	cmp	r2, #0
 8006ea8:	d1cc      	bne.n	8006e44 <quorem+0x9c>
 8006eaa:	3c01      	subs	r4, #1
 8006eac:	e7c7      	b.n	8006e3e <quorem+0x96>
 8006eae:	6812      	ldr	r2, [r2, #0]
 8006eb0:	3b04      	subs	r3, #4
 8006eb2:	2a00      	cmp	r2, #0
 8006eb4:	d1f0      	bne.n	8006e98 <quorem+0xf0>
 8006eb6:	3c01      	subs	r4, #1
 8006eb8:	e7eb      	b.n	8006e92 <quorem+0xea>
 8006eba:	2000      	movs	r0, #0
 8006ebc:	e7ee      	b.n	8006e9c <quorem+0xf4>
	...

08006ec0 <_dtoa_r>:
 8006ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec4:	ed2d 8b02 	vpush	{d8}
 8006ec8:	ec57 6b10 	vmov	r6, r7, d0
 8006ecc:	b095      	sub	sp, #84	; 0x54
 8006ece:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006ed0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006ed4:	9105      	str	r1, [sp, #20]
 8006ed6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006eda:	4604      	mov	r4, r0
 8006edc:	9209      	str	r2, [sp, #36]	; 0x24
 8006ede:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ee0:	b975      	cbnz	r5, 8006f00 <_dtoa_r+0x40>
 8006ee2:	2010      	movs	r0, #16
 8006ee4:	f000 fddc 	bl	8007aa0 <malloc>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	6260      	str	r0, [r4, #36]	; 0x24
 8006eec:	b920      	cbnz	r0, 8006ef8 <_dtoa_r+0x38>
 8006eee:	4bb2      	ldr	r3, [pc, #712]	; (80071b8 <_dtoa_r+0x2f8>)
 8006ef0:	21ea      	movs	r1, #234	; 0xea
 8006ef2:	48b2      	ldr	r0, [pc, #712]	; (80071bc <_dtoa_r+0x2fc>)
 8006ef4:	f001 fb8e 	bl	8008614 <__assert_func>
 8006ef8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006efc:	6005      	str	r5, [r0, #0]
 8006efe:	60c5      	str	r5, [r0, #12]
 8006f00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f02:	6819      	ldr	r1, [r3, #0]
 8006f04:	b151      	cbz	r1, 8006f1c <_dtoa_r+0x5c>
 8006f06:	685a      	ldr	r2, [r3, #4]
 8006f08:	604a      	str	r2, [r1, #4]
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	4093      	lsls	r3, r2
 8006f0e:	608b      	str	r3, [r1, #8]
 8006f10:	4620      	mov	r0, r4
 8006f12:	f000 fe1b 	bl	8007b4c <_Bfree>
 8006f16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f18:	2200      	movs	r2, #0
 8006f1a:	601a      	str	r2, [r3, #0]
 8006f1c:	1e3b      	subs	r3, r7, #0
 8006f1e:	bfb9      	ittee	lt
 8006f20:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006f24:	9303      	strlt	r3, [sp, #12]
 8006f26:	2300      	movge	r3, #0
 8006f28:	f8c8 3000 	strge.w	r3, [r8]
 8006f2c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006f30:	4ba3      	ldr	r3, [pc, #652]	; (80071c0 <_dtoa_r+0x300>)
 8006f32:	bfbc      	itt	lt
 8006f34:	2201      	movlt	r2, #1
 8006f36:	f8c8 2000 	strlt.w	r2, [r8]
 8006f3a:	ea33 0309 	bics.w	r3, r3, r9
 8006f3e:	d11b      	bne.n	8006f78 <_dtoa_r+0xb8>
 8006f40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006f42:	f242 730f 	movw	r3, #9999	; 0x270f
 8006f46:	6013      	str	r3, [r2, #0]
 8006f48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f4c:	4333      	orrs	r3, r6
 8006f4e:	f000 857a 	beq.w	8007a46 <_dtoa_r+0xb86>
 8006f52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f54:	b963      	cbnz	r3, 8006f70 <_dtoa_r+0xb0>
 8006f56:	4b9b      	ldr	r3, [pc, #620]	; (80071c4 <_dtoa_r+0x304>)
 8006f58:	e024      	b.n	8006fa4 <_dtoa_r+0xe4>
 8006f5a:	4b9b      	ldr	r3, [pc, #620]	; (80071c8 <_dtoa_r+0x308>)
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	3308      	adds	r3, #8
 8006f60:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006f62:	6013      	str	r3, [r2, #0]
 8006f64:	9800      	ldr	r0, [sp, #0]
 8006f66:	b015      	add	sp, #84	; 0x54
 8006f68:	ecbd 8b02 	vpop	{d8}
 8006f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f70:	4b94      	ldr	r3, [pc, #592]	; (80071c4 <_dtoa_r+0x304>)
 8006f72:	9300      	str	r3, [sp, #0]
 8006f74:	3303      	adds	r3, #3
 8006f76:	e7f3      	b.n	8006f60 <_dtoa_r+0xa0>
 8006f78:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	ec51 0b17 	vmov	r0, r1, d7
 8006f82:	2300      	movs	r3, #0
 8006f84:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006f88:	f7f9 fda6 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f8c:	4680      	mov	r8, r0
 8006f8e:	b158      	cbz	r0, 8006fa8 <_dtoa_r+0xe8>
 8006f90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006f92:	2301      	movs	r3, #1
 8006f94:	6013      	str	r3, [r2, #0]
 8006f96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f000 8551 	beq.w	8007a40 <_dtoa_r+0xb80>
 8006f9e:	488b      	ldr	r0, [pc, #556]	; (80071cc <_dtoa_r+0x30c>)
 8006fa0:	6018      	str	r0, [r3, #0]
 8006fa2:	1e43      	subs	r3, r0, #1
 8006fa4:	9300      	str	r3, [sp, #0]
 8006fa6:	e7dd      	b.n	8006f64 <_dtoa_r+0xa4>
 8006fa8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006fac:	aa12      	add	r2, sp, #72	; 0x48
 8006fae:	a913      	add	r1, sp, #76	; 0x4c
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	f001 f8ad 	bl	8008110 <__d2b>
 8006fb6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006fba:	4683      	mov	fp, r0
 8006fbc:	2d00      	cmp	r5, #0
 8006fbe:	d07c      	beq.n	80070ba <_dtoa_r+0x1fa>
 8006fc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fc2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006fc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006fca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006fce:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006fd2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006fd6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006fda:	4b7d      	ldr	r3, [pc, #500]	; (80071d0 <_dtoa_r+0x310>)
 8006fdc:	2200      	movs	r2, #0
 8006fde:	4630      	mov	r0, r6
 8006fe0:	4639      	mov	r1, r7
 8006fe2:	f7f9 f959 	bl	8000298 <__aeabi_dsub>
 8006fe6:	a36e      	add	r3, pc, #440	; (adr r3, 80071a0 <_dtoa_r+0x2e0>)
 8006fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fec:	f7f9 fb0c 	bl	8000608 <__aeabi_dmul>
 8006ff0:	a36d      	add	r3, pc, #436	; (adr r3, 80071a8 <_dtoa_r+0x2e8>)
 8006ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff6:	f7f9 f951 	bl	800029c <__adddf3>
 8006ffa:	4606      	mov	r6, r0
 8006ffc:	4628      	mov	r0, r5
 8006ffe:	460f      	mov	r7, r1
 8007000:	f7f9 fa98 	bl	8000534 <__aeabi_i2d>
 8007004:	a36a      	add	r3, pc, #424	; (adr r3, 80071b0 <_dtoa_r+0x2f0>)
 8007006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700a:	f7f9 fafd 	bl	8000608 <__aeabi_dmul>
 800700e:	4602      	mov	r2, r0
 8007010:	460b      	mov	r3, r1
 8007012:	4630      	mov	r0, r6
 8007014:	4639      	mov	r1, r7
 8007016:	f7f9 f941 	bl	800029c <__adddf3>
 800701a:	4606      	mov	r6, r0
 800701c:	460f      	mov	r7, r1
 800701e:	f7f9 fda3 	bl	8000b68 <__aeabi_d2iz>
 8007022:	2200      	movs	r2, #0
 8007024:	4682      	mov	sl, r0
 8007026:	2300      	movs	r3, #0
 8007028:	4630      	mov	r0, r6
 800702a:	4639      	mov	r1, r7
 800702c:	f7f9 fd5e 	bl	8000aec <__aeabi_dcmplt>
 8007030:	b148      	cbz	r0, 8007046 <_dtoa_r+0x186>
 8007032:	4650      	mov	r0, sl
 8007034:	f7f9 fa7e 	bl	8000534 <__aeabi_i2d>
 8007038:	4632      	mov	r2, r6
 800703a:	463b      	mov	r3, r7
 800703c:	f7f9 fd4c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007040:	b908      	cbnz	r0, 8007046 <_dtoa_r+0x186>
 8007042:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007046:	f1ba 0f16 	cmp.w	sl, #22
 800704a:	d854      	bhi.n	80070f6 <_dtoa_r+0x236>
 800704c:	4b61      	ldr	r3, [pc, #388]	; (80071d4 <_dtoa_r+0x314>)
 800704e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007056:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800705a:	f7f9 fd47 	bl	8000aec <__aeabi_dcmplt>
 800705e:	2800      	cmp	r0, #0
 8007060:	d04b      	beq.n	80070fa <_dtoa_r+0x23a>
 8007062:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007066:	2300      	movs	r3, #0
 8007068:	930e      	str	r3, [sp, #56]	; 0x38
 800706a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800706c:	1b5d      	subs	r5, r3, r5
 800706e:	1e6b      	subs	r3, r5, #1
 8007070:	9304      	str	r3, [sp, #16]
 8007072:	bf43      	ittte	mi
 8007074:	2300      	movmi	r3, #0
 8007076:	f1c5 0801 	rsbmi	r8, r5, #1
 800707a:	9304      	strmi	r3, [sp, #16]
 800707c:	f04f 0800 	movpl.w	r8, #0
 8007080:	f1ba 0f00 	cmp.w	sl, #0
 8007084:	db3b      	blt.n	80070fe <_dtoa_r+0x23e>
 8007086:	9b04      	ldr	r3, [sp, #16]
 8007088:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800708c:	4453      	add	r3, sl
 800708e:	9304      	str	r3, [sp, #16]
 8007090:	2300      	movs	r3, #0
 8007092:	9306      	str	r3, [sp, #24]
 8007094:	9b05      	ldr	r3, [sp, #20]
 8007096:	2b09      	cmp	r3, #9
 8007098:	d869      	bhi.n	800716e <_dtoa_r+0x2ae>
 800709a:	2b05      	cmp	r3, #5
 800709c:	bfc4      	itt	gt
 800709e:	3b04      	subgt	r3, #4
 80070a0:	9305      	strgt	r3, [sp, #20]
 80070a2:	9b05      	ldr	r3, [sp, #20]
 80070a4:	f1a3 0302 	sub.w	r3, r3, #2
 80070a8:	bfcc      	ite	gt
 80070aa:	2500      	movgt	r5, #0
 80070ac:	2501      	movle	r5, #1
 80070ae:	2b03      	cmp	r3, #3
 80070b0:	d869      	bhi.n	8007186 <_dtoa_r+0x2c6>
 80070b2:	e8df f003 	tbb	[pc, r3]
 80070b6:	4e2c      	.short	0x4e2c
 80070b8:	5a4c      	.short	0x5a4c
 80070ba:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80070be:	441d      	add	r5, r3
 80070c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80070c4:	2b20      	cmp	r3, #32
 80070c6:	bfc1      	itttt	gt
 80070c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80070cc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80070d0:	fa09 f303 	lslgt.w	r3, r9, r3
 80070d4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80070d8:	bfda      	itte	le
 80070da:	f1c3 0320 	rsble	r3, r3, #32
 80070de:	fa06 f003 	lslle.w	r0, r6, r3
 80070e2:	4318      	orrgt	r0, r3
 80070e4:	f7f9 fa16 	bl	8000514 <__aeabi_ui2d>
 80070e8:	2301      	movs	r3, #1
 80070ea:	4606      	mov	r6, r0
 80070ec:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80070f0:	3d01      	subs	r5, #1
 80070f2:	9310      	str	r3, [sp, #64]	; 0x40
 80070f4:	e771      	b.n	8006fda <_dtoa_r+0x11a>
 80070f6:	2301      	movs	r3, #1
 80070f8:	e7b6      	b.n	8007068 <_dtoa_r+0x1a8>
 80070fa:	900e      	str	r0, [sp, #56]	; 0x38
 80070fc:	e7b5      	b.n	800706a <_dtoa_r+0x1aa>
 80070fe:	f1ca 0300 	rsb	r3, sl, #0
 8007102:	9306      	str	r3, [sp, #24]
 8007104:	2300      	movs	r3, #0
 8007106:	eba8 080a 	sub.w	r8, r8, sl
 800710a:	930d      	str	r3, [sp, #52]	; 0x34
 800710c:	e7c2      	b.n	8007094 <_dtoa_r+0x1d4>
 800710e:	2300      	movs	r3, #0
 8007110:	9308      	str	r3, [sp, #32]
 8007112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007114:	2b00      	cmp	r3, #0
 8007116:	dc39      	bgt.n	800718c <_dtoa_r+0x2cc>
 8007118:	f04f 0901 	mov.w	r9, #1
 800711c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007120:	464b      	mov	r3, r9
 8007122:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007126:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007128:	2200      	movs	r2, #0
 800712a:	6042      	str	r2, [r0, #4]
 800712c:	2204      	movs	r2, #4
 800712e:	f102 0614 	add.w	r6, r2, #20
 8007132:	429e      	cmp	r6, r3
 8007134:	6841      	ldr	r1, [r0, #4]
 8007136:	d92f      	bls.n	8007198 <_dtoa_r+0x2d8>
 8007138:	4620      	mov	r0, r4
 800713a:	f000 fcc7 	bl	8007acc <_Balloc>
 800713e:	9000      	str	r0, [sp, #0]
 8007140:	2800      	cmp	r0, #0
 8007142:	d14b      	bne.n	80071dc <_dtoa_r+0x31c>
 8007144:	4b24      	ldr	r3, [pc, #144]	; (80071d8 <_dtoa_r+0x318>)
 8007146:	4602      	mov	r2, r0
 8007148:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800714c:	e6d1      	b.n	8006ef2 <_dtoa_r+0x32>
 800714e:	2301      	movs	r3, #1
 8007150:	e7de      	b.n	8007110 <_dtoa_r+0x250>
 8007152:	2300      	movs	r3, #0
 8007154:	9308      	str	r3, [sp, #32]
 8007156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007158:	eb0a 0903 	add.w	r9, sl, r3
 800715c:	f109 0301 	add.w	r3, r9, #1
 8007160:	2b01      	cmp	r3, #1
 8007162:	9301      	str	r3, [sp, #4]
 8007164:	bfb8      	it	lt
 8007166:	2301      	movlt	r3, #1
 8007168:	e7dd      	b.n	8007126 <_dtoa_r+0x266>
 800716a:	2301      	movs	r3, #1
 800716c:	e7f2      	b.n	8007154 <_dtoa_r+0x294>
 800716e:	2501      	movs	r5, #1
 8007170:	2300      	movs	r3, #0
 8007172:	9305      	str	r3, [sp, #20]
 8007174:	9508      	str	r5, [sp, #32]
 8007176:	f04f 39ff 	mov.w	r9, #4294967295
 800717a:	2200      	movs	r2, #0
 800717c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007180:	2312      	movs	r3, #18
 8007182:	9209      	str	r2, [sp, #36]	; 0x24
 8007184:	e7cf      	b.n	8007126 <_dtoa_r+0x266>
 8007186:	2301      	movs	r3, #1
 8007188:	9308      	str	r3, [sp, #32]
 800718a:	e7f4      	b.n	8007176 <_dtoa_r+0x2b6>
 800718c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007190:	f8cd 9004 	str.w	r9, [sp, #4]
 8007194:	464b      	mov	r3, r9
 8007196:	e7c6      	b.n	8007126 <_dtoa_r+0x266>
 8007198:	3101      	adds	r1, #1
 800719a:	6041      	str	r1, [r0, #4]
 800719c:	0052      	lsls	r2, r2, #1
 800719e:	e7c6      	b.n	800712e <_dtoa_r+0x26e>
 80071a0:	636f4361 	.word	0x636f4361
 80071a4:	3fd287a7 	.word	0x3fd287a7
 80071a8:	8b60c8b3 	.word	0x8b60c8b3
 80071ac:	3fc68a28 	.word	0x3fc68a28
 80071b0:	509f79fb 	.word	0x509f79fb
 80071b4:	3fd34413 	.word	0x3fd34413
 80071b8:	0800925d 	.word	0x0800925d
 80071bc:	08009274 	.word	0x08009274
 80071c0:	7ff00000 	.word	0x7ff00000
 80071c4:	08009259 	.word	0x08009259
 80071c8:	08009250 	.word	0x08009250
 80071cc:	0800922d 	.word	0x0800922d
 80071d0:	3ff80000 	.word	0x3ff80000
 80071d4:	08009370 	.word	0x08009370
 80071d8:	080092d3 	.word	0x080092d3
 80071dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071de:	9a00      	ldr	r2, [sp, #0]
 80071e0:	601a      	str	r2, [r3, #0]
 80071e2:	9b01      	ldr	r3, [sp, #4]
 80071e4:	2b0e      	cmp	r3, #14
 80071e6:	f200 80ad 	bhi.w	8007344 <_dtoa_r+0x484>
 80071ea:	2d00      	cmp	r5, #0
 80071ec:	f000 80aa 	beq.w	8007344 <_dtoa_r+0x484>
 80071f0:	f1ba 0f00 	cmp.w	sl, #0
 80071f4:	dd36      	ble.n	8007264 <_dtoa_r+0x3a4>
 80071f6:	4ac3      	ldr	r2, [pc, #780]	; (8007504 <_dtoa_r+0x644>)
 80071f8:	f00a 030f 	and.w	r3, sl, #15
 80071fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007200:	ed93 7b00 	vldr	d7, [r3]
 8007204:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007208:	ea4f 172a 	mov.w	r7, sl, asr #4
 800720c:	eeb0 8a47 	vmov.f32	s16, s14
 8007210:	eef0 8a67 	vmov.f32	s17, s15
 8007214:	d016      	beq.n	8007244 <_dtoa_r+0x384>
 8007216:	4bbc      	ldr	r3, [pc, #752]	; (8007508 <_dtoa_r+0x648>)
 8007218:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800721c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007220:	f7f9 fb1c 	bl	800085c <__aeabi_ddiv>
 8007224:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007228:	f007 070f 	and.w	r7, r7, #15
 800722c:	2503      	movs	r5, #3
 800722e:	4eb6      	ldr	r6, [pc, #728]	; (8007508 <_dtoa_r+0x648>)
 8007230:	b957      	cbnz	r7, 8007248 <_dtoa_r+0x388>
 8007232:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007236:	ec53 2b18 	vmov	r2, r3, d8
 800723a:	f7f9 fb0f 	bl	800085c <__aeabi_ddiv>
 800723e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007242:	e029      	b.n	8007298 <_dtoa_r+0x3d8>
 8007244:	2502      	movs	r5, #2
 8007246:	e7f2      	b.n	800722e <_dtoa_r+0x36e>
 8007248:	07f9      	lsls	r1, r7, #31
 800724a:	d508      	bpl.n	800725e <_dtoa_r+0x39e>
 800724c:	ec51 0b18 	vmov	r0, r1, d8
 8007250:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007254:	f7f9 f9d8 	bl	8000608 <__aeabi_dmul>
 8007258:	ec41 0b18 	vmov	d8, r0, r1
 800725c:	3501      	adds	r5, #1
 800725e:	107f      	asrs	r7, r7, #1
 8007260:	3608      	adds	r6, #8
 8007262:	e7e5      	b.n	8007230 <_dtoa_r+0x370>
 8007264:	f000 80a6 	beq.w	80073b4 <_dtoa_r+0x4f4>
 8007268:	f1ca 0600 	rsb	r6, sl, #0
 800726c:	4ba5      	ldr	r3, [pc, #660]	; (8007504 <_dtoa_r+0x644>)
 800726e:	4fa6      	ldr	r7, [pc, #664]	; (8007508 <_dtoa_r+0x648>)
 8007270:	f006 020f 	and.w	r2, r6, #15
 8007274:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007280:	f7f9 f9c2 	bl	8000608 <__aeabi_dmul>
 8007284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007288:	1136      	asrs	r6, r6, #4
 800728a:	2300      	movs	r3, #0
 800728c:	2502      	movs	r5, #2
 800728e:	2e00      	cmp	r6, #0
 8007290:	f040 8085 	bne.w	800739e <_dtoa_r+0x4de>
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1d2      	bne.n	800723e <_dtoa_r+0x37e>
 8007298:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800729a:	2b00      	cmp	r3, #0
 800729c:	f000 808c 	beq.w	80073b8 <_dtoa_r+0x4f8>
 80072a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80072a4:	4b99      	ldr	r3, [pc, #612]	; (800750c <_dtoa_r+0x64c>)
 80072a6:	2200      	movs	r2, #0
 80072a8:	4630      	mov	r0, r6
 80072aa:	4639      	mov	r1, r7
 80072ac:	f7f9 fc1e 	bl	8000aec <__aeabi_dcmplt>
 80072b0:	2800      	cmp	r0, #0
 80072b2:	f000 8081 	beq.w	80073b8 <_dtoa_r+0x4f8>
 80072b6:	9b01      	ldr	r3, [sp, #4]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d07d      	beq.n	80073b8 <_dtoa_r+0x4f8>
 80072bc:	f1b9 0f00 	cmp.w	r9, #0
 80072c0:	dd3c      	ble.n	800733c <_dtoa_r+0x47c>
 80072c2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80072c6:	9307      	str	r3, [sp, #28]
 80072c8:	2200      	movs	r2, #0
 80072ca:	4b91      	ldr	r3, [pc, #580]	; (8007510 <_dtoa_r+0x650>)
 80072cc:	4630      	mov	r0, r6
 80072ce:	4639      	mov	r1, r7
 80072d0:	f7f9 f99a 	bl	8000608 <__aeabi_dmul>
 80072d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072d8:	3501      	adds	r5, #1
 80072da:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80072de:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80072e2:	4628      	mov	r0, r5
 80072e4:	f7f9 f926 	bl	8000534 <__aeabi_i2d>
 80072e8:	4632      	mov	r2, r6
 80072ea:	463b      	mov	r3, r7
 80072ec:	f7f9 f98c 	bl	8000608 <__aeabi_dmul>
 80072f0:	4b88      	ldr	r3, [pc, #544]	; (8007514 <_dtoa_r+0x654>)
 80072f2:	2200      	movs	r2, #0
 80072f4:	f7f8 ffd2 	bl	800029c <__adddf3>
 80072f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80072fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007300:	9303      	str	r3, [sp, #12]
 8007302:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007304:	2b00      	cmp	r3, #0
 8007306:	d15c      	bne.n	80073c2 <_dtoa_r+0x502>
 8007308:	4b83      	ldr	r3, [pc, #524]	; (8007518 <_dtoa_r+0x658>)
 800730a:	2200      	movs	r2, #0
 800730c:	4630      	mov	r0, r6
 800730e:	4639      	mov	r1, r7
 8007310:	f7f8 ffc2 	bl	8000298 <__aeabi_dsub>
 8007314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007318:	4606      	mov	r6, r0
 800731a:	460f      	mov	r7, r1
 800731c:	f7f9 fc04 	bl	8000b28 <__aeabi_dcmpgt>
 8007320:	2800      	cmp	r0, #0
 8007322:	f040 8296 	bne.w	8007852 <_dtoa_r+0x992>
 8007326:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800732a:	4630      	mov	r0, r6
 800732c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007330:	4639      	mov	r1, r7
 8007332:	f7f9 fbdb 	bl	8000aec <__aeabi_dcmplt>
 8007336:	2800      	cmp	r0, #0
 8007338:	f040 8288 	bne.w	800784c <_dtoa_r+0x98c>
 800733c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007340:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007344:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007346:	2b00      	cmp	r3, #0
 8007348:	f2c0 8158 	blt.w	80075fc <_dtoa_r+0x73c>
 800734c:	f1ba 0f0e 	cmp.w	sl, #14
 8007350:	f300 8154 	bgt.w	80075fc <_dtoa_r+0x73c>
 8007354:	4b6b      	ldr	r3, [pc, #428]	; (8007504 <_dtoa_r+0x644>)
 8007356:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800735a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800735e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007360:	2b00      	cmp	r3, #0
 8007362:	f280 80e3 	bge.w	800752c <_dtoa_r+0x66c>
 8007366:	9b01      	ldr	r3, [sp, #4]
 8007368:	2b00      	cmp	r3, #0
 800736a:	f300 80df 	bgt.w	800752c <_dtoa_r+0x66c>
 800736e:	f040 826d 	bne.w	800784c <_dtoa_r+0x98c>
 8007372:	4b69      	ldr	r3, [pc, #420]	; (8007518 <_dtoa_r+0x658>)
 8007374:	2200      	movs	r2, #0
 8007376:	4640      	mov	r0, r8
 8007378:	4649      	mov	r1, r9
 800737a:	f7f9 f945 	bl	8000608 <__aeabi_dmul>
 800737e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007382:	f7f9 fbc7 	bl	8000b14 <__aeabi_dcmpge>
 8007386:	9e01      	ldr	r6, [sp, #4]
 8007388:	4637      	mov	r7, r6
 800738a:	2800      	cmp	r0, #0
 800738c:	f040 8243 	bne.w	8007816 <_dtoa_r+0x956>
 8007390:	9d00      	ldr	r5, [sp, #0]
 8007392:	2331      	movs	r3, #49	; 0x31
 8007394:	f805 3b01 	strb.w	r3, [r5], #1
 8007398:	f10a 0a01 	add.w	sl, sl, #1
 800739c:	e23f      	b.n	800781e <_dtoa_r+0x95e>
 800739e:	07f2      	lsls	r2, r6, #31
 80073a0:	d505      	bpl.n	80073ae <_dtoa_r+0x4ee>
 80073a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073a6:	f7f9 f92f 	bl	8000608 <__aeabi_dmul>
 80073aa:	3501      	adds	r5, #1
 80073ac:	2301      	movs	r3, #1
 80073ae:	1076      	asrs	r6, r6, #1
 80073b0:	3708      	adds	r7, #8
 80073b2:	e76c      	b.n	800728e <_dtoa_r+0x3ce>
 80073b4:	2502      	movs	r5, #2
 80073b6:	e76f      	b.n	8007298 <_dtoa_r+0x3d8>
 80073b8:	9b01      	ldr	r3, [sp, #4]
 80073ba:	f8cd a01c 	str.w	sl, [sp, #28]
 80073be:	930c      	str	r3, [sp, #48]	; 0x30
 80073c0:	e78d      	b.n	80072de <_dtoa_r+0x41e>
 80073c2:	9900      	ldr	r1, [sp, #0]
 80073c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80073c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073c8:	4b4e      	ldr	r3, [pc, #312]	; (8007504 <_dtoa_r+0x644>)
 80073ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 80073ce:	4401      	add	r1, r0
 80073d0:	9102      	str	r1, [sp, #8]
 80073d2:	9908      	ldr	r1, [sp, #32]
 80073d4:	eeb0 8a47 	vmov.f32	s16, s14
 80073d8:	eef0 8a67 	vmov.f32	s17, s15
 80073dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80073e4:	2900      	cmp	r1, #0
 80073e6:	d045      	beq.n	8007474 <_dtoa_r+0x5b4>
 80073e8:	494c      	ldr	r1, [pc, #304]	; (800751c <_dtoa_r+0x65c>)
 80073ea:	2000      	movs	r0, #0
 80073ec:	f7f9 fa36 	bl	800085c <__aeabi_ddiv>
 80073f0:	ec53 2b18 	vmov	r2, r3, d8
 80073f4:	f7f8 ff50 	bl	8000298 <__aeabi_dsub>
 80073f8:	9d00      	ldr	r5, [sp, #0]
 80073fa:	ec41 0b18 	vmov	d8, r0, r1
 80073fe:	4639      	mov	r1, r7
 8007400:	4630      	mov	r0, r6
 8007402:	f7f9 fbb1 	bl	8000b68 <__aeabi_d2iz>
 8007406:	900c      	str	r0, [sp, #48]	; 0x30
 8007408:	f7f9 f894 	bl	8000534 <__aeabi_i2d>
 800740c:	4602      	mov	r2, r0
 800740e:	460b      	mov	r3, r1
 8007410:	4630      	mov	r0, r6
 8007412:	4639      	mov	r1, r7
 8007414:	f7f8 ff40 	bl	8000298 <__aeabi_dsub>
 8007418:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800741a:	3330      	adds	r3, #48	; 0x30
 800741c:	f805 3b01 	strb.w	r3, [r5], #1
 8007420:	ec53 2b18 	vmov	r2, r3, d8
 8007424:	4606      	mov	r6, r0
 8007426:	460f      	mov	r7, r1
 8007428:	f7f9 fb60 	bl	8000aec <__aeabi_dcmplt>
 800742c:	2800      	cmp	r0, #0
 800742e:	d165      	bne.n	80074fc <_dtoa_r+0x63c>
 8007430:	4632      	mov	r2, r6
 8007432:	463b      	mov	r3, r7
 8007434:	4935      	ldr	r1, [pc, #212]	; (800750c <_dtoa_r+0x64c>)
 8007436:	2000      	movs	r0, #0
 8007438:	f7f8 ff2e 	bl	8000298 <__aeabi_dsub>
 800743c:	ec53 2b18 	vmov	r2, r3, d8
 8007440:	f7f9 fb54 	bl	8000aec <__aeabi_dcmplt>
 8007444:	2800      	cmp	r0, #0
 8007446:	f040 80b9 	bne.w	80075bc <_dtoa_r+0x6fc>
 800744a:	9b02      	ldr	r3, [sp, #8]
 800744c:	429d      	cmp	r5, r3
 800744e:	f43f af75 	beq.w	800733c <_dtoa_r+0x47c>
 8007452:	4b2f      	ldr	r3, [pc, #188]	; (8007510 <_dtoa_r+0x650>)
 8007454:	ec51 0b18 	vmov	r0, r1, d8
 8007458:	2200      	movs	r2, #0
 800745a:	f7f9 f8d5 	bl	8000608 <__aeabi_dmul>
 800745e:	4b2c      	ldr	r3, [pc, #176]	; (8007510 <_dtoa_r+0x650>)
 8007460:	ec41 0b18 	vmov	d8, r0, r1
 8007464:	2200      	movs	r2, #0
 8007466:	4630      	mov	r0, r6
 8007468:	4639      	mov	r1, r7
 800746a:	f7f9 f8cd 	bl	8000608 <__aeabi_dmul>
 800746e:	4606      	mov	r6, r0
 8007470:	460f      	mov	r7, r1
 8007472:	e7c4      	b.n	80073fe <_dtoa_r+0x53e>
 8007474:	ec51 0b17 	vmov	r0, r1, d7
 8007478:	f7f9 f8c6 	bl	8000608 <__aeabi_dmul>
 800747c:	9b02      	ldr	r3, [sp, #8]
 800747e:	9d00      	ldr	r5, [sp, #0]
 8007480:	930c      	str	r3, [sp, #48]	; 0x30
 8007482:	ec41 0b18 	vmov	d8, r0, r1
 8007486:	4639      	mov	r1, r7
 8007488:	4630      	mov	r0, r6
 800748a:	f7f9 fb6d 	bl	8000b68 <__aeabi_d2iz>
 800748e:	9011      	str	r0, [sp, #68]	; 0x44
 8007490:	f7f9 f850 	bl	8000534 <__aeabi_i2d>
 8007494:	4602      	mov	r2, r0
 8007496:	460b      	mov	r3, r1
 8007498:	4630      	mov	r0, r6
 800749a:	4639      	mov	r1, r7
 800749c:	f7f8 fefc 	bl	8000298 <__aeabi_dsub>
 80074a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80074a2:	3330      	adds	r3, #48	; 0x30
 80074a4:	f805 3b01 	strb.w	r3, [r5], #1
 80074a8:	9b02      	ldr	r3, [sp, #8]
 80074aa:	429d      	cmp	r5, r3
 80074ac:	4606      	mov	r6, r0
 80074ae:	460f      	mov	r7, r1
 80074b0:	f04f 0200 	mov.w	r2, #0
 80074b4:	d134      	bne.n	8007520 <_dtoa_r+0x660>
 80074b6:	4b19      	ldr	r3, [pc, #100]	; (800751c <_dtoa_r+0x65c>)
 80074b8:	ec51 0b18 	vmov	r0, r1, d8
 80074bc:	f7f8 feee 	bl	800029c <__adddf3>
 80074c0:	4602      	mov	r2, r0
 80074c2:	460b      	mov	r3, r1
 80074c4:	4630      	mov	r0, r6
 80074c6:	4639      	mov	r1, r7
 80074c8:	f7f9 fb2e 	bl	8000b28 <__aeabi_dcmpgt>
 80074cc:	2800      	cmp	r0, #0
 80074ce:	d175      	bne.n	80075bc <_dtoa_r+0x6fc>
 80074d0:	ec53 2b18 	vmov	r2, r3, d8
 80074d4:	4911      	ldr	r1, [pc, #68]	; (800751c <_dtoa_r+0x65c>)
 80074d6:	2000      	movs	r0, #0
 80074d8:	f7f8 fede 	bl	8000298 <__aeabi_dsub>
 80074dc:	4602      	mov	r2, r0
 80074de:	460b      	mov	r3, r1
 80074e0:	4630      	mov	r0, r6
 80074e2:	4639      	mov	r1, r7
 80074e4:	f7f9 fb02 	bl	8000aec <__aeabi_dcmplt>
 80074e8:	2800      	cmp	r0, #0
 80074ea:	f43f af27 	beq.w	800733c <_dtoa_r+0x47c>
 80074ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074f0:	1e6b      	subs	r3, r5, #1
 80074f2:	930c      	str	r3, [sp, #48]	; 0x30
 80074f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80074f8:	2b30      	cmp	r3, #48	; 0x30
 80074fa:	d0f8      	beq.n	80074ee <_dtoa_r+0x62e>
 80074fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007500:	e04a      	b.n	8007598 <_dtoa_r+0x6d8>
 8007502:	bf00      	nop
 8007504:	08009370 	.word	0x08009370
 8007508:	08009348 	.word	0x08009348
 800750c:	3ff00000 	.word	0x3ff00000
 8007510:	40240000 	.word	0x40240000
 8007514:	401c0000 	.word	0x401c0000
 8007518:	40140000 	.word	0x40140000
 800751c:	3fe00000 	.word	0x3fe00000
 8007520:	4baf      	ldr	r3, [pc, #700]	; (80077e0 <_dtoa_r+0x920>)
 8007522:	f7f9 f871 	bl	8000608 <__aeabi_dmul>
 8007526:	4606      	mov	r6, r0
 8007528:	460f      	mov	r7, r1
 800752a:	e7ac      	b.n	8007486 <_dtoa_r+0x5c6>
 800752c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007530:	9d00      	ldr	r5, [sp, #0]
 8007532:	4642      	mov	r2, r8
 8007534:	464b      	mov	r3, r9
 8007536:	4630      	mov	r0, r6
 8007538:	4639      	mov	r1, r7
 800753a:	f7f9 f98f 	bl	800085c <__aeabi_ddiv>
 800753e:	f7f9 fb13 	bl	8000b68 <__aeabi_d2iz>
 8007542:	9002      	str	r0, [sp, #8]
 8007544:	f7f8 fff6 	bl	8000534 <__aeabi_i2d>
 8007548:	4642      	mov	r2, r8
 800754a:	464b      	mov	r3, r9
 800754c:	f7f9 f85c 	bl	8000608 <__aeabi_dmul>
 8007550:	4602      	mov	r2, r0
 8007552:	460b      	mov	r3, r1
 8007554:	4630      	mov	r0, r6
 8007556:	4639      	mov	r1, r7
 8007558:	f7f8 fe9e 	bl	8000298 <__aeabi_dsub>
 800755c:	9e02      	ldr	r6, [sp, #8]
 800755e:	9f01      	ldr	r7, [sp, #4]
 8007560:	3630      	adds	r6, #48	; 0x30
 8007562:	f805 6b01 	strb.w	r6, [r5], #1
 8007566:	9e00      	ldr	r6, [sp, #0]
 8007568:	1bae      	subs	r6, r5, r6
 800756a:	42b7      	cmp	r7, r6
 800756c:	4602      	mov	r2, r0
 800756e:	460b      	mov	r3, r1
 8007570:	d137      	bne.n	80075e2 <_dtoa_r+0x722>
 8007572:	f7f8 fe93 	bl	800029c <__adddf3>
 8007576:	4642      	mov	r2, r8
 8007578:	464b      	mov	r3, r9
 800757a:	4606      	mov	r6, r0
 800757c:	460f      	mov	r7, r1
 800757e:	f7f9 fad3 	bl	8000b28 <__aeabi_dcmpgt>
 8007582:	b9c8      	cbnz	r0, 80075b8 <_dtoa_r+0x6f8>
 8007584:	4642      	mov	r2, r8
 8007586:	464b      	mov	r3, r9
 8007588:	4630      	mov	r0, r6
 800758a:	4639      	mov	r1, r7
 800758c:	f7f9 faa4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007590:	b110      	cbz	r0, 8007598 <_dtoa_r+0x6d8>
 8007592:	9b02      	ldr	r3, [sp, #8]
 8007594:	07d9      	lsls	r1, r3, #31
 8007596:	d40f      	bmi.n	80075b8 <_dtoa_r+0x6f8>
 8007598:	4620      	mov	r0, r4
 800759a:	4659      	mov	r1, fp
 800759c:	f000 fad6 	bl	8007b4c <_Bfree>
 80075a0:	2300      	movs	r3, #0
 80075a2:	702b      	strb	r3, [r5, #0]
 80075a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80075a6:	f10a 0001 	add.w	r0, sl, #1
 80075aa:	6018      	str	r0, [r3, #0]
 80075ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	f43f acd8 	beq.w	8006f64 <_dtoa_r+0xa4>
 80075b4:	601d      	str	r5, [r3, #0]
 80075b6:	e4d5      	b.n	8006f64 <_dtoa_r+0xa4>
 80075b8:	f8cd a01c 	str.w	sl, [sp, #28]
 80075bc:	462b      	mov	r3, r5
 80075be:	461d      	mov	r5, r3
 80075c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075c4:	2a39      	cmp	r2, #57	; 0x39
 80075c6:	d108      	bne.n	80075da <_dtoa_r+0x71a>
 80075c8:	9a00      	ldr	r2, [sp, #0]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d1f7      	bne.n	80075be <_dtoa_r+0x6fe>
 80075ce:	9a07      	ldr	r2, [sp, #28]
 80075d0:	9900      	ldr	r1, [sp, #0]
 80075d2:	3201      	adds	r2, #1
 80075d4:	9207      	str	r2, [sp, #28]
 80075d6:	2230      	movs	r2, #48	; 0x30
 80075d8:	700a      	strb	r2, [r1, #0]
 80075da:	781a      	ldrb	r2, [r3, #0]
 80075dc:	3201      	adds	r2, #1
 80075de:	701a      	strb	r2, [r3, #0]
 80075e0:	e78c      	b.n	80074fc <_dtoa_r+0x63c>
 80075e2:	4b7f      	ldr	r3, [pc, #508]	; (80077e0 <_dtoa_r+0x920>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	f7f9 f80f 	bl	8000608 <__aeabi_dmul>
 80075ea:	2200      	movs	r2, #0
 80075ec:	2300      	movs	r3, #0
 80075ee:	4606      	mov	r6, r0
 80075f0:	460f      	mov	r7, r1
 80075f2:	f7f9 fa71 	bl	8000ad8 <__aeabi_dcmpeq>
 80075f6:	2800      	cmp	r0, #0
 80075f8:	d09b      	beq.n	8007532 <_dtoa_r+0x672>
 80075fa:	e7cd      	b.n	8007598 <_dtoa_r+0x6d8>
 80075fc:	9a08      	ldr	r2, [sp, #32]
 80075fe:	2a00      	cmp	r2, #0
 8007600:	f000 80c4 	beq.w	800778c <_dtoa_r+0x8cc>
 8007604:	9a05      	ldr	r2, [sp, #20]
 8007606:	2a01      	cmp	r2, #1
 8007608:	f300 80a8 	bgt.w	800775c <_dtoa_r+0x89c>
 800760c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800760e:	2a00      	cmp	r2, #0
 8007610:	f000 80a0 	beq.w	8007754 <_dtoa_r+0x894>
 8007614:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007618:	9e06      	ldr	r6, [sp, #24]
 800761a:	4645      	mov	r5, r8
 800761c:	9a04      	ldr	r2, [sp, #16]
 800761e:	2101      	movs	r1, #1
 8007620:	441a      	add	r2, r3
 8007622:	4620      	mov	r0, r4
 8007624:	4498      	add	r8, r3
 8007626:	9204      	str	r2, [sp, #16]
 8007628:	f000 fb4c 	bl	8007cc4 <__i2b>
 800762c:	4607      	mov	r7, r0
 800762e:	2d00      	cmp	r5, #0
 8007630:	dd0b      	ble.n	800764a <_dtoa_r+0x78a>
 8007632:	9b04      	ldr	r3, [sp, #16]
 8007634:	2b00      	cmp	r3, #0
 8007636:	dd08      	ble.n	800764a <_dtoa_r+0x78a>
 8007638:	42ab      	cmp	r3, r5
 800763a:	9a04      	ldr	r2, [sp, #16]
 800763c:	bfa8      	it	ge
 800763e:	462b      	movge	r3, r5
 8007640:	eba8 0803 	sub.w	r8, r8, r3
 8007644:	1aed      	subs	r5, r5, r3
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	9304      	str	r3, [sp, #16]
 800764a:	9b06      	ldr	r3, [sp, #24]
 800764c:	b1fb      	cbz	r3, 800768e <_dtoa_r+0x7ce>
 800764e:	9b08      	ldr	r3, [sp, #32]
 8007650:	2b00      	cmp	r3, #0
 8007652:	f000 809f 	beq.w	8007794 <_dtoa_r+0x8d4>
 8007656:	2e00      	cmp	r6, #0
 8007658:	dd11      	ble.n	800767e <_dtoa_r+0x7be>
 800765a:	4639      	mov	r1, r7
 800765c:	4632      	mov	r2, r6
 800765e:	4620      	mov	r0, r4
 8007660:	f000 fbec 	bl	8007e3c <__pow5mult>
 8007664:	465a      	mov	r2, fp
 8007666:	4601      	mov	r1, r0
 8007668:	4607      	mov	r7, r0
 800766a:	4620      	mov	r0, r4
 800766c:	f000 fb40 	bl	8007cf0 <__multiply>
 8007670:	4659      	mov	r1, fp
 8007672:	9007      	str	r0, [sp, #28]
 8007674:	4620      	mov	r0, r4
 8007676:	f000 fa69 	bl	8007b4c <_Bfree>
 800767a:	9b07      	ldr	r3, [sp, #28]
 800767c:	469b      	mov	fp, r3
 800767e:	9b06      	ldr	r3, [sp, #24]
 8007680:	1b9a      	subs	r2, r3, r6
 8007682:	d004      	beq.n	800768e <_dtoa_r+0x7ce>
 8007684:	4659      	mov	r1, fp
 8007686:	4620      	mov	r0, r4
 8007688:	f000 fbd8 	bl	8007e3c <__pow5mult>
 800768c:	4683      	mov	fp, r0
 800768e:	2101      	movs	r1, #1
 8007690:	4620      	mov	r0, r4
 8007692:	f000 fb17 	bl	8007cc4 <__i2b>
 8007696:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007698:	2b00      	cmp	r3, #0
 800769a:	4606      	mov	r6, r0
 800769c:	dd7c      	ble.n	8007798 <_dtoa_r+0x8d8>
 800769e:	461a      	mov	r2, r3
 80076a0:	4601      	mov	r1, r0
 80076a2:	4620      	mov	r0, r4
 80076a4:	f000 fbca 	bl	8007e3c <__pow5mult>
 80076a8:	9b05      	ldr	r3, [sp, #20]
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	4606      	mov	r6, r0
 80076ae:	dd76      	ble.n	800779e <_dtoa_r+0x8de>
 80076b0:	2300      	movs	r3, #0
 80076b2:	9306      	str	r3, [sp, #24]
 80076b4:	6933      	ldr	r3, [r6, #16]
 80076b6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80076ba:	6918      	ldr	r0, [r3, #16]
 80076bc:	f000 fab2 	bl	8007c24 <__hi0bits>
 80076c0:	f1c0 0020 	rsb	r0, r0, #32
 80076c4:	9b04      	ldr	r3, [sp, #16]
 80076c6:	4418      	add	r0, r3
 80076c8:	f010 001f 	ands.w	r0, r0, #31
 80076cc:	f000 8086 	beq.w	80077dc <_dtoa_r+0x91c>
 80076d0:	f1c0 0320 	rsb	r3, r0, #32
 80076d4:	2b04      	cmp	r3, #4
 80076d6:	dd7f      	ble.n	80077d8 <_dtoa_r+0x918>
 80076d8:	f1c0 001c 	rsb	r0, r0, #28
 80076dc:	9b04      	ldr	r3, [sp, #16]
 80076de:	4403      	add	r3, r0
 80076e0:	4480      	add	r8, r0
 80076e2:	4405      	add	r5, r0
 80076e4:	9304      	str	r3, [sp, #16]
 80076e6:	f1b8 0f00 	cmp.w	r8, #0
 80076ea:	dd05      	ble.n	80076f8 <_dtoa_r+0x838>
 80076ec:	4659      	mov	r1, fp
 80076ee:	4642      	mov	r2, r8
 80076f0:	4620      	mov	r0, r4
 80076f2:	f000 fbfd 	bl	8007ef0 <__lshift>
 80076f6:	4683      	mov	fp, r0
 80076f8:	9b04      	ldr	r3, [sp, #16]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	dd05      	ble.n	800770a <_dtoa_r+0x84a>
 80076fe:	4631      	mov	r1, r6
 8007700:	461a      	mov	r2, r3
 8007702:	4620      	mov	r0, r4
 8007704:	f000 fbf4 	bl	8007ef0 <__lshift>
 8007708:	4606      	mov	r6, r0
 800770a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800770c:	2b00      	cmp	r3, #0
 800770e:	d069      	beq.n	80077e4 <_dtoa_r+0x924>
 8007710:	4631      	mov	r1, r6
 8007712:	4658      	mov	r0, fp
 8007714:	f000 fc58 	bl	8007fc8 <__mcmp>
 8007718:	2800      	cmp	r0, #0
 800771a:	da63      	bge.n	80077e4 <_dtoa_r+0x924>
 800771c:	2300      	movs	r3, #0
 800771e:	4659      	mov	r1, fp
 8007720:	220a      	movs	r2, #10
 8007722:	4620      	mov	r0, r4
 8007724:	f000 fa34 	bl	8007b90 <__multadd>
 8007728:	9b08      	ldr	r3, [sp, #32]
 800772a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800772e:	4683      	mov	fp, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	f000 818f 	beq.w	8007a54 <_dtoa_r+0xb94>
 8007736:	4639      	mov	r1, r7
 8007738:	2300      	movs	r3, #0
 800773a:	220a      	movs	r2, #10
 800773c:	4620      	mov	r0, r4
 800773e:	f000 fa27 	bl	8007b90 <__multadd>
 8007742:	f1b9 0f00 	cmp.w	r9, #0
 8007746:	4607      	mov	r7, r0
 8007748:	f300 808e 	bgt.w	8007868 <_dtoa_r+0x9a8>
 800774c:	9b05      	ldr	r3, [sp, #20]
 800774e:	2b02      	cmp	r3, #2
 8007750:	dc50      	bgt.n	80077f4 <_dtoa_r+0x934>
 8007752:	e089      	b.n	8007868 <_dtoa_r+0x9a8>
 8007754:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007756:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800775a:	e75d      	b.n	8007618 <_dtoa_r+0x758>
 800775c:	9b01      	ldr	r3, [sp, #4]
 800775e:	1e5e      	subs	r6, r3, #1
 8007760:	9b06      	ldr	r3, [sp, #24]
 8007762:	42b3      	cmp	r3, r6
 8007764:	bfbf      	itttt	lt
 8007766:	9b06      	ldrlt	r3, [sp, #24]
 8007768:	9606      	strlt	r6, [sp, #24]
 800776a:	1af2      	sublt	r2, r6, r3
 800776c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800776e:	bfb6      	itet	lt
 8007770:	189b      	addlt	r3, r3, r2
 8007772:	1b9e      	subge	r6, r3, r6
 8007774:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007776:	9b01      	ldr	r3, [sp, #4]
 8007778:	bfb8      	it	lt
 800777a:	2600      	movlt	r6, #0
 800777c:	2b00      	cmp	r3, #0
 800777e:	bfb5      	itete	lt
 8007780:	eba8 0503 	sublt.w	r5, r8, r3
 8007784:	9b01      	ldrge	r3, [sp, #4]
 8007786:	2300      	movlt	r3, #0
 8007788:	4645      	movge	r5, r8
 800778a:	e747      	b.n	800761c <_dtoa_r+0x75c>
 800778c:	9e06      	ldr	r6, [sp, #24]
 800778e:	9f08      	ldr	r7, [sp, #32]
 8007790:	4645      	mov	r5, r8
 8007792:	e74c      	b.n	800762e <_dtoa_r+0x76e>
 8007794:	9a06      	ldr	r2, [sp, #24]
 8007796:	e775      	b.n	8007684 <_dtoa_r+0x7c4>
 8007798:	9b05      	ldr	r3, [sp, #20]
 800779a:	2b01      	cmp	r3, #1
 800779c:	dc18      	bgt.n	80077d0 <_dtoa_r+0x910>
 800779e:	9b02      	ldr	r3, [sp, #8]
 80077a0:	b9b3      	cbnz	r3, 80077d0 <_dtoa_r+0x910>
 80077a2:	9b03      	ldr	r3, [sp, #12]
 80077a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077a8:	b9a3      	cbnz	r3, 80077d4 <_dtoa_r+0x914>
 80077aa:	9b03      	ldr	r3, [sp, #12]
 80077ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80077b0:	0d1b      	lsrs	r3, r3, #20
 80077b2:	051b      	lsls	r3, r3, #20
 80077b4:	b12b      	cbz	r3, 80077c2 <_dtoa_r+0x902>
 80077b6:	9b04      	ldr	r3, [sp, #16]
 80077b8:	3301      	adds	r3, #1
 80077ba:	9304      	str	r3, [sp, #16]
 80077bc:	f108 0801 	add.w	r8, r8, #1
 80077c0:	2301      	movs	r3, #1
 80077c2:	9306      	str	r3, [sp, #24]
 80077c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	f47f af74 	bne.w	80076b4 <_dtoa_r+0x7f4>
 80077cc:	2001      	movs	r0, #1
 80077ce:	e779      	b.n	80076c4 <_dtoa_r+0x804>
 80077d0:	2300      	movs	r3, #0
 80077d2:	e7f6      	b.n	80077c2 <_dtoa_r+0x902>
 80077d4:	9b02      	ldr	r3, [sp, #8]
 80077d6:	e7f4      	b.n	80077c2 <_dtoa_r+0x902>
 80077d8:	d085      	beq.n	80076e6 <_dtoa_r+0x826>
 80077da:	4618      	mov	r0, r3
 80077dc:	301c      	adds	r0, #28
 80077de:	e77d      	b.n	80076dc <_dtoa_r+0x81c>
 80077e0:	40240000 	.word	0x40240000
 80077e4:	9b01      	ldr	r3, [sp, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	dc38      	bgt.n	800785c <_dtoa_r+0x99c>
 80077ea:	9b05      	ldr	r3, [sp, #20]
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	dd35      	ble.n	800785c <_dtoa_r+0x99c>
 80077f0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80077f4:	f1b9 0f00 	cmp.w	r9, #0
 80077f8:	d10d      	bne.n	8007816 <_dtoa_r+0x956>
 80077fa:	4631      	mov	r1, r6
 80077fc:	464b      	mov	r3, r9
 80077fe:	2205      	movs	r2, #5
 8007800:	4620      	mov	r0, r4
 8007802:	f000 f9c5 	bl	8007b90 <__multadd>
 8007806:	4601      	mov	r1, r0
 8007808:	4606      	mov	r6, r0
 800780a:	4658      	mov	r0, fp
 800780c:	f000 fbdc 	bl	8007fc8 <__mcmp>
 8007810:	2800      	cmp	r0, #0
 8007812:	f73f adbd 	bgt.w	8007390 <_dtoa_r+0x4d0>
 8007816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007818:	9d00      	ldr	r5, [sp, #0]
 800781a:	ea6f 0a03 	mvn.w	sl, r3
 800781e:	f04f 0800 	mov.w	r8, #0
 8007822:	4631      	mov	r1, r6
 8007824:	4620      	mov	r0, r4
 8007826:	f000 f991 	bl	8007b4c <_Bfree>
 800782a:	2f00      	cmp	r7, #0
 800782c:	f43f aeb4 	beq.w	8007598 <_dtoa_r+0x6d8>
 8007830:	f1b8 0f00 	cmp.w	r8, #0
 8007834:	d005      	beq.n	8007842 <_dtoa_r+0x982>
 8007836:	45b8      	cmp	r8, r7
 8007838:	d003      	beq.n	8007842 <_dtoa_r+0x982>
 800783a:	4641      	mov	r1, r8
 800783c:	4620      	mov	r0, r4
 800783e:	f000 f985 	bl	8007b4c <_Bfree>
 8007842:	4639      	mov	r1, r7
 8007844:	4620      	mov	r0, r4
 8007846:	f000 f981 	bl	8007b4c <_Bfree>
 800784a:	e6a5      	b.n	8007598 <_dtoa_r+0x6d8>
 800784c:	2600      	movs	r6, #0
 800784e:	4637      	mov	r7, r6
 8007850:	e7e1      	b.n	8007816 <_dtoa_r+0x956>
 8007852:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007854:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007858:	4637      	mov	r7, r6
 800785a:	e599      	b.n	8007390 <_dtoa_r+0x4d0>
 800785c:	9b08      	ldr	r3, [sp, #32]
 800785e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	f000 80fd 	beq.w	8007a62 <_dtoa_r+0xba2>
 8007868:	2d00      	cmp	r5, #0
 800786a:	dd05      	ble.n	8007878 <_dtoa_r+0x9b8>
 800786c:	4639      	mov	r1, r7
 800786e:	462a      	mov	r2, r5
 8007870:	4620      	mov	r0, r4
 8007872:	f000 fb3d 	bl	8007ef0 <__lshift>
 8007876:	4607      	mov	r7, r0
 8007878:	9b06      	ldr	r3, [sp, #24]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d05c      	beq.n	8007938 <_dtoa_r+0xa78>
 800787e:	6879      	ldr	r1, [r7, #4]
 8007880:	4620      	mov	r0, r4
 8007882:	f000 f923 	bl	8007acc <_Balloc>
 8007886:	4605      	mov	r5, r0
 8007888:	b928      	cbnz	r0, 8007896 <_dtoa_r+0x9d6>
 800788a:	4b80      	ldr	r3, [pc, #512]	; (8007a8c <_dtoa_r+0xbcc>)
 800788c:	4602      	mov	r2, r0
 800788e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007892:	f7ff bb2e 	b.w	8006ef2 <_dtoa_r+0x32>
 8007896:	693a      	ldr	r2, [r7, #16]
 8007898:	3202      	adds	r2, #2
 800789a:	0092      	lsls	r2, r2, #2
 800789c:	f107 010c 	add.w	r1, r7, #12
 80078a0:	300c      	adds	r0, #12
 80078a2:	f000 f905 	bl	8007ab0 <memcpy>
 80078a6:	2201      	movs	r2, #1
 80078a8:	4629      	mov	r1, r5
 80078aa:	4620      	mov	r0, r4
 80078ac:	f000 fb20 	bl	8007ef0 <__lshift>
 80078b0:	9b00      	ldr	r3, [sp, #0]
 80078b2:	3301      	adds	r3, #1
 80078b4:	9301      	str	r3, [sp, #4]
 80078b6:	9b00      	ldr	r3, [sp, #0]
 80078b8:	444b      	add	r3, r9
 80078ba:	9307      	str	r3, [sp, #28]
 80078bc:	9b02      	ldr	r3, [sp, #8]
 80078be:	f003 0301 	and.w	r3, r3, #1
 80078c2:	46b8      	mov	r8, r7
 80078c4:	9306      	str	r3, [sp, #24]
 80078c6:	4607      	mov	r7, r0
 80078c8:	9b01      	ldr	r3, [sp, #4]
 80078ca:	4631      	mov	r1, r6
 80078cc:	3b01      	subs	r3, #1
 80078ce:	4658      	mov	r0, fp
 80078d0:	9302      	str	r3, [sp, #8]
 80078d2:	f7ff fa69 	bl	8006da8 <quorem>
 80078d6:	4603      	mov	r3, r0
 80078d8:	3330      	adds	r3, #48	; 0x30
 80078da:	9004      	str	r0, [sp, #16]
 80078dc:	4641      	mov	r1, r8
 80078de:	4658      	mov	r0, fp
 80078e0:	9308      	str	r3, [sp, #32]
 80078e2:	f000 fb71 	bl	8007fc8 <__mcmp>
 80078e6:	463a      	mov	r2, r7
 80078e8:	4681      	mov	r9, r0
 80078ea:	4631      	mov	r1, r6
 80078ec:	4620      	mov	r0, r4
 80078ee:	f000 fb87 	bl	8008000 <__mdiff>
 80078f2:	68c2      	ldr	r2, [r0, #12]
 80078f4:	9b08      	ldr	r3, [sp, #32]
 80078f6:	4605      	mov	r5, r0
 80078f8:	bb02      	cbnz	r2, 800793c <_dtoa_r+0xa7c>
 80078fa:	4601      	mov	r1, r0
 80078fc:	4658      	mov	r0, fp
 80078fe:	f000 fb63 	bl	8007fc8 <__mcmp>
 8007902:	9b08      	ldr	r3, [sp, #32]
 8007904:	4602      	mov	r2, r0
 8007906:	4629      	mov	r1, r5
 8007908:	4620      	mov	r0, r4
 800790a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800790e:	f000 f91d 	bl	8007b4c <_Bfree>
 8007912:	9b05      	ldr	r3, [sp, #20]
 8007914:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007916:	9d01      	ldr	r5, [sp, #4]
 8007918:	ea43 0102 	orr.w	r1, r3, r2
 800791c:	9b06      	ldr	r3, [sp, #24]
 800791e:	430b      	orrs	r3, r1
 8007920:	9b08      	ldr	r3, [sp, #32]
 8007922:	d10d      	bne.n	8007940 <_dtoa_r+0xa80>
 8007924:	2b39      	cmp	r3, #57	; 0x39
 8007926:	d029      	beq.n	800797c <_dtoa_r+0xabc>
 8007928:	f1b9 0f00 	cmp.w	r9, #0
 800792c:	dd01      	ble.n	8007932 <_dtoa_r+0xa72>
 800792e:	9b04      	ldr	r3, [sp, #16]
 8007930:	3331      	adds	r3, #49	; 0x31
 8007932:	9a02      	ldr	r2, [sp, #8]
 8007934:	7013      	strb	r3, [r2, #0]
 8007936:	e774      	b.n	8007822 <_dtoa_r+0x962>
 8007938:	4638      	mov	r0, r7
 800793a:	e7b9      	b.n	80078b0 <_dtoa_r+0x9f0>
 800793c:	2201      	movs	r2, #1
 800793e:	e7e2      	b.n	8007906 <_dtoa_r+0xa46>
 8007940:	f1b9 0f00 	cmp.w	r9, #0
 8007944:	db06      	blt.n	8007954 <_dtoa_r+0xa94>
 8007946:	9905      	ldr	r1, [sp, #20]
 8007948:	ea41 0909 	orr.w	r9, r1, r9
 800794c:	9906      	ldr	r1, [sp, #24]
 800794e:	ea59 0101 	orrs.w	r1, r9, r1
 8007952:	d120      	bne.n	8007996 <_dtoa_r+0xad6>
 8007954:	2a00      	cmp	r2, #0
 8007956:	ddec      	ble.n	8007932 <_dtoa_r+0xa72>
 8007958:	4659      	mov	r1, fp
 800795a:	2201      	movs	r2, #1
 800795c:	4620      	mov	r0, r4
 800795e:	9301      	str	r3, [sp, #4]
 8007960:	f000 fac6 	bl	8007ef0 <__lshift>
 8007964:	4631      	mov	r1, r6
 8007966:	4683      	mov	fp, r0
 8007968:	f000 fb2e 	bl	8007fc8 <__mcmp>
 800796c:	2800      	cmp	r0, #0
 800796e:	9b01      	ldr	r3, [sp, #4]
 8007970:	dc02      	bgt.n	8007978 <_dtoa_r+0xab8>
 8007972:	d1de      	bne.n	8007932 <_dtoa_r+0xa72>
 8007974:	07da      	lsls	r2, r3, #31
 8007976:	d5dc      	bpl.n	8007932 <_dtoa_r+0xa72>
 8007978:	2b39      	cmp	r3, #57	; 0x39
 800797a:	d1d8      	bne.n	800792e <_dtoa_r+0xa6e>
 800797c:	9a02      	ldr	r2, [sp, #8]
 800797e:	2339      	movs	r3, #57	; 0x39
 8007980:	7013      	strb	r3, [r2, #0]
 8007982:	462b      	mov	r3, r5
 8007984:	461d      	mov	r5, r3
 8007986:	3b01      	subs	r3, #1
 8007988:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800798c:	2a39      	cmp	r2, #57	; 0x39
 800798e:	d050      	beq.n	8007a32 <_dtoa_r+0xb72>
 8007990:	3201      	adds	r2, #1
 8007992:	701a      	strb	r2, [r3, #0]
 8007994:	e745      	b.n	8007822 <_dtoa_r+0x962>
 8007996:	2a00      	cmp	r2, #0
 8007998:	dd03      	ble.n	80079a2 <_dtoa_r+0xae2>
 800799a:	2b39      	cmp	r3, #57	; 0x39
 800799c:	d0ee      	beq.n	800797c <_dtoa_r+0xabc>
 800799e:	3301      	adds	r3, #1
 80079a0:	e7c7      	b.n	8007932 <_dtoa_r+0xa72>
 80079a2:	9a01      	ldr	r2, [sp, #4]
 80079a4:	9907      	ldr	r1, [sp, #28]
 80079a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80079aa:	428a      	cmp	r2, r1
 80079ac:	d02a      	beq.n	8007a04 <_dtoa_r+0xb44>
 80079ae:	4659      	mov	r1, fp
 80079b0:	2300      	movs	r3, #0
 80079b2:	220a      	movs	r2, #10
 80079b4:	4620      	mov	r0, r4
 80079b6:	f000 f8eb 	bl	8007b90 <__multadd>
 80079ba:	45b8      	cmp	r8, r7
 80079bc:	4683      	mov	fp, r0
 80079be:	f04f 0300 	mov.w	r3, #0
 80079c2:	f04f 020a 	mov.w	r2, #10
 80079c6:	4641      	mov	r1, r8
 80079c8:	4620      	mov	r0, r4
 80079ca:	d107      	bne.n	80079dc <_dtoa_r+0xb1c>
 80079cc:	f000 f8e0 	bl	8007b90 <__multadd>
 80079d0:	4680      	mov	r8, r0
 80079d2:	4607      	mov	r7, r0
 80079d4:	9b01      	ldr	r3, [sp, #4]
 80079d6:	3301      	adds	r3, #1
 80079d8:	9301      	str	r3, [sp, #4]
 80079da:	e775      	b.n	80078c8 <_dtoa_r+0xa08>
 80079dc:	f000 f8d8 	bl	8007b90 <__multadd>
 80079e0:	4639      	mov	r1, r7
 80079e2:	4680      	mov	r8, r0
 80079e4:	2300      	movs	r3, #0
 80079e6:	220a      	movs	r2, #10
 80079e8:	4620      	mov	r0, r4
 80079ea:	f000 f8d1 	bl	8007b90 <__multadd>
 80079ee:	4607      	mov	r7, r0
 80079f0:	e7f0      	b.n	80079d4 <_dtoa_r+0xb14>
 80079f2:	f1b9 0f00 	cmp.w	r9, #0
 80079f6:	9a00      	ldr	r2, [sp, #0]
 80079f8:	bfcc      	ite	gt
 80079fa:	464d      	movgt	r5, r9
 80079fc:	2501      	movle	r5, #1
 80079fe:	4415      	add	r5, r2
 8007a00:	f04f 0800 	mov.w	r8, #0
 8007a04:	4659      	mov	r1, fp
 8007a06:	2201      	movs	r2, #1
 8007a08:	4620      	mov	r0, r4
 8007a0a:	9301      	str	r3, [sp, #4]
 8007a0c:	f000 fa70 	bl	8007ef0 <__lshift>
 8007a10:	4631      	mov	r1, r6
 8007a12:	4683      	mov	fp, r0
 8007a14:	f000 fad8 	bl	8007fc8 <__mcmp>
 8007a18:	2800      	cmp	r0, #0
 8007a1a:	dcb2      	bgt.n	8007982 <_dtoa_r+0xac2>
 8007a1c:	d102      	bne.n	8007a24 <_dtoa_r+0xb64>
 8007a1e:	9b01      	ldr	r3, [sp, #4]
 8007a20:	07db      	lsls	r3, r3, #31
 8007a22:	d4ae      	bmi.n	8007982 <_dtoa_r+0xac2>
 8007a24:	462b      	mov	r3, r5
 8007a26:	461d      	mov	r5, r3
 8007a28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a2c:	2a30      	cmp	r2, #48	; 0x30
 8007a2e:	d0fa      	beq.n	8007a26 <_dtoa_r+0xb66>
 8007a30:	e6f7      	b.n	8007822 <_dtoa_r+0x962>
 8007a32:	9a00      	ldr	r2, [sp, #0]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d1a5      	bne.n	8007984 <_dtoa_r+0xac4>
 8007a38:	f10a 0a01 	add.w	sl, sl, #1
 8007a3c:	2331      	movs	r3, #49	; 0x31
 8007a3e:	e779      	b.n	8007934 <_dtoa_r+0xa74>
 8007a40:	4b13      	ldr	r3, [pc, #76]	; (8007a90 <_dtoa_r+0xbd0>)
 8007a42:	f7ff baaf 	b.w	8006fa4 <_dtoa_r+0xe4>
 8007a46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f47f aa86 	bne.w	8006f5a <_dtoa_r+0x9a>
 8007a4e:	4b11      	ldr	r3, [pc, #68]	; (8007a94 <_dtoa_r+0xbd4>)
 8007a50:	f7ff baa8 	b.w	8006fa4 <_dtoa_r+0xe4>
 8007a54:	f1b9 0f00 	cmp.w	r9, #0
 8007a58:	dc03      	bgt.n	8007a62 <_dtoa_r+0xba2>
 8007a5a:	9b05      	ldr	r3, [sp, #20]
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	f73f aec9 	bgt.w	80077f4 <_dtoa_r+0x934>
 8007a62:	9d00      	ldr	r5, [sp, #0]
 8007a64:	4631      	mov	r1, r6
 8007a66:	4658      	mov	r0, fp
 8007a68:	f7ff f99e 	bl	8006da8 <quorem>
 8007a6c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007a70:	f805 3b01 	strb.w	r3, [r5], #1
 8007a74:	9a00      	ldr	r2, [sp, #0]
 8007a76:	1aaa      	subs	r2, r5, r2
 8007a78:	4591      	cmp	r9, r2
 8007a7a:	ddba      	ble.n	80079f2 <_dtoa_r+0xb32>
 8007a7c:	4659      	mov	r1, fp
 8007a7e:	2300      	movs	r3, #0
 8007a80:	220a      	movs	r2, #10
 8007a82:	4620      	mov	r0, r4
 8007a84:	f000 f884 	bl	8007b90 <__multadd>
 8007a88:	4683      	mov	fp, r0
 8007a8a:	e7eb      	b.n	8007a64 <_dtoa_r+0xba4>
 8007a8c:	080092d3 	.word	0x080092d3
 8007a90:	0800922c 	.word	0x0800922c
 8007a94:	08009250 	.word	0x08009250

08007a98 <_localeconv_r>:
 8007a98:	4800      	ldr	r0, [pc, #0]	; (8007a9c <_localeconv_r+0x4>)
 8007a9a:	4770      	bx	lr
 8007a9c:	20000160 	.word	0x20000160

08007aa0 <malloc>:
 8007aa0:	4b02      	ldr	r3, [pc, #8]	; (8007aac <malloc+0xc>)
 8007aa2:	4601      	mov	r1, r0
 8007aa4:	6818      	ldr	r0, [r3, #0]
 8007aa6:	f000 bbef 	b.w	8008288 <_malloc_r>
 8007aaa:	bf00      	nop
 8007aac:	2000000c 	.word	0x2000000c

08007ab0 <memcpy>:
 8007ab0:	440a      	add	r2, r1
 8007ab2:	4291      	cmp	r1, r2
 8007ab4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ab8:	d100      	bne.n	8007abc <memcpy+0xc>
 8007aba:	4770      	bx	lr
 8007abc:	b510      	push	{r4, lr}
 8007abe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ac2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ac6:	4291      	cmp	r1, r2
 8007ac8:	d1f9      	bne.n	8007abe <memcpy+0xe>
 8007aca:	bd10      	pop	{r4, pc}

08007acc <_Balloc>:
 8007acc:	b570      	push	{r4, r5, r6, lr}
 8007ace:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007ad0:	4604      	mov	r4, r0
 8007ad2:	460d      	mov	r5, r1
 8007ad4:	b976      	cbnz	r6, 8007af4 <_Balloc+0x28>
 8007ad6:	2010      	movs	r0, #16
 8007ad8:	f7ff ffe2 	bl	8007aa0 <malloc>
 8007adc:	4602      	mov	r2, r0
 8007ade:	6260      	str	r0, [r4, #36]	; 0x24
 8007ae0:	b920      	cbnz	r0, 8007aec <_Balloc+0x20>
 8007ae2:	4b18      	ldr	r3, [pc, #96]	; (8007b44 <_Balloc+0x78>)
 8007ae4:	4818      	ldr	r0, [pc, #96]	; (8007b48 <_Balloc+0x7c>)
 8007ae6:	2166      	movs	r1, #102	; 0x66
 8007ae8:	f000 fd94 	bl	8008614 <__assert_func>
 8007aec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007af0:	6006      	str	r6, [r0, #0]
 8007af2:	60c6      	str	r6, [r0, #12]
 8007af4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007af6:	68f3      	ldr	r3, [r6, #12]
 8007af8:	b183      	cbz	r3, 8007b1c <_Balloc+0x50>
 8007afa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b02:	b9b8      	cbnz	r0, 8007b34 <_Balloc+0x68>
 8007b04:	2101      	movs	r1, #1
 8007b06:	fa01 f605 	lsl.w	r6, r1, r5
 8007b0a:	1d72      	adds	r2, r6, #5
 8007b0c:	0092      	lsls	r2, r2, #2
 8007b0e:	4620      	mov	r0, r4
 8007b10:	f000 fb5a 	bl	80081c8 <_calloc_r>
 8007b14:	b160      	cbz	r0, 8007b30 <_Balloc+0x64>
 8007b16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007b1a:	e00e      	b.n	8007b3a <_Balloc+0x6e>
 8007b1c:	2221      	movs	r2, #33	; 0x21
 8007b1e:	2104      	movs	r1, #4
 8007b20:	4620      	mov	r0, r4
 8007b22:	f000 fb51 	bl	80081c8 <_calloc_r>
 8007b26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b28:	60f0      	str	r0, [r6, #12]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d1e4      	bne.n	8007afa <_Balloc+0x2e>
 8007b30:	2000      	movs	r0, #0
 8007b32:	bd70      	pop	{r4, r5, r6, pc}
 8007b34:	6802      	ldr	r2, [r0, #0]
 8007b36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b40:	e7f7      	b.n	8007b32 <_Balloc+0x66>
 8007b42:	bf00      	nop
 8007b44:	0800925d 	.word	0x0800925d
 8007b48:	080092e4 	.word	0x080092e4

08007b4c <_Bfree>:
 8007b4c:	b570      	push	{r4, r5, r6, lr}
 8007b4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b50:	4605      	mov	r5, r0
 8007b52:	460c      	mov	r4, r1
 8007b54:	b976      	cbnz	r6, 8007b74 <_Bfree+0x28>
 8007b56:	2010      	movs	r0, #16
 8007b58:	f7ff ffa2 	bl	8007aa0 <malloc>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	6268      	str	r0, [r5, #36]	; 0x24
 8007b60:	b920      	cbnz	r0, 8007b6c <_Bfree+0x20>
 8007b62:	4b09      	ldr	r3, [pc, #36]	; (8007b88 <_Bfree+0x3c>)
 8007b64:	4809      	ldr	r0, [pc, #36]	; (8007b8c <_Bfree+0x40>)
 8007b66:	218a      	movs	r1, #138	; 0x8a
 8007b68:	f000 fd54 	bl	8008614 <__assert_func>
 8007b6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b70:	6006      	str	r6, [r0, #0]
 8007b72:	60c6      	str	r6, [r0, #12]
 8007b74:	b13c      	cbz	r4, 8007b86 <_Bfree+0x3a>
 8007b76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b78:	6862      	ldr	r2, [r4, #4]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b80:	6021      	str	r1, [r4, #0]
 8007b82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b86:	bd70      	pop	{r4, r5, r6, pc}
 8007b88:	0800925d 	.word	0x0800925d
 8007b8c:	080092e4 	.word	0x080092e4

08007b90 <__multadd>:
 8007b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b94:	690e      	ldr	r6, [r1, #16]
 8007b96:	4607      	mov	r7, r0
 8007b98:	4698      	mov	r8, r3
 8007b9a:	460c      	mov	r4, r1
 8007b9c:	f101 0014 	add.w	r0, r1, #20
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	6805      	ldr	r5, [r0, #0]
 8007ba4:	b2a9      	uxth	r1, r5
 8007ba6:	fb02 8101 	mla	r1, r2, r1, r8
 8007baa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007bae:	0c2d      	lsrs	r5, r5, #16
 8007bb0:	fb02 c505 	mla	r5, r2, r5, ip
 8007bb4:	b289      	uxth	r1, r1
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007bbc:	429e      	cmp	r6, r3
 8007bbe:	f840 1b04 	str.w	r1, [r0], #4
 8007bc2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007bc6:	dcec      	bgt.n	8007ba2 <__multadd+0x12>
 8007bc8:	f1b8 0f00 	cmp.w	r8, #0
 8007bcc:	d022      	beq.n	8007c14 <__multadd+0x84>
 8007bce:	68a3      	ldr	r3, [r4, #8]
 8007bd0:	42b3      	cmp	r3, r6
 8007bd2:	dc19      	bgt.n	8007c08 <__multadd+0x78>
 8007bd4:	6861      	ldr	r1, [r4, #4]
 8007bd6:	4638      	mov	r0, r7
 8007bd8:	3101      	adds	r1, #1
 8007bda:	f7ff ff77 	bl	8007acc <_Balloc>
 8007bde:	4605      	mov	r5, r0
 8007be0:	b928      	cbnz	r0, 8007bee <__multadd+0x5e>
 8007be2:	4602      	mov	r2, r0
 8007be4:	4b0d      	ldr	r3, [pc, #52]	; (8007c1c <__multadd+0x8c>)
 8007be6:	480e      	ldr	r0, [pc, #56]	; (8007c20 <__multadd+0x90>)
 8007be8:	21b5      	movs	r1, #181	; 0xb5
 8007bea:	f000 fd13 	bl	8008614 <__assert_func>
 8007bee:	6922      	ldr	r2, [r4, #16]
 8007bf0:	3202      	adds	r2, #2
 8007bf2:	f104 010c 	add.w	r1, r4, #12
 8007bf6:	0092      	lsls	r2, r2, #2
 8007bf8:	300c      	adds	r0, #12
 8007bfa:	f7ff ff59 	bl	8007ab0 <memcpy>
 8007bfe:	4621      	mov	r1, r4
 8007c00:	4638      	mov	r0, r7
 8007c02:	f7ff ffa3 	bl	8007b4c <_Bfree>
 8007c06:	462c      	mov	r4, r5
 8007c08:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007c0c:	3601      	adds	r6, #1
 8007c0e:	f8c3 8014 	str.w	r8, [r3, #20]
 8007c12:	6126      	str	r6, [r4, #16]
 8007c14:	4620      	mov	r0, r4
 8007c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c1a:	bf00      	nop
 8007c1c:	080092d3 	.word	0x080092d3
 8007c20:	080092e4 	.word	0x080092e4

08007c24 <__hi0bits>:
 8007c24:	0c03      	lsrs	r3, r0, #16
 8007c26:	041b      	lsls	r3, r3, #16
 8007c28:	b9d3      	cbnz	r3, 8007c60 <__hi0bits+0x3c>
 8007c2a:	0400      	lsls	r0, r0, #16
 8007c2c:	2310      	movs	r3, #16
 8007c2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007c32:	bf04      	itt	eq
 8007c34:	0200      	lsleq	r0, r0, #8
 8007c36:	3308      	addeq	r3, #8
 8007c38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007c3c:	bf04      	itt	eq
 8007c3e:	0100      	lsleq	r0, r0, #4
 8007c40:	3304      	addeq	r3, #4
 8007c42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007c46:	bf04      	itt	eq
 8007c48:	0080      	lsleq	r0, r0, #2
 8007c4a:	3302      	addeq	r3, #2
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	db05      	blt.n	8007c5c <__hi0bits+0x38>
 8007c50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007c54:	f103 0301 	add.w	r3, r3, #1
 8007c58:	bf08      	it	eq
 8007c5a:	2320      	moveq	r3, #32
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	4770      	bx	lr
 8007c60:	2300      	movs	r3, #0
 8007c62:	e7e4      	b.n	8007c2e <__hi0bits+0xa>

08007c64 <__lo0bits>:
 8007c64:	6803      	ldr	r3, [r0, #0]
 8007c66:	f013 0207 	ands.w	r2, r3, #7
 8007c6a:	4601      	mov	r1, r0
 8007c6c:	d00b      	beq.n	8007c86 <__lo0bits+0x22>
 8007c6e:	07da      	lsls	r2, r3, #31
 8007c70:	d424      	bmi.n	8007cbc <__lo0bits+0x58>
 8007c72:	0798      	lsls	r0, r3, #30
 8007c74:	bf49      	itett	mi
 8007c76:	085b      	lsrmi	r3, r3, #1
 8007c78:	089b      	lsrpl	r3, r3, #2
 8007c7a:	2001      	movmi	r0, #1
 8007c7c:	600b      	strmi	r3, [r1, #0]
 8007c7e:	bf5c      	itt	pl
 8007c80:	600b      	strpl	r3, [r1, #0]
 8007c82:	2002      	movpl	r0, #2
 8007c84:	4770      	bx	lr
 8007c86:	b298      	uxth	r0, r3
 8007c88:	b9b0      	cbnz	r0, 8007cb8 <__lo0bits+0x54>
 8007c8a:	0c1b      	lsrs	r3, r3, #16
 8007c8c:	2010      	movs	r0, #16
 8007c8e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007c92:	bf04      	itt	eq
 8007c94:	0a1b      	lsreq	r3, r3, #8
 8007c96:	3008      	addeq	r0, #8
 8007c98:	071a      	lsls	r2, r3, #28
 8007c9a:	bf04      	itt	eq
 8007c9c:	091b      	lsreq	r3, r3, #4
 8007c9e:	3004      	addeq	r0, #4
 8007ca0:	079a      	lsls	r2, r3, #30
 8007ca2:	bf04      	itt	eq
 8007ca4:	089b      	lsreq	r3, r3, #2
 8007ca6:	3002      	addeq	r0, #2
 8007ca8:	07da      	lsls	r2, r3, #31
 8007caa:	d403      	bmi.n	8007cb4 <__lo0bits+0x50>
 8007cac:	085b      	lsrs	r3, r3, #1
 8007cae:	f100 0001 	add.w	r0, r0, #1
 8007cb2:	d005      	beq.n	8007cc0 <__lo0bits+0x5c>
 8007cb4:	600b      	str	r3, [r1, #0]
 8007cb6:	4770      	bx	lr
 8007cb8:	4610      	mov	r0, r2
 8007cba:	e7e8      	b.n	8007c8e <__lo0bits+0x2a>
 8007cbc:	2000      	movs	r0, #0
 8007cbe:	4770      	bx	lr
 8007cc0:	2020      	movs	r0, #32
 8007cc2:	4770      	bx	lr

08007cc4 <__i2b>:
 8007cc4:	b510      	push	{r4, lr}
 8007cc6:	460c      	mov	r4, r1
 8007cc8:	2101      	movs	r1, #1
 8007cca:	f7ff feff 	bl	8007acc <_Balloc>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	b928      	cbnz	r0, 8007cde <__i2b+0x1a>
 8007cd2:	4b05      	ldr	r3, [pc, #20]	; (8007ce8 <__i2b+0x24>)
 8007cd4:	4805      	ldr	r0, [pc, #20]	; (8007cec <__i2b+0x28>)
 8007cd6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007cda:	f000 fc9b 	bl	8008614 <__assert_func>
 8007cde:	2301      	movs	r3, #1
 8007ce0:	6144      	str	r4, [r0, #20]
 8007ce2:	6103      	str	r3, [r0, #16]
 8007ce4:	bd10      	pop	{r4, pc}
 8007ce6:	bf00      	nop
 8007ce8:	080092d3 	.word	0x080092d3
 8007cec:	080092e4 	.word	0x080092e4

08007cf0 <__multiply>:
 8007cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf4:	4614      	mov	r4, r2
 8007cf6:	690a      	ldr	r2, [r1, #16]
 8007cf8:	6923      	ldr	r3, [r4, #16]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	bfb8      	it	lt
 8007cfe:	460b      	movlt	r3, r1
 8007d00:	460d      	mov	r5, r1
 8007d02:	bfbc      	itt	lt
 8007d04:	4625      	movlt	r5, r4
 8007d06:	461c      	movlt	r4, r3
 8007d08:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007d0c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007d10:	68ab      	ldr	r3, [r5, #8]
 8007d12:	6869      	ldr	r1, [r5, #4]
 8007d14:	eb0a 0709 	add.w	r7, sl, r9
 8007d18:	42bb      	cmp	r3, r7
 8007d1a:	b085      	sub	sp, #20
 8007d1c:	bfb8      	it	lt
 8007d1e:	3101      	addlt	r1, #1
 8007d20:	f7ff fed4 	bl	8007acc <_Balloc>
 8007d24:	b930      	cbnz	r0, 8007d34 <__multiply+0x44>
 8007d26:	4602      	mov	r2, r0
 8007d28:	4b42      	ldr	r3, [pc, #264]	; (8007e34 <__multiply+0x144>)
 8007d2a:	4843      	ldr	r0, [pc, #268]	; (8007e38 <__multiply+0x148>)
 8007d2c:	f240 115d 	movw	r1, #349	; 0x15d
 8007d30:	f000 fc70 	bl	8008614 <__assert_func>
 8007d34:	f100 0614 	add.w	r6, r0, #20
 8007d38:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007d3c:	4633      	mov	r3, r6
 8007d3e:	2200      	movs	r2, #0
 8007d40:	4543      	cmp	r3, r8
 8007d42:	d31e      	bcc.n	8007d82 <__multiply+0x92>
 8007d44:	f105 0c14 	add.w	ip, r5, #20
 8007d48:	f104 0314 	add.w	r3, r4, #20
 8007d4c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007d50:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007d54:	9202      	str	r2, [sp, #8]
 8007d56:	ebac 0205 	sub.w	r2, ip, r5
 8007d5a:	3a15      	subs	r2, #21
 8007d5c:	f022 0203 	bic.w	r2, r2, #3
 8007d60:	3204      	adds	r2, #4
 8007d62:	f105 0115 	add.w	r1, r5, #21
 8007d66:	458c      	cmp	ip, r1
 8007d68:	bf38      	it	cc
 8007d6a:	2204      	movcc	r2, #4
 8007d6c:	9201      	str	r2, [sp, #4]
 8007d6e:	9a02      	ldr	r2, [sp, #8]
 8007d70:	9303      	str	r3, [sp, #12]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d808      	bhi.n	8007d88 <__multiply+0x98>
 8007d76:	2f00      	cmp	r7, #0
 8007d78:	dc55      	bgt.n	8007e26 <__multiply+0x136>
 8007d7a:	6107      	str	r7, [r0, #16]
 8007d7c:	b005      	add	sp, #20
 8007d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d82:	f843 2b04 	str.w	r2, [r3], #4
 8007d86:	e7db      	b.n	8007d40 <__multiply+0x50>
 8007d88:	f8b3 a000 	ldrh.w	sl, [r3]
 8007d8c:	f1ba 0f00 	cmp.w	sl, #0
 8007d90:	d020      	beq.n	8007dd4 <__multiply+0xe4>
 8007d92:	f105 0e14 	add.w	lr, r5, #20
 8007d96:	46b1      	mov	r9, r6
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007d9e:	f8d9 b000 	ldr.w	fp, [r9]
 8007da2:	b2a1      	uxth	r1, r4
 8007da4:	fa1f fb8b 	uxth.w	fp, fp
 8007da8:	fb0a b101 	mla	r1, sl, r1, fp
 8007dac:	4411      	add	r1, r2
 8007dae:	f8d9 2000 	ldr.w	r2, [r9]
 8007db2:	0c24      	lsrs	r4, r4, #16
 8007db4:	0c12      	lsrs	r2, r2, #16
 8007db6:	fb0a 2404 	mla	r4, sl, r4, r2
 8007dba:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007dbe:	b289      	uxth	r1, r1
 8007dc0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007dc4:	45f4      	cmp	ip, lr
 8007dc6:	f849 1b04 	str.w	r1, [r9], #4
 8007dca:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007dce:	d8e4      	bhi.n	8007d9a <__multiply+0xaa>
 8007dd0:	9901      	ldr	r1, [sp, #4]
 8007dd2:	5072      	str	r2, [r6, r1]
 8007dd4:	9a03      	ldr	r2, [sp, #12]
 8007dd6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007dda:	3304      	adds	r3, #4
 8007ddc:	f1b9 0f00 	cmp.w	r9, #0
 8007de0:	d01f      	beq.n	8007e22 <__multiply+0x132>
 8007de2:	6834      	ldr	r4, [r6, #0]
 8007de4:	f105 0114 	add.w	r1, r5, #20
 8007de8:	46b6      	mov	lr, r6
 8007dea:	f04f 0a00 	mov.w	sl, #0
 8007dee:	880a      	ldrh	r2, [r1, #0]
 8007df0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007df4:	fb09 b202 	mla	r2, r9, r2, fp
 8007df8:	4492      	add	sl, r2
 8007dfa:	b2a4      	uxth	r4, r4
 8007dfc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007e00:	f84e 4b04 	str.w	r4, [lr], #4
 8007e04:	f851 4b04 	ldr.w	r4, [r1], #4
 8007e08:	f8be 2000 	ldrh.w	r2, [lr]
 8007e0c:	0c24      	lsrs	r4, r4, #16
 8007e0e:	fb09 2404 	mla	r4, r9, r4, r2
 8007e12:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007e16:	458c      	cmp	ip, r1
 8007e18:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007e1c:	d8e7      	bhi.n	8007dee <__multiply+0xfe>
 8007e1e:	9a01      	ldr	r2, [sp, #4]
 8007e20:	50b4      	str	r4, [r6, r2]
 8007e22:	3604      	adds	r6, #4
 8007e24:	e7a3      	b.n	8007d6e <__multiply+0x7e>
 8007e26:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1a5      	bne.n	8007d7a <__multiply+0x8a>
 8007e2e:	3f01      	subs	r7, #1
 8007e30:	e7a1      	b.n	8007d76 <__multiply+0x86>
 8007e32:	bf00      	nop
 8007e34:	080092d3 	.word	0x080092d3
 8007e38:	080092e4 	.word	0x080092e4

08007e3c <__pow5mult>:
 8007e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e40:	4615      	mov	r5, r2
 8007e42:	f012 0203 	ands.w	r2, r2, #3
 8007e46:	4606      	mov	r6, r0
 8007e48:	460f      	mov	r7, r1
 8007e4a:	d007      	beq.n	8007e5c <__pow5mult+0x20>
 8007e4c:	4c25      	ldr	r4, [pc, #148]	; (8007ee4 <__pow5mult+0xa8>)
 8007e4e:	3a01      	subs	r2, #1
 8007e50:	2300      	movs	r3, #0
 8007e52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e56:	f7ff fe9b 	bl	8007b90 <__multadd>
 8007e5a:	4607      	mov	r7, r0
 8007e5c:	10ad      	asrs	r5, r5, #2
 8007e5e:	d03d      	beq.n	8007edc <__pow5mult+0xa0>
 8007e60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007e62:	b97c      	cbnz	r4, 8007e84 <__pow5mult+0x48>
 8007e64:	2010      	movs	r0, #16
 8007e66:	f7ff fe1b 	bl	8007aa0 <malloc>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	6270      	str	r0, [r6, #36]	; 0x24
 8007e6e:	b928      	cbnz	r0, 8007e7c <__pow5mult+0x40>
 8007e70:	4b1d      	ldr	r3, [pc, #116]	; (8007ee8 <__pow5mult+0xac>)
 8007e72:	481e      	ldr	r0, [pc, #120]	; (8007eec <__pow5mult+0xb0>)
 8007e74:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007e78:	f000 fbcc 	bl	8008614 <__assert_func>
 8007e7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e80:	6004      	str	r4, [r0, #0]
 8007e82:	60c4      	str	r4, [r0, #12]
 8007e84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007e88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e8c:	b94c      	cbnz	r4, 8007ea2 <__pow5mult+0x66>
 8007e8e:	f240 2171 	movw	r1, #625	; 0x271
 8007e92:	4630      	mov	r0, r6
 8007e94:	f7ff ff16 	bl	8007cc4 <__i2b>
 8007e98:	2300      	movs	r3, #0
 8007e9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e9e:	4604      	mov	r4, r0
 8007ea0:	6003      	str	r3, [r0, #0]
 8007ea2:	f04f 0900 	mov.w	r9, #0
 8007ea6:	07eb      	lsls	r3, r5, #31
 8007ea8:	d50a      	bpl.n	8007ec0 <__pow5mult+0x84>
 8007eaa:	4639      	mov	r1, r7
 8007eac:	4622      	mov	r2, r4
 8007eae:	4630      	mov	r0, r6
 8007eb0:	f7ff ff1e 	bl	8007cf0 <__multiply>
 8007eb4:	4639      	mov	r1, r7
 8007eb6:	4680      	mov	r8, r0
 8007eb8:	4630      	mov	r0, r6
 8007eba:	f7ff fe47 	bl	8007b4c <_Bfree>
 8007ebe:	4647      	mov	r7, r8
 8007ec0:	106d      	asrs	r5, r5, #1
 8007ec2:	d00b      	beq.n	8007edc <__pow5mult+0xa0>
 8007ec4:	6820      	ldr	r0, [r4, #0]
 8007ec6:	b938      	cbnz	r0, 8007ed8 <__pow5mult+0x9c>
 8007ec8:	4622      	mov	r2, r4
 8007eca:	4621      	mov	r1, r4
 8007ecc:	4630      	mov	r0, r6
 8007ece:	f7ff ff0f 	bl	8007cf0 <__multiply>
 8007ed2:	6020      	str	r0, [r4, #0]
 8007ed4:	f8c0 9000 	str.w	r9, [r0]
 8007ed8:	4604      	mov	r4, r0
 8007eda:	e7e4      	b.n	8007ea6 <__pow5mult+0x6a>
 8007edc:	4638      	mov	r0, r7
 8007ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ee2:	bf00      	nop
 8007ee4:	08009438 	.word	0x08009438
 8007ee8:	0800925d 	.word	0x0800925d
 8007eec:	080092e4 	.word	0x080092e4

08007ef0 <__lshift>:
 8007ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ef4:	460c      	mov	r4, r1
 8007ef6:	6849      	ldr	r1, [r1, #4]
 8007ef8:	6923      	ldr	r3, [r4, #16]
 8007efa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007efe:	68a3      	ldr	r3, [r4, #8]
 8007f00:	4607      	mov	r7, r0
 8007f02:	4691      	mov	r9, r2
 8007f04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f08:	f108 0601 	add.w	r6, r8, #1
 8007f0c:	42b3      	cmp	r3, r6
 8007f0e:	db0b      	blt.n	8007f28 <__lshift+0x38>
 8007f10:	4638      	mov	r0, r7
 8007f12:	f7ff fddb 	bl	8007acc <_Balloc>
 8007f16:	4605      	mov	r5, r0
 8007f18:	b948      	cbnz	r0, 8007f2e <__lshift+0x3e>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	4b28      	ldr	r3, [pc, #160]	; (8007fc0 <__lshift+0xd0>)
 8007f1e:	4829      	ldr	r0, [pc, #164]	; (8007fc4 <__lshift+0xd4>)
 8007f20:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007f24:	f000 fb76 	bl	8008614 <__assert_func>
 8007f28:	3101      	adds	r1, #1
 8007f2a:	005b      	lsls	r3, r3, #1
 8007f2c:	e7ee      	b.n	8007f0c <__lshift+0x1c>
 8007f2e:	2300      	movs	r3, #0
 8007f30:	f100 0114 	add.w	r1, r0, #20
 8007f34:	f100 0210 	add.w	r2, r0, #16
 8007f38:	4618      	mov	r0, r3
 8007f3a:	4553      	cmp	r3, sl
 8007f3c:	db33      	blt.n	8007fa6 <__lshift+0xb6>
 8007f3e:	6920      	ldr	r0, [r4, #16]
 8007f40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f44:	f104 0314 	add.w	r3, r4, #20
 8007f48:	f019 091f 	ands.w	r9, r9, #31
 8007f4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f54:	d02b      	beq.n	8007fae <__lshift+0xbe>
 8007f56:	f1c9 0e20 	rsb	lr, r9, #32
 8007f5a:	468a      	mov	sl, r1
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	6818      	ldr	r0, [r3, #0]
 8007f60:	fa00 f009 	lsl.w	r0, r0, r9
 8007f64:	4302      	orrs	r2, r0
 8007f66:	f84a 2b04 	str.w	r2, [sl], #4
 8007f6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f6e:	459c      	cmp	ip, r3
 8007f70:	fa22 f20e 	lsr.w	r2, r2, lr
 8007f74:	d8f3      	bhi.n	8007f5e <__lshift+0x6e>
 8007f76:	ebac 0304 	sub.w	r3, ip, r4
 8007f7a:	3b15      	subs	r3, #21
 8007f7c:	f023 0303 	bic.w	r3, r3, #3
 8007f80:	3304      	adds	r3, #4
 8007f82:	f104 0015 	add.w	r0, r4, #21
 8007f86:	4584      	cmp	ip, r0
 8007f88:	bf38      	it	cc
 8007f8a:	2304      	movcc	r3, #4
 8007f8c:	50ca      	str	r2, [r1, r3]
 8007f8e:	b10a      	cbz	r2, 8007f94 <__lshift+0xa4>
 8007f90:	f108 0602 	add.w	r6, r8, #2
 8007f94:	3e01      	subs	r6, #1
 8007f96:	4638      	mov	r0, r7
 8007f98:	612e      	str	r6, [r5, #16]
 8007f9a:	4621      	mov	r1, r4
 8007f9c:	f7ff fdd6 	bl	8007b4c <_Bfree>
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fa6:	f842 0f04 	str.w	r0, [r2, #4]!
 8007faa:	3301      	adds	r3, #1
 8007fac:	e7c5      	b.n	8007f3a <__lshift+0x4a>
 8007fae:	3904      	subs	r1, #4
 8007fb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fb4:	f841 2f04 	str.w	r2, [r1, #4]!
 8007fb8:	459c      	cmp	ip, r3
 8007fba:	d8f9      	bhi.n	8007fb0 <__lshift+0xc0>
 8007fbc:	e7ea      	b.n	8007f94 <__lshift+0xa4>
 8007fbe:	bf00      	nop
 8007fc0:	080092d3 	.word	0x080092d3
 8007fc4:	080092e4 	.word	0x080092e4

08007fc8 <__mcmp>:
 8007fc8:	b530      	push	{r4, r5, lr}
 8007fca:	6902      	ldr	r2, [r0, #16]
 8007fcc:	690c      	ldr	r4, [r1, #16]
 8007fce:	1b12      	subs	r2, r2, r4
 8007fd0:	d10e      	bne.n	8007ff0 <__mcmp+0x28>
 8007fd2:	f100 0314 	add.w	r3, r0, #20
 8007fd6:	3114      	adds	r1, #20
 8007fd8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007fdc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007fe0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007fe4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007fe8:	42a5      	cmp	r5, r4
 8007fea:	d003      	beq.n	8007ff4 <__mcmp+0x2c>
 8007fec:	d305      	bcc.n	8007ffa <__mcmp+0x32>
 8007fee:	2201      	movs	r2, #1
 8007ff0:	4610      	mov	r0, r2
 8007ff2:	bd30      	pop	{r4, r5, pc}
 8007ff4:	4283      	cmp	r3, r0
 8007ff6:	d3f3      	bcc.n	8007fe0 <__mcmp+0x18>
 8007ff8:	e7fa      	b.n	8007ff0 <__mcmp+0x28>
 8007ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8007ffe:	e7f7      	b.n	8007ff0 <__mcmp+0x28>

08008000 <__mdiff>:
 8008000:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008004:	460c      	mov	r4, r1
 8008006:	4606      	mov	r6, r0
 8008008:	4611      	mov	r1, r2
 800800a:	4620      	mov	r0, r4
 800800c:	4617      	mov	r7, r2
 800800e:	f7ff ffdb 	bl	8007fc8 <__mcmp>
 8008012:	1e05      	subs	r5, r0, #0
 8008014:	d110      	bne.n	8008038 <__mdiff+0x38>
 8008016:	4629      	mov	r1, r5
 8008018:	4630      	mov	r0, r6
 800801a:	f7ff fd57 	bl	8007acc <_Balloc>
 800801e:	b930      	cbnz	r0, 800802e <__mdiff+0x2e>
 8008020:	4b39      	ldr	r3, [pc, #228]	; (8008108 <__mdiff+0x108>)
 8008022:	4602      	mov	r2, r0
 8008024:	f240 2132 	movw	r1, #562	; 0x232
 8008028:	4838      	ldr	r0, [pc, #224]	; (800810c <__mdiff+0x10c>)
 800802a:	f000 faf3 	bl	8008614 <__assert_func>
 800802e:	2301      	movs	r3, #1
 8008030:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008034:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008038:	bfa4      	itt	ge
 800803a:	463b      	movge	r3, r7
 800803c:	4627      	movge	r7, r4
 800803e:	4630      	mov	r0, r6
 8008040:	6879      	ldr	r1, [r7, #4]
 8008042:	bfa6      	itte	ge
 8008044:	461c      	movge	r4, r3
 8008046:	2500      	movge	r5, #0
 8008048:	2501      	movlt	r5, #1
 800804a:	f7ff fd3f 	bl	8007acc <_Balloc>
 800804e:	b920      	cbnz	r0, 800805a <__mdiff+0x5a>
 8008050:	4b2d      	ldr	r3, [pc, #180]	; (8008108 <__mdiff+0x108>)
 8008052:	4602      	mov	r2, r0
 8008054:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008058:	e7e6      	b.n	8008028 <__mdiff+0x28>
 800805a:	693e      	ldr	r6, [r7, #16]
 800805c:	60c5      	str	r5, [r0, #12]
 800805e:	6925      	ldr	r5, [r4, #16]
 8008060:	f107 0114 	add.w	r1, r7, #20
 8008064:	f104 0914 	add.w	r9, r4, #20
 8008068:	f100 0e14 	add.w	lr, r0, #20
 800806c:	f107 0210 	add.w	r2, r7, #16
 8008070:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008074:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008078:	46f2      	mov	sl, lr
 800807a:	2700      	movs	r7, #0
 800807c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008080:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008084:	fa1f f883 	uxth.w	r8, r3
 8008088:	fa17 f78b 	uxtah	r7, r7, fp
 800808c:	0c1b      	lsrs	r3, r3, #16
 800808e:	eba7 0808 	sub.w	r8, r7, r8
 8008092:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008096:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800809a:	fa1f f888 	uxth.w	r8, r8
 800809e:	141f      	asrs	r7, r3, #16
 80080a0:	454d      	cmp	r5, r9
 80080a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80080a6:	f84a 3b04 	str.w	r3, [sl], #4
 80080aa:	d8e7      	bhi.n	800807c <__mdiff+0x7c>
 80080ac:	1b2b      	subs	r3, r5, r4
 80080ae:	3b15      	subs	r3, #21
 80080b0:	f023 0303 	bic.w	r3, r3, #3
 80080b4:	3304      	adds	r3, #4
 80080b6:	3415      	adds	r4, #21
 80080b8:	42a5      	cmp	r5, r4
 80080ba:	bf38      	it	cc
 80080bc:	2304      	movcc	r3, #4
 80080be:	4419      	add	r1, r3
 80080c0:	4473      	add	r3, lr
 80080c2:	469e      	mov	lr, r3
 80080c4:	460d      	mov	r5, r1
 80080c6:	4565      	cmp	r5, ip
 80080c8:	d30e      	bcc.n	80080e8 <__mdiff+0xe8>
 80080ca:	f10c 0203 	add.w	r2, ip, #3
 80080ce:	1a52      	subs	r2, r2, r1
 80080d0:	f022 0203 	bic.w	r2, r2, #3
 80080d4:	3903      	subs	r1, #3
 80080d6:	458c      	cmp	ip, r1
 80080d8:	bf38      	it	cc
 80080da:	2200      	movcc	r2, #0
 80080dc:	441a      	add	r2, r3
 80080de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80080e2:	b17b      	cbz	r3, 8008104 <__mdiff+0x104>
 80080e4:	6106      	str	r6, [r0, #16]
 80080e6:	e7a5      	b.n	8008034 <__mdiff+0x34>
 80080e8:	f855 8b04 	ldr.w	r8, [r5], #4
 80080ec:	fa17 f488 	uxtah	r4, r7, r8
 80080f0:	1422      	asrs	r2, r4, #16
 80080f2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80080f6:	b2a4      	uxth	r4, r4
 80080f8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80080fc:	f84e 4b04 	str.w	r4, [lr], #4
 8008100:	1417      	asrs	r7, r2, #16
 8008102:	e7e0      	b.n	80080c6 <__mdiff+0xc6>
 8008104:	3e01      	subs	r6, #1
 8008106:	e7ea      	b.n	80080de <__mdiff+0xde>
 8008108:	080092d3 	.word	0x080092d3
 800810c:	080092e4 	.word	0x080092e4

08008110 <__d2b>:
 8008110:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008114:	4689      	mov	r9, r1
 8008116:	2101      	movs	r1, #1
 8008118:	ec57 6b10 	vmov	r6, r7, d0
 800811c:	4690      	mov	r8, r2
 800811e:	f7ff fcd5 	bl	8007acc <_Balloc>
 8008122:	4604      	mov	r4, r0
 8008124:	b930      	cbnz	r0, 8008134 <__d2b+0x24>
 8008126:	4602      	mov	r2, r0
 8008128:	4b25      	ldr	r3, [pc, #148]	; (80081c0 <__d2b+0xb0>)
 800812a:	4826      	ldr	r0, [pc, #152]	; (80081c4 <__d2b+0xb4>)
 800812c:	f240 310a 	movw	r1, #778	; 0x30a
 8008130:	f000 fa70 	bl	8008614 <__assert_func>
 8008134:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008138:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800813c:	bb35      	cbnz	r5, 800818c <__d2b+0x7c>
 800813e:	2e00      	cmp	r6, #0
 8008140:	9301      	str	r3, [sp, #4]
 8008142:	d028      	beq.n	8008196 <__d2b+0x86>
 8008144:	4668      	mov	r0, sp
 8008146:	9600      	str	r6, [sp, #0]
 8008148:	f7ff fd8c 	bl	8007c64 <__lo0bits>
 800814c:	9900      	ldr	r1, [sp, #0]
 800814e:	b300      	cbz	r0, 8008192 <__d2b+0x82>
 8008150:	9a01      	ldr	r2, [sp, #4]
 8008152:	f1c0 0320 	rsb	r3, r0, #32
 8008156:	fa02 f303 	lsl.w	r3, r2, r3
 800815a:	430b      	orrs	r3, r1
 800815c:	40c2      	lsrs	r2, r0
 800815e:	6163      	str	r3, [r4, #20]
 8008160:	9201      	str	r2, [sp, #4]
 8008162:	9b01      	ldr	r3, [sp, #4]
 8008164:	61a3      	str	r3, [r4, #24]
 8008166:	2b00      	cmp	r3, #0
 8008168:	bf14      	ite	ne
 800816a:	2202      	movne	r2, #2
 800816c:	2201      	moveq	r2, #1
 800816e:	6122      	str	r2, [r4, #16]
 8008170:	b1d5      	cbz	r5, 80081a8 <__d2b+0x98>
 8008172:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008176:	4405      	add	r5, r0
 8008178:	f8c9 5000 	str.w	r5, [r9]
 800817c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008180:	f8c8 0000 	str.w	r0, [r8]
 8008184:	4620      	mov	r0, r4
 8008186:	b003      	add	sp, #12
 8008188:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800818c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008190:	e7d5      	b.n	800813e <__d2b+0x2e>
 8008192:	6161      	str	r1, [r4, #20]
 8008194:	e7e5      	b.n	8008162 <__d2b+0x52>
 8008196:	a801      	add	r0, sp, #4
 8008198:	f7ff fd64 	bl	8007c64 <__lo0bits>
 800819c:	9b01      	ldr	r3, [sp, #4]
 800819e:	6163      	str	r3, [r4, #20]
 80081a0:	2201      	movs	r2, #1
 80081a2:	6122      	str	r2, [r4, #16]
 80081a4:	3020      	adds	r0, #32
 80081a6:	e7e3      	b.n	8008170 <__d2b+0x60>
 80081a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80081ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80081b0:	f8c9 0000 	str.w	r0, [r9]
 80081b4:	6918      	ldr	r0, [r3, #16]
 80081b6:	f7ff fd35 	bl	8007c24 <__hi0bits>
 80081ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80081be:	e7df      	b.n	8008180 <__d2b+0x70>
 80081c0:	080092d3 	.word	0x080092d3
 80081c4:	080092e4 	.word	0x080092e4

080081c8 <_calloc_r>:
 80081c8:	b513      	push	{r0, r1, r4, lr}
 80081ca:	434a      	muls	r2, r1
 80081cc:	4611      	mov	r1, r2
 80081ce:	9201      	str	r2, [sp, #4]
 80081d0:	f000 f85a 	bl	8008288 <_malloc_r>
 80081d4:	4604      	mov	r4, r0
 80081d6:	b118      	cbz	r0, 80081e0 <_calloc_r+0x18>
 80081d8:	9a01      	ldr	r2, [sp, #4]
 80081da:	2100      	movs	r1, #0
 80081dc:	f7fe f952 	bl	8006484 <memset>
 80081e0:	4620      	mov	r0, r4
 80081e2:	b002      	add	sp, #8
 80081e4:	bd10      	pop	{r4, pc}
	...

080081e8 <_free_r>:
 80081e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081ea:	2900      	cmp	r1, #0
 80081ec:	d048      	beq.n	8008280 <_free_r+0x98>
 80081ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081f2:	9001      	str	r0, [sp, #4]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f1a1 0404 	sub.w	r4, r1, #4
 80081fa:	bfb8      	it	lt
 80081fc:	18e4      	addlt	r4, r4, r3
 80081fe:	f000 fa65 	bl	80086cc <__malloc_lock>
 8008202:	4a20      	ldr	r2, [pc, #128]	; (8008284 <_free_r+0x9c>)
 8008204:	9801      	ldr	r0, [sp, #4]
 8008206:	6813      	ldr	r3, [r2, #0]
 8008208:	4615      	mov	r5, r2
 800820a:	b933      	cbnz	r3, 800821a <_free_r+0x32>
 800820c:	6063      	str	r3, [r4, #4]
 800820e:	6014      	str	r4, [r2, #0]
 8008210:	b003      	add	sp, #12
 8008212:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008216:	f000 ba5f 	b.w	80086d8 <__malloc_unlock>
 800821a:	42a3      	cmp	r3, r4
 800821c:	d90b      	bls.n	8008236 <_free_r+0x4e>
 800821e:	6821      	ldr	r1, [r4, #0]
 8008220:	1862      	adds	r2, r4, r1
 8008222:	4293      	cmp	r3, r2
 8008224:	bf04      	itt	eq
 8008226:	681a      	ldreq	r2, [r3, #0]
 8008228:	685b      	ldreq	r3, [r3, #4]
 800822a:	6063      	str	r3, [r4, #4]
 800822c:	bf04      	itt	eq
 800822e:	1852      	addeq	r2, r2, r1
 8008230:	6022      	streq	r2, [r4, #0]
 8008232:	602c      	str	r4, [r5, #0]
 8008234:	e7ec      	b.n	8008210 <_free_r+0x28>
 8008236:	461a      	mov	r2, r3
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	b10b      	cbz	r3, 8008240 <_free_r+0x58>
 800823c:	42a3      	cmp	r3, r4
 800823e:	d9fa      	bls.n	8008236 <_free_r+0x4e>
 8008240:	6811      	ldr	r1, [r2, #0]
 8008242:	1855      	adds	r5, r2, r1
 8008244:	42a5      	cmp	r5, r4
 8008246:	d10b      	bne.n	8008260 <_free_r+0x78>
 8008248:	6824      	ldr	r4, [r4, #0]
 800824a:	4421      	add	r1, r4
 800824c:	1854      	adds	r4, r2, r1
 800824e:	42a3      	cmp	r3, r4
 8008250:	6011      	str	r1, [r2, #0]
 8008252:	d1dd      	bne.n	8008210 <_free_r+0x28>
 8008254:	681c      	ldr	r4, [r3, #0]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	6053      	str	r3, [r2, #4]
 800825a:	4421      	add	r1, r4
 800825c:	6011      	str	r1, [r2, #0]
 800825e:	e7d7      	b.n	8008210 <_free_r+0x28>
 8008260:	d902      	bls.n	8008268 <_free_r+0x80>
 8008262:	230c      	movs	r3, #12
 8008264:	6003      	str	r3, [r0, #0]
 8008266:	e7d3      	b.n	8008210 <_free_r+0x28>
 8008268:	6825      	ldr	r5, [r4, #0]
 800826a:	1961      	adds	r1, r4, r5
 800826c:	428b      	cmp	r3, r1
 800826e:	bf04      	itt	eq
 8008270:	6819      	ldreq	r1, [r3, #0]
 8008272:	685b      	ldreq	r3, [r3, #4]
 8008274:	6063      	str	r3, [r4, #4]
 8008276:	bf04      	itt	eq
 8008278:	1949      	addeq	r1, r1, r5
 800827a:	6021      	streq	r1, [r4, #0]
 800827c:	6054      	str	r4, [r2, #4]
 800827e:	e7c7      	b.n	8008210 <_free_r+0x28>
 8008280:	b003      	add	sp, #12
 8008282:	bd30      	pop	{r4, r5, pc}
 8008284:	200001fc 	.word	0x200001fc

08008288 <_malloc_r>:
 8008288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800828a:	1ccd      	adds	r5, r1, #3
 800828c:	f025 0503 	bic.w	r5, r5, #3
 8008290:	3508      	adds	r5, #8
 8008292:	2d0c      	cmp	r5, #12
 8008294:	bf38      	it	cc
 8008296:	250c      	movcc	r5, #12
 8008298:	2d00      	cmp	r5, #0
 800829a:	4606      	mov	r6, r0
 800829c:	db01      	blt.n	80082a2 <_malloc_r+0x1a>
 800829e:	42a9      	cmp	r1, r5
 80082a0:	d903      	bls.n	80082aa <_malloc_r+0x22>
 80082a2:	230c      	movs	r3, #12
 80082a4:	6033      	str	r3, [r6, #0]
 80082a6:	2000      	movs	r0, #0
 80082a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082aa:	f000 fa0f 	bl	80086cc <__malloc_lock>
 80082ae:	4921      	ldr	r1, [pc, #132]	; (8008334 <_malloc_r+0xac>)
 80082b0:	680a      	ldr	r2, [r1, #0]
 80082b2:	4614      	mov	r4, r2
 80082b4:	b99c      	cbnz	r4, 80082de <_malloc_r+0x56>
 80082b6:	4f20      	ldr	r7, [pc, #128]	; (8008338 <_malloc_r+0xb0>)
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	b923      	cbnz	r3, 80082c6 <_malloc_r+0x3e>
 80082bc:	4621      	mov	r1, r4
 80082be:	4630      	mov	r0, r6
 80082c0:	f000 f998 	bl	80085f4 <_sbrk_r>
 80082c4:	6038      	str	r0, [r7, #0]
 80082c6:	4629      	mov	r1, r5
 80082c8:	4630      	mov	r0, r6
 80082ca:	f000 f993 	bl	80085f4 <_sbrk_r>
 80082ce:	1c43      	adds	r3, r0, #1
 80082d0:	d123      	bne.n	800831a <_malloc_r+0x92>
 80082d2:	230c      	movs	r3, #12
 80082d4:	6033      	str	r3, [r6, #0]
 80082d6:	4630      	mov	r0, r6
 80082d8:	f000 f9fe 	bl	80086d8 <__malloc_unlock>
 80082dc:	e7e3      	b.n	80082a6 <_malloc_r+0x1e>
 80082de:	6823      	ldr	r3, [r4, #0]
 80082e0:	1b5b      	subs	r3, r3, r5
 80082e2:	d417      	bmi.n	8008314 <_malloc_r+0x8c>
 80082e4:	2b0b      	cmp	r3, #11
 80082e6:	d903      	bls.n	80082f0 <_malloc_r+0x68>
 80082e8:	6023      	str	r3, [r4, #0]
 80082ea:	441c      	add	r4, r3
 80082ec:	6025      	str	r5, [r4, #0]
 80082ee:	e004      	b.n	80082fa <_malloc_r+0x72>
 80082f0:	6863      	ldr	r3, [r4, #4]
 80082f2:	42a2      	cmp	r2, r4
 80082f4:	bf0c      	ite	eq
 80082f6:	600b      	streq	r3, [r1, #0]
 80082f8:	6053      	strne	r3, [r2, #4]
 80082fa:	4630      	mov	r0, r6
 80082fc:	f000 f9ec 	bl	80086d8 <__malloc_unlock>
 8008300:	f104 000b 	add.w	r0, r4, #11
 8008304:	1d23      	adds	r3, r4, #4
 8008306:	f020 0007 	bic.w	r0, r0, #7
 800830a:	1ac2      	subs	r2, r0, r3
 800830c:	d0cc      	beq.n	80082a8 <_malloc_r+0x20>
 800830e:	1a1b      	subs	r3, r3, r0
 8008310:	50a3      	str	r3, [r4, r2]
 8008312:	e7c9      	b.n	80082a8 <_malloc_r+0x20>
 8008314:	4622      	mov	r2, r4
 8008316:	6864      	ldr	r4, [r4, #4]
 8008318:	e7cc      	b.n	80082b4 <_malloc_r+0x2c>
 800831a:	1cc4      	adds	r4, r0, #3
 800831c:	f024 0403 	bic.w	r4, r4, #3
 8008320:	42a0      	cmp	r0, r4
 8008322:	d0e3      	beq.n	80082ec <_malloc_r+0x64>
 8008324:	1a21      	subs	r1, r4, r0
 8008326:	4630      	mov	r0, r6
 8008328:	f000 f964 	bl	80085f4 <_sbrk_r>
 800832c:	3001      	adds	r0, #1
 800832e:	d1dd      	bne.n	80082ec <_malloc_r+0x64>
 8008330:	e7cf      	b.n	80082d2 <_malloc_r+0x4a>
 8008332:	bf00      	nop
 8008334:	200001fc 	.word	0x200001fc
 8008338:	20000200 	.word	0x20000200

0800833c <__ssputs_r>:
 800833c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008340:	688e      	ldr	r6, [r1, #8]
 8008342:	429e      	cmp	r6, r3
 8008344:	4682      	mov	sl, r0
 8008346:	460c      	mov	r4, r1
 8008348:	4690      	mov	r8, r2
 800834a:	461f      	mov	r7, r3
 800834c:	d838      	bhi.n	80083c0 <__ssputs_r+0x84>
 800834e:	898a      	ldrh	r2, [r1, #12]
 8008350:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008354:	d032      	beq.n	80083bc <__ssputs_r+0x80>
 8008356:	6825      	ldr	r5, [r4, #0]
 8008358:	6909      	ldr	r1, [r1, #16]
 800835a:	eba5 0901 	sub.w	r9, r5, r1
 800835e:	6965      	ldr	r5, [r4, #20]
 8008360:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008364:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008368:	3301      	adds	r3, #1
 800836a:	444b      	add	r3, r9
 800836c:	106d      	asrs	r5, r5, #1
 800836e:	429d      	cmp	r5, r3
 8008370:	bf38      	it	cc
 8008372:	461d      	movcc	r5, r3
 8008374:	0553      	lsls	r3, r2, #21
 8008376:	d531      	bpl.n	80083dc <__ssputs_r+0xa0>
 8008378:	4629      	mov	r1, r5
 800837a:	f7ff ff85 	bl	8008288 <_malloc_r>
 800837e:	4606      	mov	r6, r0
 8008380:	b950      	cbnz	r0, 8008398 <__ssputs_r+0x5c>
 8008382:	230c      	movs	r3, #12
 8008384:	f8ca 3000 	str.w	r3, [sl]
 8008388:	89a3      	ldrh	r3, [r4, #12]
 800838a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800838e:	81a3      	strh	r3, [r4, #12]
 8008390:	f04f 30ff 	mov.w	r0, #4294967295
 8008394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008398:	6921      	ldr	r1, [r4, #16]
 800839a:	464a      	mov	r2, r9
 800839c:	f7ff fb88 	bl	8007ab0 <memcpy>
 80083a0:	89a3      	ldrh	r3, [r4, #12]
 80083a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80083a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083aa:	81a3      	strh	r3, [r4, #12]
 80083ac:	6126      	str	r6, [r4, #16]
 80083ae:	6165      	str	r5, [r4, #20]
 80083b0:	444e      	add	r6, r9
 80083b2:	eba5 0509 	sub.w	r5, r5, r9
 80083b6:	6026      	str	r6, [r4, #0]
 80083b8:	60a5      	str	r5, [r4, #8]
 80083ba:	463e      	mov	r6, r7
 80083bc:	42be      	cmp	r6, r7
 80083be:	d900      	bls.n	80083c2 <__ssputs_r+0x86>
 80083c0:	463e      	mov	r6, r7
 80083c2:	4632      	mov	r2, r6
 80083c4:	6820      	ldr	r0, [r4, #0]
 80083c6:	4641      	mov	r1, r8
 80083c8:	f000 f966 	bl	8008698 <memmove>
 80083cc:	68a3      	ldr	r3, [r4, #8]
 80083ce:	6822      	ldr	r2, [r4, #0]
 80083d0:	1b9b      	subs	r3, r3, r6
 80083d2:	4432      	add	r2, r6
 80083d4:	60a3      	str	r3, [r4, #8]
 80083d6:	6022      	str	r2, [r4, #0]
 80083d8:	2000      	movs	r0, #0
 80083da:	e7db      	b.n	8008394 <__ssputs_r+0x58>
 80083dc:	462a      	mov	r2, r5
 80083de:	f000 f981 	bl	80086e4 <_realloc_r>
 80083e2:	4606      	mov	r6, r0
 80083e4:	2800      	cmp	r0, #0
 80083e6:	d1e1      	bne.n	80083ac <__ssputs_r+0x70>
 80083e8:	6921      	ldr	r1, [r4, #16]
 80083ea:	4650      	mov	r0, sl
 80083ec:	f7ff fefc 	bl	80081e8 <_free_r>
 80083f0:	e7c7      	b.n	8008382 <__ssputs_r+0x46>
	...

080083f4 <_svfiprintf_r>:
 80083f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f8:	4698      	mov	r8, r3
 80083fa:	898b      	ldrh	r3, [r1, #12]
 80083fc:	061b      	lsls	r3, r3, #24
 80083fe:	b09d      	sub	sp, #116	; 0x74
 8008400:	4607      	mov	r7, r0
 8008402:	460d      	mov	r5, r1
 8008404:	4614      	mov	r4, r2
 8008406:	d50e      	bpl.n	8008426 <_svfiprintf_r+0x32>
 8008408:	690b      	ldr	r3, [r1, #16]
 800840a:	b963      	cbnz	r3, 8008426 <_svfiprintf_r+0x32>
 800840c:	2140      	movs	r1, #64	; 0x40
 800840e:	f7ff ff3b 	bl	8008288 <_malloc_r>
 8008412:	6028      	str	r0, [r5, #0]
 8008414:	6128      	str	r0, [r5, #16]
 8008416:	b920      	cbnz	r0, 8008422 <_svfiprintf_r+0x2e>
 8008418:	230c      	movs	r3, #12
 800841a:	603b      	str	r3, [r7, #0]
 800841c:	f04f 30ff 	mov.w	r0, #4294967295
 8008420:	e0d1      	b.n	80085c6 <_svfiprintf_r+0x1d2>
 8008422:	2340      	movs	r3, #64	; 0x40
 8008424:	616b      	str	r3, [r5, #20]
 8008426:	2300      	movs	r3, #0
 8008428:	9309      	str	r3, [sp, #36]	; 0x24
 800842a:	2320      	movs	r3, #32
 800842c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008430:	f8cd 800c 	str.w	r8, [sp, #12]
 8008434:	2330      	movs	r3, #48	; 0x30
 8008436:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80085e0 <_svfiprintf_r+0x1ec>
 800843a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800843e:	f04f 0901 	mov.w	r9, #1
 8008442:	4623      	mov	r3, r4
 8008444:	469a      	mov	sl, r3
 8008446:	f813 2b01 	ldrb.w	r2, [r3], #1
 800844a:	b10a      	cbz	r2, 8008450 <_svfiprintf_r+0x5c>
 800844c:	2a25      	cmp	r2, #37	; 0x25
 800844e:	d1f9      	bne.n	8008444 <_svfiprintf_r+0x50>
 8008450:	ebba 0b04 	subs.w	fp, sl, r4
 8008454:	d00b      	beq.n	800846e <_svfiprintf_r+0x7a>
 8008456:	465b      	mov	r3, fp
 8008458:	4622      	mov	r2, r4
 800845a:	4629      	mov	r1, r5
 800845c:	4638      	mov	r0, r7
 800845e:	f7ff ff6d 	bl	800833c <__ssputs_r>
 8008462:	3001      	adds	r0, #1
 8008464:	f000 80aa 	beq.w	80085bc <_svfiprintf_r+0x1c8>
 8008468:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800846a:	445a      	add	r2, fp
 800846c:	9209      	str	r2, [sp, #36]	; 0x24
 800846e:	f89a 3000 	ldrb.w	r3, [sl]
 8008472:	2b00      	cmp	r3, #0
 8008474:	f000 80a2 	beq.w	80085bc <_svfiprintf_r+0x1c8>
 8008478:	2300      	movs	r3, #0
 800847a:	f04f 32ff 	mov.w	r2, #4294967295
 800847e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008482:	f10a 0a01 	add.w	sl, sl, #1
 8008486:	9304      	str	r3, [sp, #16]
 8008488:	9307      	str	r3, [sp, #28]
 800848a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800848e:	931a      	str	r3, [sp, #104]	; 0x68
 8008490:	4654      	mov	r4, sl
 8008492:	2205      	movs	r2, #5
 8008494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008498:	4851      	ldr	r0, [pc, #324]	; (80085e0 <_svfiprintf_r+0x1ec>)
 800849a:	f7f7 fea9 	bl	80001f0 <memchr>
 800849e:	9a04      	ldr	r2, [sp, #16]
 80084a0:	b9d8      	cbnz	r0, 80084da <_svfiprintf_r+0xe6>
 80084a2:	06d0      	lsls	r0, r2, #27
 80084a4:	bf44      	itt	mi
 80084a6:	2320      	movmi	r3, #32
 80084a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084ac:	0711      	lsls	r1, r2, #28
 80084ae:	bf44      	itt	mi
 80084b0:	232b      	movmi	r3, #43	; 0x2b
 80084b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084b6:	f89a 3000 	ldrb.w	r3, [sl]
 80084ba:	2b2a      	cmp	r3, #42	; 0x2a
 80084bc:	d015      	beq.n	80084ea <_svfiprintf_r+0xf6>
 80084be:	9a07      	ldr	r2, [sp, #28]
 80084c0:	4654      	mov	r4, sl
 80084c2:	2000      	movs	r0, #0
 80084c4:	f04f 0c0a 	mov.w	ip, #10
 80084c8:	4621      	mov	r1, r4
 80084ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084ce:	3b30      	subs	r3, #48	; 0x30
 80084d0:	2b09      	cmp	r3, #9
 80084d2:	d94e      	bls.n	8008572 <_svfiprintf_r+0x17e>
 80084d4:	b1b0      	cbz	r0, 8008504 <_svfiprintf_r+0x110>
 80084d6:	9207      	str	r2, [sp, #28]
 80084d8:	e014      	b.n	8008504 <_svfiprintf_r+0x110>
 80084da:	eba0 0308 	sub.w	r3, r0, r8
 80084de:	fa09 f303 	lsl.w	r3, r9, r3
 80084e2:	4313      	orrs	r3, r2
 80084e4:	9304      	str	r3, [sp, #16]
 80084e6:	46a2      	mov	sl, r4
 80084e8:	e7d2      	b.n	8008490 <_svfiprintf_r+0x9c>
 80084ea:	9b03      	ldr	r3, [sp, #12]
 80084ec:	1d19      	adds	r1, r3, #4
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	9103      	str	r1, [sp, #12]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	bfbb      	ittet	lt
 80084f6:	425b      	neglt	r3, r3
 80084f8:	f042 0202 	orrlt.w	r2, r2, #2
 80084fc:	9307      	strge	r3, [sp, #28]
 80084fe:	9307      	strlt	r3, [sp, #28]
 8008500:	bfb8      	it	lt
 8008502:	9204      	strlt	r2, [sp, #16]
 8008504:	7823      	ldrb	r3, [r4, #0]
 8008506:	2b2e      	cmp	r3, #46	; 0x2e
 8008508:	d10c      	bne.n	8008524 <_svfiprintf_r+0x130>
 800850a:	7863      	ldrb	r3, [r4, #1]
 800850c:	2b2a      	cmp	r3, #42	; 0x2a
 800850e:	d135      	bne.n	800857c <_svfiprintf_r+0x188>
 8008510:	9b03      	ldr	r3, [sp, #12]
 8008512:	1d1a      	adds	r2, r3, #4
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	9203      	str	r2, [sp, #12]
 8008518:	2b00      	cmp	r3, #0
 800851a:	bfb8      	it	lt
 800851c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008520:	3402      	adds	r4, #2
 8008522:	9305      	str	r3, [sp, #20]
 8008524:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80085f0 <_svfiprintf_r+0x1fc>
 8008528:	7821      	ldrb	r1, [r4, #0]
 800852a:	2203      	movs	r2, #3
 800852c:	4650      	mov	r0, sl
 800852e:	f7f7 fe5f 	bl	80001f0 <memchr>
 8008532:	b140      	cbz	r0, 8008546 <_svfiprintf_r+0x152>
 8008534:	2340      	movs	r3, #64	; 0x40
 8008536:	eba0 000a 	sub.w	r0, r0, sl
 800853a:	fa03 f000 	lsl.w	r0, r3, r0
 800853e:	9b04      	ldr	r3, [sp, #16]
 8008540:	4303      	orrs	r3, r0
 8008542:	3401      	adds	r4, #1
 8008544:	9304      	str	r3, [sp, #16]
 8008546:	f814 1b01 	ldrb.w	r1, [r4], #1
 800854a:	4826      	ldr	r0, [pc, #152]	; (80085e4 <_svfiprintf_r+0x1f0>)
 800854c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008550:	2206      	movs	r2, #6
 8008552:	f7f7 fe4d 	bl	80001f0 <memchr>
 8008556:	2800      	cmp	r0, #0
 8008558:	d038      	beq.n	80085cc <_svfiprintf_r+0x1d8>
 800855a:	4b23      	ldr	r3, [pc, #140]	; (80085e8 <_svfiprintf_r+0x1f4>)
 800855c:	bb1b      	cbnz	r3, 80085a6 <_svfiprintf_r+0x1b2>
 800855e:	9b03      	ldr	r3, [sp, #12]
 8008560:	3307      	adds	r3, #7
 8008562:	f023 0307 	bic.w	r3, r3, #7
 8008566:	3308      	adds	r3, #8
 8008568:	9303      	str	r3, [sp, #12]
 800856a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800856c:	4433      	add	r3, r6
 800856e:	9309      	str	r3, [sp, #36]	; 0x24
 8008570:	e767      	b.n	8008442 <_svfiprintf_r+0x4e>
 8008572:	fb0c 3202 	mla	r2, ip, r2, r3
 8008576:	460c      	mov	r4, r1
 8008578:	2001      	movs	r0, #1
 800857a:	e7a5      	b.n	80084c8 <_svfiprintf_r+0xd4>
 800857c:	2300      	movs	r3, #0
 800857e:	3401      	adds	r4, #1
 8008580:	9305      	str	r3, [sp, #20]
 8008582:	4619      	mov	r1, r3
 8008584:	f04f 0c0a 	mov.w	ip, #10
 8008588:	4620      	mov	r0, r4
 800858a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800858e:	3a30      	subs	r2, #48	; 0x30
 8008590:	2a09      	cmp	r2, #9
 8008592:	d903      	bls.n	800859c <_svfiprintf_r+0x1a8>
 8008594:	2b00      	cmp	r3, #0
 8008596:	d0c5      	beq.n	8008524 <_svfiprintf_r+0x130>
 8008598:	9105      	str	r1, [sp, #20]
 800859a:	e7c3      	b.n	8008524 <_svfiprintf_r+0x130>
 800859c:	fb0c 2101 	mla	r1, ip, r1, r2
 80085a0:	4604      	mov	r4, r0
 80085a2:	2301      	movs	r3, #1
 80085a4:	e7f0      	b.n	8008588 <_svfiprintf_r+0x194>
 80085a6:	ab03      	add	r3, sp, #12
 80085a8:	9300      	str	r3, [sp, #0]
 80085aa:	462a      	mov	r2, r5
 80085ac:	4b0f      	ldr	r3, [pc, #60]	; (80085ec <_svfiprintf_r+0x1f8>)
 80085ae:	a904      	add	r1, sp, #16
 80085b0:	4638      	mov	r0, r7
 80085b2:	f7fe f80f 	bl	80065d4 <_printf_float>
 80085b6:	1c42      	adds	r2, r0, #1
 80085b8:	4606      	mov	r6, r0
 80085ba:	d1d6      	bne.n	800856a <_svfiprintf_r+0x176>
 80085bc:	89ab      	ldrh	r3, [r5, #12]
 80085be:	065b      	lsls	r3, r3, #25
 80085c0:	f53f af2c 	bmi.w	800841c <_svfiprintf_r+0x28>
 80085c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085c6:	b01d      	add	sp, #116	; 0x74
 80085c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085cc:	ab03      	add	r3, sp, #12
 80085ce:	9300      	str	r3, [sp, #0]
 80085d0:	462a      	mov	r2, r5
 80085d2:	4b06      	ldr	r3, [pc, #24]	; (80085ec <_svfiprintf_r+0x1f8>)
 80085d4:	a904      	add	r1, sp, #16
 80085d6:	4638      	mov	r0, r7
 80085d8:	f7fe faa0 	bl	8006b1c <_printf_i>
 80085dc:	e7eb      	b.n	80085b6 <_svfiprintf_r+0x1c2>
 80085de:	bf00      	nop
 80085e0:	08009444 	.word	0x08009444
 80085e4:	0800944e 	.word	0x0800944e
 80085e8:	080065d5 	.word	0x080065d5
 80085ec:	0800833d 	.word	0x0800833d
 80085f0:	0800944a 	.word	0x0800944a

080085f4 <_sbrk_r>:
 80085f4:	b538      	push	{r3, r4, r5, lr}
 80085f6:	4d06      	ldr	r5, [pc, #24]	; (8008610 <_sbrk_r+0x1c>)
 80085f8:	2300      	movs	r3, #0
 80085fa:	4604      	mov	r4, r0
 80085fc:	4608      	mov	r0, r1
 80085fe:	602b      	str	r3, [r5, #0]
 8008600:	f7fa faae 	bl	8002b60 <_sbrk>
 8008604:	1c43      	adds	r3, r0, #1
 8008606:	d102      	bne.n	800860e <_sbrk_r+0x1a>
 8008608:	682b      	ldr	r3, [r5, #0]
 800860a:	b103      	cbz	r3, 800860e <_sbrk_r+0x1a>
 800860c:	6023      	str	r3, [r4, #0]
 800860e:	bd38      	pop	{r3, r4, r5, pc}
 8008610:	200002e0 	.word	0x200002e0

08008614 <__assert_func>:
 8008614:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008616:	4614      	mov	r4, r2
 8008618:	461a      	mov	r2, r3
 800861a:	4b09      	ldr	r3, [pc, #36]	; (8008640 <__assert_func+0x2c>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4605      	mov	r5, r0
 8008620:	68d8      	ldr	r0, [r3, #12]
 8008622:	b14c      	cbz	r4, 8008638 <__assert_func+0x24>
 8008624:	4b07      	ldr	r3, [pc, #28]	; (8008644 <__assert_func+0x30>)
 8008626:	9100      	str	r1, [sp, #0]
 8008628:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800862c:	4906      	ldr	r1, [pc, #24]	; (8008648 <__assert_func+0x34>)
 800862e:	462b      	mov	r3, r5
 8008630:	f000 f80e 	bl	8008650 <fiprintf>
 8008634:	f000 faa4 	bl	8008b80 <abort>
 8008638:	4b04      	ldr	r3, [pc, #16]	; (800864c <__assert_func+0x38>)
 800863a:	461c      	mov	r4, r3
 800863c:	e7f3      	b.n	8008626 <__assert_func+0x12>
 800863e:	bf00      	nop
 8008640:	2000000c 	.word	0x2000000c
 8008644:	08009455 	.word	0x08009455
 8008648:	08009462 	.word	0x08009462
 800864c:	08009490 	.word	0x08009490

08008650 <fiprintf>:
 8008650:	b40e      	push	{r1, r2, r3}
 8008652:	b503      	push	{r0, r1, lr}
 8008654:	4601      	mov	r1, r0
 8008656:	ab03      	add	r3, sp, #12
 8008658:	4805      	ldr	r0, [pc, #20]	; (8008670 <fiprintf+0x20>)
 800865a:	f853 2b04 	ldr.w	r2, [r3], #4
 800865e:	6800      	ldr	r0, [r0, #0]
 8008660:	9301      	str	r3, [sp, #4]
 8008662:	f000 f88f 	bl	8008784 <_vfiprintf_r>
 8008666:	b002      	add	sp, #8
 8008668:	f85d eb04 	ldr.w	lr, [sp], #4
 800866c:	b003      	add	sp, #12
 800866e:	4770      	bx	lr
 8008670:	2000000c 	.word	0x2000000c

08008674 <__ascii_mbtowc>:
 8008674:	b082      	sub	sp, #8
 8008676:	b901      	cbnz	r1, 800867a <__ascii_mbtowc+0x6>
 8008678:	a901      	add	r1, sp, #4
 800867a:	b142      	cbz	r2, 800868e <__ascii_mbtowc+0x1a>
 800867c:	b14b      	cbz	r3, 8008692 <__ascii_mbtowc+0x1e>
 800867e:	7813      	ldrb	r3, [r2, #0]
 8008680:	600b      	str	r3, [r1, #0]
 8008682:	7812      	ldrb	r2, [r2, #0]
 8008684:	1e10      	subs	r0, r2, #0
 8008686:	bf18      	it	ne
 8008688:	2001      	movne	r0, #1
 800868a:	b002      	add	sp, #8
 800868c:	4770      	bx	lr
 800868e:	4610      	mov	r0, r2
 8008690:	e7fb      	b.n	800868a <__ascii_mbtowc+0x16>
 8008692:	f06f 0001 	mvn.w	r0, #1
 8008696:	e7f8      	b.n	800868a <__ascii_mbtowc+0x16>

08008698 <memmove>:
 8008698:	4288      	cmp	r0, r1
 800869a:	b510      	push	{r4, lr}
 800869c:	eb01 0402 	add.w	r4, r1, r2
 80086a0:	d902      	bls.n	80086a8 <memmove+0x10>
 80086a2:	4284      	cmp	r4, r0
 80086a4:	4623      	mov	r3, r4
 80086a6:	d807      	bhi.n	80086b8 <memmove+0x20>
 80086a8:	1e43      	subs	r3, r0, #1
 80086aa:	42a1      	cmp	r1, r4
 80086ac:	d008      	beq.n	80086c0 <memmove+0x28>
 80086ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086b6:	e7f8      	b.n	80086aa <memmove+0x12>
 80086b8:	4402      	add	r2, r0
 80086ba:	4601      	mov	r1, r0
 80086bc:	428a      	cmp	r2, r1
 80086be:	d100      	bne.n	80086c2 <memmove+0x2a>
 80086c0:	bd10      	pop	{r4, pc}
 80086c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086ca:	e7f7      	b.n	80086bc <memmove+0x24>

080086cc <__malloc_lock>:
 80086cc:	4801      	ldr	r0, [pc, #4]	; (80086d4 <__malloc_lock+0x8>)
 80086ce:	f000 bc17 	b.w	8008f00 <__retarget_lock_acquire_recursive>
 80086d2:	bf00      	nop
 80086d4:	200002e8 	.word	0x200002e8

080086d8 <__malloc_unlock>:
 80086d8:	4801      	ldr	r0, [pc, #4]	; (80086e0 <__malloc_unlock+0x8>)
 80086da:	f000 bc12 	b.w	8008f02 <__retarget_lock_release_recursive>
 80086de:	bf00      	nop
 80086e0:	200002e8 	.word	0x200002e8

080086e4 <_realloc_r>:
 80086e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e6:	4607      	mov	r7, r0
 80086e8:	4614      	mov	r4, r2
 80086ea:	460e      	mov	r6, r1
 80086ec:	b921      	cbnz	r1, 80086f8 <_realloc_r+0x14>
 80086ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80086f2:	4611      	mov	r1, r2
 80086f4:	f7ff bdc8 	b.w	8008288 <_malloc_r>
 80086f8:	b922      	cbnz	r2, 8008704 <_realloc_r+0x20>
 80086fa:	f7ff fd75 	bl	80081e8 <_free_r>
 80086fe:	4625      	mov	r5, r4
 8008700:	4628      	mov	r0, r5
 8008702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008704:	f000 fc62 	bl	8008fcc <_malloc_usable_size_r>
 8008708:	42a0      	cmp	r0, r4
 800870a:	d20f      	bcs.n	800872c <_realloc_r+0x48>
 800870c:	4621      	mov	r1, r4
 800870e:	4638      	mov	r0, r7
 8008710:	f7ff fdba 	bl	8008288 <_malloc_r>
 8008714:	4605      	mov	r5, r0
 8008716:	2800      	cmp	r0, #0
 8008718:	d0f2      	beq.n	8008700 <_realloc_r+0x1c>
 800871a:	4631      	mov	r1, r6
 800871c:	4622      	mov	r2, r4
 800871e:	f7ff f9c7 	bl	8007ab0 <memcpy>
 8008722:	4631      	mov	r1, r6
 8008724:	4638      	mov	r0, r7
 8008726:	f7ff fd5f 	bl	80081e8 <_free_r>
 800872a:	e7e9      	b.n	8008700 <_realloc_r+0x1c>
 800872c:	4635      	mov	r5, r6
 800872e:	e7e7      	b.n	8008700 <_realloc_r+0x1c>

08008730 <__sfputc_r>:
 8008730:	6893      	ldr	r3, [r2, #8]
 8008732:	3b01      	subs	r3, #1
 8008734:	2b00      	cmp	r3, #0
 8008736:	b410      	push	{r4}
 8008738:	6093      	str	r3, [r2, #8]
 800873a:	da08      	bge.n	800874e <__sfputc_r+0x1e>
 800873c:	6994      	ldr	r4, [r2, #24]
 800873e:	42a3      	cmp	r3, r4
 8008740:	db01      	blt.n	8008746 <__sfputc_r+0x16>
 8008742:	290a      	cmp	r1, #10
 8008744:	d103      	bne.n	800874e <__sfputc_r+0x1e>
 8008746:	f85d 4b04 	ldr.w	r4, [sp], #4
 800874a:	f000 b94b 	b.w	80089e4 <__swbuf_r>
 800874e:	6813      	ldr	r3, [r2, #0]
 8008750:	1c58      	adds	r0, r3, #1
 8008752:	6010      	str	r0, [r2, #0]
 8008754:	7019      	strb	r1, [r3, #0]
 8008756:	4608      	mov	r0, r1
 8008758:	f85d 4b04 	ldr.w	r4, [sp], #4
 800875c:	4770      	bx	lr

0800875e <__sfputs_r>:
 800875e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008760:	4606      	mov	r6, r0
 8008762:	460f      	mov	r7, r1
 8008764:	4614      	mov	r4, r2
 8008766:	18d5      	adds	r5, r2, r3
 8008768:	42ac      	cmp	r4, r5
 800876a:	d101      	bne.n	8008770 <__sfputs_r+0x12>
 800876c:	2000      	movs	r0, #0
 800876e:	e007      	b.n	8008780 <__sfputs_r+0x22>
 8008770:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008774:	463a      	mov	r2, r7
 8008776:	4630      	mov	r0, r6
 8008778:	f7ff ffda 	bl	8008730 <__sfputc_r>
 800877c:	1c43      	adds	r3, r0, #1
 800877e:	d1f3      	bne.n	8008768 <__sfputs_r+0xa>
 8008780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008784 <_vfiprintf_r>:
 8008784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008788:	460d      	mov	r5, r1
 800878a:	b09d      	sub	sp, #116	; 0x74
 800878c:	4614      	mov	r4, r2
 800878e:	4698      	mov	r8, r3
 8008790:	4606      	mov	r6, r0
 8008792:	b118      	cbz	r0, 800879c <_vfiprintf_r+0x18>
 8008794:	6983      	ldr	r3, [r0, #24]
 8008796:	b90b      	cbnz	r3, 800879c <_vfiprintf_r+0x18>
 8008798:	f000 fb14 	bl	8008dc4 <__sinit>
 800879c:	4b89      	ldr	r3, [pc, #548]	; (80089c4 <_vfiprintf_r+0x240>)
 800879e:	429d      	cmp	r5, r3
 80087a0:	d11b      	bne.n	80087da <_vfiprintf_r+0x56>
 80087a2:	6875      	ldr	r5, [r6, #4]
 80087a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087a6:	07d9      	lsls	r1, r3, #31
 80087a8:	d405      	bmi.n	80087b6 <_vfiprintf_r+0x32>
 80087aa:	89ab      	ldrh	r3, [r5, #12]
 80087ac:	059a      	lsls	r2, r3, #22
 80087ae:	d402      	bmi.n	80087b6 <_vfiprintf_r+0x32>
 80087b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087b2:	f000 fba5 	bl	8008f00 <__retarget_lock_acquire_recursive>
 80087b6:	89ab      	ldrh	r3, [r5, #12]
 80087b8:	071b      	lsls	r3, r3, #28
 80087ba:	d501      	bpl.n	80087c0 <_vfiprintf_r+0x3c>
 80087bc:	692b      	ldr	r3, [r5, #16]
 80087be:	b9eb      	cbnz	r3, 80087fc <_vfiprintf_r+0x78>
 80087c0:	4629      	mov	r1, r5
 80087c2:	4630      	mov	r0, r6
 80087c4:	f000 f96e 	bl	8008aa4 <__swsetup_r>
 80087c8:	b1c0      	cbz	r0, 80087fc <_vfiprintf_r+0x78>
 80087ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087cc:	07dc      	lsls	r4, r3, #31
 80087ce:	d50e      	bpl.n	80087ee <_vfiprintf_r+0x6a>
 80087d0:	f04f 30ff 	mov.w	r0, #4294967295
 80087d4:	b01d      	add	sp, #116	; 0x74
 80087d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087da:	4b7b      	ldr	r3, [pc, #492]	; (80089c8 <_vfiprintf_r+0x244>)
 80087dc:	429d      	cmp	r5, r3
 80087de:	d101      	bne.n	80087e4 <_vfiprintf_r+0x60>
 80087e0:	68b5      	ldr	r5, [r6, #8]
 80087e2:	e7df      	b.n	80087a4 <_vfiprintf_r+0x20>
 80087e4:	4b79      	ldr	r3, [pc, #484]	; (80089cc <_vfiprintf_r+0x248>)
 80087e6:	429d      	cmp	r5, r3
 80087e8:	bf08      	it	eq
 80087ea:	68f5      	ldreq	r5, [r6, #12]
 80087ec:	e7da      	b.n	80087a4 <_vfiprintf_r+0x20>
 80087ee:	89ab      	ldrh	r3, [r5, #12]
 80087f0:	0598      	lsls	r0, r3, #22
 80087f2:	d4ed      	bmi.n	80087d0 <_vfiprintf_r+0x4c>
 80087f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087f6:	f000 fb84 	bl	8008f02 <__retarget_lock_release_recursive>
 80087fa:	e7e9      	b.n	80087d0 <_vfiprintf_r+0x4c>
 80087fc:	2300      	movs	r3, #0
 80087fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008800:	2320      	movs	r3, #32
 8008802:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008806:	f8cd 800c 	str.w	r8, [sp, #12]
 800880a:	2330      	movs	r3, #48	; 0x30
 800880c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80089d0 <_vfiprintf_r+0x24c>
 8008810:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008814:	f04f 0901 	mov.w	r9, #1
 8008818:	4623      	mov	r3, r4
 800881a:	469a      	mov	sl, r3
 800881c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008820:	b10a      	cbz	r2, 8008826 <_vfiprintf_r+0xa2>
 8008822:	2a25      	cmp	r2, #37	; 0x25
 8008824:	d1f9      	bne.n	800881a <_vfiprintf_r+0x96>
 8008826:	ebba 0b04 	subs.w	fp, sl, r4
 800882a:	d00b      	beq.n	8008844 <_vfiprintf_r+0xc0>
 800882c:	465b      	mov	r3, fp
 800882e:	4622      	mov	r2, r4
 8008830:	4629      	mov	r1, r5
 8008832:	4630      	mov	r0, r6
 8008834:	f7ff ff93 	bl	800875e <__sfputs_r>
 8008838:	3001      	adds	r0, #1
 800883a:	f000 80aa 	beq.w	8008992 <_vfiprintf_r+0x20e>
 800883e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008840:	445a      	add	r2, fp
 8008842:	9209      	str	r2, [sp, #36]	; 0x24
 8008844:	f89a 3000 	ldrb.w	r3, [sl]
 8008848:	2b00      	cmp	r3, #0
 800884a:	f000 80a2 	beq.w	8008992 <_vfiprintf_r+0x20e>
 800884e:	2300      	movs	r3, #0
 8008850:	f04f 32ff 	mov.w	r2, #4294967295
 8008854:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008858:	f10a 0a01 	add.w	sl, sl, #1
 800885c:	9304      	str	r3, [sp, #16]
 800885e:	9307      	str	r3, [sp, #28]
 8008860:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008864:	931a      	str	r3, [sp, #104]	; 0x68
 8008866:	4654      	mov	r4, sl
 8008868:	2205      	movs	r2, #5
 800886a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800886e:	4858      	ldr	r0, [pc, #352]	; (80089d0 <_vfiprintf_r+0x24c>)
 8008870:	f7f7 fcbe 	bl	80001f0 <memchr>
 8008874:	9a04      	ldr	r2, [sp, #16]
 8008876:	b9d8      	cbnz	r0, 80088b0 <_vfiprintf_r+0x12c>
 8008878:	06d1      	lsls	r1, r2, #27
 800887a:	bf44      	itt	mi
 800887c:	2320      	movmi	r3, #32
 800887e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008882:	0713      	lsls	r3, r2, #28
 8008884:	bf44      	itt	mi
 8008886:	232b      	movmi	r3, #43	; 0x2b
 8008888:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800888c:	f89a 3000 	ldrb.w	r3, [sl]
 8008890:	2b2a      	cmp	r3, #42	; 0x2a
 8008892:	d015      	beq.n	80088c0 <_vfiprintf_r+0x13c>
 8008894:	9a07      	ldr	r2, [sp, #28]
 8008896:	4654      	mov	r4, sl
 8008898:	2000      	movs	r0, #0
 800889a:	f04f 0c0a 	mov.w	ip, #10
 800889e:	4621      	mov	r1, r4
 80088a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088a4:	3b30      	subs	r3, #48	; 0x30
 80088a6:	2b09      	cmp	r3, #9
 80088a8:	d94e      	bls.n	8008948 <_vfiprintf_r+0x1c4>
 80088aa:	b1b0      	cbz	r0, 80088da <_vfiprintf_r+0x156>
 80088ac:	9207      	str	r2, [sp, #28]
 80088ae:	e014      	b.n	80088da <_vfiprintf_r+0x156>
 80088b0:	eba0 0308 	sub.w	r3, r0, r8
 80088b4:	fa09 f303 	lsl.w	r3, r9, r3
 80088b8:	4313      	orrs	r3, r2
 80088ba:	9304      	str	r3, [sp, #16]
 80088bc:	46a2      	mov	sl, r4
 80088be:	e7d2      	b.n	8008866 <_vfiprintf_r+0xe2>
 80088c0:	9b03      	ldr	r3, [sp, #12]
 80088c2:	1d19      	adds	r1, r3, #4
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	9103      	str	r1, [sp, #12]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	bfbb      	ittet	lt
 80088cc:	425b      	neglt	r3, r3
 80088ce:	f042 0202 	orrlt.w	r2, r2, #2
 80088d2:	9307      	strge	r3, [sp, #28]
 80088d4:	9307      	strlt	r3, [sp, #28]
 80088d6:	bfb8      	it	lt
 80088d8:	9204      	strlt	r2, [sp, #16]
 80088da:	7823      	ldrb	r3, [r4, #0]
 80088dc:	2b2e      	cmp	r3, #46	; 0x2e
 80088de:	d10c      	bne.n	80088fa <_vfiprintf_r+0x176>
 80088e0:	7863      	ldrb	r3, [r4, #1]
 80088e2:	2b2a      	cmp	r3, #42	; 0x2a
 80088e4:	d135      	bne.n	8008952 <_vfiprintf_r+0x1ce>
 80088e6:	9b03      	ldr	r3, [sp, #12]
 80088e8:	1d1a      	adds	r2, r3, #4
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	9203      	str	r2, [sp, #12]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	bfb8      	it	lt
 80088f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80088f6:	3402      	adds	r4, #2
 80088f8:	9305      	str	r3, [sp, #20]
 80088fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80089e0 <_vfiprintf_r+0x25c>
 80088fe:	7821      	ldrb	r1, [r4, #0]
 8008900:	2203      	movs	r2, #3
 8008902:	4650      	mov	r0, sl
 8008904:	f7f7 fc74 	bl	80001f0 <memchr>
 8008908:	b140      	cbz	r0, 800891c <_vfiprintf_r+0x198>
 800890a:	2340      	movs	r3, #64	; 0x40
 800890c:	eba0 000a 	sub.w	r0, r0, sl
 8008910:	fa03 f000 	lsl.w	r0, r3, r0
 8008914:	9b04      	ldr	r3, [sp, #16]
 8008916:	4303      	orrs	r3, r0
 8008918:	3401      	adds	r4, #1
 800891a:	9304      	str	r3, [sp, #16]
 800891c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008920:	482c      	ldr	r0, [pc, #176]	; (80089d4 <_vfiprintf_r+0x250>)
 8008922:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008926:	2206      	movs	r2, #6
 8008928:	f7f7 fc62 	bl	80001f0 <memchr>
 800892c:	2800      	cmp	r0, #0
 800892e:	d03f      	beq.n	80089b0 <_vfiprintf_r+0x22c>
 8008930:	4b29      	ldr	r3, [pc, #164]	; (80089d8 <_vfiprintf_r+0x254>)
 8008932:	bb1b      	cbnz	r3, 800897c <_vfiprintf_r+0x1f8>
 8008934:	9b03      	ldr	r3, [sp, #12]
 8008936:	3307      	adds	r3, #7
 8008938:	f023 0307 	bic.w	r3, r3, #7
 800893c:	3308      	adds	r3, #8
 800893e:	9303      	str	r3, [sp, #12]
 8008940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008942:	443b      	add	r3, r7
 8008944:	9309      	str	r3, [sp, #36]	; 0x24
 8008946:	e767      	b.n	8008818 <_vfiprintf_r+0x94>
 8008948:	fb0c 3202 	mla	r2, ip, r2, r3
 800894c:	460c      	mov	r4, r1
 800894e:	2001      	movs	r0, #1
 8008950:	e7a5      	b.n	800889e <_vfiprintf_r+0x11a>
 8008952:	2300      	movs	r3, #0
 8008954:	3401      	adds	r4, #1
 8008956:	9305      	str	r3, [sp, #20]
 8008958:	4619      	mov	r1, r3
 800895a:	f04f 0c0a 	mov.w	ip, #10
 800895e:	4620      	mov	r0, r4
 8008960:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008964:	3a30      	subs	r2, #48	; 0x30
 8008966:	2a09      	cmp	r2, #9
 8008968:	d903      	bls.n	8008972 <_vfiprintf_r+0x1ee>
 800896a:	2b00      	cmp	r3, #0
 800896c:	d0c5      	beq.n	80088fa <_vfiprintf_r+0x176>
 800896e:	9105      	str	r1, [sp, #20]
 8008970:	e7c3      	b.n	80088fa <_vfiprintf_r+0x176>
 8008972:	fb0c 2101 	mla	r1, ip, r1, r2
 8008976:	4604      	mov	r4, r0
 8008978:	2301      	movs	r3, #1
 800897a:	e7f0      	b.n	800895e <_vfiprintf_r+0x1da>
 800897c:	ab03      	add	r3, sp, #12
 800897e:	9300      	str	r3, [sp, #0]
 8008980:	462a      	mov	r2, r5
 8008982:	4b16      	ldr	r3, [pc, #88]	; (80089dc <_vfiprintf_r+0x258>)
 8008984:	a904      	add	r1, sp, #16
 8008986:	4630      	mov	r0, r6
 8008988:	f7fd fe24 	bl	80065d4 <_printf_float>
 800898c:	4607      	mov	r7, r0
 800898e:	1c78      	adds	r0, r7, #1
 8008990:	d1d6      	bne.n	8008940 <_vfiprintf_r+0x1bc>
 8008992:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008994:	07d9      	lsls	r1, r3, #31
 8008996:	d405      	bmi.n	80089a4 <_vfiprintf_r+0x220>
 8008998:	89ab      	ldrh	r3, [r5, #12]
 800899a:	059a      	lsls	r2, r3, #22
 800899c:	d402      	bmi.n	80089a4 <_vfiprintf_r+0x220>
 800899e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089a0:	f000 faaf 	bl	8008f02 <__retarget_lock_release_recursive>
 80089a4:	89ab      	ldrh	r3, [r5, #12]
 80089a6:	065b      	lsls	r3, r3, #25
 80089a8:	f53f af12 	bmi.w	80087d0 <_vfiprintf_r+0x4c>
 80089ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089ae:	e711      	b.n	80087d4 <_vfiprintf_r+0x50>
 80089b0:	ab03      	add	r3, sp, #12
 80089b2:	9300      	str	r3, [sp, #0]
 80089b4:	462a      	mov	r2, r5
 80089b6:	4b09      	ldr	r3, [pc, #36]	; (80089dc <_vfiprintf_r+0x258>)
 80089b8:	a904      	add	r1, sp, #16
 80089ba:	4630      	mov	r0, r6
 80089bc:	f7fe f8ae 	bl	8006b1c <_printf_i>
 80089c0:	e7e4      	b.n	800898c <_vfiprintf_r+0x208>
 80089c2:	bf00      	nop
 80089c4:	080095bc 	.word	0x080095bc
 80089c8:	080095dc 	.word	0x080095dc
 80089cc:	0800959c 	.word	0x0800959c
 80089d0:	08009444 	.word	0x08009444
 80089d4:	0800944e 	.word	0x0800944e
 80089d8:	080065d5 	.word	0x080065d5
 80089dc:	0800875f 	.word	0x0800875f
 80089e0:	0800944a 	.word	0x0800944a

080089e4 <__swbuf_r>:
 80089e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089e6:	460e      	mov	r6, r1
 80089e8:	4614      	mov	r4, r2
 80089ea:	4605      	mov	r5, r0
 80089ec:	b118      	cbz	r0, 80089f6 <__swbuf_r+0x12>
 80089ee:	6983      	ldr	r3, [r0, #24]
 80089f0:	b90b      	cbnz	r3, 80089f6 <__swbuf_r+0x12>
 80089f2:	f000 f9e7 	bl	8008dc4 <__sinit>
 80089f6:	4b21      	ldr	r3, [pc, #132]	; (8008a7c <__swbuf_r+0x98>)
 80089f8:	429c      	cmp	r4, r3
 80089fa:	d12b      	bne.n	8008a54 <__swbuf_r+0x70>
 80089fc:	686c      	ldr	r4, [r5, #4]
 80089fe:	69a3      	ldr	r3, [r4, #24]
 8008a00:	60a3      	str	r3, [r4, #8]
 8008a02:	89a3      	ldrh	r3, [r4, #12]
 8008a04:	071a      	lsls	r2, r3, #28
 8008a06:	d52f      	bpl.n	8008a68 <__swbuf_r+0x84>
 8008a08:	6923      	ldr	r3, [r4, #16]
 8008a0a:	b36b      	cbz	r3, 8008a68 <__swbuf_r+0x84>
 8008a0c:	6923      	ldr	r3, [r4, #16]
 8008a0e:	6820      	ldr	r0, [r4, #0]
 8008a10:	1ac0      	subs	r0, r0, r3
 8008a12:	6963      	ldr	r3, [r4, #20]
 8008a14:	b2f6      	uxtb	r6, r6
 8008a16:	4283      	cmp	r3, r0
 8008a18:	4637      	mov	r7, r6
 8008a1a:	dc04      	bgt.n	8008a26 <__swbuf_r+0x42>
 8008a1c:	4621      	mov	r1, r4
 8008a1e:	4628      	mov	r0, r5
 8008a20:	f000 f93c 	bl	8008c9c <_fflush_r>
 8008a24:	bb30      	cbnz	r0, 8008a74 <__swbuf_r+0x90>
 8008a26:	68a3      	ldr	r3, [r4, #8]
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	60a3      	str	r3, [r4, #8]
 8008a2c:	6823      	ldr	r3, [r4, #0]
 8008a2e:	1c5a      	adds	r2, r3, #1
 8008a30:	6022      	str	r2, [r4, #0]
 8008a32:	701e      	strb	r6, [r3, #0]
 8008a34:	6963      	ldr	r3, [r4, #20]
 8008a36:	3001      	adds	r0, #1
 8008a38:	4283      	cmp	r3, r0
 8008a3a:	d004      	beq.n	8008a46 <__swbuf_r+0x62>
 8008a3c:	89a3      	ldrh	r3, [r4, #12]
 8008a3e:	07db      	lsls	r3, r3, #31
 8008a40:	d506      	bpl.n	8008a50 <__swbuf_r+0x6c>
 8008a42:	2e0a      	cmp	r6, #10
 8008a44:	d104      	bne.n	8008a50 <__swbuf_r+0x6c>
 8008a46:	4621      	mov	r1, r4
 8008a48:	4628      	mov	r0, r5
 8008a4a:	f000 f927 	bl	8008c9c <_fflush_r>
 8008a4e:	b988      	cbnz	r0, 8008a74 <__swbuf_r+0x90>
 8008a50:	4638      	mov	r0, r7
 8008a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a54:	4b0a      	ldr	r3, [pc, #40]	; (8008a80 <__swbuf_r+0x9c>)
 8008a56:	429c      	cmp	r4, r3
 8008a58:	d101      	bne.n	8008a5e <__swbuf_r+0x7a>
 8008a5a:	68ac      	ldr	r4, [r5, #8]
 8008a5c:	e7cf      	b.n	80089fe <__swbuf_r+0x1a>
 8008a5e:	4b09      	ldr	r3, [pc, #36]	; (8008a84 <__swbuf_r+0xa0>)
 8008a60:	429c      	cmp	r4, r3
 8008a62:	bf08      	it	eq
 8008a64:	68ec      	ldreq	r4, [r5, #12]
 8008a66:	e7ca      	b.n	80089fe <__swbuf_r+0x1a>
 8008a68:	4621      	mov	r1, r4
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	f000 f81a 	bl	8008aa4 <__swsetup_r>
 8008a70:	2800      	cmp	r0, #0
 8008a72:	d0cb      	beq.n	8008a0c <__swbuf_r+0x28>
 8008a74:	f04f 37ff 	mov.w	r7, #4294967295
 8008a78:	e7ea      	b.n	8008a50 <__swbuf_r+0x6c>
 8008a7a:	bf00      	nop
 8008a7c:	080095bc 	.word	0x080095bc
 8008a80:	080095dc 	.word	0x080095dc
 8008a84:	0800959c 	.word	0x0800959c

08008a88 <__ascii_wctomb>:
 8008a88:	b149      	cbz	r1, 8008a9e <__ascii_wctomb+0x16>
 8008a8a:	2aff      	cmp	r2, #255	; 0xff
 8008a8c:	bf85      	ittet	hi
 8008a8e:	238a      	movhi	r3, #138	; 0x8a
 8008a90:	6003      	strhi	r3, [r0, #0]
 8008a92:	700a      	strbls	r2, [r1, #0]
 8008a94:	f04f 30ff 	movhi.w	r0, #4294967295
 8008a98:	bf98      	it	ls
 8008a9a:	2001      	movls	r0, #1
 8008a9c:	4770      	bx	lr
 8008a9e:	4608      	mov	r0, r1
 8008aa0:	4770      	bx	lr
	...

08008aa4 <__swsetup_r>:
 8008aa4:	4b32      	ldr	r3, [pc, #200]	; (8008b70 <__swsetup_r+0xcc>)
 8008aa6:	b570      	push	{r4, r5, r6, lr}
 8008aa8:	681d      	ldr	r5, [r3, #0]
 8008aaa:	4606      	mov	r6, r0
 8008aac:	460c      	mov	r4, r1
 8008aae:	b125      	cbz	r5, 8008aba <__swsetup_r+0x16>
 8008ab0:	69ab      	ldr	r3, [r5, #24]
 8008ab2:	b913      	cbnz	r3, 8008aba <__swsetup_r+0x16>
 8008ab4:	4628      	mov	r0, r5
 8008ab6:	f000 f985 	bl	8008dc4 <__sinit>
 8008aba:	4b2e      	ldr	r3, [pc, #184]	; (8008b74 <__swsetup_r+0xd0>)
 8008abc:	429c      	cmp	r4, r3
 8008abe:	d10f      	bne.n	8008ae0 <__swsetup_r+0x3c>
 8008ac0:	686c      	ldr	r4, [r5, #4]
 8008ac2:	89a3      	ldrh	r3, [r4, #12]
 8008ac4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ac8:	0719      	lsls	r1, r3, #28
 8008aca:	d42c      	bmi.n	8008b26 <__swsetup_r+0x82>
 8008acc:	06dd      	lsls	r5, r3, #27
 8008ace:	d411      	bmi.n	8008af4 <__swsetup_r+0x50>
 8008ad0:	2309      	movs	r3, #9
 8008ad2:	6033      	str	r3, [r6, #0]
 8008ad4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ad8:	81a3      	strh	r3, [r4, #12]
 8008ada:	f04f 30ff 	mov.w	r0, #4294967295
 8008ade:	e03e      	b.n	8008b5e <__swsetup_r+0xba>
 8008ae0:	4b25      	ldr	r3, [pc, #148]	; (8008b78 <__swsetup_r+0xd4>)
 8008ae2:	429c      	cmp	r4, r3
 8008ae4:	d101      	bne.n	8008aea <__swsetup_r+0x46>
 8008ae6:	68ac      	ldr	r4, [r5, #8]
 8008ae8:	e7eb      	b.n	8008ac2 <__swsetup_r+0x1e>
 8008aea:	4b24      	ldr	r3, [pc, #144]	; (8008b7c <__swsetup_r+0xd8>)
 8008aec:	429c      	cmp	r4, r3
 8008aee:	bf08      	it	eq
 8008af0:	68ec      	ldreq	r4, [r5, #12]
 8008af2:	e7e6      	b.n	8008ac2 <__swsetup_r+0x1e>
 8008af4:	0758      	lsls	r0, r3, #29
 8008af6:	d512      	bpl.n	8008b1e <__swsetup_r+0x7a>
 8008af8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008afa:	b141      	cbz	r1, 8008b0e <__swsetup_r+0x6a>
 8008afc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b00:	4299      	cmp	r1, r3
 8008b02:	d002      	beq.n	8008b0a <__swsetup_r+0x66>
 8008b04:	4630      	mov	r0, r6
 8008b06:	f7ff fb6f 	bl	80081e8 <_free_r>
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	6363      	str	r3, [r4, #52]	; 0x34
 8008b0e:	89a3      	ldrh	r3, [r4, #12]
 8008b10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b14:	81a3      	strh	r3, [r4, #12]
 8008b16:	2300      	movs	r3, #0
 8008b18:	6063      	str	r3, [r4, #4]
 8008b1a:	6923      	ldr	r3, [r4, #16]
 8008b1c:	6023      	str	r3, [r4, #0]
 8008b1e:	89a3      	ldrh	r3, [r4, #12]
 8008b20:	f043 0308 	orr.w	r3, r3, #8
 8008b24:	81a3      	strh	r3, [r4, #12]
 8008b26:	6923      	ldr	r3, [r4, #16]
 8008b28:	b94b      	cbnz	r3, 8008b3e <__swsetup_r+0x9a>
 8008b2a:	89a3      	ldrh	r3, [r4, #12]
 8008b2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b34:	d003      	beq.n	8008b3e <__swsetup_r+0x9a>
 8008b36:	4621      	mov	r1, r4
 8008b38:	4630      	mov	r0, r6
 8008b3a:	f000 fa07 	bl	8008f4c <__smakebuf_r>
 8008b3e:	89a0      	ldrh	r0, [r4, #12]
 8008b40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b44:	f010 0301 	ands.w	r3, r0, #1
 8008b48:	d00a      	beq.n	8008b60 <__swsetup_r+0xbc>
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	60a3      	str	r3, [r4, #8]
 8008b4e:	6963      	ldr	r3, [r4, #20]
 8008b50:	425b      	negs	r3, r3
 8008b52:	61a3      	str	r3, [r4, #24]
 8008b54:	6923      	ldr	r3, [r4, #16]
 8008b56:	b943      	cbnz	r3, 8008b6a <__swsetup_r+0xc6>
 8008b58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b5c:	d1ba      	bne.n	8008ad4 <__swsetup_r+0x30>
 8008b5e:	bd70      	pop	{r4, r5, r6, pc}
 8008b60:	0781      	lsls	r1, r0, #30
 8008b62:	bf58      	it	pl
 8008b64:	6963      	ldrpl	r3, [r4, #20]
 8008b66:	60a3      	str	r3, [r4, #8]
 8008b68:	e7f4      	b.n	8008b54 <__swsetup_r+0xb0>
 8008b6a:	2000      	movs	r0, #0
 8008b6c:	e7f7      	b.n	8008b5e <__swsetup_r+0xba>
 8008b6e:	bf00      	nop
 8008b70:	2000000c 	.word	0x2000000c
 8008b74:	080095bc 	.word	0x080095bc
 8008b78:	080095dc 	.word	0x080095dc
 8008b7c:	0800959c 	.word	0x0800959c

08008b80 <abort>:
 8008b80:	b508      	push	{r3, lr}
 8008b82:	2006      	movs	r0, #6
 8008b84:	f000 fa52 	bl	800902c <raise>
 8008b88:	2001      	movs	r0, #1
 8008b8a:	f7f9 ff71 	bl	8002a70 <_exit>
	...

08008b90 <__sflush_r>:
 8008b90:	898a      	ldrh	r2, [r1, #12]
 8008b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b96:	4605      	mov	r5, r0
 8008b98:	0710      	lsls	r0, r2, #28
 8008b9a:	460c      	mov	r4, r1
 8008b9c:	d458      	bmi.n	8008c50 <__sflush_r+0xc0>
 8008b9e:	684b      	ldr	r3, [r1, #4]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	dc05      	bgt.n	8008bb0 <__sflush_r+0x20>
 8008ba4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	dc02      	bgt.n	8008bb0 <__sflush_r+0x20>
 8008baa:	2000      	movs	r0, #0
 8008bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bb2:	2e00      	cmp	r6, #0
 8008bb4:	d0f9      	beq.n	8008baa <__sflush_r+0x1a>
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008bbc:	682f      	ldr	r7, [r5, #0]
 8008bbe:	602b      	str	r3, [r5, #0]
 8008bc0:	d032      	beq.n	8008c28 <__sflush_r+0x98>
 8008bc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008bc4:	89a3      	ldrh	r3, [r4, #12]
 8008bc6:	075a      	lsls	r2, r3, #29
 8008bc8:	d505      	bpl.n	8008bd6 <__sflush_r+0x46>
 8008bca:	6863      	ldr	r3, [r4, #4]
 8008bcc:	1ac0      	subs	r0, r0, r3
 8008bce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008bd0:	b10b      	cbz	r3, 8008bd6 <__sflush_r+0x46>
 8008bd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008bd4:	1ac0      	subs	r0, r0, r3
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	4602      	mov	r2, r0
 8008bda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bdc:	6a21      	ldr	r1, [r4, #32]
 8008bde:	4628      	mov	r0, r5
 8008be0:	47b0      	blx	r6
 8008be2:	1c43      	adds	r3, r0, #1
 8008be4:	89a3      	ldrh	r3, [r4, #12]
 8008be6:	d106      	bne.n	8008bf6 <__sflush_r+0x66>
 8008be8:	6829      	ldr	r1, [r5, #0]
 8008bea:	291d      	cmp	r1, #29
 8008bec:	d82c      	bhi.n	8008c48 <__sflush_r+0xb8>
 8008bee:	4a2a      	ldr	r2, [pc, #168]	; (8008c98 <__sflush_r+0x108>)
 8008bf0:	40ca      	lsrs	r2, r1
 8008bf2:	07d6      	lsls	r6, r2, #31
 8008bf4:	d528      	bpl.n	8008c48 <__sflush_r+0xb8>
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	6062      	str	r2, [r4, #4]
 8008bfa:	04d9      	lsls	r1, r3, #19
 8008bfc:	6922      	ldr	r2, [r4, #16]
 8008bfe:	6022      	str	r2, [r4, #0]
 8008c00:	d504      	bpl.n	8008c0c <__sflush_r+0x7c>
 8008c02:	1c42      	adds	r2, r0, #1
 8008c04:	d101      	bne.n	8008c0a <__sflush_r+0x7a>
 8008c06:	682b      	ldr	r3, [r5, #0]
 8008c08:	b903      	cbnz	r3, 8008c0c <__sflush_r+0x7c>
 8008c0a:	6560      	str	r0, [r4, #84]	; 0x54
 8008c0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c0e:	602f      	str	r7, [r5, #0]
 8008c10:	2900      	cmp	r1, #0
 8008c12:	d0ca      	beq.n	8008baa <__sflush_r+0x1a>
 8008c14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c18:	4299      	cmp	r1, r3
 8008c1a:	d002      	beq.n	8008c22 <__sflush_r+0x92>
 8008c1c:	4628      	mov	r0, r5
 8008c1e:	f7ff fae3 	bl	80081e8 <_free_r>
 8008c22:	2000      	movs	r0, #0
 8008c24:	6360      	str	r0, [r4, #52]	; 0x34
 8008c26:	e7c1      	b.n	8008bac <__sflush_r+0x1c>
 8008c28:	6a21      	ldr	r1, [r4, #32]
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	4628      	mov	r0, r5
 8008c2e:	47b0      	blx	r6
 8008c30:	1c41      	adds	r1, r0, #1
 8008c32:	d1c7      	bne.n	8008bc4 <__sflush_r+0x34>
 8008c34:	682b      	ldr	r3, [r5, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d0c4      	beq.n	8008bc4 <__sflush_r+0x34>
 8008c3a:	2b1d      	cmp	r3, #29
 8008c3c:	d001      	beq.n	8008c42 <__sflush_r+0xb2>
 8008c3e:	2b16      	cmp	r3, #22
 8008c40:	d101      	bne.n	8008c46 <__sflush_r+0xb6>
 8008c42:	602f      	str	r7, [r5, #0]
 8008c44:	e7b1      	b.n	8008baa <__sflush_r+0x1a>
 8008c46:	89a3      	ldrh	r3, [r4, #12]
 8008c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c4c:	81a3      	strh	r3, [r4, #12]
 8008c4e:	e7ad      	b.n	8008bac <__sflush_r+0x1c>
 8008c50:	690f      	ldr	r7, [r1, #16]
 8008c52:	2f00      	cmp	r7, #0
 8008c54:	d0a9      	beq.n	8008baa <__sflush_r+0x1a>
 8008c56:	0793      	lsls	r3, r2, #30
 8008c58:	680e      	ldr	r6, [r1, #0]
 8008c5a:	bf08      	it	eq
 8008c5c:	694b      	ldreq	r3, [r1, #20]
 8008c5e:	600f      	str	r7, [r1, #0]
 8008c60:	bf18      	it	ne
 8008c62:	2300      	movne	r3, #0
 8008c64:	eba6 0807 	sub.w	r8, r6, r7
 8008c68:	608b      	str	r3, [r1, #8]
 8008c6a:	f1b8 0f00 	cmp.w	r8, #0
 8008c6e:	dd9c      	ble.n	8008baa <__sflush_r+0x1a>
 8008c70:	6a21      	ldr	r1, [r4, #32]
 8008c72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c74:	4643      	mov	r3, r8
 8008c76:	463a      	mov	r2, r7
 8008c78:	4628      	mov	r0, r5
 8008c7a:	47b0      	blx	r6
 8008c7c:	2800      	cmp	r0, #0
 8008c7e:	dc06      	bgt.n	8008c8e <__sflush_r+0xfe>
 8008c80:	89a3      	ldrh	r3, [r4, #12]
 8008c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c86:	81a3      	strh	r3, [r4, #12]
 8008c88:	f04f 30ff 	mov.w	r0, #4294967295
 8008c8c:	e78e      	b.n	8008bac <__sflush_r+0x1c>
 8008c8e:	4407      	add	r7, r0
 8008c90:	eba8 0800 	sub.w	r8, r8, r0
 8008c94:	e7e9      	b.n	8008c6a <__sflush_r+0xda>
 8008c96:	bf00      	nop
 8008c98:	20400001 	.word	0x20400001

08008c9c <_fflush_r>:
 8008c9c:	b538      	push	{r3, r4, r5, lr}
 8008c9e:	690b      	ldr	r3, [r1, #16]
 8008ca0:	4605      	mov	r5, r0
 8008ca2:	460c      	mov	r4, r1
 8008ca4:	b913      	cbnz	r3, 8008cac <_fflush_r+0x10>
 8008ca6:	2500      	movs	r5, #0
 8008ca8:	4628      	mov	r0, r5
 8008caa:	bd38      	pop	{r3, r4, r5, pc}
 8008cac:	b118      	cbz	r0, 8008cb6 <_fflush_r+0x1a>
 8008cae:	6983      	ldr	r3, [r0, #24]
 8008cb0:	b90b      	cbnz	r3, 8008cb6 <_fflush_r+0x1a>
 8008cb2:	f000 f887 	bl	8008dc4 <__sinit>
 8008cb6:	4b14      	ldr	r3, [pc, #80]	; (8008d08 <_fflush_r+0x6c>)
 8008cb8:	429c      	cmp	r4, r3
 8008cba:	d11b      	bne.n	8008cf4 <_fflush_r+0x58>
 8008cbc:	686c      	ldr	r4, [r5, #4]
 8008cbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d0ef      	beq.n	8008ca6 <_fflush_r+0xa>
 8008cc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008cc8:	07d0      	lsls	r0, r2, #31
 8008cca:	d404      	bmi.n	8008cd6 <_fflush_r+0x3a>
 8008ccc:	0599      	lsls	r1, r3, #22
 8008cce:	d402      	bmi.n	8008cd6 <_fflush_r+0x3a>
 8008cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cd2:	f000 f915 	bl	8008f00 <__retarget_lock_acquire_recursive>
 8008cd6:	4628      	mov	r0, r5
 8008cd8:	4621      	mov	r1, r4
 8008cda:	f7ff ff59 	bl	8008b90 <__sflush_r>
 8008cde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ce0:	07da      	lsls	r2, r3, #31
 8008ce2:	4605      	mov	r5, r0
 8008ce4:	d4e0      	bmi.n	8008ca8 <_fflush_r+0xc>
 8008ce6:	89a3      	ldrh	r3, [r4, #12]
 8008ce8:	059b      	lsls	r3, r3, #22
 8008cea:	d4dd      	bmi.n	8008ca8 <_fflush_r+0xc>
 8008cec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cee:	f000 f908 	bl	8008f02 <__retarget_lock_release_recursive>
 8008cf2:	e7d9      	b.n	8008ca8 <_fflush_r+0xc>
 8008cf4:	4b05      	ldr	r3, [pc, #20]	; (8008d0c <_fflush_r+0x70>)
 8008cf6:	429c      	cmp	r4, r3
 8008cf8:	d101      	bne.n	8008cfe <_fflush_r+0x62>
 8008cfa:	68ac      	ldr	r4, [r5, #8]
 8008cfc:	e7df      	b.n	8008cbe <_fflush_r+0x22>
 8008cfe:	4b04      	ldr	r3, [pc, #16]	; (8008d10 <_fflush_r+0x74>)
 8008d00:	429c      	cmp	r4, r3
 8008d02:	bf08      	it	eq
 8008d04:	68ec      	ldreq	r4, [r5, #12]
 8008d06:	e7da      	b.n	8008cbe <_fflush_r+0x22>
 8008d08:	080095bc 	.word	0x080095bc
 8008d0c:	080095dc 	.word	0x080095dc
 8008d10:	0800959c 	.word	0x0800959c

08008d14 <std>:
 8008d14:	2300      	movs	r3, #0
 8008d16:	b510      	push	{r4, lr}
 8008d18:	4604      	mov	r4, r0
 8008d1a:	e9c0 3300 	strd	r3, r3, [r0]
 8008d1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d22:	6083      	str	r3, [r0, #8]
 8008d24:	8181      	strh	r1, [r0, #12]
 8008d26:	6643      	str	r3, [r0, #100]	; 0x64
 8008d28:	81c2      	strh	r2, [r0, #14]
 8008d2a:	6183      	str	r3, [r0, #24]
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	2208      	movs	r2, #8
 8008d30:	305c      	adds	r0, #92	; 0x5c
 8008d32:	f7fd fba7 	bl	8006484 <memset>
 8008d36:	4b05      	ldr	r3, [pc, #20]	; (8008d4c <std+0x38>)
 8008d38:	6263      	str	r3, [r4, #36]	; 0x24
 8008d3a:	4b05      	ldr	r3, [pc, #20]	; (8008d50 <std+0x3c>)
 8008d3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d3e:	4b05      	ldr	r3, [pc, #20]	; (8008d54 <std+0x40>)
 8008d40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d42:	4b05      	ldr	r3, [pc, #20]	; (8008d58 <std+0x44>)
 8008d44:	6224      	str	r4, [r4, #32]
 8008d46:	6323      	str	r3, [r4, #48]	; 0x30
 8008d48:	bd10      	pop	{r4, pc}
 8008d4a:	bf00      	nop
 8008d4c:	08009065 	.word	0x08009065
 8008d50:	08009087 	.word	0x08009087
 8008d54:	080090bf 	.word	0x080090bf
 8008d58:	080090e3 	.word	0x080090e3

08008d5c <_cleanup_r>:
 8008d5c:	4901      	ldr	r1, [pc, #4]	; (8008d64 <_cleanup_r+0x8>)
 8008d5e:	f000 b8af 	b.w	8008ec0 <_fwalk_reent>
 8008d62:	bf00      	nop
 8008d64:	08008c9d 	.word	0x08008c9d

08008d68 <__sfmoreglue>:
 8008d68:	b570      	push	{r4, r5, r6, lr}
 8008d6a:	1e4a      	subs	r2, r1, #1
 8008d6c:	2568      	movs	r5, #104	; 0x68
 8008d6e:	4355      	muls	r5, r2
 8008d70:	460e      	mov	r6, r1
 8008d72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d76:	f7ff fa87 	bl	8008288 <_malloc_r>
 8008d7a:	4604      	mov	r4, r0
 8008d7c:	b140      	cbz	r0, 8008d90 <__sfmoreglue+0x28>
 8008d7e:	2100      	movs	r1, #0
 8008d80:	e9c0 1600 	strd	r1, r6, [r0]
 8008d84:	300c      	adds	r0, #12
 8008d86:	60a0      	str	r0, [r4, #8]
 8008d88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d8c:	f7fd fb7a 	bl	8006484 <memset>
 8008d90:	4620      	mov	r0, r4
 8008d92:	bd70      	pop	{r4, r5, r6, pc}

08008d94 <__sfp_lock_acquire>:
 8008d94:	4801      	ldr	r0, [pc, #4]	; (8008d9c <__sfp_lock_acquire+0x8>)
 8008d96:	f000 b8b3 	b.w	8008f00 <__retarget_lock_acquire_recursive>
 8008d9a:	bf00      	nop
 8008d9c:	200002ec 	.word	0x200002ec

08008da0 <__sfp_lock_release>:
 8008da0:	4801      	ldr	r0, [pc, #4]	; (8008da8 <__sfp_lock_release+0x8>)
 8008da2:	f000 b8ae 	b.w	8008f02 <__retarget_lock_release_recursive>
 8008da6:	bf00      	nop
 8008da8:	200002ec 	.word	0x200002ec

08008dac <__sinit_lock_acquire>:
 8008dac:	4801      	ldr	r0, [pc, #4]	; (8008db4 <__sinit_lock_acquire+0x8>)
 8008dae:	f000 b8a7 	b.w	8008f00 <__retarget_lock_acquire_recursive>
 8008db2:	bf00      	nop
 8008db4:	200002e7 	.word	0x200002e7

08008db8 <__sinit_lock_release>:
 8008db8:	4801      	ldr	r0, [pc, #4]	; (8008dc0 <__sinit_lock_release+0x8>)
 8008dba:	f000 b8a2 	b.w	8008f02 <__retarget_lock_release_recursive>
 8008dbe:	bf00      	nop
 8008dc0:	200002e7 	.word	0x200002e7

08008dc4 <__sinit>:
 8008dc4:	b510      	push	{r4, lr}
 8008dc6:	4604      	mov	r4, r0
 8008dc8:	f7ff fff0 	bl	8008dac <__sinit_lock_acquire>
 8008dcc:	69a3      	ldr	r3, [r4, #24]
 8008dce:	b11b      	cbz	r3, 8008dd8 <__sinit+0x14>
 8008dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dd4:	f7ff bff0 	b.w	8008db8 <__sinit_lock_release>
 8008dd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008ddc:	6523      	str	r3, [r4, #80]	; 0x50
 8008dde:	4b13      	ldr	r3, [pc, #76]	; (8008e2c <__sinit+0x68>)
 8008de0:	4a13      	ldr	r2, [pc, #76]	; (8008e30 <__sinit+0x6c>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	62a2      	str	r2, [r4, #40]	; 0x28
 8008de6:	42a3      	cmp	r3, r4
 8008de8:	bf04      	itt	eq
 8008dea:	2301      	moveq	r3, #1
 8008dec:	61a3      	streq	r3, [r4, #24]
 8008dee:	4620      	mov	r0, r4
 8008df0:	f000 f820 	bl	8008e34 <__sfp>
 8008df4:	6060      	str	r0, [r4, #4]
 8008df6:	4620      	mov	r0, r4
 8008df8:	f000 f81c 	bl	8008e34 <__sfp>
 8008dfc:	60a0      	str	r0, [r4, #8]
 8008dfe:	4620      	mov	r0, r4
 8008e00:	f000 f818 	bl	8008e34 <__sfp>
 8008e04:	2200      	movs	r2, #0
 8008e06:	60e0      	str	r0, [r4, #12]
 8008e08:	2104      	movs	r1, #4
 8008e0a:	6860      	ldr	r0, [r4, #4]
 8008e0c:	f7ff ff82 	bl	8008d14 <std>
 8008e10:	68a0      	ldr	r0, [r4, #8]
 8008e12:	2201      	movs	r2, #1
 8008e14:	2109      	movs	r1, #9
 8008e16:	f7ff ff7d 	bl	8008d14 <std>
 8008e1a:	68e0      	ldr	r0, [r4, #12]
 8008e1c:	2202      	movs	r2, #2
 8008e1e:	2112      	movs	r1, #18
 8008e20:	f7ff ff78 	bl	8008d14 <std>
 8008e24:	2301      	movs	r3, #1
 8008e26:	61a3      	str	r3, [r4, #24]
 8008e28:	e7d2      	b.n	8008dd0 <__sinit+0xc>
 8008e2a:	bf00      	nop
 8008e2c:	08009218 	.word	0x08009218
 8008e30:	08008d5d 	.word	0x08008d5d

08008e34 <__sfp>:
 8008e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e36:	4607      	mov	r7, r0
 8008e38:	f7ff ffac 	bl	8008d94 <__sfp_lock_acquire>
 8008e3c:	4b1e      	ldr	r3, [pc, #120]	; (8008eb8 <__sfp+0x84>)
 8008e3e:	681e      	ldr	r6, [r3, #0]
 8008e40:	69b3      	ldr	r3, [r6, #24]
 8008e42:	b913      	cbnz	r3, 8008e4a <__sfp+0x16>
 8008e44:	4630      	mov	r0, r6
 8008e46:	f7ff ffbd 	bl	8008dc4 <__sinit>
 8008e4a:	3648      	adds	r6, #72	; 0x48
 8008e4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e50:	3b01      	subs	r3, #1
 8008e52:	d503      	bpl.n	8008e5c <__sfp+0x28>
 8008e54:	6833      	ldr	r3, [r6, #0]
 8008e56:	b30b      	cbz	r3, 8008e9c <__sfp+0x68>
 8008e58:	6836      	ldr	r6, [r6, #0]
 8008e5a:	e7f7      	b.n	8008e4c <__sfp+0x18>
 8008e5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e60:	b9d5      	cbnz	r5, 8008e98 <__sfp+0x64>
 8008e62:	4b16      	ldr	r3, [pc, #88]	; (8008ebc <__sfp+0x88>)
 8008e64:	60e3      	str	r3, [r4, #12]
 8008e66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e6a:	6665      	str	r5, [r4, #100]	; 0x64
 8008e6c:	f000 f847 	bl	8008efe <__retarget_lock_init_recursive>
 8008e70:	f7ff ff96 	bl	8008da0 <__sfp_lock_release>
 8008e74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008e78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008e7c:	6025      	str	r5, [r4, #0]
 8008e7e:	61a5      	str	r5, [r4, #24]
 8008e80:	2208      	movs	r2, #8
 8008e82:	4629      	mov	r1, r5
 8008e84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e88:	f7fd fafc 	bl	8006484 <memset>
 8008e8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008e90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008e94:	4620      	mov	r0, r4
 8008e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e98:	3468      	adds	r4, #104	; 0x68
 8008e9a:	e7d9      	b.n	8008e50 <__sfp+0x1c>
 8008e9c:	2104      	movs	r1, #4
 8008e9e:	4638      	mov	r0, r7
 8008ea0:	f7ff ff62 	bl	8008d68 <__sfmoreglue>
 8008ea4:	4604      	mov	r4, r0
 8008ea6:	6030      	str	r0, [r6, #0]
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	d1d5      	bne.n	8008e58 <__sfp+0x24>
 8008eac:	f7ff ff78 	bl	8008da0 <__sfp_lock_release>
 8008eb0:	230c      	movs	r3, #12
 8008eb2:	603b      	str	r3, [r7, #0]
 8008eb4:	e7ee      	b.n	8008e94 <__sfp+0x60>
 8008eb6:	bf00      	nop
 8008eb8:	08009218 	.word	0x08009218
 8008ebc:	ffff0001 	.word	0xffff0001

08008ec0 <_fwalk_reent>:
 8008ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ec4:	4606      	mov	r6, r0
 8008ec6:	4688      	mov	r8, r1
 8008ec8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008ecc:	2700      	movs	r7, #0
 8008ece:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ed2:	f1b9 0901 	subs.w	r9, r9, #1
 8008ed6:	d505      	bpl.n	8008ee4 <_fwalk_reent+0x24>
 8008ed8:	6824      	ldr	r4, [r4, #0]
 8008eda:	2c00      	cmp	r4, #0
 8008edc:	d1f7      	bne.n	8008ece <_fwalk_reent+0xe>
 8008ede:	4638      	mov	r0, r7
 8008ee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ee4:	89ab      	ldrh	r3, [r5, #12]
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d907      	bls.n	8008efa <_fwalk_reent+0x3a>
 8008eea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008eee:	3301      	adds	r3, #1
 8008ef0:	d003      	beq.n	8008efa <_fwalk_reent+0x3a>
 8008ef2:	4629      	mov	r1, r5
 8008ef4:	4630      	mov	r0, r6
 8008ef6:	47c0      	blx	r8
 8008ef8:	4307      	orrs	r7, r0
 8008efa:	3568      	adds	r5, #104	; 0x68
 8008efc:	e7e9      	b.n	8008ed2 <_fwalk_reent+0x12>

08008efe <__retarget_lock_init_recursive>:
 8008efe:	4770      	bx	lr

08008f00 <__retarget_lock_acquire_recursive>:
 8008f00:	4770      	bx	lr

08008f02 <__retarget_lock_release_recursive>:
 8008f02:	4770      	bx	lr

08008f04 <__swhatbuf_r>:
 8008f04:	b570      	push	{r4, r5, r6, lr}
 8008f06:	460e      	mov	r6, r1
 8008f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f0c:	2900      	cmp	r1, #0
 8008f0e:	b096      	sub	sp, #88	; 0x58
 8008f10:	4614      	mov	r4, r2
 8008f12:	461d      	mov	r5, r3
 8008f14:	da07      	bge.n	8008f26 <__swhatbuf_r+0x22>
 8008f16:	2300      	movs	r3, #0
 8008f18:	602b      	str	r3, [r5, #0]
 8008f1a:	89b3      	ldrh	r3, [r6, #12]
 8008f1c:	061a      	lsls	r2, r3, #24
 8008f1e:	d410      	bmi.n	8008f42 <__swhatbuf_r+0x3e>
 8008f20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f24:	e00e      	b.n	8008f44 <__swhatbuf_r+0x40>
 8008f26:	466a      	mov	r2, sp
 8008f28:	f000 f902 	bl	8009130 <_fstat_r>
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	dbf2      	blt.n	8008f16 <__swhatbuf_r+0x12>
 8008f30:	9a01      	ldr	r2, [sp, #4]
 8008f32:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008f36:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008f3a:	425a      	negs	r2, r3
 8008f3c:	415a      	adcs	r2, r3
 8008f3e:	602a      	str	r2, [r5, #0]
 8008f40:	e7ee      	b.n	8008f20 <__swhatbuf_r+0x1c>
 8008f42:	2340      	movs	r3, #64	; 0x40
 8008f44:	2000      	movs	r0, #0
 8008f46:	6023      	str	r3, [r4, #0]
 8008f48:	b016      	add	sp, #88	; 0x58
 8008f4a:	bd70      	pop	{r4, r5, r6, pc}

08008f4c <__smakebuf_r>:
 8008f4c:	898b      	ldrh	r3, [r1, #12]
 8008f4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f50:	079d      	lsls	r5, r3, #30
 8008f52:	4606      	mov	r6, r0
 8008f54:	460c      	mov	r4, r1
 8008f56:	d507      	bpl.n	8008f68 <__smakebuf_r+0x1c>
 8008f58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f5c:	6023      	str	r3, [r4, #0]
 8008f5e:	6123      	str	r3, [r4, #16]
 8008f60:	2301      	movs	r3, #1
 8008f62:	6163      	str	r3, [r4, #20]
 8008f64:	b002      	add	sp, #8
 8008f66:	bd70      	pop	{r4, r5, r6, pc}
 8008f68:	ab01      	add	r3, sp, #4
 8008f6a:	466a      	mov	r2, sp
 8008f6c:	f7ff ffca 	bl	8008f04 <__swhatbuf_r>
 8008f70:	9900      	ldr	r1, [sp, #0]
 8008f72:	4605      	mov	r5, r0
 8008f74:	4630      	mov	r0, r6
 8008f76:	f7ff f987 	bl	8008288 <_malloc_r>
 8008f7a:	b948      	cbnz	r0, 8008f90 <__smakebuf_r+0x44>
 8008f7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f80:	059a      	lsls	r2, r3, #22
 8008f82:	d4ef      	bmi.n	8008f64 <__smakebuf_r+0x18>
 8008f84:	f023 0303 	bic.w	r3, r3, #3
 8008f88:	f043 0302 	orr.w	r3, r3, #2
 8008f8c:	81a3      	strh	r3, [r4, #12]
 8008f8e:	e7e3      	b.n	8008f58 <__smakebuf_r+0xc>
 8008f90:	4b0d      	ldr	r3, [pc, #52]	; (8008fc8 <__smakebuf_r+0x7c>)
 8008f92:	62b3      	str	r3, [r6, #40]	; 0x28
 8008f94:	89a3      	ldrh	r3, [r4, #12]
 8008f96:	6020      	str	r0, [r4, #0]
 8008f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f9c:	81a3      	strh	r3, [r4, #12]
 8008f9e:	9b00      	ldr	r3, [sp, #0]
 8008fa0:	6163      	str	r3, [r4, #20]
 8008fa2:	9b01      	ldr	r3, [sp, #4]
 8008fa4:	6120      	str	r0, [r4, #16]
 8008fa6:	b15b      	cbz	r3, 8008fc0 <__smakebuf_r+0x74>
 8008fa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fac:	4630      	mov	r0, r6
 8008fae:	f000 f8d1 	bl	8009154 <_isatty_r>
 8008fb2:	b128      	cbz	r0, 8008fc0 <__smakebuf_r+0x74>
 8008fb4:	89a3      	ldrh	r3, [r4, #12]
 8008fb6:	f023 0303 	bic.w	r3, r3, #3
 8008fba:	f043 0301 	orr.w	r3, r3, #1
 8008fbe:	81a3      	strh	r3, [r4, #12]
 8008fc0:	89a0      	ldrh	r0, [r4, #12]
 8008fc2:	4305      	orrs	r5, r0
 8008fc4:	81a5      	strh	r5, [r4, #12]
 8008fc6:	e7cd      	b.n	8008f64 <__smakebuf_r+0x18>
 8008fc8:	08008d5d 	.word	0x08008d5d

08008fcc <_malloc_usable_size_r>:
 8008fcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fd0:	1f18      	subs	r0, r3, #4
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	bfbc      	itt	lt
 8008fd6:	580b      	ldrlt	r3, [r1, r0]
 8008fd8:	18c0      	addlt	r0, r0, r3
 8008fda:	4770      	bx	lr

08008fdc <_raise_r>:
 8008fdc:	291f      	cmp	r1, #31
 8008fde:	b538      	push	{r3, r4, r5, lr}
 8008fe0:	4604      	mov	r4, r0
 8008fe2:	460d      	mov	r5, r1
 8008fe4:	d904      	bls.n	8008ff0 <_raise_r+0x14>
 8008fe6:	2316      	movs	r3, #22
 8008fe8:	6003      	str	r3, [r0, #0]
 8008fea:	f04f 30ff 	mov.w	r0, #4294967295
 8008fee:	bd38      	pop	{r3, r4, r5, pc}
 8008ff0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008ff2:	b112      	cbz	r2, 8008ffa <_raise_r+0x1e>
 8008ff4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ff8:	b94b      	cbnz	r3, 800900e <_raise_r+0x32>
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	f000 f830 	bl	8009060 <_getpid_r>
 8009000:	462a      	mov	r2, r5
 8009002:	4601      	mov	r1, r0
 8009004:	4620      	mov	r0, r4
 8009006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800900a:	f000 b817 	b.w	800903c <_kill_r>
 800900e:	2b01      	cmp	r3, #1
 8009010:	d00a      	beq.n	8009028 <_raise_r+0x4c>
 8009012:	1c59      	adds	r1, r3, #1
 8009014:	d103      	bne.n	800901e <_raise_r+0x42>
 8009016:	2316      	movs	r3, #22
 8009018:	6003      	str	r3, [r0, #0]
 800901a:	2001      	movs	r0, #1
 800901c:	e7e7      	b.n	8008fee <_raise_r+0x12>
 800901e:	2400      	movs	r4, #0
 8009020:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009024:	4628      	mov	r0, r5
 8009026:	4798      	blx	r3
 8009028:	2000      	movs	r0, #0
 800902a:	e7e0      	b.n	8008fee <_raise_r+0x12>

0800902c <raise>:
 800902c:	4b02      	ldr	r3, [pc, #8]	; (8009038 <raise+0xc>)
 800902e:	4601      	mov	r1, r0
 8009030:	6818      	ldr	r0, [r3, #0]
 8009032:	f7ff bfd3 	b.w	8008fdc <_raise_r>
 8009036:	bf00      	nop
 8009038:	2000000c 	.word	0x2000000c

0800903c <_kill_r>:
 800903c:	b538      	push	{r3, r4, r5, lr}
 800903e:	4d07      	ldr	r5, [pc, #28]	; (800905c <_kill_r+0x20>)
 8009040:	2300      	movs	r3, #0
 8009042:	4604      	mov	r4, r0
 8009044:	4608      	mov	r0, r1
 8009046:	4611      	mov	r1, r2
 8009048:	602b      	str	r3, [r5, #0]
 800904a:	f7f9 fd01 	bl	8002a50 <_kill>
 800904e:	1c43      	adds	r3, r0, #1
 8009050:	d102      	bne.n	8009058 <_kill_r+0x1c>
 8009052:	682b      	ldr	r3, [r5, #0]
 8009054:	b103      	cbz	r3, 8009058 <_kill_r+0x1c>
 8009056:	6023      	str	r3, [r4, #0]
 8009058:	bd38      	pop	{r3, r4, r5, pc}
 800905a:	bf00      	nop
 800905c:	200002e0 	.word	0x200002e0

08009060 <_getpid_r>:
 8009060:	f7f9 bcee 	b.w	8002a40 <_getpid>

08009064 <__sread>:
 8009064:	b510      	push	{r4, lr}
 8009066:	460c      	mov	r4, r1
 8009068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800906c:	f000 f894 	bl	8009198 <_read_r>
 8009070:	2800      	cmp	r0, #0
 8009072:	bfab      	itete	ge
 8009074:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009076:	89a3      	ldrhlt	r3, [r4, #12]
 8009078:	181b      	addge	r3, r3, r0
 800907a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800907e:	bfac      	ite	ge
 8009080:	6563      	strge	r3, [r4, #84]	; 0x54
 8009082:	81a3      	strhlt	r3, [r4, #12]
 8009084:	bd10      	pop	{r4, pc}

08009086 <__swrite>:
 8009086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800908a:	461f      	mov	r7, r3
 800908c:	898b      	ldrh	r3, [r1, #12]
 800908e:	05db      	lsls	r3, r3, #23
 8009090:	4605      	mov	r5, r0
 8009092:	460c      	mov	r4, r1
 8009094:	4616      	mov	r6, r2
 8009096:	d505      	bpl.n	80090a4 <__swrite+0x1e>
 8009098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800909c:	2302      	movs	r3, #2
 800909e:	2200      	movs	r2, #0
 80090a0:	f000 f868 	bl	8009174 <_lseek_r>
 80090a4:	89a3      	ldrh	r3, [r4, #12]
 80090a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090ae:	81a3      	strh	r3, [r4, #12]
 80090b0:	4632      	mov	r2, r6
 80090b2:	463b      	mov	r3, r7
 80090b4:	4628      	mov	r0, r5
 80090b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090ba:	f000 b817 	b.w	80090ec <_write_r>

080090be <__sseek>:
 80090be:	b510      	push	{r4, lr}
 80090c0:	460c      	mov	r4, r1
 80090c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090c6:	f000 f855 	bl	8009174 <_lseek_r>
 80090ca:	1c43      	adds	r3, r0, #1
 80090cc:	89a3      	ldrh	r3, [r4, #12]
 80090ce:	bf15      	itete	ne
 80090d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80090d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80090d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80090da:	81a3      	strheq	r3, [r4, #12]
 80090dc:	bf18      	it	ne
 80090de:	81a3      	strhne	r3, [r4, #12]
 80090e0:	bd10      	pop	{r4, pc}

080090e2 <__sclose>:
 80090e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090e6:	f000 b813 	b.w	8009110 <_close_r>
	...

080090ec <_write_r>:
 80090ec:	b538      	push	{r3, r4, r5, lr}
 80090ee:	4d07      	ldr	r5, [pc, #28]	; (800910c <_write_r+0x20>)
 80090f0:	4604      	mov	r4, r0
 80090f2:	4608      	mov	r0, r1
 80090f4:	4611      	mov	r1, r2
 80090f6:	2200      	movs	r2, #0
 80090f8:	602a      	str	r2, [r5, #0]
 80090fa:	461a      	mov	r2, r3
 80090fc:	f7f9 fcdf 	bl	8002abe <_write>
 8009100:	1c43      	adds	r3, r0, #1
 8009102:	d102      	bne.n	800910a <_write_r+0x1e>
 8009104:	682b      	ldr	r3, [r5, #0]
 8009106:	b103      	cbz	r3, 800910a <_write_r+0x1e>
 8009108:	6023      	str	r3, [r4, #0]
 800910a:	bd38      	pop	{r3, r4, r5, pc}
 800910c:	200002e0 	.word	0x200002e0

08009110 <_close_r>:
 8009110:	b538      	push	{r3, r4, r5, lr}
 8009112:	4d06      	ldr	r5, [pc, #24]	; (800912c <_close_r+0x1c>)
 8009114:	2300      	movs	r3, #0
 8009116:	4604      	mov	r4, r0
 8009118:	4608      	mov	r0, r1
 800911a:	602b      	str	r3, [r5, #0]
 800911c:	f7f9 fceb 	bl	8002af6 <_close>
 8009120:	1c43      	adds	r3, r0, #1
 8009122:	d102      	bne.n	800912a <_close_r+0x1a>
 8009124:	682b      	ldr	r3, [r5, #0]
 8009126:	b103      	cbz	r3, 800912a <_close_r+0x1a>
 8009128:	6023      	str	r3, [r4, #0]
 800912a:	bd38      	pop	{r3, r4, r5, pc}
 800912c:	200002e0 	.word	0x200002e0

08009130 <_fstat_r>:
 8009130:	b538      	push	{r3, r4, r5, lr}
 8009132:	4d07      	ldr	r5, [pc, #28]	; (8009150 <_fstat_r+0x20>)
 8009134:	2300      	movs	r3, #0
 8009136:	4604      	mov	r4, r0
 8009138:	4608      	mov	r0, r1
 800913a:	4611      	mov	r1, r2
 800913c:	602b      	str	r3, [r5, #0]
 800913e:	f7f9 fce6 	bl	8002b0e <_fstat>
 8009142:	1c43      	adds	r3, r0, #1
 8009144:	d102      	bne.n	800914c <_fstat_r+0x1c>
 8009146:	682b      	ldr	r3, [r5, #0]
 8009148:	b103      	cbz	r3, 800914c <_fstat_r+0x1c>
 800914a:	6023      	str	r3, [r4, #0]
 800914c:	bd38      	pop	{r3, r4, r5, pc}
 800914e:	bf00      	nop
 8009150:	200002e0 	.word	0x200002e0

08009154 <_isatty_r>:
 8009154:	b538      	push	{r3, r4, r5, lr}
 8009156:	4d06      	ldr	r5, [pc, #24]	; (8009170 <_isatty_r+0x1c>)
 8009158:	2300      	movs	r3, #0
 800915a:	4604      	mov	r4, r0
 800915c:	4608      	mov	r0, r1
 800915e:	602b      	str	r3, [r5, #0]
 8009160:	f7f9 fce5 	bl	8002b2e <_isatty>
 8009164:	1c43      	adds	r3, r0, #1
 8009166:	d102      	bne.n	800916e <_isatty_r+0x1a>
 8009168:	682b      	ldr	r3, [r5, #0]
 800916a:	b103      	cbz	r3, 800916e <_isatty_r+0x1a>
 800916c:	6023      	str	r3, [r4, #0]
 800916e:	bd38      	pop	{r3, r4, r5, pc}
 8009170:	200002e0 	.word	0x200002e0

08009174 <_lseek_r>:
 8009174:	b538      	push	{r3, r4, r5, lr}
 8009176:	4d07      	ldr	r5, [pc, #28]	; (8009194 <_lseek_r+0x20>)
 8009178:	4604      	mov	r4, r0
 800917a:	4608      	mov	r0, r1
 800917c:	4611      	mov	r1, r2
 800917e:	2200      	movs	r2, #0
 8009180:	602a      	str	r2, [r5, #0]
 8009182:	461a      	mov	r2, r3
 8009184:	f7f9 fcde 	bl	8002b44 <_lseek>
 8009188:	1c43      	adds	r3, r0, #1
 800918a:	d102      	bne.n	8009192 <_lseek_r+0x1e>
 800918c:	682b      	ldr	r3, [r5, #0]
 800918e:	b103      	cbz	r3, 8009192 <_lseek_r+0x1e>
 8009190:	6023      	str	r3, [r4, #0]
 8009192:	bd38      	pop	{r3, r4, r5, pc}
 8009194:	200002e0 	.word	0x200002e0

08009198 <_read_r>:
 8009198:	b538      	push	{r3, r4, r5, lr}
 800919a:	4d07      	ldr	r5, [pc, #28]	; (80091b8 <_read_r+0x20>)
 800919c:	4604      	mov	r4, r0
 800919e:	4608      	mov	r0, r1
 80091a0:	4611      	mov	r1, r2
 80091a2:	2200      	movs	r2, #0
 80091a4:	602a      	str	r2, [r5, #0]
 80091a6:	461a      	mov	r2, r3
 80091a8:	f7f9 fc6c 	bl	8002a84 <_read>
 80091ac:	1c43      	adds	r3, r0, #1
 80091ae:	d102      	bne.n	80091b6 <_read_r+0x1e>
 80091b0:	682b      	ldr	r3, [r5, #0]
 80091b2:	b103      	cbz	r3, 80091b6 <_read_r+0x1e>
 80091b4:	6023      	str	r3, [r4, #0]
 80091b6:	bd38      	pop	{r3, r4, r5, pc}
 80091b8:	200002e0 	.word	0x200002e0

080091bc <_init>:
 80091bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091be:	bf00      	nop
 80091c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091c2:	bc08      	pop	{r3}
 80091c4:	469e      	mov	lr, r3
 80091c6:	4770      	bx	lr

080091c8 <_fini>:
 80091c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ca:	bf00      	nop
 80091cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ce:	bc08      	pop	{r3}
 80091d0:	469e      	mov	lr, r3
 80091d2:	4770      	bx	lr
