
p1_nucleo_temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000412c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08004268  08004268  00014268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042e4  080042e4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080042e4  080042e4  000142e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042ec  080042ec  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042ec  080042ec  000142ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042f0  080042f0  000142f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080042f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  2000005c  08004350  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08004350  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009576  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001642  00000000  00000000  0002963e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e8  00000000  00000000  0002ac80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006ff  00000000  00000000  0002b568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015889  00000000  00000000  0002bc67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b997  00000000  00000000  000414f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086b7b  00000000  00000000  0004ce87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b7c  00000000  00000000  000d3a04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000d6580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000005c 	.word	0x2000005c
 8000158:	00000000 	.word	0x00000000
 800015c:	08004250 	.word	0x08004250

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000060 	.word	0x20000060
 8000178:	08004250 	.word	0x08004250

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_dmul>:
 800018c:	b570      	push	{r4, r5, r6, lr}
 800018e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000192:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000196:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800019a:	bf1d      	ittte	ne
 800019c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001a0:	ea94 0f0c 	teqne	r4, ip
 80001a4:	ea95 0f0c 	teqne	r5, ip
 80001a8:	f000 f8de 	bleq	8000368 <__aeabi_dmul+0x1dc>
 80001ac:	442c      	add	r4, r5
 80001ae:	ea81 0603 	eor.w	r6, r1, r3
 80001b2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001b6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001ba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001be:	bf18      	it	ne
 80001c0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80001c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80001c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001cc:	d038      	beq.n	8000240 <__aeabi_dmul+0xb4>
 80001ce:	fba0 ce02 	umull	ip, lr, r0, r2
 80001d2:	f04f 0500 	mov.w	r5, #0
 80001d6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001da:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001de:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001e2:	f04f 0600 	mov.w	r6, #0
 80001e6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ea:	f09c 0f00 	teq	ip, #0
 80001ee:	bf18      	it	ne
 80001f0:	f04e 0e01 	orrne.w	lr, lr, #1
 80001f4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001f8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001fc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000200:	d204      	bcs.n	800020c <__aeabi_dmul+0x80>
 8000202:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000206:	416d      	adcs	r5, r5
 8000208:	eb46 0606 	adc.w	r6, r6, r6
 800020c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000210:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000214:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000218:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800021c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000220:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000224:	bf88      	it	hi
 8000226:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800022a:	d81e      	bhi.n	800026a <__aeabi_dmul+0xde>
 800022c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000230:	bf08      	it	eq
 8000232:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000236:	f150 0000 	adcs.w	r0, r0, #0
 800023a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800023e:	bd70      	pop	{r4, r5, r6, pc}
 8000240:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000244:	ea46 0101 	orr.w	r1, r6, r1
 8000248:	ea40 0002 	orr.w	r0, r0, r2
 800024c:	ea81 0103 	eor.w	r1, r1, r3
 8000250:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000254:	bfc2      	ittt	gt
 8000256:	ebd4 050c 	rsbsgt	r5, r4, ip
 800025a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800025e:	bd70      	popgt	{r4, r5, r6, pc}
 8000260:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000264:	f04f 0e00 	mov.w	lr, #0
 8000268:	3c01      	subs	r4, #1
 800026a:	f300 80ab 	bgt.w	80003c4 <__aeabi_dmul+0x238>
 800026e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000272:	bfde      	ittt	le
 8000274:	2000      	movle	r0, #0
 8000276:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800027a:	bd70      	pople	{r4, r5, r6, pc}
 800027c:	f1c4 0400 	rsb	r4, r4, #0
 8000280:	3c20      	subs	r4, #32
 8000282:	da35      	bge.n	80002f0 <__aeabi_dmul+0x164>
 8000284:	340c      	adds	r4, #12
 8000286:	dc1b      	bgt.n	80002c0 <__aeabi_dmul+0x134>
 8000288:	f104 0414 	add.w	r4, r4, #20
 800028c:	f1c4 0520 	rsb	r5, r4, #32
 8000290:	fa00 f305 	lsl.w	r3, r0, r5
 8000294:	fa20 f004 	lsr.w	r0, r0, r4
 8000298:	fa01 f205 	lsl.w	r2, r1, r5
 800029c:	ea40 0002 	orr.w	r0, r0, r2
 80002a0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002ac:	fa21 f604 	lsr.w	r6, r1, r4
 80002b0:	eb42 0106 	adc.w	r1, r2, r6
 80002b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002b8:	bf08      	it	eq
 80002ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002be:	bd70      	pop	{r4, r5, r6, pc}
 80002c0:	f1c4 040c 	rsb	r4, r4, #12
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f304 	lsl.w	r3, r0, r4
 80002cc:	fa20 f005 	lsr.w	r0, r0, r5
 80002d0:	fa01 f204 	lsl.w	r2, r1, r4
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e0:	f141 0100 	adc.w	r1, r1, #0
 80002e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e8:	bf08      	it	eq
 80002ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ee:	bd70      	pop	{r4, r5, r6, pc}
 80002f0:	f1c4 0520 	rsb	r5, r4, #32
 80002f4:	fa00 f205 	lsl.w	r2, r0, r5
 80002f8:	ea4e 0e02 	orr.w	lr, lr, r2
 80002fc:	fa20 f304 	lsr.w	r3, r0, r4
 8000300:	fa01 f205 	lsl.w	r2, r1, r5
 8000304:	ea43 0302 	orr.w	r3, r3, r2
 8000308:	fa21 f004 	lsr.w	r0, r1, r4
 800030c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000310:	fa21 f204 	lsr.w	r2, r1, r4
 8000314:	ea20 0002 	bic.w	r0, r0, r2
 8000318:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800031c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000320:	bf08      	it	eq
 8000322:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000326:	bd70      	pop	{r4, r5, r6, pc}
 8000328:	f094 0f00 	teq	r4, #0
 800032c:	d10f      	bne.n	800034e <__aeabi_dmul+0x1c2>
 800032e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000332:	0040      	lsls	r0, r0, #1
 8000334:	eb41 0101 	adc.w	r1, r1, r1
 8000338:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800033c:	bf08      	it	eq
 800033e:	3c01      	subeq	r4, #1
 8000340:	d0f7      	beq.n	8000332 <__aeabi_dmul+0x1a6>
 8000342:	ea41 0106 	orr.w	r1, r1, r6
 8000346:	f095 0f00 	teq	r5, #0
 800034a:	bf18      	it	ne
 800034c:	4770      	bxne	lr
 800034e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000352:	0052      	lsls	r2, r2, #1
 8000354:	eb43 0303 	adc.w	r3, r3, r3
 8000358:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800035c:	bf08      	it	eq
 800035e:	3d01      	subeq	r5, #1
 8000360:	d0f7      	beq.n	8000352 <__aeabi_dmul+0x1c6>
 8000362:	ea43 0306 	orr.w	r3, r3, r6
 8000366:	4770      	bx	lr
 8000368:	ea94 0f0c 	teq	r4, ip
 800036c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000370:	bf18      	it	ne
 8000372:	ea95 0f0c 	teqne	r5, ip
 8000376:	d00c      	beq.n	8000392 <__aeabi_dmul+0x206>
 8000378:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800037c:	bf18      	it	ne
 800037e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000382:	d1d1      	bne.n	8000328 <__aeabi_dmul+0x19c>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f04f 0000 	mov.w	r0, #0
 8000390:	bd70      	pop	{r4, r5, r6, pc}
 8000392:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000396:	bf06      	itte	eq
 8000398:	4610      	moveq	r0, r2
 800039a:	4619      	moveq	r1, r3
 800039c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003a0:	d019      	beq.n	80003d6 <__aeabi_dmul+0x24a>
 80003a2:	ea94 0f0c 	teq	r4, ip
 80003a6:	d102      	bne.n	80003ae <__aeabi_dmul+0x222>
 80003a8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003ac:	d113      	bne.n	80003d6 <__aeabi_dmul+0x24a>
 80003ae:	ea95 0f0c 	teq	r5, ip
 80003b2:	d105      	bne.n	80003c0 <__aeabi_dmul+0x234>
 80003b4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003b8:	bf1c      	itt	ne
 80003ba:	4610      	movne	r0, r2
 80003bc:	4619      	movne	r1, r3
 80003be:	d10a      	bne.n	80003d6 <__aeabi_dmul+0x24a>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd70      	pop	{r4, r5, r6, pc}
 80003d6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003da:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003de:	bd70      	pop	{r4, r5, r6, pc}

080003e0 <__aeabi_fmul>:
 80003e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003e8:	bf1e      	ittt	ne
 80003ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003ee:	ea92 0f0c 	teqne	r2, ip
 80003f2:	ea93 0f0c 	teqne	r3, ip
 80003f6:	d06f      	beq.n	80004d8 <__aeabi_fmul+0xf8>
 80003f8:	441a      	add	r2, r3
 80003fa:	ea80 0c01 	eor.w	ip, r0, r1
 80003fe:	0240      	lsls	r0, r0, #9
 8000400:	bf18      	it	ne
 8000402:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000406:	d01e      	beq.n	8000446 <__aeabi_fmul+0x66>
 8000408:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800040c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000410:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000414:	fba0 3101 	umull	r3, r1, r0, r1
 8000418:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800041c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000420:	bf3e      	ittt	cc
 8000422:	0049      	lslcc	r1, r1, #1
 8000424:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000428:	005b      	lslcc	r3, r3, #1
 800042a:	ea40 0001 	orr.w	r0, r0, r1
 800042e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000432:	2afd      	cmp	r2, #253	; 0xfd
 8000434:	d81d      	bhi.n	8000472 <__aeabi_fmul+0x92>
 8000436:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800043a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800043e:	bf08      	it	eq
 8000440:	f020 0001 	biceq.w	r0, r0, #1
 8000444:	4770      	bx	lr
 8000446:	f090 0f00 	teq	r0, #0
 800044a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800044e:	bf08      	it	eq
 8000450:	0249      	lsleq	r1, r1, #9
 8000452:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000456:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800045a:	3a7f      	subs	r2, #127	; 0x7f
 800045c:	bfc2      	ittt	gt
 800045e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000462:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000466:	4770      	bxgt	lr
 8000468:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800046c:	f04f 0300 	mov.w	r3, #0
 8000470:	3a01      	subs	r2, #1
 8000472:	dc5d      	bgt.n	8000530 <__aeabi_fmul+0x150>
 8000474:	f112 0f19 	cmn.w	r2, #25
 8000478:	bfdc      	itt	le
 800047a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800047e:	4770      	bxle	lr
 8000480:	f1c2 0200 	rsb	r2, r2, #0
 8000484:	0041      	lsls	r1, r0, #1
 8000486:	fa21 f102 	lsr.w	r1, r1, r2
 800048a:	f1c2 0220 	rsb	r2, r2, #32
 800048e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000492:	ea5f 0031 	movs.w	r0, r1, rrx
 8000496:	f140 0000 	adc.w	r0, r0, #0
 800049a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800049e:	bf08      	it	eq
 80004a0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004a4:	4770      	bx	lr
 80004a6:	f092 0f00 	teq	r2, #0
 80004aa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80004ae:	bf02      	ittt	eq
 80004b0:	0040      	lsleq	r0, r0, #1
 80004b2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80004b6:	3a01      	subeq	r2, #1
 80004b8:	d0f9      	beq.n	80004ae <__aeabi_fmul+0xce>
 80004ba:	ea40 000c 	orr.w	r0, r0, ip
 80004be:	f093 0f00 	teq	r3, #0
 80004c2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80004c6:	bf02      	ittt	eq
 80004c8:	0049      	lsleq	r1, r1, #1
 80004ca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80004ce:	3b01      	subeq	r3, #1
 80004d0:	d0f9      	beq.n	80004c6 <__aeabi_fmul+0xe6>
 80004d2:	ea41 010c 	orr.w	r1, r1, ip
 80004d6:	e78f      	b.n	80003f8 <__aeabi_fmul+0x18>
 80004d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004dc:	ea92 0f0c 	teq	r2, ip
 80004e0:	bf18      	it	ne
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d00a      	beq.n	80004fe <__aeabi_fmul+0x11e>
 80004e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004ec:	bf18      	it	ne
 80004ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004f2:	d1d8      	bne.n	80004a6 <__aeabi_fmul+0xc6>
 80004f4:	ea80 0001 	eor.w	r0, r0, r1
 80004f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004fc:	4770      	bx	lr
 80004fe:	f090 0f00 	teq	r0, #0
 8000502:	bf17      	itett	ne
 8000504:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000508:	4608      	moveq	r0, r1
 800050a:	f091 0f00 	teqne	r1, #0
 800050e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000512:	d014      	beq.n	800053e <__aeabi_fmul+0x15e>
 8000514:	ea92 0f0c 	teq	r2, ip
 8000518:	d101      	bne.n	800051e <__aeabi_fmul+0x13e>
 800051a:	0242      	lsls	r2, r0, #9
 800051c:	d10f      	bne.n	800053e <__aeabi_fmul+0x15e>
 800051e:	ea93 0f0c 	teq	r3, ip
 8000522:	d103      	bne.n	800052c <__aeabi_fmul+0x14c>
 8000524:	024b      	lsls	r3, r1, #9
 8000526:	bf18      	it	ne
 8000528:	4608      	movne	r0, r1
 800052a:	d108      	bne.n	800053e <__aeabi_fmul+0x15e>
 800052c:	ea80 0001 	eor.w	r0, r0, r1
 8000530:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000534:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000538:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800053c:	4770      	bx	lr
 800053e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000542:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000546:	4770      	bx	lr

08000548 <__aeabi_drsub>:
 8000548:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800054c:	e002      	b.n	8000554 <__adddf3>
 800054e:	bf00      	nop

08000550 <__aeabi_dsub>:
 8000550:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000554 <__adddf3>:
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800055a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800055e:	ea94 0f05 	teq	r4, r5
 8000562:	bf08      	it	eq
 8000564:	ea90 0f02 	teqeq	r0, r2
 8000568:	bf1f      	itttt	ne
 800056a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800056e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000572:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000576:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800057a:	f000 80e2 	beq.w	8000742 <__adddf3+0x1ee>
 800057e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000582:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000586:	bfb8      	it	lt
 8000588:	426d      	neglt	r5, r5
 800058a:	dd0c      	ble.n	80005a6 <__adddf3+0x52>
 800058c:	442c      	add	r4, r5
 800058e:	ea80 0202 	eor.w	r2, r0, r2
 8000592:	ea81 0303 	eor.w	r3, r1, r3
 8000596:	ea82 0000 	eor.w	r0, r2, r0
 800059a:	ea83 0101 	eor.w	r1, r3, r1
 800059e:	ea80 0202 	eor.w	r2, r0, r2
 80005a2:	ea81 0303 	eor.w	r3, r1, r3
 80005a6:	2d36      	cmp	r5, #54	; 0x36
 80005a8:	bf88      	it	hi
 80005aa:	bd30      	pophi	{r4, r5, pc}
 80005ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80005b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80005b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80005bc:	d002      	beq.n	80005c4 <__adddf3+0x70>
 80005be:	4240      	negs	r0, r0
 80005c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80005c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005d0:	d002      	beq.n	80005d8 <__adddf3+0x84>
 80005d2:	4252      	negs	r2, r2
 80005d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005d8:	ea94 0f05 	teq	r4, r5
 80005dc:	f000 80a7 	beq.w	800072e <__adddf3+0x1da>
 80005e0:	f1a4 0401 	sub.w	r4, r4, #1
 80005e4:	f1d5 0e20 	rsbs	lr, r5, #32
 80005e8:	db0d      	blt.n	8000606 <__adddf3+0xb2>
 80005ea:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ee:	fa22 f205 	lsr.w	r2, r2, r5
 80005f2:	1880      	adds	r0, r0, r2
 80005f4:	f141 0100 	adc.w	r1, r1, #0
 80005f8:	fa03 f20e 	lsl.w	r2, r3, lr
 80005fc:	1880      	adds	r0, r0, r2
 80005fe:	fa43 f305 	asr.w	r3, r3, r5
 8000602:	4159      	adcs	r1, r3
 8000604:	e00e      	b.n	8000624 <__adddf3+0xd0>
 8000606:	f1a5 0520 	sub.w	r5, r5, #32
 800060a:	f10e 0e20 	add.w	lr, lr, #32
 800060e:	2a01      	cmp	r2, #1
 8000610:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000614:	bf28      	it	cs
 8000616:	f04c 0c02 	orrcs.w	ip, ip, #2
 800061a:	fa43 f305 	asr.w	r3, r3, r5
 800061e:	18c0      	adds	r0, r0, r3
 8000620:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000624:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000628:	d507      	bpl.n	800063a <__adddf3+0xe6>
 800062a:	f04f 0e00 	mov.w	lr, #0
 800062e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000632:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000636:	eb6e 0101 	sbc.w	r1, lr, r1
 800063a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800063e:	d31b      	bcc.n	8000678 <__adddf3+0x124>
 8000640:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000644:	d30c      	bcc.n	8000660 <__adddf3+0x10c>
 8000646:	0849      	lsrs	r1, r1, #1
 8000648:	ea5f 0030 	movs.w	r0, r0, rrx
 800064c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000650:	f104 0401 	add.w	r4, r4, #1
 8000654:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000658:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800065c:	f080 809a 	bcs.w	8000794 <__adddf3+0x240>
 8000660:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000664:	bf08      	it	eq
 8000666:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800066a:	f150 0000 	adcs.w	r0, r0, #0
 800066e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000672:	ea41 0105 	orr.w	r1, r1, r5
 8000676:	bd30      	pop	{r4, r5, pc}
 8000678:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800067c:	4140      	adcs	r0, r0
 800067e:	eb41 0101 	adc.w	r1, r1, r1
 8000682:	3c01      	subs	r4, #1
 8000684:	bf28      	it	cs
 8000686:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800068a:	d2e9      	bcs.n	8000660 <__adddf3+0x10c>
 800068c:	f091 0f00 	teq	r1, #0
 8000690:	bf04      	itt	eq
 8000692:	4601      	moveq	r1, r0
 8000694:	2000      	moveq	r0, #0
 8000696:	fab1 f381 	clz	r3, r1
 800069a:	bf08      	it	eq
 800069c:	3320      	addeq	r3, #32
 800069e:	f1a3 030b 	sub.w	r3, r3, #11
 80006a2:	f1b3 0220 	subs.w	r2, r3, #32
 80006a6:	da0c      	bge.n	80006c2 <__adddf3+0x16e>
 80006a8:	320c      	adds	r2, #12
 80006aa:	dd08      	ble.n	80006be <__adddf3+0x16a>
 80006ac:	f102 0c14 	add.w	ip, r2, #20
 80006b0:	f1c2 020c 	rsb	r2, r2, #12
 80006b4:	fa01 f00c 	lsl.w	r0, r1, ip
 80006b8:	fa21 f102 	lsr.w	r1, r1, r2
 80006bc:	e00c      	b.n	80006d8 <__adddf3+0x184>
 80006be:	f102 0214 	add.w	r2, r2, #20
 80006c2:	bfd8      	it	le
 80006c4:	f1c2 0c20 	rsble	ip, r2, #32
 80006c8:	fa01 f102 	lsl.w	r1, r1, r2
 80006cc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006d0:	bfdc      	itt	le
 80006d2:	ea41 010c 	orrle.w	r1, r1, ip
 80006d6:	4090      	lslle	r0, r2
 80006d8:	1ae4      	subs	r4, r4, r3
 80006da:	bfa2      	ittt	ge
 80006dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006e0:	4329      	orrge	r1, r5
 80006e2:	bd30      	popge	{r4, r5, pc}
 80006e4:	ea6f 0404 	mvn.w	r4, r4
 80006e8:	3c1f      	subs	r4, #31
 80006ea:	da1c      	bge.n	8000726 <__adddf3+0x1d2>
 80006ec:	340c      	adds	r4, #12
 80006ee:	dc0e      	bgt.n	800070e <__adddf3+0x1ba>
 80006f0:	f104 0414 	add.w	r4, r4, #20
 80006f4:	f1c4 0220 	rsb	r2, r4, #32
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f302 	lsl.w	r3, r1, r2
 8000700:	ea40 0003 	orr.w	r0, r0, r3
 8000704:	fa21 f304 	lsr.w	r3, r1, r4
 8000708:	ea45 0103 	orr.w	r1, r5, r3
 800070c:	bd30      	pop	{r4, r5, pc}
 800070e:	f1c4 040c 	rsb	r4, r4, #12
 8000712:	f1c4 0220 	rsb	r2, r4, #32
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 f304 	lsl.w	r3, r1, r4
 800071e:	ea40 0003 	orr.w	r0, r0, r3
 8000722:	4629      	mov	r1, r5
 8000724:	bd30      	pop	{r4, r5, pc}
 8000726:	fa21 f004 	lsr.w	r0, r1, r4
 800072a:	4629      	mov	r1, r5
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	f094 0f00 	teq	r4, #0
 8000732:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000736:	bf06      	itte	eq
 8000738:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800073c:	3401      	addeq	r4, #1
 800073e:	3d01      	subne	r5, #1
 8000740:	e74e      	b.n	80005e0 <__adddf3+0x8c>
 8000742:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000746:	bf18      	it	ne
 8000748:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800074c:	d029      	beq.n	80007a2 <__adddf3+0x24e>
 800074e:	ea94 0f05 	teq	r4, r5
 8000752:	bf08      	it	eq
 8000754:	ea90 0f02 	teqeq	r0, r2
 8000758:	d005      	beq.n	8000766 <__adddf3+0x212>
 800075a:	ea54 0c00 	orrs.w	ip, r4, r0
 800075e:	bf04      	itt	eq
 8000760:	4619      	moveq	r1, r3
 8000762:	4610      	moveq	r0, r2
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	ea91 0f03 	teq	r1, r3
 800076a:	bf1e      	ittt	ne
 800076c:	2100      	movne	r1, #0
 800076e:	2000      	movne	r0, #0
 8000770:	bd30      	popne	{r4, r5, pc}
 8000772:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000776:	d105      	bne.n	8000784 <__adddf3+0x230>
 8000778:	0040      	lsls	r0, r0, #1
 800077a:	4149      	adcs	r1, r1
 800077c:	bf28      	it	cs
 800077e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000782:	bd30      	pop	{r4, r5, pc}
 8000784:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000788:	bf3c      	itt	cc
 800078a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800078e:	bd30      	popcc	{r4, r5, pc}
 8000790:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000794:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd30      	pop	{r4, r5, pc}
 80007a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80007a6:	bf1a      	itte	ne
 80007a8:	4619      	movne	r1, r3
 80007aa:	4610      	movne	r0, r2
 80007ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80007b0:	bf1c      	itt	ne
 80007b2:	460b      	movne	r3, r1
 80007b4:	4602      	movne	r2, r0
 80007b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80007ba:	bf06      	itte	eq
 80007bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80007c0:	ea91 0f03 	teqeq	r1, r3
 80007c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80007c8:	bd30      	pop	{r4, r5, pc}
 80007ca:	bf00      	nop

080007cc <__aeabi_ui2d>:
 80007cc:	f090 0f00 	teq	r0, #0
 80007d0:	bf04      	itt	eq
 80007d2:	2100      	moveq	r1, #0
 80007d4:	4770      	bxeq	lr
 80007d6:	b530      	push	{r4, r5, lr}
 80007d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007e0:	f04f 0500 	mov.w	r5, #0
 80007e4:	f04f 0100 	mov.w	r1, #0
 80007e8:	e750      	b.n	800068c <__adddf3+0x138>
 80007ea:	bf00      	nop

080007ec <__aeabi_i2d>:
 80007ec:	f090 0f00 	teq	r0, #0
 80007f0:	bf04      	itt	eq
 80007f2:	2100      	moveq	r1, #0
 80007f4:	4770      	bxeq	lr
 80007f6:	b530      	push	{r4, r5, lr}
 80007f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000800:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000804:	bf48      	it	mi
 8000806:	4240      	negmi	r0, r0
 8000808:	f04f 0100 	mov.w	r1, #0
 800080c:	e73e      	b.n	800068c <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_f2d>:
 8000810:	0042      	lsls	r2, r0, #1
 8000812:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000816:	ea4f 0131 	mov.w	r1, r1, rrx
 800081a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800081e:	bf1f      	itttt	ne
 8000820:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000824:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000828:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800082c:	4770      	bxne	lr
 800082e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000832:	bf08      	it	eq
 8000834:	4770      	bxeq	lr
 8000836:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800083a:	bf04      	itt	eq
 800083c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000840:	4770      	bxeq	lr
 8000842:	b530      	push	{r4, r5, lr}
 8000844:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000848:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800084c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000850:	e71c      	b.n	800068c <__adddf3+0x138>
 8000852:	bf00      	nop

08000854 <__aeabi_ul2d>:
 8000854:	ea50 0201 	orrs.w	r2, r0, r1
 8000858:	bf08      	it	eq
 800085a:	4770      	bxeq	lr
 800085c:	b530      	push	{r4, r5, lr}
 800085e:	f04f 0500 	mov.w	r5, #0
 8000862:	e00a      	b.n	800087a <__aeabi_l2d+0x16>

08000864 <__aeabi_l2d>:
 8000864:	ea50 0201 	orrs.w	r2, r0, r1
 8000868:	bf08      	it	eq
 800086a:	4770      	bxeq	lr
 800086c:	b530      	push	{r4, r5, lr}
 800086e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000872:	d502      	bpl.n	800087a <__aeabi_l2d+0x16>
 8000874:	4240      	negs	r0, r0
 8000876:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800087a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800087e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000882:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000886:	f43f aed8 	beq.w	800063a <__adddf3+0xe6>
 800088a:	f04f 0203 	mov.w	r2, #3
 800088e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000892:	bf18      	it	ne
 8000894:	3203      	addne	r2, #3
 8000896:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800089a:	bf18      	it	ne
 800089c:	3203      	addne	r2, #3
 800089e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80008a2:	f1c2 0320 	rsb	r3, r2, #32
 80008a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80008aa:	fa20 f002 	lsr.w	r0, r0, r2
 80008ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80008b2:	ea40 000e 	orr.w	r0, r0, lr
 80008b6:	fa21 f102 	lsr.w	r1, r1, r2
 80008ba:	4414      	add	r4, r2
 80008bc:	e6bd      	b.n	800063a <__adddf3+0xe6>
 80008be:	bf00      	nop

080008c0 <__aeabi_d2f>:
 80008c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008c8:	bf24      	itt	cs
 80008ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008d2:	d90d      	bls.n	80008f0 <__aeabi_d2f+0x30>
 80008d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008e8:	bf08      	it	eq
 80008ea:	f020 0001 	biceq.w	r0, r0, #1
 80008ee:	4770      	bx	lr
 80008f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008f4:	d121      	bne.n	800093a <__aeabi_d2f+0x7a>
 80008f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008fa:	bfbc      	itt	lt
 80008fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000900:	4770      	bxlt	lr
 8000902:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000906:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800090a:	f1c2 0218 	rsb	r2, r2, #24
 800090e:	f1c2 0c20 	rsb	ip, r2, #32
 8000912:	fa10 f30c 	lsls.w	r3, r0, ip
 8000916:	fa20 f002 	lsr.w	r0, r0, r2
 800091a:	bf18      	it	ne
 800091c:	f040 0001 	orrne.w	r0, r0, #1
 8000920:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000924:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000928:	fa03 fc0c 	lsl.w	ip, r3, ip
 800092c:	ea40 000c 	orr.w	r0, r0, ip
 8000930:	fa23 f302 	lsr.w	r3, r3, r2
 8000934:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000938:	e7cc      	b.n	80008d4 <__aeabi_d2f+0x14>
 800093a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800093e:	d107      	bne.n	8000950 <__aeabi_d2f+0x90>
 8000940:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000944:	bf1e      	ittt	ne
 8000946:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800094a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800094e:	4770      	bxne	lr
 8000950:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000954:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000958:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop

08000960 <__aeabi_f2uiz>:
 8000960:	0042      	lsls	r2, r0, #1
 8000962:	d20e      	bcs.n	8000982 <__aeabi_f2uiz+0x22>
 8000964:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000968:	d30b      	bcc.n	8000982 <__aeabi_f2uiz+0x22>
 800096a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800096e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000972:	d409      	bmi.n	8000988 <__aeabi_f2uiz+0x28>
 8000974:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000978:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800097c:	fa23 f002 	lsr.w	r0, r3, r2
 8000980:	4770      	bx	lr
 8000982:	f04f 0000 	mov.w	r0, #0
 8000986:	4770      	bx	lr
 8000988:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800098c:	d101      	bne.n	8000992 <__aeabi_f2uiz+0x32>
 800098e:	0242      	lsls	r2, r0, #9
 8000990:	d102      	bne.n	8000998 <__aeabi_f2uiz+0x38>
 8000992:	f04f 30ff 	mov.w	r0, #4294967295
 8000996:	4770      	bx	lr
 8000998:	f04f 0000 	mov.w	r0, #0
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop

080009a0 <__aeabi_uldivmod>:
 80009a0:	b953      	cbnz	r3, 80009b8 <__aeabi_uldivmod+0x18>
 80009a2:	b94a      	cbnz	r2, 80009b8 <__aeabi_uldivmod+0x18>
 80009a4:	2900      	cmp	r1, #0
 80009a6:	bf08      	it	eq
 80009a8:	2800      	cmpeq	r0, #0
 80009aa:	bf1c      	itt	ne
 80009ac:	f04f 31ff 	movne.w	r1, #4294967295
 80009b0:	f04f 30ff 	movne.w	r0, #4294967295
 80009b4:	f000 b972 	b.w	8000c9c <__aeabi_idiv0>
 80009b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80009bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c0:	f000 f806 	bl	80009d0 <__udivmoddi4>
 80009c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009cc:	b004      	add	sp, #16
 80009ce:	4770      	bx	lr

080009d0 <__udivmoddi4>:
 80009d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d4:	9e08      	ldr	r6, [sp, #32]
 80009d6:	460d      	mov	r5, r1
 80009d8:	4604      	mov	r4, r0
 80009da:	468e      	mov	lr, r1
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d14c      	bne.n	8000a7a <__udivmoddi4+0xaa>
 80009e0:	428a      	cmp	r2, r1
 80009e2:	4694      	mov	ip, r2
 80009e4:	d967      	bls.n	8000ab6 <__udivmoddi4+0xe6>
 80009e6:	fab2 f382 	clz	r3, r2
 80009ea:	b153      	cbz	r3, 8000a02 <__udivmoddi4+0x32>
 80009ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80009f0:	f1c3 0220 	rsb	r2, r3, #32
 80009f4:	fa01 fe03 	lsl.w	lr, r1, r3
 80009f8:	fa20 f202 	lsr.w	r2, r0, r2
 80009fc:	ea42 0e0e 	orr.w	lr, r2, lr
 8000a00:	409c      	lsls	r4, r3
 8000a02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a06:	fbbe f1f7 	udiv	r1, lr, r7
 8000a0a:	fa1f f58c 	uxth.w	r5, ip
 8000a0e:	fb07 ee11 	mls	lr, r7, r1, lr
 8000a12:	fb01 f005 	mul.w	r0, r1, r5
 8000a16:	0c22      	lsrs	r2, r4, #16
 8000a18:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000a1c:	4290      	cmp	r0, r2
 8000a1e:	d90a      	bls.n	8000a36 <__udivmoddi4+0x66>
 8000a20:	eb1c 0202 	adds.w	r2, ip, r2
 8000a24:	f101 3eff 	add.w	lr, r1, #4294967295
 8000a28:	f080 8119 	bcs.w	8000c5e <__udivmoddi4+0x28e>
 8000a2c:	4290      	cmp	r0, r2
 8000a2e:	f240 8116 	bls.w	8000c5e <__udivmoddi4+0x28e>
 8000a32:	3902      	subs	r1, #2
 8000a34:	4462      	add	r2, ip
 8000a36:	1a12      	subs	r2, r2, r0
 8000a38:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a3c:	fb07 2210 	mls	r2, r7, r0, r2
 8000a40:	fb00 f505 	mul.w	r5, r0, r5
 8000a44:	b2a4      	uxth	r4, r4
 8000a46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a4a:	42a5      	cmp	r5, r4
 8000a4c:	d90a      	bls.n	8000a64 <__udivmoddi4+0x94>
 8000a4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000a52:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a56:	f080 8104 	bcs.w	8000c62 <__udivmoddi4+0x292>
 8000a5a:	42a5      	cmp	r5, r4
 8000a5c:	f240 8101 	bls.w	8000c62 <__udivmoddi4+0x292>
 8000a60:	4464      	add	r4, ip
 8000a62:	3802      	subs	r0, #2
 8000a64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a68:	2100      	movs	r1, #0
 8000a6a:	1b64      	subs	r4, r4, r5
 8000a6c:	b11e      	cbz	r6, 8000a76 <__udivmoddi4+0xa6>
 8000a6e:	40dc      	lsrs	r4, r3
 8000a70:	2300      	movs	r3, #0
 8000a72:	e9c6 4300 	strd	r4, r3, [r6]
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d908      	bls.n	8000a90 <__udivmoddi4+0xc0>
 8000a7e:	2e00      	cmp	r6, #0
 8000a80:	f000 80ea 	beq.w	8000c58 <__udivmoddi4+0x288>
 8000a84:	2100      	movs	r1, #0
 8000a86:	e9c6 0500 	strd	r0, r5, [r6]
 8000a8a:	4608      	mov	r0, r1
 8000a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a90:	fab3 f183 	clz	r1, r3
 8000a94:	2900      	cmp	r1, #0
 8000a96:	d148      	bne.n	8000b2a <__udivmoddi4+0x15a>
 8000a98:	42ab      	cmp	r3, r5
 8000a9a:	d302      	bcc.n	8000aa2 <__udivmoddi4+0xd2>
 8000a9c:	4282      	cmp	r2, r0
 8000a9e:	f200 80f8 	bhi.w	8000c92 <__udivmoddi4+0x2c2>
 8000aa2:	1a84      	subs	r4, r0, r2
 8000aa4:	eb65 0203 	sbc.w	r2, r5, r3
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	4696      	mov	lr, r2
 8000aac:	2e00      	cmp	r6, #0
 8000aae:	d0e2      	beq.n	8000a76 <__udivmoddi4+0xa6>
 8000ab0:	e9c6 4e00 	strd	r4, lr, [r6]
 8000ab4:	e7df      	b.n	8000a76 <__udivmoddi4+0xa6>
 8000ab6:	b902      	cbnz	r2, 8000aba <__udivmoddi4+0xea>
 8000ab8:	deff      	udf	#255	; 0xff
 8000aba:	fab2 f382 	clz	r3, r2
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f040 808e 	bne.w	8000be0 <__udivmoddi4+0x210>
 8000ac4:	1a88      	subs	r0, r1, r2
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	0c17      	lsrs	r7, r2, #16
 8000aca:	fa1f fe82 	uxth.w	lr, r2
 8000ace:	fbb0 f5f7 	udiv	r5, r0, r7
 8000ad2:	fb07 0015 	mls	r0, r7, r5, r0
 8000ad6:	0c22      	lsrs	r2, r4, #16
 8000ad8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000adc:	fb0e f005 	mul.w	r0, lr, r5
 8000ae0:	4290      	cmp	r0, r2
 8000ae2:	d908      	bls.n	8000af6 <__udivmoddi4+0x126>
 8000ae4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ae8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000aec:	d202      	bcs.n	8000af4 <__udivmoddi4+0x124>
 8000aee:	4290      	cmp	r0, r2
 8000af0:	f200 80cc 	bhi.w	8000c8c <__udivmoddi4+0x2bc>
 8000af4:	4645      	mov	r5, r8
 8000af6:	1a12      	subs	r2, r2, r0
 8000af8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000afc:	fb07 2210 	mls	r2, r7, r0, r2
 8000b00:	fb0e fe00 	mul.w	lr, lr, r0
 8000b04:	b2a4      	uxth	r4, r4
 8000b06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b0a:	45a6      	cmp	lr, r4
 8000b0c:	d908      	bls.n	8000b20 <__udivmoddi4+0x150>
 8000b0e:	eb1c 0404 	adds.w	r4, ip, r4
 8000b12:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b16:	d202      	bcs.n	8000b1e <__udivmoddi4+0x14e>
 8000b18:	45a6      	cmp	lr, r4
 8000b1a:	f200 80b4 	bhi.w	8000c86 <__udivmoddi4+0x2b6>
 8000b1e:	4610      	mov	r0, r2
 8000b20:	eba4 040e 	sub.w	r4, r4, lr
 8000b24:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b28:	e7a0      	b.n	8000a6c <__udivmoddi4+0x9c>
 8000b2a:	f1c1 0720 	rsb	r7, r1, #32
 8000b2e:	408b      	lsls	r3, r1
 8000b30:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b34:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b38:	fa25 fa07 	lsr.w	sl, r5, r7
 8000b3c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b40:	fbba f8f9 	udiv	r8, sl, r9
 8000b44:	408d      	lsls	r5, r1
 8000b46:	fa20 f307 	lsr.w	r3, r0, r7
 8000b4a:	fb09 aa18 	mls	sl, r9, r8, sl
 8000b4e:	fa1f fe8c 	uxth.w	lr, ip
 8000b52:	432b      	orrs	r3, r5
 8000b54:	fa00 f501 	lsl.w	r5, r0, r1
 8000b58:	fb08 f00e 	mul.w	r0, r8, lr
 8000b5c:	0c1c      	lsrs	r4, r3, #16
 8000b5e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000b62:	42a0      	cmp	r0, r4
 8000b64:	fa02 f201 	lsl.w	r2, r2, r1
 8000b68:	d90b      	bls.n	8000b82 <__udivmoddi4+0x1b2>
 8000b6a:	eb1c 0404 	adds.w	r4, ip, r4
 8000b6e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b72:	f080 8086 	bcs.w	8000c82 <__udivmoddi4+0x2b2>
 8000b76:	42a0      	cmp	r0, r4
 8000b78:	f240 8083 	bls.w	8000c82 <__udivmoddi4+0x2b2>
 8000b7c:	f1a8 0802 	sub.w	r8, r8, #2
 8000b80:	4464      	add	r4, ip
 8000b82:	1a24      	subs	r4, r4, r0
 8000b84:	b298      	uxth	r0, r3
 8000b86:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b8a:	fb09 4413 	mls	r4, r9, r3, r4
 8000b8e:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b92:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000b96:	45a6      	cmp	lr, r4
 8000b98:	d908      	bls.n	8000bac <__udivmoddi4+0x1dc>
 8000b9a:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ba2:	d26a      	bcs.n	8000c7a <__udivmoddi4+0x2aa>
 8000ba4:	45a6      	cmp	lr, r4
 8000ba6:	d968      	bls.n	8000c7a <__udivmoddi4+0x2aa>
 8000ba8:	3b02      	subs	r3, #2
 8000baa:	4464      	add	r4, ip
 8000bac:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000bb0:	fba0 9302 	umull	r9, r3, r0, r2
 8000bb4:	eba4 040e 	sub.w	r4, r4, lr
 8000bb8:	429c      	cmp	r4, r3
 8000bba:	46c8      	mov	r8, r9
 8000bbc:	469e      	mov	lr, r3
 8000bbe:	d354      	bcc.n	8000c6a <__udivmoddi4+0x29a>
 8000bc0:	d051      	beq.n	8000c66 <__udivmoddi4+0x296>
 8000bc2:	2e00      	cmp	r6, #0
 8000bc4:	d067      	beq.n	8000c96 <__udivmoddi4+0x2c6>
 8000bc6:	ebb5 0308 	subs.w	r3, r5, r8
 8000bca:	eb64 040e 	sbc.w	r4, r4, lr
 8000bce:	40cb      	lsrs	r3, r1
 8000bd0:	fa04 f707 	lsl.w	r7, r4, r7
 8000bd4:	431f      	orrs	r7, r3
 8000bd6:	40cc      	lsrs	r4, r1
 8000bd8:	e9c6 7400 	strd	r7, r4, [r6]
 8000bdc:	2100      	movs	r1, #0
 8000bde:	e74a      	b.n	8000a76 <__udivmoddi4+0xa6>
 8000be0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000be4:	f1c3 0020 	rsb	r0, r3, #32
 8000be8:	40c1      	lsrs	r1, r0
 8000bea:	409d      	lsls	r5, r3
 8000bec:	fa24 f000 	lsr.w	r0, r4, r0
 8000bf0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bf4:	4328      	orrs	r0, r5
 8000bf6:	fbb1 f5f7 	udiv	r5, r1, r7
 8000bfa:	fb07 1115 	mls	r1, r7, r5, r1
 8000bfe:	fa1f fe8c 	uxth.w	lr, ip
 8000c02:	0c02      	lsrs	r2, r0, #16
 8000c04:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c08:	fb05 f10e 	mul.w	r1, r5, lr
 8000c0c:	4291      	cmp	r1, r2
 8000c0e:	fa04 f403 	lsl.w	r4, r4, r3
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x256>
 8000c14:	eb1c 0202 	adds.w	r2, ip, r2
 8000c18:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c1c:	d22f      	bcs.n	8000c7e <__udivmoddi4+0x2ae>
 8000c1e:	4291      	cmp	r1, r2
 8000c20:	d92d      	bls.n	8000c7e <__udivmoddi4+0x2ae>
 8000c22:	3d02      	subs	r5, #2
 8000c24:	4462      	add	r2, ip
 8000c26:	1a52      	subs	r2, r2, r1
 8000c28:	fbb2 f1f7 	udiv	r1, r2, r7
 8000c2c:	fb07 2211 	mls	r2, r7, r1, r2
 8000c30:	b280      	uxth	r0, r0
 8000c32:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000c36:	fb01 f20e 	mul.w	r2, r1, lr
 8000c3a:	4282      	cmp	r2, r0
 8000c3c:	d908      	bls.n	8000c50 <__udivmoddi4+0x280>
 8000c3e:	eb1c 0000 	adds.w	r0, ip, r0
 8000c42:	f101 38ff 	add.w	r8, r1, #4294967295
 8000c46:	d216      	bcs.n	8000c76 <__udivmoddi4+0x2a6>
 8000c48:	4282      	cmp	r2, r0
 8000c4a:	d914      	bls.n	8000c76 <__udivmoddi4+0x2a6>
 8000c4c:	3902      	subs	r1, #2
 8000c4e:	4460      	add	r0, ip
 8000c50:	1a80      	subs	r0, r0, r2
 8000c52:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c56:	e73a      	b.n	8000ace <__udivmoddi4+0xfe>
 8000c58:	4631      	mov	r1, r6
 8000c5a:	4630      	mov	r0, r6
 8000c5c:	e70b      	b.n	8000a76 <__udivmoddi4+0xa6>
 8000c5e:	4671      	mov	r1, lr
 8000c60:	e6e9      	b.n	8000a36 <__udivmoddi4+0x66>
 8000c62:	4610      	mov	r0, r2
 8000c64:	e6fe      	b.n	8000a64 <__udivmoddi4+0x94>
 8000c66:	454d      	cmp	r5, r9
 8000c68:	d2ab      	bcs.n	8000bc2 <__udivmoddi4+0x1f2>
 8000c6a:	ebb9 0802 	subs.w	r8, r9, r2
 8000c6e:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000c72:	3801      	subs	r0, #1
 8000c74:	e7a5      	b.n	8000bc2 <__udivmoddi4+0x1f2>
 8000c76:	4641      	mov	r1, r8
 8000c78:	e7ea      	b.n	8000c50 <__udivmoddi4+0x280>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	e796      	b.n	8000bac <__udivmoddi4+0x1dc>
 8000c7e:	4645      	mov	r5, r8
 8000c80:	e7d1      	b.n	8000c26 <__udivmoddi4+0x256>
 8000c82:	46d0      	mov	r8, sl
 8000c84:	e77d      	b.n	8000b82 <__udivmoddi4+0x1b2>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	e749      	b.n	8000b20 <__udivmoddi4+0x150>
 8000c8c:	3d02      	subs	r5, #2
 8000c8e:	4462      	add	r2, ip
 8000c90:	e731      	b.n	8000af6 <__udivmoddi4+0x126>
 8000c92:	4608      	mov	r0, r1
 8000c94:	e70a      	b.n	8000aac <__udivmoddi4+0xdc>
 8000c96:	4631      	mov	r1, r6
 8000c98:	e6ed      	b.n	8000a76 <__udivmoddi4+0xa6>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_idiv0>:
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b089      	sub	sp, #36	; 0x24
 8000ca4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ca6:	f000 faee 	bl	8001286 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000caa:	f000 f899 	bl	8000de0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cae:	f000 f93d 	bl	8000f2c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cb2:	f000 f911 	bl	8000ed8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000cb6:	f000 f8e1 	bl	8000e7c <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  buf[0] = REG_TEMP;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	713b      	strb	r3, [r7, #4]
	  ret = HAL_I2C_Master_Transmit(&hi2c1, TMP102_ADDR, buf, 1, HAL_MAX_DELAY);
 8000cbe:	2390      	movs	r3, #144	; 0x90
 8000cc0:	b299      	uxth	r1, r3
 8000cc2:	1d3a      	adds	r2, r7, #4
 8000cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc8:	9300      	str	r3, [sp, #0]
 8000cca:	2301      	movs	r3, #1
 8000ccc:	483c      	ldr	r0, [pc, #240]	; (8000dc0 <main+0x120>)
 8000cce:	f000 ff3b 	bl	8001b48 <HAL_I2C_Master_Transmit>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	757b      	strb	r3, [r7, #21]
	  if(ret != HAL_OK) {
 8000cd6:	7d7b      	ldrb	r3, [r7, #21]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d005      	beq.n	8000ce8 <main+0x48>
		  strcpy((char*)buf, "Error Tx");
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	4a39      	ldr	r2, [pc, #228]	; (8000dc4 <main+0x124>)
 8000ce0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ce2:	c303      	stmia	r3!, {r0, r1}
 8000ce4:	701a      	strb	r2, [r3, #0]
 8000ce6:	e059      	b.n	8000d9c <main+0xfc>
	  } else {
		ret = HAL_I2C_Master_Receive(&hi2c1, TMP102_ADDR, buf, 2, HAL_MAX_DELAY);
 8000ce8:	2390      	movs	r3, #144	; 0x90
 8000cea:	b299      	uxth	r1, r3
 8000cec:	1d3a      	adds	r2, r7, #4
 8000cee:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf2:	9300      	str	r3, [sp, #0]
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	4832      	ldr	r0, [pc, #200]	; (8000dc0 <main+0x120>)
 8000cf8:	f001 f824 	bl	8001d44 <HAL_I2C_Master_Receive>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	757b      	strb	r3, [r7, #21]
		if(ret != HAL_OK) {
 8000d00:	7d7b      	ldrb	r3, [r7, #21]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d005      	beq.n	8000d12 <main+0x72>
			strcpy((char*)buf, "Error Rx");
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	4a2f      	ldr	r2, [pc, #188]	; (8000dc8 <main+0x128>)
 8000d0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d0c:	c303      	stmia	r3!, {r0, r1}
 8000d0e:	701a      	strb	r2, [r3, #0]
 8000d10:	e044      	b.n	8000d9c <main+0xfc>
		} else {
			val = ((int16_t)buf[0] << 4) | (buf[1] >> 4);
 8000d12:	793b      	ldrb	r3, [r7, #4]
 8000d14:	011b      	lsls	r3, r3, #4
 8000d16:	b21a      	sxth	r2, r3
 8000d18:	797b      	ldrb	r3, [r7, #5]
 8000d1a:	091b      	lsrs	r3, r3, #4
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	b21b      	sxth	r3, r3
 8000d20:	4313      	orrs	r3, r2
 8000d22:	82fb      	strh	r3, [r7, #22]

			if(val > 0x7FF){
 8000d24:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000d28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d2c:	db05      	blt.n	8000d3a <main+0x9a>
				val |= 0xF000;
 8000d2e:	8afb      	ldrh	r3, [r7, #22]
 8000d30:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8000d34:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8000d38:	82fb      	strh	r3, [r7, #22]
			}

			temp_c = val* 0.0625;  //zamienia na celsjusze
 8000d3a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fd54 	bl	80007ec <__aeabi_i2d>
 8000d44:	f04f 0200 	mov.w	r2, #0
 8000d48:	4b20      	ldr	r3, [pc, #128]	; (8000dcc <main+0x12c>)
 8000d4a:	f7ff fa1f 	bl	800018c <__aeabi_dmul>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	460b      	mov	r3, r1
 8000d52:	4610      	mov	r0, r2
 8000d54:	4619      	mov	r1, r3
 8000d56:	f7ff fdb3 	bl	80008c0 <__aeabi_d2f>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	613b      	str	r3, [r7, #16]

			temp_c *= 100; // zamiana na format dziesiętny
 8000d5e:	491c      	ldr	r1, [pc, #112]	; (8000dd0 <main+0x130>)
 8000d60:	6938      	ldr	r0, [r7, #16]
 8000d62:	f7ff fb3d 	bl	80003e0 <__aeabi_fmul>
 8000d66:	4603      	mov	r3, r0
 8000d68:	613b      	str	r3, [r7, #16]
			sprintf((char*)buf,
					"%u.%02u C\r\n",
					((unsigned int)temp_c / 100),
 8000d6a:	6938      	ldr	r0, [r7, #16]
 8000d6c:	f7ff fdf8 	bl	8000960 <__aeabi_f2uiz>
 8000d70:	4603      	mov	r3, r0
			sprintf((char*)buf,
 8000d72:	4a18      	ldr	r2, [pc, #96]	; (8000dd4 <main+0x134>)
 8000d74:	fba2 2303 	umull	r2, r3, r2, r3
 8000d78:	095c      	lsrs	r4, r3, #5
					((unsigned int)temp_c % 100));
 8000d7a:	6938      	ldr	r0, [r7, #16]
 8000d7c:	f7ff fdf0 	bl	8000960 <__aeabi_f2uiz>
 8000d80:	4602      	mov	r2, r0
			sprintf((char*)buf,
 8000d82:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <main+0x134>)
 8000d84:	fba3 1302 	umull	r1, r3, r3, r2
 8000d88:	095b      	lsrs	r3, r3, #5
 8000d8a:	2164      	movs	r1, #100	; 0x64
 8000d8c:	fb01 f303 	mul.w	r3, r1, r3
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	1d38      	adds	r0, r7, #4
 8000d94:	4622      	mov	r2, r4
 8000d96:	4910      	ldr	r1, [pc, #64]	; (8000dd8 <main+0x138>)
 8000d98:	f002 fda8 	bl	80038ec <siprintf>
		}
	  }

	  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff f9ec 	bl	800017c <strlen>
 8000da4:	4603      	mov	r3, r0
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	1d39      	adds	r1, r7, #4
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dae:	480b      	ldr	r0, [pc, #44]	; (8000ddc <main+0x13c>)
 8000db0:	f002 fbc6 	bl	8003540 <HAL_UART_Transmit>

	  HAL_Delay(500);
 8000db4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000db8:	f000 fad4 	bl	8001364 <HAL_Delay>
	  buf[0] = REG_TEMP;
 8000dbc:	e77d      	b.n	8000cba <main+0x1a>
 8000dbe:	bf00      	nop
 8000dc0:	20000078 	.word	0x20000078
 8000dc4:	08004268 	.word	0x08004268
 8000dc8:	08004274 	.word	0x08004274
 8000dcc:	3fb00000 	.word	0x3fb00000
 8000dd0:	42c80000 	.word	0x42c80000
 8000dd4:	51eb851f 	.word	0x51eb851f
 8000dd8:	08004280 	.word	0x08004280
 8000ddc:	200000cc 	.word	0x200000cc

08000de0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b092      	sub	sp, #72	; 0x48
 8000de4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	2234      	movs	r2, #52	; 0x34
 8000dec:	2100      	movs	r1, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f002 fd9c 	bl	800392c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df4:	463b      	mov	r3, r7
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]
 8000e00:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e02:	4b1d      	ldr	r3, [pc, #116]	; (8000e78 <SystemClock_Config+0x98>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000e0a:	4a1b      	ldr	r2, [pc, #108]	; (8000e78 <SystemClock_Config+0x98>)
 8000e0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e10:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e12:	2302      	movs	r3, #2
 8000e14:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e16:	2301      	movs	r3, #1
 8000e18:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e1a:	2310      	movs	r3, #16
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e22:	2300      	movs	r3, #0
 8000e24:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000e26:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000e2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000e2c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000e30:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	4618      	mov	r0, r3
 8000e38:	f001 fd3c 	bl	80028b4 <HAL_RCC_OscConfig>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e42:	f000 f8d9 	bl	8000ff8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e46:	230f      	movs	r3, #15
 8000e48:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f002 f858 	bl	8002f14 <HAL_RCC_ClockConfig>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000e6a:	f000 f8c5 	bl	8000ff8 <Error_Handler>
  }
}
 8000e6e:	bf00      	nop
 8000e70:	3748      	adds	r7, #72	; 0x48
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40007000 	.word	0x40007000

08000e7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <MX_I2C1_Init+0x50>)
 8000e82:	4a13      	ldr	r2, [pc, #76]	; (8000ed0 <MX_I2C1_Init+0x54>)
 8000e84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <MX_I2C1_Init+0x50>)
 8000e88:	4a12      	ldr	r2, [pc, #72]	; (8000ed4 <MX_I2C1_Init+0x58>)
 8000e8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <MX_I2C1_Init+0x50>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <MX_I2C1_Init+0x50>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <MX_I2C1_Init+0x50>)
 8000e9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <MX_I2C1_Init+0x50>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ea6:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <MX_I2C1_Init+0x50>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eac:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <MX_I2C1_Init+0x50>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <MX_I2C1_Init+0x50>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eb8:	4804      	ldr	r0, [pc, #16]	; (8000ecc <MX_I2C1_Init+0x50>)
 8000eba:	f000 fd01 	bl	80018c0 <HAL_I2C_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ec4:	f000 f898 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000078 	.word	0x20000078
 8000ed0:	40005400 	.word	0x40005400
 8000ed4:	000186a0 	.word	0x000186a0

08000ed8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000ede:	4a12      	ldr	r2, [pc, #72]	; (8000f28 <MX_USART2_UART_Init+0x50>)
 8000ee0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000ee4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ee8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000efc:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000efe:	220c      	movs	r2, #12
 8000f00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f02:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f0e:	4805      	ldr	r0, [pc, #20]	; (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000f10:	f002 fac6 	bl	80034a0 <HAL_UART_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f1a:	f000 f86d 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	200000cc 	.word	0x200000cc
 8000f28:	40004400 	.word	0x40004400

08000f2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08a      	sub	sp, #40	; 0x28
 8000f30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
 8000f40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f42:	4b2a      	ldr	r3, [pc, #168]	; (8000fec <MX_GPIO_Init+0xc0>)
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	4a29      	ldr	r2, [pc, #164]	; (8000fec <MX_GPIO_Init+0xc0>)
 8000f48:	f043 0304 	orr.w	r3, r3, #4
 8000f4c:	61d3      	str	r3, [r2, #28]
 8000f4e:	4b27      	ldr	r3, [pc, #156]	; (8000fec <MX_GPIO_Init+0xc0>)
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	f003 0304 	and.w	r3, r3, #4
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f5a:	4b24      	ldr	r3, [pc, #144]	; (8000fec <MX_GPIO_Init+0xc0>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	4a23      	ldr	r2, [pc, #140]	; (8000fec <MX_GPIO_Init+0xc0>)
 8000f60:	f043 0320 	orr.w	r3, r3, #32
 8000f64:	61d3      	str	r3, [r2, #28]
 8000f66:	4b21      	ldr	r3, [pc, #132]	; (8000fec <MX_GPIO_Init+0xc0>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	f003 0320 	and.w	r3, r3, #32
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	4b1e      	ldr	r3, [pc, #120]	; (8000fec <MX_GPIO_Init+0xc0>)
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	4a1d      	ldr	r2, [pc, #116]	; (8000fec <MX_GPIO_Init+0xc0>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	61d3      	str	r3, [r2, #28]
 8000f7e:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <MX_GPIO_Init+0xc0>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8a:	4b18      	ldr	r3, [pc, #96]	; (8000fec <MX_GPIO_Init+0xc0>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	4a17      	ldr	r2, [pc, #92]	; (8000fec <MX_GPIO_Init+0xc0>)
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	61d3      	str	r3, [r2, #28]
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <MX_GPIO_Init+0xc0>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2120      	movs	r1, #32
 8000fa6:	4812      	ldr	r0, [pc, #72]	; (8000ff0 <MX_GPIO_Init+0xc4>)
 8000fa8:	f000 fc72 	bl	8001890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fb2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	480c      	ldr	r0, [pc, #48]	; (8000ff4 <MX_GPIO_Init+0xc8>)
 8000fc4:	f000 fad4 	bl	8001570 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fc8:	2320      	movs	r3, #32
 8000fca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4804      	ldr	r0, [pc, #16]	; (8000ff0 <MX_GPIO_Init+0xc4>)
 8000fe0:	f000 fac6 	bl	8001570 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fe4:	bf00      	nop
 8000fe6:	3728      	adds	r7, #40	; 0x28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020000 	.word	0x40020000
 8000ff4:	40020800 	.word	0x40020800

08000ff8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ffc:	b672      	cpsid	i
}
 8000ffe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001000:	e7fe      	b.n	8001000 <Error_Handler+0x8>
	...

08001004 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <HAL_MspInit+0x5c>)
 800100c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100e:	4a14      	ldr	r2, [pc, #80]	; (8001060 <HAL_MspInit+0x5c>)
 8001010:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001014:	6253      	str	r3, [r2, #36]	; 0x24
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <HAL_MspInit+0x5c>)
 8001018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001022:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <HAL_MspInit+0x5c>)
 8001024:	6a1b      	ldr	r3, [r3, #32]
 8001026:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <HAL_MspInit+0x5c>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	6213      	str	r3, [r2, #32]
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <HAL_MspInit+0x5c>)
 8001030:	6a1b      	ldr	r3, [r3, #32]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <HAL_MspInit+0x5c>)
 800103c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103e:	4a08      	ldr	r2, [pc, #32]	; (8001060 <HAL_MspInit+0x5c>)
 8001040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001044:	6253      	str	r3, [r2, #36]	; 0x24
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_MspInit+0x5c>)
 8001048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001052:	2007      	movs	r0, #7
 8001054:	f000 fa58 	bl	8001508 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001058:	bf00      	nop
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40023800 	.word	0x40023800

08001064 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a17      	ldr	r2, [pc, #92]	; (80010e0 <HAL_I2C_MspInit+0x7c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d128      	bne.n	80010d8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <HAL_I2C_MspInit+0x80>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	4a16      	ldr	r2, [pc, #88]	; (80010e4 <HAL_I2C_MspInit+0x80>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	61d3      	str	r3, [r2, #28]
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <HAL_I2C_MspInit+0x80>)
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800109e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010a4:	2312      	movs	r3, #18
 80010a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ac:	2303      	movs	r3, #3
 80010ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010b0:	2304      	movs	r3, #4
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	4619      	mov	r1, r3
 80010ba:	480b      	ldr	r0, [pc, #44]	; (80010e8 <HAL_I2C_MspInit+0x84>)
 80010bc:	f000 fa58 	bl	8001570 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <HAL_I2C_MspInit+0x80>)
 80010c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c4:	4a07      	ldr	r2, [pc, #28]	; (80010e4 <HAL_I2C_MspInit+0x80>)
 80010c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010ca:	6253      	str	r3, [r2, #36]	; 0x24
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <HAL_I2C_MspInit+0x80>)
 80010ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010d8:	bf00      	nop
 80010da:	3728      	adds	r7, #40	; 0x28
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40005400 	.word	0x40005400
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020400 	.word	0x40020400

080010ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a17      	ldr	r2, [pc, #92]	; (8001168 <HAL_UART_MspInit+0x7c>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d127      	bne.n	800115e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800110e:	4b17      	ldr	r3, [pc, #92]	; (800116c <HAL_UART_MspInit+0x80>)
 8001110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001112:	4a16      	ldr	r2, [pc, #88]	; (800116c <HAL_UART_MspInit+0x80>)
 8001114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001118:	6253      	str	r3, [r2, #36]	; 0x24
 800111a:	4b14      	ldr	r3, [pc, #80]	; (800116c <HAL_UART_MspInit+0x80>)
 800111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <HAL_UART_MspInit+0x80>)
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	4a10      	ldr	r2, [pc, #64]	; (800116c <HAL_UART_MspInit+0x80>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	61d3      	str	r3, [r2, #28]
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <HAL_UART_MspInit+0x80>)
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800113e:	230c      	movs	r3, #12
 8001140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114a:	2303      	movs	r3, #3
 800114c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800114e:	2307      	movs	r3, #7
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4619      	mov	r1, r3
 8001158:	4805      	ldr	r0, [pc, #20]	; (8001170 <HAL_UART_MspInit+0x84>)
 800115a:	f000 fa09 	bl	8001570 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800115e:	bf00      	nop
 8001160:	3728      	adds	r7, #40	; 0x28
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40004400 	.word	0x40004400
 800116c:	40023800 	.word	0x40023800
 8001170:	40020000 	.word	0x40020000

08001174 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001178:	e7fe      	b.n	8001178 <NMI_Handler+0x4>

0800117a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800117e:	e7fe      	b.n	800117e <HardFault_Handler+0x4>

08001180 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <MemManage_Handler+0x4>

08001186 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800118a:	e7fe      	b.n	800118a <BusFault_Handler+0x4>

0800118c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001190:	e7fe      	b.n	8001190 <UsageFault_Handler+0x4>

08001192 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr

0800119e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr

080011aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr

080011b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ba:	f000 f8b7 	bl	800132c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011cc:	4a14      	ldr	r2, [pc, #80]	; (8001220 <_sbrk+0x5c>)
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <_sbrk+0x60>)
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d8:	4b13      	ldr	r3, [pc, #76]	; (8001228 <_sbrk+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d102      	bne.n	80011e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <_sbrk+0x64>)
 80011e2:	4a12      	ldr	r2, [pc, #72]	; (800122c <_sbrk+0x68>)
 80011e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <_sbrk+0x64>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d207      	bcs.n	8001204 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f4:	f002 fba2 	bl	800393c <__errno>
 80011f8:	4603      	mov	r3, r0
 80011fa:	220c      	movs	r2, #12
 80011fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001202:	e009      	b.n	8001218 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <_sbrk+0x64>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800120a:	4b07      	ldr	r3, [pc, #28]	; (8001228 <_sbrk+0x64>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <_sbrk+0x64>)
 8001214:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001216:	68fb      	ldr	r3, [r7, #12]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20014000 	.word	0x20014000
 8001224:	00000400 	.word	0x00000400
 8001228:	20000114 	.word	0x20000114
 800122c:	20000268 	.word	0x20000268

08001230 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr

0800123c <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 800123c:	f7ff fff8 	bl	8001230 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001240:	480b      	ldr	r0, [pc, #44]	; (8001270 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001242:	490c      	ldr	r1, [pc, #48]	; (8001274 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001244:	4a0c      	ldr	r2, [pc, #48]	; (8001278 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001248:	e002      	b.n	8001250 <LoopCopyDataInit>

0800124a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800124c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124e:	3304      	adds	r3, #4

08001250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001254:	d3f9      	bcc.n	800124a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001256:	4a09      	ldr	r2, [pc, #36]	; (800127c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001258:	4c09      	ldr	r4, [pc, #36]	; (8001280 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800125c:	e001      	b.n	8001262 <LoopFillZerobss>

0800125e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001260:	3204      	adds	r2, #4

08001262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001264:	d3fb      	bcc.n	800125e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001266:	f002 fb6f 	bl	8003948 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800126a:	f7ff fd19 	bl	8000ca0 <main>
  bx lr
 800126e:	4770      	bx	lr
  ldr r0, =_sdata
 8001270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001274:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001278:	080042f4 	.word	0x080042f4
  ldr r2, =_sbss
 800127c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001280:	20000264 	.word	0x20000264

08001284 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001284:	e7fe      	b.n	8001284 <ADC1_IRQHandler>

08001286 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800128c:	2300      	movs	r3, #0
 800128e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001290:	2003      	movs	r0, #3
 8001292:	f000 f939 	bl	8001508 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001296:	2000      	movs	r0, #0
 8001298:	f000 f80e 	bl	80012b8 <HAL_InitTick>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d002      	beq.n	80012a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	71fb      	strb	r3, [r7, #7]
 80012a6:	e001      	b.n	80012ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012a8:	f7ff feac 	bl	8001004 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012ac:	79fb      	ldrb	r3, [r7, #7]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012c0:	2300      	movs	r3, #0
 80012c2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80012c4:	4b16      	ldr	r3, [pc, #88]	; (8001320 <HAL_InitTick+0x68>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d022      	beq.n	8001312 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80012cc:	4b15      	ldr	r3, [pc, #84]	; (8001324 <HAL_InitTick+0x6c>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b13      	ldr	r3, [pc, #76]	; (8001320 <HAL_InitTick+0x68>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80012dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 f938 	bl	8001556 <HAL_SYSTICK_Config>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d10f      	bne.n	800130c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b0f      	cmp	r3, #15
 80012f0:	d809      	bhi.n	8001306 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f2:	2200      	movs	r2, #0
 80012f4:	6879      	ldr	r1, [r7, #4]
 80012f6:	f04f 30ff 	mov.w	r0, #4294967295
 80012fa:	f000 f910 	bl	800151e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012fe:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <HAL_InitTick+0x70>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	e007      	b.n	8001316 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	73fb      	strb	r3, [r7, #15]
 800130a:	e004      	b.n	8001316 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	73fb      	strb	r3, [r7, #15]
 8001310:	e001      	b.n	8001316 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001316:	7bfb      	ldrb	r3, [r7, #15]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000008 	.word	0x20000008
 8001324:	20000000 	.word	0x20000000
 8001328:	20000004 	.word	0x20000004

0800132c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <HAL_IncTick+0x1c>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <HAL_IncTick+0x20>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4413      	add	r3, r2
 800133a:	4a03      	ldr	r2, [pc, #12]	; (8001348 <HAL_IncTick+0x1c>)
 800133c:	6013      	str	r3, [r2, #0]
}
 800133e:	bf00      	nop
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	20000118 	.word	0x20000118
 800134c:	20000008 	.word	0x20000008

08001350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return uwTick;
 8001354:	4b02      	ldr	r3, [pc, #8]	; (8001360 <HAL_GetTick+0x10>)
 8001356:	681b      	ldr	r3, [r3, #0]
}
 8001358:	4618      	mov	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr
 8001360:	20000118 	.word	0x20000118

08001364 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800136c:	f7ff fff0 	bl	8001350 <HAL_GetTick>
 8001370:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800137c:	d004      	beq.n	8001388 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <HAL_Delay+0x40>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	4413      	add	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001388:	bf00      	nop
 800138a:	f7ff ffe1 	bl	8001350 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	429a      	cmp	r2, r3
 8001398:	d8f7      	bhi.n	800138a <HAL_Delay+0x26>
  {
  }
}
 800139a:	bf00      	nop
 800139c:	bf00      	nop
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000008 	.word	0x20000008

080013a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c4:	4013      	ands	r3, r2
 80013c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013da:	4a04      	ldr	r2, [pc, #16]	; (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	60d3      	str	r3, [r2, #12]
}
 80013e0:	bf00      	nop
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <__NVIC_GetPriorityGrouping+0x18>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	0a1b      	lsrs	r3, r3, #8
 80013fa:	f003 0307 	and.w	r3, r3, #7
}
 80013fe:	4618      	mov	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	6039      	str	r1, [r7, #0]
 8001416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141c:	2b00      	cmp	r3, #0
 800141e:	db0a      	blt.n	8001436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	b2da      	uxtb	r2, r3
 8001424:	490c      	ldr	r1, [pc, #48]	; (8001458 <__NVIC_SetPriority+0x4c>)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	0112      	lsls	r2, r2, #4
 800142c:	b2d2      	uxtb	r2, r2
 800142e:	440b      	add	r3, r1
 8001430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001434:	e00a      	b.n	800144c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4908      	ldr	r1, [pc, #32]	; (800145c <__NVIC_SetPriority+0x50>)
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	f003 030f 	and.w	r3, r3, #15
 8001442:	3b04      	subs	r3, #4
 8001444:	0112      	lsls	r2, r2, #4
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	440b      	add	r3, r1
 800144a:	761a      	strb	r2, [r3, #24]
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000e100 	.word	0xe000e100
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001460:	b480      	push	{r7}
 8001462:	b089      	sub	sp, #36	; 0x24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f1c3 0307 	rsb	r3, r3, #7
 800147a:	2b04      	cmp	r3, #4
 800147c:	bf28      	it	cs
 800147e:	2304      	movcs	r3, #4
 8001480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3304      	adds	r3, #4
 8001486:	2b06      	cmp	r3, #6
 8001488:	d902      	bls.n	8001490 <NVIC_EncodePriority+0x30>
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3b03      	subs	r3, #3
 800148e:	e000      	b.n	8001492 <NVIC_EncodePriority+0x32>
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	f04f 32ff 	mov.w	r2, #4294967295
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43da      	mvns	r2, r3
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	401a      	ands	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	fa01 f303 	lsl.w	r3, r1, r3
 80014b2:	43d9      	mvns	r1, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	4313      	orrs	r3, r2
         );
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3724      	adds	r7, #36	; 0x24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr

080014c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014d4:	d301      	bcc.n	80014da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014d6:	2301      	movs	r3, #1
 80014d8:	e00f      	b.n	80014fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014da:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <SysTick_Config+0x40>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3b01      	subs	r3, #1
 80014e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e2:	210f      	movs	r1, #15
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295
 80014e8:	f7ff ff90 	bl	800140c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <SysTick_Config+0x40>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f2:	4b04      	ldr	r3, [pc, #16]	; (8001504 <SysTick_Config+0x40>)
 80014f4:	2207      	movs	r2, #7
 80014f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	e000e010 	.word	0xe000e010

08001508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff ff49 	bl	80013a8 <__NVIC_SetPriorityGrouping>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
 800152a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001530:	f7ff ff5e 	bl	80013f0 <__NVIC_GetPriorityGrouping>
 8001534:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	68b9      	ldr	r1, [r7, #8]
 800153a:	6978      	ldr	r0, [r7, #20]
 800153c:	f7ff ff90 	bl	8001460 <NVIC_EncodePriority>
 8001540:	4602      	mov	r2, r0
 8001542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001546:	4611      	mov	r1, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff5f 	bl	800140c <__NVIC_SetPriority>
}
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff ffb0 	bl	80014c4 <SysTick_Config>
 8001564:	4603      	mov	r3, r0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001570:	b480      	push	{r7}
 8001572:	b087      	sub	sp, #28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001586:	e160      	b.n	800184a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	2101      	movs	r1, #1
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	fa01 f303 	lsl.w	r3, r1, r3
 8001594:	4013      	ands	r3, r2
 8001596:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	f000 8152 	beq.w	8001844 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 0303 	and.w	r3, r3, #3
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d005      	beq.n	80015b8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d130      	bne.n	800161a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	2203      	movs	r2, #3
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4013      	ands	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	68da      	ldr	r2, [r3, #12]
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	4313      	orrs	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80015ee:	2201      	movs	r2, #1
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	4013      	ands	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	091b      	lsrs	r3, r3, #4
 8001604:	f003 0201 	and.w	r2, r3, #1
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f003 0303 	and.w	r3, r3, #3
 8001622:	2b03      	cmp	r3, #3
 8001624:	d017      	beq.n	8001656 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	2203      	movs	r2, #3
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43db      	mvns	r3, r3
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4013      	ands	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	689a      	ldr	r2, [r3, #8]
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f003 0303 	and.w	r3, r3, #3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d123      	bne.n	80016aa <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	08da      	lsrs	r2, r3, #3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3208      	adds	r2, #8
 800166a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800166e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	220f      	movs	r2, #15
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	691a      	ldr	r2, [r3, #16]
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4313      	orrs	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	08da      	lsrs	r2, r3, #3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3208      	adds	r2, #8
 80016a4:	6939      	ldr	r1, [r7, #16]
 80016a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	2203      	movs	r2, #3
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	4013      	ands	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f003 0203 	and.w	r2, r3, #3
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 80ac 	beq.w	8001844 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ec:	4b5e      	ldr	r3, [pc, #376]	; (8001868 <HAL_GPIO_Init+0x2f8>)
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	4a5d      	ldr	r2, [pc, #372]	; (8001868 <HAL_GPIO_Init+0x2f8>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	6213      	str	r3, [r2, #32]
 80016f8:	4b5b      	ldr	r3, [pc, #364]	; (8001868 <HAL_GPIO_Init+0x2f8>)
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001704:	4a59      	ldr	r2, [pc, #356]	; (800186c <HAL_GPIO_Init+0x2fc>)
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	089b      	lsrs	r3, r3, #2
 800170a:	3302      	adds	r3, #2
 800170c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001710:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	f003 0303 	and.w	r3, r3, #3
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	220f      	movs	r2, #15
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4013      	ands	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a51      	ldr	r2, [pc, #324]	; (8001870 <HAL_GPIO_Init+0x300>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d025      	beq.n	800177c <HAL_GPIO_Init+0x20c>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a50      	ldr	r2, [pc, #320]	; (8001874 <HAL_GPIO_Init+0x304>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d01f      	beq.n	8001778 <HAL_GPIO_Init+0x208>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a4f      	ldr	r2, [pc, #316]	; (8001878 <HAL_GPIO_Init+0x308>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d019      	beq.n	8001774 <HAL_GPIO_Init+0x204>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a4e      	ldr	r2, [pc, #312]	; (800187c <HAL_GPIO_Init+0x30c>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d013      	beq.n	8001770 <HAL_GPIO_Init+0x200>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a4d      	ldr	r2, [pc, #308]	; (8001880 <HAL_GPIO_Init+0x310>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d00d      	beq.n	800176c <HAL_GPIO_Init+0x1fc>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a4c      	ldr	r2, [pc, #304]	; (8001884 <HAL_GPIO_Init+0x314>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d007      	beq.n	8001768 <HAL_GPIO_Init+0x1f8>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a4b      	ldr	r2, [pc, #300]	; (8001888 <HAL_GPIO_Init+0x318>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d101      	bne.n	8001764 <HAL_GPIO_Init+0x1f4>
 8001760:	2306      	movs	r3, #6
 8001762:	e00c      	b.n	800177e <HAL_GPIO_Init+0x20e>
 8001764:	2307      	movs	r3, #7
 8001766:	e00a      	b.n	800177e <HAL_GPIO_Init+0x20e>
 8001768:	2305      	movs	r3, #5
 800176a:	e008      	b.n	800177e <HAL_GPIO_Init+0x20e>
 800176c:	2304      	movs	r3, #4
 800176e:	e006      	b.n	800177e <HAL_GPIO_Init+0x20e>
 8001770:	2303      	movs	r3, #3
 8001772:	e004      	b.n	800177e <HAL_GPIO_Init+0x20e>
 8001774:	2302      	movs	r3, #2
 8001776:	e002      	b.n	800177e <HAL_GPIO_Init+0x20e>
 8001778:	2301      	movs	r3, #1
 800177a:	e000      	b.n	800177e <HAL_GPIO_Init+0x20e>
 800177c:	2300      	movs	r3, #0
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	f002 0203 	and.w	r2, r2, #3
 8001784:	0092      	lsls	r2, r2, #2
 8001786:	4093      	lsls	r3, r2
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	4313      	orrs	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800178e:	4937      	ldr	r1, [pc, #220]	; (800186c <HAL_GPIO_Init+0x2fc>)
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	089b      	lsrs	r3, r3, #2
 8001794:	3302      	adds	r3, #2
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800179c:	4b3b      	ldr	r3, [pc, #236]	; (800188c <HAL_GPIO_Init+0x31c>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	43db      	mvns	r3, r3
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4013      	ands	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d003      	beq.n	80017c0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	4313      	orrs	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017c0:	4a32      	ldr	r2, [pc, #200]	; (800188c <HAL_GPIO_Init+0x31c>)
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017c6:	4b31      	ldr	r3, [pc, #196]	; (800188c <HAL_GPIO_Init+0x31c>)
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	43db      	mvns	r3, r3
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	4013      	ands	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017ea:	4a28      	ldr	r2, [pc, #160]	; (800188c <HAL_GPIO_Init+0x31c>)
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017f0:	4b26      	ldr	r3, [pc, #152]	; (800188c <HAL_GPIO_Init+0x31c>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	43db      	mvns	r3, r3
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4013      	ands	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	4313      	orrs	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001814:	4a1d      	ldr	r2, [pc, #116]	; (800188c <HAL_GPIO_Init+0x31c>)
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800181a:	4b1c      	ldr	r3, [pc, #112]	; (800188c <HAL_GPIO_Init+0x31c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	43db      	mvns	r3, r3
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4013      	ands	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4313      	orrs	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800183e:	4a13      	ldr	r2, [pc, #76]	; (800188c <HAL_GPIO_Init+0x31c>)
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	3301      	adds	r3, #1
 8001848:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	fa22 f303 	lsr.w	r3, r2, r3
 8001854:	2b00      	cmp	r3, #0
 8001856:	f47f ae97 	bne.w	8001588 <HAL_GPIO_Init+0x18>
  }
}
 800185a:	bf00      	nop
 800185c:	bf00      	nop
 800185e:	371c      	adds	r7, #28
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	40023800 	.word	0x40023800
 800186c:	40010000 	.word	0x40010000
 8001870:	40020000 	.word	0x40020000
 8001874:	40020400 	.word	0x40020400
 8001878:	40020800 	.word	0x40020800
 800187c:	40020c00 	.word	0x40020c00
 8001880:	40021000 	.word	0x40021000
 8001884:	40021400 	.word	0x40021400
 8001888:	40021800 	.word	0x40021800
 800188c:	40010400 	.word	0x40010400

08001890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	807b      	strh	r3, [r7, #2]
 800189c:	4613      	mov	r3, r2
 800189e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018a0:	787b      	ldrb	r3, [r7, #1]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018a6:	887a      	ldrh	r2, [r7, #2]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80018ac:	e003      	b.n	80018b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80018ae:	887b      	ldrh	r3, [r7, #2]
 80018b0:	041a      	lsls	r2, r3, #16
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	619a      	str	r2, [r3, #24]
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr

080018c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e12b      	b.n	8001b2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d106      	bne.n	80018ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff fbbc 	bl	8001064 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2224      	movs	r2, #36	; 0x24
 80018f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 0201 	bic.w	r2, r2, #1
 8001902:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001912:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001922:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001924:	f001 fd34 	bl	8003390 <HAL_RCC_GetPCLK1Freq>
 8001928:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	4a81      	ldr	r2, [pc, #516]	; (8001b34 <HAL_I2C_Init+0x274>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d807      	bhi.n	8001944 <HAL_I2C_Init+0x84>
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4a80      	ldr	r2, [pc, #512]	; (8001b38 <HAL_I2C_Init+0x278>)
 8001938:	4293      	cmp	r3, r2
 800193a:	bf94      	ite	ls
 800193c:	2301      	movls	r3, #1
 800193e:	2300      	movhi	r3, #0
 8001940:	b2db      	uxtb	r3, r3
 8001942:	e006      	b.n	8001952 <HAL_I2C_Init+0x92>
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4a7d      	ldr	r2, [pc, #500]	; (8001b3c <HAL_I2C_Init+0x27c>)
 8001948:	4293      	cmp	r3, r2
 800194a:	bf94      	ite	ls
 800194c:	2301      	movls	r3, #1
 800194e:	2300      	movhi	r3, #0
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e0e7      	b.n	8001b2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	4a78      	ldr	r2, [pc, #480]	; (8001b40 <HAL_I2C_Init+0x280>)
 800195e:	fba2 2303 	umull	r2, r3, r2, r3
 8001962:	0c9b      	lsrs	r3, r3, #18
 8001964:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68ba      	ldr	r2, [r7, #8]
 8001976:	430a      	orrs	r2, r1
 8001978:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	4a6a      	ldr	r2, [pc, #424]	; (8001b34 <HAL_I2C_Init+0x274>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d802      	bhi.n	8001994 <HAL_I2C_Init+0xd4>
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	3301      	adds	r3, #1
 8001992:	e009      	b.n	80019a8 <HAL_I2C_Init+0xe8>
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800199a:	fb02 f303 	mul.w	r3, r2, r3
 800199e:	4a69      	ldr	r2, [pc, #420]	; (8001b44 <HAL_I2C_Init+0x284>)
 80019a0:	fba2 2303 	umull	r2, r3, r2, r3
 80019a4:	099b      	lsrs	r3, r3, #6
 80019a6:	3301      	adds	r3, #1
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	6812      	ldr	r2, [r2, #0]
 80019ac:	430b      	orrs	r3, r1
 80019ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80019ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	495c      	ldr	r1, [pc, #368]	; (8001b34 <HAL_I2C_Init+0x274>)
 80019c4:	428b      	cmp	r3, r1
 80019c6:	d819      	bhi.n	80019fc <HAL_I2C_Init+0x13c>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	1e59      	subs	r1, r3, #1
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80019d6:	1c59      	adds	r1, r3, #1
 80019d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80019dc:	400b      	ands	r3, r1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00a      	beq.n	80019f8 <HAL_I2C_Init+0x138>
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	1e59      	subs	r1, r3, #1
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80019f0:	3301      	adds	r3, #1
 80019f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019f6:	e051      	b.n	8001a9c <HAL_I2C_Init+0x1dc>
 80019f8:	2304      	movs	r3, #4
 80019fa:	e04f      	b.n	8001a9c <HAL_I2C_Init+0x1dc>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d111      	bne.n	8001a28 <HAL_I2C_Init+0x168>
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	1e58      	subs	r0, r3, #1
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6859      	ldr	r1, [r3, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	440b      	add	r3, r1
 8001a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a16:	3301      	adds	r3, #1
 8001a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	bf0c      	ite	eq
 8001a20:	2301      	moveq	r3, #1
 8001a22:	2300      	movne	r3, #0
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	e012      	b.n	8001a4e <HAL_I2C_Init+0x18e>
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	1e58      	subs	r0, r3, #1
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6859      	ldr	r1, [r3, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	440b      	add	r3, r1
 8001a36:	0099      	lsls	r1, r3, #2
 8001a38:	440b      	add	r3, r1
 8001a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a3e:	3301      	adds	r3, #1
 8001a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	bf0c      	ite	eq
 8001a48:	2301      	moveq	r3, #1
 8001a4a:	2300      	movne	r3, #0
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_I2C_Init+0x196>
 8001a52:	2301      	movs	r3, #1
 8001a54:	e022      	b.n	8001a9c <HAL_I2C_Init+0x1dc>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10e      	bne.n	8001a7c <HAL_I2C_Init+0x1bc>
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	1e58      	subs	r0, r3, #1
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6859      	ldr	r1, [r3, #4]
 8001a66:	460b      	mov	r3, r1
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	440b      	add	r3, r1
 8001a6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a70:	3301      	adds	r3, #1
 8001a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a7a:	e00f      	b.n	8001a9c <HAL_I2C_Init+0x1dc>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	1e58      	subs	r0, r3, #1
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6859      	ldr	r1, [r3, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	440b      	add	r3, r1
 8001a8a:	0099      	lsls	r1, r3, #2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a92:	3301      	adds	r3, #1
 8001a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a9c:	6879      	ldr	r1, [r7, #4]
 8001a9e:	6809      	ldr	r1, [r1, #0]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69da      	ldr	r2, [r3, #28]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001aca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6911      	ldr	r1, [r2, #16]
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	68d2      	ldr	r2, [r2, #12]
 8001ad6:	4311      	orrs	r1, r2
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6812      	ldr	r2, [r2, #0]
 8001adc:	430b      	orrs	r3, r1
 8001ade:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	695a      	ldr	r2, [r3, #20]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	430a      	orrs	r2, r1
 8001afa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f042 0201 	orr.w	r2, r2, #1
 8001b0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2220      	movs	r2, #32
 8001b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	000186a0 	.word	0x000186a0
 8001b38:	001e847f 	.word	0x001e847f
 8001b3c:	003d08ff 	.word	0x003d08ff
 8001b40:	431bde83 	.word	0x431bde83
 8001b44:	10624dd3 	.word	0x10624dd3

08001b48 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af02      	add	r7, sp, #8
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	461a      	mov	r2, r3
 8001b54:	460b      	mov	r3, r1
 8001b56:	817b      	strh	r3, [r7, #10]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b5c:	f7ff fbf8 	bl	8001350 <HAL_GetTick>
 8001b60:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b20      	cmp	r3, #32
 8001b6c:	f040 80e0 	bne.w	8001d30 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	2319      	movs	r3, #25
 8001b76:	2201      	movs	r2, #1
 8001b78:	4970      	ldr	r1, [pc, #448]	; (8001d3c <HAL_I2C_Master_Transmit+0x1f4>)
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 fc64 	bl	8002448 <I2C_WaitOnFlagUntilTimeout>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001b86:	2302      	movs	r3, #2
 8001b88:	e0d3      	b.n	8001d32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d101      	bne.n	8001b98 <HAL_I2C_Master_Transmit+0x50>
 8001b94:	2302      	movs	r3, #2
 8001b96:	e0cc      	b.n	8001d32 <HAL_I2C_Master_Transmit+0x1ea>
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d007      	beq.n	8001bbe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f042 0201 	orr.w	r2, r2, #1
 8001bbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bcc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2221      	movs	r2, #33	; 0x21
 8001bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2210      	movs	r2, #16
 8001bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2200      	movs	r2, #0
 8001be2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	893a      	ldrh	r2, [r7, #8]
 8001bee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	4a50      	ldr	r2, [pc, #320]	; (8001d40 <HAL_I2C_Master_Transmit+0x1f8>)
 8001bfe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c00:	8979      	ldrh	r1, [r7, #10]
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	6a3a      	ldr	r2, [r7, #32]
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 face 	bl	80021a8 <I2C_MasterRequestWrite>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e08d      	b.n	8001d32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c16:	2300      	movs	r3, #0
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	695b      	ldr	r3, [r3, #20]
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c2c:	e066      	b.n	8001cfc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	6a39      	ldr	r1, [r7, #32]
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f000 fd22 	bl	800267c <I2C_WaitOnTXEFlagUntilTimeout>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00d      	beq.n	8001c5a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	d107      	bne.n	8001c56 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e06b      	b.n	8001d32 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5e:	781a      	ldrb	r2, [r3, #0]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	1c5a      	adds	r2, r3, #1
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	3b01      	subs	r3, #1
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c82:	3b01      	subs	r3, #1
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	695b      	ldr	r3, [r3, #20]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d11b      	bne.n	8001cd0 <HAL_I2C_Master_Transmit+0x188>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d017      	beq.n	8001cd0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca4:	781a      	ldrb	r2, [r3, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb0:	1c5a      	adds	r2, r3, #1
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	6a39      	ldr	r1, [r7, #32]
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f000 fd19 	bl	800270c <I2C_WaitOnBTFFlagUntilTimeout>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00d      	beq.n	8001cfc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	2b04      	cmp	r3, #4
 8001ce6:	d107      	bne.n	8001cf8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cf6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e01a      	b.n	8001d32 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d194      	bne.n	8001c2e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2220      	movs	r2, #32
 8001d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	e000      	b.n	8001d32 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d30:	2302      	movs	r3, #2
  }
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	00100002 	.word	0x00100002
 8001d40:	ffff0000 	.word	0xffff0000

08001d44 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08c      	sub	sp, #48	; 0x30
 8001d48:	af02      	add	r7, sp, #8
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	607a      	str	r2, [r7, #4]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	460b      	mov	r3, r1
 8001d52:	817b      	strh	r3, [r7, #10]
 8001d54:	4613      	mov	r3, r2
 8001d56:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d58:	f7ff fafa 	bl	8001350 <HAL_GetTick>
 8001d5c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b20      	cmp	r3, #32
 8001d68:	f040 8217 	bne.w	800219a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	2319      	movs	r3, #25
 8001d72:	2201      	movs	r2, #1
 8001d74:	497c      	ldr	r1, [pc, #496]	; (8001f68 <HAL_I2C_Master_Receive+0x224>)
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f000 fb66 	bl	8002448 <I2C_WaitOnFlagUntilTimeout>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001d82:	2302      	movs	r3, #2
 8001d84:	e20a      	b.n	800219c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d101      	bne.n	8001d94 <HAL_I2C_Master_Receive+0x50>
 8001d90:	2302      	movs	r3, #2
 8001d92:	e203      	b.n	800219c <HAL_I2C_Master_Receive+0x458>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d007      	beq.n	8001dba <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f042 0201 	orr.w	r2, r2, #1
 8001db8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dc8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2222      	movs	r2, #34	; 0x22
 8001dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2210      	movs	r2, #16
 8001dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	893a      	ldrh	r2, [r7, #8]
 8001dea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	4a5c      	ldr	r2, [pc, #368]	; (8001f6c <HAL_I2C_Master_Receive+0x228>)
 8001dfa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001dfc:	8979      	ldrh	r1, [r7, #10]
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f000 fa52 	bl	80022ac <I2C_MasterRequestRead>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e1c4      	b.n	800219c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d113      	bne.n	8001e42 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	623b      	str	r3, [r7, #32]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	623b      	str	r3, [r7, #32]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	623b      	str	r3, [r7, #32]
 8001e2e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	e198      	b.n	8002174 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d11b      	bne.n	8001e82 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	61fb      	str	r3, [r7, #28]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	61fb      	str	r3, [r7, #28]
 8001e6e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	e178      	b.n	8002174 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d11b      	bne.n	8001ec2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e98:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ea8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61bb      	str	r3, [r7, #24]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	61bb      	str	r3, [r7, #24]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	61bb      	str	r3, [r7, #24]
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	e158      	b.n	8002174 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ed0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001ee8:	e144      	b.n	8002174 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eee:	2b03      	cmp	r3, #3
 8001ef0:	f200 80f1 	bhi.w	80020d6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d123      	bne.n	8001f44 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001efe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f000 fc4b 	bl	800279c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e145      	b.n	800219c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691a      	ldr	r2, [r3, #16]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f22:	1c5a      	adds	r2, r3, #1
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f42:	e117      	b.n	8002174 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d14e      	bne.n	8001fea <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f52:	2200      	movs	r2, #0
 8001f54:	4906      	ldr	r1, [pc, #24]	; (8001f70 <HAL_I2C_Master_Receive+0x22c>)
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f000 fa76 	bl	8002448 <I2C_WaitOnFlagUntilTimeout>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d008      	beq.n	8001f74 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e11a      	b.n	800219c <HAL_I2C_Master_Receive+0x458>
 8001f66:	bf00      	nop
 8001f68:	00100002 	.word	0x00100002
 8001f6c:	ffff0000 	.word	0xffff0000
 8001f70:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691a      	ldr	r2, [r3, #16]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	691a      	ldr	r2, [r3, #16]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	1c5a      	adds	r2, r3, #1
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001fe8:	e0c4      	b.n	8002174 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	496c      	ldr	r1, [pc, #432]	; (80021a4 <HAL_I2C_Master_Receive+0x460>)
 8001ff4:	68f8      	ldr	r0, [r7, #12]
 8001ff6:	f000 fa27 	bl	8002448 <I2C_WaitOnFlagUntilTimeout>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e0cb      	b.n	800219c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002012:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	691a      	ldr	r2, [r3, #16]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	1c5a      	adds	r2, r3, #1
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002030:	3b01      	subs	r3, #1
 8002032:	b29a      	uxth	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203c:	b29b      	uxth	r3, r3
 800203e:	3b01      	subs	r3, #1
 8002040:	b29a      	uxth	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800204c:	2200      	movs	r2, #0
 800204e:	4955      	ldr	r1, [pc, #340]	; (80021a4 <HAL_I2C_Master_Receive+0x460>)
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f000 f9f9 	bl	8002448 <I2C_WaitOnFlagUntilTimeout>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e09d      	b.n	800219c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800206e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691a      	ldr	r2, [r3, #16]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800208c:	3b01      	subs	r3, #1
 800208e:	b29a      	uxth	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002098:	b29b      	uxth	r3, r3
 800209a:	3b01      	subs	r3, #1
 800209c:	b29a      	uxth	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	691a      	ldr	r2, [r3, #16]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b4:	1c5a      	adds	r2, r3, #1
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020be:	3b01      	subs	r3, #1
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	3b01      	subs	r3, #1
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020d4:	e04e      	b.n	8002174 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 fb5e 	bl	800279c <I2C_WaitOnRXNEFlagUntilTimeout>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e058      	b.n	800219c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	691a      	ldr	r2, [r3, #16]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	b2d2      	uxtb	r2, r2
 80020f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fc:	1c5a      	adds	r2, r3, #1
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002106:	3b01      	subs	r3, #1
 8002108:	b29a      	uxth	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002112:	b29b      	uxth	r3, r3
 8002114:	3b01      	subs	r3, #1
 8002116:	b29a      	uxth	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	f003 0304 	and.w	r3, r3, #4
 8002126:	2b04      	cmp	r3, #4
 8002128:	d124      	bne.n	8002174 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212e:	2b03      	cmp	r3, #3
 8002130:	d107      	bne.n	8002142 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002140:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	1c5a      	adds	r2, r3, #1
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800215e:	3b01      	subs	r3, #1
 8002160:	b29a      	uxth	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800216a:	b29b      	uxth	r3, r3
 800216c:	3b01      	subs	r3, #1
 800216e:	b29a      	uxth	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002178:	2b00      	cmp	r3, #0
 800217a:	f47f aeb6 	bne.w	8001eea <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2220      	movs	r2, #32
 8002182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002196:	2300      	movs	r3, #0
 8002198:	e000      	b.n	800219c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800219a:	2302      	movs	r3, #2
  }
}
 800219c:	4618      	mov	r0, r3
 800219e:	3728      	adds	r7, #40	; 0x28
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	00010004 	.word	0x00010004

080021a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b088      	sub	sp, #32
 80021ac:	af02      	add	r7, sp, #8
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	607a      	str	r2, [r7, #4]
 80021b2:	603b      	str	r3, [r7, #0]
 80021b4:	460b      	mov	r3, r1
 80021b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	d006      	beq.n	80021d2 <I2C_MasterRequestWrite+0x2a>
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d003      	beq.n	80021d2 <I2C_MasterRequestWrite+0x2a>
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021d0:	d108      	bne.n	80021e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	e00b      	b.n	80021fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	2b12      	cmp	r3, #18
 80021ea:	d107      	bne.n	80021fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 f91d 	bl	8002448 <I2C_WaitOnFlagUntilTimeout>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00d      	beq.n	8002230 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002222:	d103      	bne.n	800222c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f44f 7200 	mov.w	r2, #512	; 0x200
 800222a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e035      	b.n	800229c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002238:	d108      	bne.n	800224c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800223a:	897b      	ldrh	r3, [r7, #10]
 800223c:	b2db      	uxtb	r3, r3
 800223e:	461a      	mov	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002248:	611a      	str	r2, [r3, #16]
 800224a:	e01b      	b.n	8002284 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800224c:	897b      	ldrh	r3, [r7, #10]
 800224e:	11db      	asrs	r3, r3, #7
 8002250:	b2db      	uxtb	r3, r3
 8002252:	f003 0306 	and.w	r3, r3, #6
 8002256:	b2db      	uxtb	r3, r3
 8002258:	f063 030f 	orn	r3, r3, #15
 800225c:	b2da      	uxtb	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	490e      	ldr	r1, [pc, #56]	; (80022a4 <I2C_MasterRequestWrite+0xfc>)
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 f966 	bl	800253c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e010      	b.n	800229c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800227a:	897b      	ldrh	r3, [r7, #10]
 800227c:	b2da      	uxtb	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	4907      	ldr	r1, [pc, #28]	; (80022a8 <I2C_MasterRequestWrite+0x100>)
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 f956 	bl	800253c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	00010008 	.word	0x00010008
 80022a8:	00010002 	.word	0x00010002

080022ac <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b088      	sub	sp, #32
 80022b0:	af02      	add	r7, sp, #8
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	607a      	str	r2, [r7, #4]
 80022b6:	603b      	str	r3, [r7, #0]
 80022b8:	460b      	mov	r3, r1
 80022ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022d0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	2b08      	cmp	r3, #8
 80022d6:	d006      	beq.n	80022e6 <I2C_MasterRequestRead+0x3a>
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d003      	beq.n	80022e6 <I2C_MasterRequestRead+0x3a>
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022e4:	d108      	bne.n	80022f8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	e00b      	b.n	8002310 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fc:	2b11      	cmp	r3, #17
 80022fe:	d107      	bne.n	8002310 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800230e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f000 f893 	bl	8002448 <I2C_WaitOnFlagUntilTimeout>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00d      	beq.n	8002344 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002336:	d103      	bne.n	8002340 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800233e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e079      	b.n	8002438 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800234c:	d108      	bne.n	8002360 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800234e:	897b      	ldrh	r3, [r7, #10]
 8002350:	b2db      	uxtb	r3, r3
 8002352:	f043 0301 	orr.w	r3, r3, #1
 8002356:	b2da      	uxtb	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	611a      	str	r2, [r3, #16]
 800235e:	e05f      	b.n	8002420 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002360:	897b      	ldrh	r3, [r7, #10]
 8002362:	11db      	asrs	r3, r3, #7
 8002364:	b2db      	uxtb	r3, r3
 8002366:	f003 0306 	and.w	r3, r3, #6
 800236a:	b2db      	uxtb	r3, r3
 800236c:	f063 030f 	orn	r3, r3, #15
 8002370:	b2da      	uxtb	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	4930      	ldr	r1, [pc, #192]	; (8002440 <I2C_MasterRequestRead+0x194>)
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f000 f8dc 	bl	800253c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e054      	b.n	8002438 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800238e:	897b      	ldrh	r3, [r7, #10]
 8002390:	b2da      	uxtb	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	4929      	ldr	r1, [pc, #164]	; (8002444 <I2C_MasterRequestRead+0x198>)
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 f8cc 	bl	800253c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e044      	b.n	8002438 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ae:	2300      	movs	r3, #0
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	613b      	str	r3, [r7, #16]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	613b      	str	r3, [r7, #16]
 80023c2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023d2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f000 f831 	bl	8002448 <I2C_WaitOnFlagUntilTimeout>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00d      	beq.n	8002408 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023fa:	d103      	bne.n	8002404 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002402:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e017      	b.n	8002438 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002408:	897b      	ldrh	r3, [r7, #10]
 800240a:	11db      	asrs	r3, r3, #7
 800240c:	b2db      	uxtb	r3, r3
 800240e:	f003 0306 	and.w	r3, r3, #6
 8002412:	b2db      	uxtb	r3, r3
 8002414:	f063 030e 	orn	r3, r3, #14
 8002418:	b2da      	uxtb	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	4907      	ldr	r1, [pc, #28]	; (8002444 <I2C_MasterRequestRead+0x198>)
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 f888 	bl	800253c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	00010008 	.word	0x00010008
 8002444:	00010002 	.word	0x00010002

08002448 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	603b      	str	r3, [r7, #0]
 8002454:	4613      	mov	r3, r2
 8002456:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002458:	e048      	b.n	80024ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002460:	d044      	beq.n	80024ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002462:	f7fe ff75 	bl	8001350 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d302      	bcc.n	8002478 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d139      	bne.n	80024ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	0c1b      	lsrs	r3, r3, #16
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b01      	cmp	r3, #1
 8002480:	d10d      	bne.n	800249e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	43da      	mvns	r2, r3
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	4013      	ands	r3, r2
 800248e:	b29b      	uxth	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	bf0c      	ite	eq
 8002494:	2301      	moveq	r3, #1
 8002496:	2300      	movne	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	461a      	mov	r2, r3
 800249c:	e00c      	b.n	80024b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	43da      	mvns	r2, r3
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	4013      	ands	r3, r2
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bf0c      	ite	eq
 80024b0:	2301      	moveq	r3, #1
 80024b2:	2300      	movne	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	461a      	mov	r2, r3
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d116      	bne.n	80024ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2220      	movs	r2, #32
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d8:	f043 0220 	orr.w	r2, r3, #32
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e023      	b.n	8002534 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	0c1b      	lsrs	r3, r3, #16
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d10d      	bne.n	8002512 <I2C_WaitOnFlagUntilTimeout+0xca>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	43da      	mvns	r2, r3
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	4013      	ands	r3, r2
 8002502:	b29b      	uxth	r3, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	bf0c      	ite	eq
 8002508:	2301      	moveq	r3, #1
 800250a:	2300      	movne	r3, #0
 800250c:	b2db      	uxtb	r3, r3
 800250e:	461a      	mov	r2, r3
 8002510:	e00c      	b.n	800252c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	43da      	mvns	r2, r3
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	4013      	ands	r3, r2
 800251e:	b29b      	uxth	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	bf0c      	ite	eq
 8002524:	2301      	moveq	r3, #1
 8002526:	2300      	movne	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	461a      	mov	r2, r3
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	429a      	cmp	r2, r3
 8002530:	d093      	beq.n	800245a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
 8002548:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800254a:	e071      	b.n	8002630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800255a:	d123      	bne.n	80025a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800256a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002574:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2220      	movs	r2, #32
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	f043 0204 	orr.w	r2, r3, #4
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e067      	b.n	8002674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025aa:	d041      	beq.n	8002630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ac:	f7fe fed0 	bl	8001350 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d302      	bcc.n	80025c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d136      	bne.n	8002630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	0c1b      	lsrs	r3, r3, #16
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d10c      	bne.n	80025e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	43da      	mvns	r2, r3
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	4013      	ands	r3, r2
 80025d8:	b29b      	uxth	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	bf14      	ite	ne
 80025de:	2301      	movne	r3, #1
 80025e0:	2300      	moveq	r3, #0
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	e00b      	b.n	80025fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	43da      	mvns	r2, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	4013      	ands	r3, r2
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	bf14      	ite	ne
 80025f8:	2301      	movne	r3, #1
 80025fa:	2300      	moveq	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d016      	beq.n	8002630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2220      	movs	r2, #32
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261c:	f043 0220 	orr.w	r2, r3, #32
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e021      	b.n	8002674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	0c1b      	lsrs	r3, r3, #16
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b01      	cmp	r3, #1
 8002638:	d10c      	bne.n	8002654 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	43da      	mvns	r2, r3
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	4013      	ands	r3, r2
 8002646:	b29b      	uxth	r3, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	bf14      	ite	ne
 800264c:	2301      	movne	r3, #1
 800264e:	2300      	moveq	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	e00b      	b.n	800266c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	43da      	mvns	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	4013      	ands	r3, r2
 8002660:	b29b      	uxth	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	bf14      	ite	ne
 8002666:	2301      	movne	r3, #1
 8002668:	2300      	moveq	r3, #0
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	f47f af6d 	bne.w	800254c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002688:	e034      	b.n	80026f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 f8e3 	bl	8002856 <I2C_IsAcknowledgeFailed>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e034      	b.n	8002704 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a0:	d028      	beq.n	80026f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026a2:	f7fe fe55 	bl	8001350 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d302      	bcc.n	80026b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d11d      	bne.n	80026f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c2:	2b80      	cmp	r3, #128	; 0x80
 80026c4:	d016      	beq.n	80026f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2220      	movs	r2, #32
 80026d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	f043 0220 	orr.w	r2, r3, #32
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e007      	b.n	8002704 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fe:	2b80      	cmp	r3, #128	; 0x80
 8002700:	d1c3      	bne.n	800268a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002718:	e034      	b.n	8002784 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 f89b 	bl	8002856 <I2C_IsAcknowledgeFailed>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e034      	b.n	8002794 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002730:	d028      	beq.n	8002784 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002732:	f7fe fe0d 	bl	8001350 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	429a      	cmp	r2, r3
 8002740:	d302      	bcc.n	8002748 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d11d      	bne.n	8002784 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	f003 0304 	and.w	r3, r3, #4
 8002752:	2b04      	cmp	r3, #4
 8002754:	d016      	beq.n	8002784 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2220      	movs	r2, #32
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	f043 0220 	orr.w	r2, r3, #32
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e007      	b.n	8002794 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	2b04      	cmp	r3, #4
 8002790:	d1c3      	bne.n	800271a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027a8:	e049      	b.n	800283e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	f003 0310 	and.w	r3, r3, #16
 80027b4:	2b10      	cmp	r3, #16
 80027b6:	d119      	bne.n	80027ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f06f 0210 	mvn.w	r2, #16
 80027c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2220      	movs	r2, #32
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e030      	b.n	800284e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ec:	f7fe fdb0 	bl	8001350 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d302      	bcc.n	8002802 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d11d      	bne.n	800283e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280c:	2b40      	cmp	r3, #64	; 0x40
 800280e:	d016      	beq.n	800283e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2220      	movs	r2, #32
 800281a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	f043 0220 	orr.w	r2, r3, #32
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e007      	b.n	800284e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002848:	2b40      	cmp	r3, #64	; 0x40
 800284a:	d1ae      	bne.n	80027aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800286c:	d11b      	bne.n	80028a6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002876:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2220      	movs	r2, #32
 8002882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f043 0204 	orr.w	r2, r3, #4
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr
	...

080028b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e31d      	b.n	8002f02 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028c6:	4b94      	ldr	r3, [pc, #592]	; (8002b18 <HAL_RCC_OscConfig+0x264>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 030c 	and.w	r3, r3, #12
 80028ce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028d0:	4b91      	ldr	r3, [pc, #580]	; (8002b18 <HAL_RCC_OscConfig+0x264>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d8:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d07b      	beq.n	80029de <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	d006      	beq.n	80028fa <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	2b0c      	cmp	r3, #12
 80028f0:	d10f      	bne.n	8002912 <HAL_RCC_OscConfig+0x5e>
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f8:	d10b      	bne.n	8002912 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028fa:	4b87      	ldr	r3, [pc, #540]	; (8002b18 <HAL_RCC_OscConfig+0x264>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d06a      	beq.n	80029dc <HAL_RCC_OscConfig+0x128>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d166      	bne.n	80029dc <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e2f7      	b.n	8002f02 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d106      	bne.n	8002928 <HAL_RCC_OscConfig+0x74>
 800291a:	4b7f      	ldr	r3, [pc, #508]	; (8002b18 <HAL_RCC_OscConfig+0x264>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a7e      	ldr	r2, [pc, #504]	; (8002b18 <HAL_RCC_OscConfig+0x264>)
 8002920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	e02d      	b.n	8002984 <HAL_RCC_OscConfig+0xd0>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10c      	bne.n	800294a <HAL_RCC_OscConfig+0x96>
 8002930:	4b79      	ldr	r3, [pc, #484]	; (8002b18 <HAL_RCC_OscConfig+0x264>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a78      	ldr	r2, [pc, #480]	; (8002b18 <HAL_RCC_OscConfig+0x264>)
 8002936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	4b76      	ldr	r3, [pc, #472]	; (8002b18 <HAL_RCC_OscConfig+0x264>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a75      	ldr	r2, [pc, #468]	; (8002b18 <HAL_RCC_OscConfig+0x264>)
 8002942:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002946:	6013      	str	r3, [r2, #0]
 8002948:	e01c      	b.n	8002984 <HAL_RCC_OscConfig+0xd0>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b05      	cmp	r3, #5
 8002950:	d10c      	bne.n	800296c <HAL_RCC_OscConfig+0xb8>
 8002952:	4b71      	ldr	r3, [pc, #452]	; (8002b18 <HAL_RCC_OscConfig+0x264>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a70      	ldr	r2, [pc, #448]	; (8002b18 <HAL_RCC_OscConfig+0x264>)
 8002958:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	4b6e      	ldr	r3, [pc, #440]	; (8002b18 <HAL_RCC_OscConfig+0x264>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a6d      	ldr	r2, [pc, #436]	; (8002b18 <HAL_RCC_OscConfig+0x264>)
 8002964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002968:	6013      	str	r3, [r2, #0]
 800296a:	e00b      	b.n	8002984 <HAL_RCC_OscConfig+0xd0>
 800296c:	4b6a      	ldr	r3, [pc, #424]	; (8002b18 <HAL_RCC_OscConfig+0x264>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a69      	ldr	r2, [pc, #420]	; (8002b18 <HAL_RCC_OscConfig+0x264>)
 8002972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002976:	6013      	str	r3, [r2, #0]
 8002978:	4b67      	ldr	r3, [pc, #412]	; (8002b18 <HAL_RCC_OscConfig+0x264>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a66      	ldr	r2, [pc, #408]	; (8002b18 <HAL_RCC_OscConfig+0x264>)
 800297e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002982:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d013      	beq.n	80029b4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298c:	f7fe fce0 	bl	8001350 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002994:	f7fe fcdc 	bl	8001350 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b64      	cmp	r3, #100	; 0x64
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e2ad      	b.n	8002f02 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029a6:	4b5c      	ldr	r3, [pc, #368]	; (8002b18 <HAL_RCC_OscConfig+0x264>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCC_OscConfig+0xe0>
 80029b2:	e014      	b.n	80029de <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b4:	f7fe fccc 	bl	8001350 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029bc:	f7fe fcc8 	bl	8001350 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b64      	cmp	r3, #100	; 0x64
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e299      	b.n	8002f02 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029ce:	4b52      	ldr	r3, [pc, #328]	; (8002b18 <HAL_RCC_OscConfig+0x264>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f0      	bne.n	80029bc <HAL_RCC_OscConfig+0x108>
 80029da:	e000      	b.n	80029de <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d05a      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	2b04      	cmp	r3, #4
 80029ee:	d005      	beq.n	80029fc <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	2b0c      	cmp	r3, #12
 80029f4:	d119      	bne.n	8002a2a <HAL_RCC_OscConfig+0x176>
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d116      	bne.n	8002a2a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fc:	4b46      	ldr	r3, [pc, #280]	; (8002b18 <HAL_RCC_OscConfig+0x264>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d005      	beq.n	8002a14 <HAL_RCC_OscConfig+0x160>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d001      	beq.n	8002a14 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e276      	b.n	8002f02 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a14:	4b40      	ldr	r3, [pc, #256]	; (8002b18 <HAL_RCC_OscConfig+0x264>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	021b      	lsls	r3, r3, #8
 8002a22:	493d      	ldr	r1, [pc, #244]	; (8002b18 <HAL_RCC_OscConfig+0x264>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a28:	e03a      	b.n	8002aa0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d020      	beq.n	8002a74 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a32:	4b3a      	ldr	r3, [pc, #232]	; (8002b1c <HAL_RCC_OscConfig+0x268>)
 8002a34:	2201      	movs	r2, #1
 8002a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a38:	f7fe fc8a 	bl	8001350 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a40:	f7fe fc86 	bl	8001350 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e257      	b.n	8002f02 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a52:	4b31      	ldr	r3, [pc, #196]	; (8002b18 <HAL_RCC_OscConfig+0x264>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0f0      	beq.n	8002a40 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a5e:	4b2e      	ldr	r3, [pc, #184]	; (8002b18 <HAL_RCC_OscConfig+0x264>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	021b      	lsls	r3, r3, #8
 8002a6c:	492a      	ldr	r1, [pc, #168]	; (8002b18 <HAL_RCC_OscConfig+0x264>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	604b      	str	r3, [r1, #4]
 8002a72:	e015      	b.n	8002aa0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a74:	4b29      	ldr	r3, [pc, #164]	; (8002b1c <HAL_RCC_OscConfig+0x268>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7a:	f7fe fc69 	bl	8001350 <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a82:	f7fe fc65 	bl	8001350 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e236      	b.n	8002f02 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a94:	4b20      	ldr	r3, [pc, #128]	; (8002b18 <HAL_RCC_OscConfig+0x264>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1f0      	bne.n	8002a82 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0310 	and.w	r3, r3, #16
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 80b8 	beq.w	8002c1e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d170      	bne.n	8002b96 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ab4:	4b18      	ldr	r3, [pc, #96]	; (8002b18 <HAL_RCC_OscConfig+0x264>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d005      	beq.n	8002acc <HAL_RCC_OscConfig+0x218>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e21a      	b.n	8002f02 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a1a      	ldr	r2, [r3, #32]
 8002ad0:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <HAL_RCC_OscConfig+0x264>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d921      	bls.n	8002b20 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 fc7d 	bl	80033e0 <RCC_SetFlashLatencyFromMSIRange>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e208      	b.n	8002f02 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002af0:	4b09      	ldr	r3, [pc, #36]	; (8002b18 <HAL_RCC_OscConfig+0x264>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	4906      	ldr	r1, [pc, #24]	; (8002b18 <HAL_RCC_OscConfig+0x264>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b02:	4b05      	ldr	r3, [pc, #20]	; (8002b18 <HAL_RCC_OscConfig+0x264>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	061b      	lsls	r3, r3, #24
 8002b10:	4901      	ldr	r1, [pc, #4]	; (8002b18 <HAL_RCC_OscConfig+0x264>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	604b      	str	r3, [r1, #4]
 8002b16:	e020      	b.n	8002b5a <HAL_RCC_OscConfig+0x2a6>
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b20:	4b99      	ldr	r3, [pc, #612]	; (8002d88 <HAL_RCC_OscConfig+0x4d4>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	4996      	ldr	r1, [pc, #600]	; (8002d88 <HAL_RCC_OscConfig+0x4d4>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b32:	4b95      	ldr	r3, [pc, #596]	; (8002d88 <HAL_RCC_OscConfig+0x4d4>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	061b      	lsls	r3, r3, #24
 8002b40:	4991      	ldr	r1, [pc, #580]	; (8002d88 <HAL_RCC_OscConfig+0x4d4>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 fc48 	bl	80033e0 <RCC_SetFlashLatencyFromMSIRange>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e1d3      	b.n	8002f02 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	0b5b      	lsrs	r3, r3, #13
 8002b60:	3301      	adds	r3, #1
 8002b62:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002b6a:	4a87      	ldr	r2, [pc, #540]	; (8002d88 <HAL_RCC_OscConfig+0x4d4>)
 8002b6c:	6892      	ldr	r2, [r2, #8]
 8002b6e:	0912      	lsrs	r2, r2, #4
 8002b70:	f002 020f 	and.w	r2, r2, #15
 8002b74:	4985      	ldr	r1, [pc, #532]	; (8002d8c <HAL_RCC_OscConfig+0x4d8>)
 8002b76:	5c8a      	ldrb	r2, [r1, r2]
 8002b78:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002b7a:	4a85      	ldr	r2, [pc, #532]	; (8002d90 <HAL_RCC_OscConfig+0x4dc>)
 8002b7c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b7e:	4b85      	ldr	r3, [pc, #532]	; (8002d94 <HAL_RCC_OscConfig+0x4e0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fe fb98 	bl	80012b8 <HAL_InitTick>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d045      	beq.n	8002c1e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
 8002b94:	e1b5      	b.n	8002f02 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d029      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b9e:	4b7e      	ldr	r3, [pc, #504]	; (8002d98 <HAL_RCC_OscConfig+0x4e4>)
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba4:	f7fe fbd4 	bl	8001350 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bac:	f7fe fbd0 	bl	8001350 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e1a1      	b.n	8002f02 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002bbe:	4b72      	ldr	r3, [pc, #456]	; (8002d88 <HAL_RCC_OscConfig+0x4d4>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0f0      	beq.n	8002bac <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bca:	4b6f      	ldr	r3, [pc, #444]	; (8002d88 <HAL_RCC_OscConfig+0x4d4>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	496c      	ldr	r1, [pc, #432]	; (8002d88 <HAL_RCC_OscConfig+0x4d4>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bdc:	4b6a      	ldr	r3, [pc, #424]	; (8002d88 <HAL_RCC_OscConfig+0x4d4>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	69db      	ldr	r3, [r3, #28]
 8002be8:	061b      	lsls	r3, r3, #24
 8002bea:	4967      	ldr	r1, [pc, #412]	; (8002d88 <HAL_RCC_OscConfig+0x4d4>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	604b      	str	r3, [r1, #4]
 8002bf0:	e015      	b.n	8002c1e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bf2:	4b69      	ldr	r3, [pc, #420]	; (8002d98 <HAL_RCC_OscConfig+0x4e4>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf8:	f7fe fbaa 	bl	8001350 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c00:	f7fe fba6 	bl	8001350 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e177      	b.n	8002f02 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002c12:	4b5d      	ldr	r3, [pc, #372]	; (8002d88 <HAL_RCC_OscConfig+0x4d4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d030      	beq.n	8002c8c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d016      	beq.n	8002c60 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c32:	4b5a      	ldr	r3, [pc, #360]	; (8002d9c <HAL_RCC_OscConfig+0x4e8>)
 8002c34:	2201      	movs	r2, #1
 8002c36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c38:	f7fe fb8a 	bl	8001350 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c40:	f7fe fb86 	bl	8001350 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e157      	b.n	8002f02 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c52:	4b4d      	ldr	r3, [pc, #308]	; (8002d88 <HAL_RCC_OscConfig+0x4d4>)
 8002c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0f0      	beq.n	8002c40 <HAL_RCC_OscConfig+0x38c>
 8002c5e:	e015      	b.n	8002c8c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c60:	4b4e      	ldr	r3, [pc, #312]	; (8002d9c <HAL_RCC_OscConfig+0x4e8>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c66:	f7fe fb73 	bl	8001350 <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c6e:	f7fe fb6f 	bl	8001350 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e140      	b.n	8002f02 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c80:	4b41      	ldr	r3, [pc, #260]	; (8002d88 <HAL_RCC_OscConfig+0x4d4>)
 8002c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1f0      	bne.n	8002c6e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 80b5 	beq.w	8002e04 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c9e:	4b3a      	ldr	r3, [pc, #232]	; (8002d88 <HAL_RCC_OscConfig+0x4d4>)
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10d      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002caa:	4b37      	ldr	r3, [pc, #220]	; (8002d88 <HAL_RCC_OscConfig+0x4d4>)
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	4a36      	ldr	r2, [pc, #216]	; (8002d88 <HAL_RCC_OscConfig+0x4d4>)
 8002cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb4:	6253      	str	r3, [r2, #36]	; 0x24
 8002cb6:	4b34      	ldr	r3, [pc, #208]	; (8002d88 <HAL_RCC_OscConfig+0x4d4>)
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cbe:	60bb      	str	r3, [r7, #8]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc6:	4b36      	ldr	r3, [pc, #216]	; (8002da0 <HAL_RCC_OscConfig+0x4ec>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d118      	bne.n	8002d04 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cd2:	4b33      	ldr	r3, [pc, #204]	; (8002da0 <HAL_RCC_OscConfig+0x4ec>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a32      	ldr	r2, [pc, #200]	; (8002da0 <HAL_RCC_OscConfig+0x4ec>)
 8002cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cde:	f7fe fb37 	bl	8001350 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce6:	f7fe fb33 	bl	8001350 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b64      	cmp	r3, #100	; 0x64
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e104      	b.n	8002f02 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf8:	4b29      	ldr	r3, [pc, #164]	; (8002da0 <HAL_RCC_OscConfig+0x4ec>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0f0      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d106      	bne.n	8002d1a <HAL_RCC_OscConfig+0x466>
 8002d0c:	4b1e      	ldr	r3, [pc, #120]	; (8002d88 <HAL_RCC_OscConfig+0x4d4>)
 8002d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d10:	4a1d      	ldr	r2, [pc, #116]	; (8002d88 <HAL_RCC_OscConfig+0x4d4>)
 8002d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d16:	6353      	str	r3, [r2, #52]	; 0x34
 8002d18:	e02d      	b.n	8002d76 <HAL_RCC_OscConfig+0x4c2>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10c      	bne.n	8002d3c <HAL_RCC_OscConfig+0x488>
 8002d22:	4b19      	ldr	r3, [pc, #100]	; (8002d88 <HAL_RCC_OscConfig+0x4d4>)
 8002d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d26:	4a18      	ldr	r2, [pc, #96]	; (8002d88 <HAL_RCC_OscConfig+0x4d4>)
 8002d28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d2c:	6353      	str	r3, [r2, #52]	; 0x34
 8002d2e:	4b16      	ldr	r3, [pc, #88]	; (8002d88 <HAL_RCC_OscConfig+0x4d4>)
 8002d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d32:	4a15      	ldr	r2, [pc, #84]	; (8002d88 <HAL_RCC_OscConfig+0x4d4>)
 8002d34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d38:	6353      	str	r3, [r2, #52]	; 0x34
 8002d3a:	e01c      	b.n	8002d76 <HAL_RCC_OscConfig+0x4c2>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	2b05      	cmp	r3, #5
 8002d42:	d10c      	bne.n	8002d5e <HAL_RCC_OscConfig+0x4aa>
 8002d44:	4b10      	ldr	r3, [pc, #64]	; (8002d88 <HAL_RCC_OscConfig+0x4d4>)
 8002d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d48:	4a0f      	ldr	r2, [pc, #60]	; (8002d88 <HAL_RCC_OscConfig+0x4d4>)
 8002d4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d4e:	6353      	str	r3, [r2, #52]	; 0x34
 8002d50:	4b0d      	ldr	r3, [pc, #52]	; (8002d88 <HAL_RCC_OscConfig+0x4d4>)
 8002d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d54:	4a0c      	ldr	r2, [pc, #48]	; (8002d88 <HAL_RCC_OscConfig+0x4d4>)
 8002d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d5a:	6353      	str	r3, [r2, #52]	; 0x34
 8002d5c:	e00b      	b.n	8002d76 <HAL_RCC_OscConfig+0x4c2>
 8002d5e:	4b0a      	ldr	r3, [pc, #40]	; (8002d88 <HAL_RCC_OscConfig+0x4d4>)
 8002d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d62:	4a09      	ldr	r2, [pc, #36]	; (8002d88 <HAL_RCC_OscConfig+0x4d4>)
 8002d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d68:	6353      	str	r3, [r2, #52]	; 0x34
 8002d6a:	4b07      	ldr	r3, [pc, #28]	; (8002d88 <HAL_RCC_OscConfig+0x4d4>)
 8002d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d6e:	4a06      	ldr	r2, [pc, #24]	; (8002d88 <HAL_RCC_OscConfig+0x4d4>)
 8002d70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d74:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d024      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d7e:	f7fe fae7 	bl	8001350 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d84:	e019      	b.n	8002dba <HAL_RCC_OscConfig+0x506>
 8002d86:	bf00      	nop
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	08004298 	.word	0x08004298
 8002d90:	20000000 	.word	0x20000000
 8002d94:	20000004 	.word	0x20000004
 8002d98:	42470020 	.word	0x42470020
 8002d9c:	42470680 	.word	0x42470680
 8002da0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002da4:	f7fe fad4 	bl	8001350 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e0a3      	b.n	8002f02 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dba:	4b54      	ldr	r3, [pc, #336]	; (8002f0c <HAL_RCC_OscConfig+0x658>)
 8002dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0ee      	beq.n	8002da4 <HAL_RCC_OscConfig+0x4f0>
 8002dc6:	e014      	b.n	8002df2 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc8:	f7fe fac2 	bl	8001350 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002dce:	e00a      	b.n	8002de6 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dd0:	f7fe fabe 	bl	8001350 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e08d      	b.n	8002f02 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002de6:	4b49      	ldr	r3, [pc, #292]	; (8002f0c <HAL_RCC_OscConfig+0x658>)
 8002de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1ee      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002df2:	7ffb      	ldrb	r3, [r7, #31]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d105      	bne.n	8002e04 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df8:	4b44      	ldr	r3, [pc, #272]	; (8002f0c <HAL_RCC_OscConfig+0x658>)
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	4a43      	ldr	r2, [pc, #268]	; (8002f0c <HAL_RCC_OscConfig+0x658>)
 8002dfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e02:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d079      	beq.n	8002f00 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	2b0c      	cmp	r3, #12
 8002e10:	d056      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d13b      	bne.n	8002e92 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e1a:	4b3d      	ldr	r3, [pc, #244]	; (8002f10 <HAL_RCC_OscConfig+0x65c>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e20:	f7fe fa96 	bl	8001350 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e28:	f7fe fa92 	bl	8001350 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e063      	b.n	8002f02 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e3a:	4b34      	ldr	r3, [pc, #208]	; (8002f0c <HAL_RCC_OscConfig+0x658>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f0      	bne.n	8002e28 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e46:	4b31      	ldr	r3, [pc, #196]	; (8002f0c <HAL_RCC_OscConfig+0x658>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e56:	4319      	orrs	r1, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5c:	430b      	orrs	r3, r1
 8002e5e:	492b      	ldr	r1, [pc, #172]	; (8002f0c <HAL_RCC_OscConfig+0x658>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e64:	4b2a      	ldr	r3, [pc, #168]	; (8002f10 <HAL_RCC_OscConfig+0x65c>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6a:	f7fe fa71 	bl	8001350 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e72:	f7fe fa6d 	bl	8001350 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e03e      	b.n	8002f02 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e84:	4b21      	ldr	r3, [pc, #132]	; (8002f0c <HAL_RCC_OscConfig+0x658>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0f0      	beq.n	8002e72 <HAL_RCC_OscConfig+0x5be>
 8002e90:	e036      	b.n	8002f00 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e92:	4b1f      	ldr	r3, [pc, #124]	; (8002f10 <HAL_RCC_OscConfig+0x65c>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e98:	f7fe fa5a 	bl	8001350 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ea0:	f7fe fa56 	bl	8001350 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e027      	b.n	8002f02 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002eb2:	4b16      	ldr	r3, [pc, #88]	; (8002f0c <HAL_RCC_OscConfig+0x658>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x5ec>
 8002ebe:	e01f      	b.n	8002f00 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d101      	bne.n	8002ecc <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e01a      	b.n	8002f02 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ecc:	4b0f      	ldr	r3, [pc, #60]	; (8002f0c <HAL_RCC_OscConfig+0x658>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d10d      	bne.n	8002efc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d106      	bne.n	8002efc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d001      	beq.n	8002f00 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e000      	b.n	8002f02 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3720      	adds	r7, #32
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	42470060 	.word	0x42470060

08002f14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e11a      	b.n	800315e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f28:	4b8f      	ldr	r3, [pc, #572]	; (8003168 <HAL_RCC_ClockConfig+0x254>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d919      	bls.n	8002f6a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d105      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x34>
 8002f3c:	4b8a      	ldr	r3, [pc, #552]	; (8003168 <HAL_RCC_ClockConfig+0x254>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a89      	ldr	r2, [pc, #548]	; (8003168 <HAL_RCC_ClockConfig+0x254>)
 8002f42:	f043 0304 	orr.w	r3, r3, #4
 8002f46:	6013      	str	r3, [r2, #0]
 8002f48:	4b87      	ldr	r3, [pc, #540]	; (8003168 <HAL_RCC_ClockConfig+0x254>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f023 0201 	bic.w	r2, r3, #1
 8002f50:	4985      	ldr	r1, [pc, #532]	; (8003168 <HAL_RCC_ClockConfig+0x254>)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f58:	4b83      	ldr	r3, [pc, #524]	; (8003168 <HAL_RCC_ClockConfig+0x254>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d001      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e0f9      	b.n	800315e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d008      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f76:	4b7d      	ldr	r3, [pc, #500]	; (800316c <HAL_RCC_ClockConfig+0x258>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	497a      	ldr	r1, [pc, #488]	; (800316c <HAL_RCC_ClockConfig+0x258>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 808e 	beq.w	80030b2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d107      	bne.n	8002fae <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f9e:	4b73      	ldr	r3, [pc, #460]	; (800316c <HAL_RCC_ClockConfig+0x258>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d121      	bne.n	8002fee <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e0d7      	b.n	800315e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b03      	cmp	r3, #3
 8002fb4:	d107      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fb6:	4b6d      	ldr	r3, [pc, #436]	; (800316c <HAL_RCC_ClockConfig+0x258>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d115      	bne.n	8002fee <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e0cb      	b.n	800315e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d107      	bne.n	8002fde <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fce:	4b67      	ldr	r3, [pc, #412]	; (800316c <HAL_RCC_ClockConfig+0x258>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d109      	bne.n	8002fee <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e0bf      	b.n	800315e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002fde:	4b63      	ldr	r3, [pc, #396]	; (800316c <HAL_RCC_ClockConfig+0x258>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e0b7      	b.n	800315e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fee:	4b5f      	ldr	r3, [pc, #380]	; (800316c <HAL_RCC_ClockConfig+0x258>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f023 0203 	bic.w	r2, r3, #3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	495c      	ldr	r1, [pc, #368]	; (800316c <HAL_RCC_ClockConfig+0x258>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003000:	f7fe f9a6 	bl	8001350 <HAL_GetTick>
 8003004:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d112      	bne.n	8003034 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800300e:	e00a      	b.n	8003026 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003010:	f7fe f99e 	bl	8001350 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	f241 3288 	movw	r2, #5000	; 0x1388
 800301e:	4293      	cmp	r3, r2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e09b      	b.n	800315e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003026:	4b51      	ldr	r3, [pc, #324]	; (800316c <HAL_RCC_ClockConfig+0x258>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 030c 	and.w	r3, r3, #12
 800302e:	2b08      	cmp	r3, #8
 8003030:	d1ee      	bne.n	8003010 <HAL_RCC_ClockConfig+0xfc>
 8003032:	e03e      	b.n	80030b2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b03      	cmp	r3, #3
 800303a:	d112      	bne.n	8003062 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800303c:	e00a      	b.n	8003054 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800303e:	f7fe f987 	bl	8001350 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	f241 3288 	movw	r2, #5000	; 0x1388
 800304c:	4293      	cmp	r3, r2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e084      	b.n	800315e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003054:	4b45      	ldr	r3, [pc, #276]	; (800316c <HAL_RCC_ClockConfig+0x258>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 030c 	and.w	r3, r3, #12
 800305c:	2b0c      	cmp	r3, #12
 800305e:	d1ee      	bne.n	800303e <HAL_RCC_ClockConfig+0x12a>
 8003060:	e027      	b.n	80030b2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d11d      	bne.n	80030a6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800306a:	e00a      	b.n	8003082 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800306c:	f7fe f970 	bl	8001350 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	f241 3288 	movw	r2, #5000	; 0x1388
 800307a:	4293      	cmp	r3, r2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e06d      	b.n	800315e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003082:	4b3a      	ldr	r3, [pc, #232]	; (800316c <HAL_RCC_ClockConfig+0x258>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 030c 	and.w	r3, r3, #12
 800308a:	2b04      	cmp	r3, #4
 800308c:	d1ee      	bne.n	800306c <HAL_RCC_ClockConfig+0x158>
 800308e:	e010      	b.n	80030b2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003090:	f7fe f95e 	bl	8001350 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	f241 3288 	movw	r2, #5000	; 0x1388
 800309e:	4293      	cmp	r3, r2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e05b      	b.n	800315e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80030a6:	4b31      	ldr	r3, [pc, #196]	; (800316c <HAL_RCC_ClockConfig+0x258>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 030c 	and.w	r3, r3, #12
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1ee      	bne.n	8003090 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030b2:	4b2d      	ldr	r3, [pc, #180]	; (8003168 <HAL_RCC_ClockConfig+0x254>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d219      	bcs.n	80030f4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d105      	bne.n	80030d2 <HAL_RCC_ClockConfig+0x1be>
 80030c6:	4b28      	ldr	r3, [pc, #160]	; (8003168 <HAL_RCC_ClockConfig+0x254>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a27      	ldr	r2, [pc, #156]	; (8003168 <HAL_RCC_ClockConfig+0x254>)
 80030cc:	f043 0304 	orr.w	r3, r3, #4
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	4b25      	ldr	r3, [pc, #148]	; (8003168 <HAL_RCC_ClockConfig+0x254>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f023 0201 	bic.w	r2, r3, #1
 80030da:	4923      	ldr	r1, [pc, #140]	; (8003168 <HAL_RCC_ClockConfig+0x254>)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	4313      	orrs	r3, r2
 80030e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e2:	4b21      	ldr	r3, [pc, #132]	; (8003168 <HAL_RCC_ClockConfig+0x254>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d001      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e034      	b.n	800315e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d008      	beq.n	8003112 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003100:	4b1a      	ldr	r3, [pc, #104]	; (800316c <HAL_RCC_ClockConfig+0x258>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	4917      	ldr	r1, [pc, #92]	; (800316c <HAL_RCC_ClockConfig+0x258>)
 800310e:	4313      	orrs	r3, r2
 8003110:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0308 	and.w	r3, r3, #8
 800311a:	2b00      	cmp	r3, #0
 800311c:	d009      	beq.n	8003132 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800311e:	4b13      	ldr	r3, [pc, #76]	; (800316c <HAL_RCC_ClockConfig+0x258>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	490f      	ldr	r1, [pc, #60]	; (800316c <HAL_RCC_ClockConfig+0x258>)
 800312e:	4313      	orrs	r3, r2
 8003130:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003132:	f000 f823 	bl	800317c <HAL_RCC_GetSysClockFreq>
 8003136:	4602      	mov	r2, r0
 8003138:	4b0c      	ldr	r3, [pc, #48]	; (800316c <HAL_RCC_ClockConfig+0x258>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	091b      	lsrs	r3, r3, #4
 800313e:	f003 030f 	and.w	r3, r3, #15
 8003142:	490b      	ldr	r1, [pc, #44]	; (8003170 <HAL_RCC_ClockConfig+0x25c>)
 8003144:	5ccb      	ldrb	r3, [r1, r3]
 8003146:	fa22 f303 	lsr.w	r3, r2, r3
 800314a:	4a0a      	ldr	r2, [pc, #40]	; (8003174 <HAL_RCC_ClockConfig+0x260>)
 800314c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800314e:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <HAL_RCC_ClockConfig+0x264>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f7fe f8b0 	bl	80012b8 <HAL_InitTick>
 8003158:	4603      	mov	r3, r0
 800315a:	72fb      	strb	r3, [r7, #11]

  return status;
 800315c:	7afb      	ldrb	r3, [r7, #11]
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40023c00 	.word	0x40023c00
 800316c:	40023800 	.word	0x40023800
 8003170:	08004298 	.word	0x08004298
 8003174:	20000000 	.word	0x20000000
 8003178:	20000004 	.word	0x20000004

0800317c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800317c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003180:	b092      	sub	sp, #72	; 0x48
 8003182:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003184:	4b79      	ldr	r3, [pc, #484]	; (800336c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800318a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800318c:	f003 030c 	and.w	r3, r3, #12
 8003190:	2b0c      	cmp	r3, #12
 8003192:	d00d      	beq.n	80031b0 <HAL_RCC_GetSysClockFreq+0x34>
 8003194:	2b0c      	cmp	r3, #12
 8003196:	f200 80d5 	bhi.w	8003344 <HAL_RCC_GetSysClockFreq+0x1c8>
 800319a:	2b04      	cmp	r3, #4
 800319c:	d002      	beq.n	80031a4 <HAL_RCC_GetSysClockFreq+0x28>
 800319e:	2b08      	cmp	r3, #8
 80031a0:	d003      	beq.n	80031aa <HAL_RCC_GetSysClockFreq+0x2e>
 80031a2:	e0cf      	b.n	8003344 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031a4:	4b72      	ldr	r3, [pc, #456]	; (8003370 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80031a6:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80031a8:	e0da      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031aa:	4b72      	ldr	r3, [pc, #456]	; (8003374 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80031ac:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80031ae:	e0d7      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80031b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b2:	0c9b      	lsrs	r3, r3, #18
 80031b4:	f003 020f 	and.w	r2, r3, #15
 80031b8:	4b6f      	ldr	r3, [pc, #444]	; (8003378 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80031ba:	5c9b      	ldrb	r3, [r3, r2]
 80031bc:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80031be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031c0:	0d9b      	lsrs	r3, r3, #22
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	3301      	adds	r3, #1
 80031c8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031ca:	4b68      	ldr	r3, [pc, #416]	; (800336c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d05d      	beq.n	8003292 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80031d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d8:	2200      	movs	r2, #0
 80031da:	4618      	mov	r0, r3
 80031dc:	4611      	mov	r1, r2
 80031de:	4604      	mov	r4, r0
 80031e0:	460d      	mov	r5, r1
 80031e2:	4622      	mov	r2, r4
 80031e4:	462b      	mov	r3, r5
 80031e6:	f04f 0000 	mov.w	r0, #0
 80031ea:	f04f 0100 	mov.w	r1, #0
 80031ee:	0159      	lsls	r1, r3, #5
 80031f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031f4:	0150      	lsls	r0, r2, #5
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	4621      	mov	r1, r4
 80031fc:	1a51      	subs	r1, r2, r1
 80031fe:	6139      	str	r1, [r7, #16]
 8003200:	4629      	mov	r1, r5
 8003202:	eb63 0301 	sbc.w	r3, r3, r1
 8003206:	617b      	str	r3, [r7, #20]
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	f04f 0300 	mov.w	r3, #0
 8003210:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003214:	4659      	mov	r1, fp
 8003216:	018b      	lsls	r3, r1, #6
 8003218:	4651      	mov	r1, sl
 800321a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800321e:	4651      	mov	r1, sl
 8003220:	018a      	lsls	r2, r1, #6
 8003222:	46d4      	mov	ip, sl
 8003224:	ebb2 080c 	subs.w	r8, r2, ip
 8003228:	4659      	mov	r1, fp
 800322a:	eb63 0901 	sbc.w	r9, r3, r1
 800322e:	f04f 0200 	mov.w	r2, #0
 8003232:	f04f 0300 	mov.w	r3, #0
 8003236:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800323a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800323e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003242:	4690      	mov	r8, r2
 8003244:	4699      	mov	r9, r3
 8003246:	4623      	mov	r3, r4
 8003248:	eb18 0303 	adds.w	r3, r8, r3
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	462b      	mov	r3, r5
 8003250:	eb49 0303 	adc.w	r3, r9, r3
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	f04f 0200 	mov.w	r2, #0
 800325a:	f04f 0300 	mov.w	r3, #0
 800325e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003262:	4629      	mov	r1, r5
 8003264:	024b      	lsls	r3, r1, #9
 8003266:	4620      	mov	r0, r4
 8003268:	4629      	mov	r1, r5
 800326a:	4604      	mov	r4, r0
 800326c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003270:	4601      	mov	r1, r0
 8003272:	024a      	lsls	r2, r1, #9
 8003274:	4610      	mov	r0, r2
 8003276:	4619      	mov	r1, r3
 8003278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800327a:	2200      	movs	r2, #0
 800327c:	62bb      	str	r3, [r7, #40]	; 0x28
 800327e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003280:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003284:	f7fd fb8c 	bl	80009a0 <__aeabi_uldivmod>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4613      	mov	r3, r2
 800328e:	647b      	str	r3, [r7, #68]	; 0x44
 8003290:	e055      	b.n	800333e <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003294:	2200      	movs	r2, #0
 8003296:	623b      	str	r3, [r7, #32]
 8003298:	627a      	str	r2, [r7, #36]	; 0x24
 800329a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800329e:	4642      	mov	r2, r8
 80032a0:	464b      	mov	r3, r9
 80032a2:	f04f 0000 	mov.w	r0, #0
 80032a6:	f04f 0100 	mov.w	r1, #0
 80032aa:	0159      	lsls	r1, r3, #5
 80032ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032b0:	0150      	lsls	r0, r2, #5
 80032b2:	4602      	mov	r2, r0
 80032b4:	460b      	mov	r3, r1
 80032b6:	46c4      	mov	ip, r8
 80032b8:	ebb2 0a0c 	subs.w	sl, r2, ip
 80032bc:	4640      	mov	r0, r8
 80032be:	4649      	mov	r1, r9
 80032c0:	468c      	mov	ip, r1
 80032c2:	eb63 0b0c 	sbc.w	fp, r3, ip
 80032c6:	f04f 0200 	mov.w	r2, #0
 80032ca:	f04f 0300 	mov.w	r3, #0
 80032ce:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032d2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032d6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032da:	ebb2 040a 	subs.w	r4, r2, sl
 80032de:	eb63 050b 	sbc.w	r5, r3, fp
 80032e2:	f04f 0200 	mov.w	r2, #0
 80032e6:	f04f 0300 	mov.w	r3, #0
 80032ea:	00eb      	lsls	r3, r5, #3
 80032ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032f0:	00e2      	lsls	r2, r4, #3
 80032f2:	4614      	mov	r4, r2
 80032f4:	461d      	mov	r5, r3
 80032f6:	4603      	mov	r3, r0
 80032f8:	18e3      	adds	r3, r4, r3
 80032fa:	603b      	str	r3, [r7, #0]
 80032fc:	460b      	mov	r3, r1
 80032fe:	eb45 0303 	adc.w	r3, r5, r3
 8003302:	607b      	str	r3, [r7, #4]
 8003304:	f04f 0200 	mov.w	r2, #0
 8003308:	f04f 0300 	mov.w	r3, #0
 800330c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003310:	4629      	mov	r1, r5
 8003312:	028b      	lsls	r3, r1, #10
 8003314:	4620      	mov	r0, r4
 8003316:	4629      	mov	r1, r5
 8003318:	4604      	mov	r4, r0
 800331a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800331e:	4601      	mov	r1, r0
 8003320:	028a      	lsls	r2, r1, #10
 8003322:	4610      	mov	r0, r2
 8003324:	4619      	mov	r1, r3
 8003326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003328:	2200      	movs	r2, #0
 800332a:	61bb      	str	r3, [r7, #24]
 800332c:	61fa      	str	r2, [r7, #28]
 800332e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003332:	f7fd fb35 	bl	80009a0 <__aeabi_uldivmod>
 8003336:	4602      	mov	r2, r0
 8003338:	460b      	mov	r3, r1
 800333a:	4613      	mov	r3, r2
 800333c:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 800333e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003340:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003342:	e00d      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003344:	4b09      	ldr	r3, [pc, #36]	; (800336c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	0b5b      	lsrs	r3, r3, #13
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003352:	3301      	adds	r3, #1
 8003354:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800335e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003362:	4618      	mov	r0, r3
 8003364:	3748      	adds	r7, #72	; 0x48
 8003366:	46bd      	mov	sp, r7
 8003368:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800336c:	40023800 	.word	0x40023800
 8003370:	00f42400 	.word	0x00f42400
 8003374:	007a1200 	.word	0x007a1200
 8003378:	0800428c 	.word	0x0800428c

0800337c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003380:	4b02      	ldr	r3, [pc, #8]	; (800338c <HAL_RCC_GetHCLKFreq+0x10>)
 8003382:	681b      	ldr	r3, [r3, #0]
}
 8003384:	4618      	mov	r0, r3
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr
 800338c:	20000000 	.word	0x20000000

08003390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003394:	f7ff fff2 	bl	800337c <HAL_RCC_GetHCLKFreq>
 8003398:	4602      	mov	r2, r0
 800339a:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	0a1b      	lsrs	r3, r3, #8
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	4903      	ldr	r1, [pc, #12]	; (80033b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033a6:	5ccb      	ldrb	r3, [r1, r3]
 80033a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40023800 	.word	0x40023800
 80033b4:	080042a8 	.word	0x080042a8

080033b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033bc:	f7ff ffde 	bl	800337c <HAL_RCC_GetHCLKFreq>
 80033c0:	4602      	mov	r2, r0
 80033c2:	4b05      	ldr	r3, [pc, #20]	; (80033d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	0adb      	lsrs	r3, r3, #11
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	4903      	ldr	r1, [pc, #12]	; (80033dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80033ce:	5ccb      	ldrb	r3, [r1, r3]
 80033d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40023800 	.word	0x40023800
 80033dc:	080042a8 	.word	0x080042a8

080033e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b087      	sub	sp, #28
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80033e8:	2300      	movs	r3, #0
 80033ea:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80033ec:	4b29      	ldr	r3, [pc, #164]	; (8003494 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d12c      	bne.n	8003452 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80033f8:	4b26      	ldr	r3, [pc, #152]	; (8003494 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d005      	beq.n	8003410 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003404:	4b24      	ldr	r3, [pc, #144]	; (8003498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	e016      	b.n	800343e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003410:	4b20      	ldr	r3, [pc, #128]	; (8003494 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	4a1f      	ldr	r2, [pc, #124]	; (8003494 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800341a:	6253      	str	r3, [r2, #36]	; 0x24
 800341c:	4b1d      	ldr	r3, [pc, #116]	; (8003494 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003428:	4b1b      	ldr	r3, [pc, #108]	; (8003498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003430:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003432:	4b18      	ldr	r3, [pc, #96]	; (8003494 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	4a17      	ldr	r2, [pc, #92]	; (8003494 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800343c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003444:	d105      	bne.n	8003452 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800344c:	d101      	bne.n	8003452 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800344e:	2301      	movs	r3, #1
 8003450:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d105      	bne.n	8003464 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003458:	4b10      	ldr	r3, [pc, #64]	; (800349c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a0f      	ldr	r2, [pc, #60]	; (800349c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800345e:	f043 0304 	orr.w	r3, r3, #4
 8003462:	6013      	str	r3, [r2, #0]
 8003464:	4b0d      	ldr	r3, [pc, #52]	; (800349c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f023 0201 	bic.w	r2, r3, #1
 800346c:	490b      	ldr	r1, [pc, #44]	; (800349c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	4313      	orrs	r3, r2
 8003472:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003474:	4b09      	ldr	r3, [pc, #36]	; (800349c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	429a      	cmp	r2, r3
 8003480:	d001      	beq.n	8003486 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e000      	b.n	8003488 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	371c      	adds	r7, #28
 800348c:	46bd      	mov	sp, r7
 800348e:	bc80      	pop	{r7}
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	40023800 	.word	0x40023800
 8003498:	40007000 	.word	0x40007000
 800349c:	40023c00 	.word	0x40023c00

080034a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e042      	b.n	8003538 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d106      	bne.n	80034cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7fd fe10 	bl	80010ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2224      	movs	r2, #36	; 0x24
 80034d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f91d 	bl	8003724 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	691a      	ldr	r2, [r3, #16]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	695a      	ldr	r2, [r3, #20]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003508:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68da      	ldr	r2, [r3, #12]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003518:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2220      	movs	r2, #32
 8003524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2220      	movs	r2, #32
 800352c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b08a      	sub	sp, #40	; 0x28
 8003544:	af02      	add	r7, sp, #8
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	603b      	str	r3, [r7, #0]
 800354c:	4613      	mov	r3, r2
 800354e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b20      	cmp	r3, #32
 800355e:	d16d      	bne.n	800363c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d002      	beq.n	800356c <HAL_UART_Transmit+0x2c>
 8003566:	88fb      	ldrh	r3, [r7, #6]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e066      	b.n	800363e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2221      	movs	r2, #33	; 0x21
 800357a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800357e:	f7fd fee7 	bl	8001350 <HAL_GetTick>
 8003582:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	88fa      	ldrh	r2, [r7, #6]
 8003588:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	88fa      	ldrh	r2, [r7, #6]
 800358e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003598:	d108      	bne.n	80035ac <HAL_UART_Transmit+0x6c>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d104      	bne.n	80035ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	61bb      	str	r3, [r7, #24]
 80035aa:	e003      	b.n	80035b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035b0:	2300      	movs	r3, #0
 80035b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035b4:	e02a      	b.n	800360c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2200      	movs	r2, #0
 80035be:	2180      	movs	r1, #128	; 0x80
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f000 f840 	bl	8003646 <UART_WaitOnFlagUntilTimeout>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e036      	b.n	800363e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10b      	bne.n	80035ee <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	461a      	mov	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	3302      	adds	r3, #2
 80035ea:	61bb      	str	r3, [r7, #24]
 80035ec:	e007      	b.n	80035fe <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	781a      	ldrb	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	3301      	adds	r3, #1
 80035fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003602:	b29b      	uxth	r3, r3
 8003604:	3b01      	subs	r3, #1
 8003606:	b29a      	uxth	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003610:	b29b      	uxth	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1cf      	bne.n	80035b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	2200      	movs	r2, #0
 800361e:	2140      	movs	r1, #64	; 0x40
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 f810 	bl	8003646 <UART_WaitOnFlagUntilTimeout>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e006      	b.n	800363e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2220      	movs	r2, #32
 8003634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003638:	2300      	movs	r3, #0
 800363a:	e000      	b.n	800363e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800363c:	2302      	movs	r3, #2
  }
}
 800363e:	4618      	mov	r0, r3
 8003640:	3720      	adds	r7, #32
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b090      	sub	sp, #64	; 0x40
 800364a:	af00      	add	r7, sp, #0
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	603b      	str	r3, [r7, #0]
 8003652:	4613      	mov	r3, r2
 8003654:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003656:	e050      	b.n	80036fa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800365a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365e:	d04c      	beq.n	80036fa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003660:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003662:	2b00      	cmp	r3, #0
 8003664:	d007      	beq.n	8003676 <UART_WaitOnFlagUntilTimeout+0x30>
 8003666:	f7fd fe73 	bl	8001350 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003672:	429a      	cmp	r2, r3
 8003674:	d241      	bcs.n	80036fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	330c      	adds	r3, #12
 800367c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003680:	e853 3f00 	ldrex	r3, [r3]
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800368c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	330c      	adds	r3, #12
 8003694:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003696:	637a      	str	r2, [r7, #52]	; 0x34
 8003698:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800369c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800369e:	e841 2300 	strex	r3, r2, [r1]
 80036a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1e5      	bne.n	8003676 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	3314      	adds	r3, #20
 80036b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	e853 3f00 	ldrex	r3, [r3]
 80036b8:	613b      	str	r3, [r7, #16]
   return(result);
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f023 0301 	bic.w	r3, r3, #1
 80036c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	3314      	adds	r3, #20
 80036c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036ca:	623a      	str	r2, [r7, #32]
 80036cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ce:	69f9      	ldr	r1, [r7, #28]
 80036d0:	6a3a      	ldr	r2, [r7, #32]
 80036d2:	e841 2300 	strex	r3, r2, [r1]
 80036d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1e5      	bne.n	80036aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2220      	movs	r2, #32
 80036e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2220      	movs	r2, #32
 80036ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e00f      	b.n	800371a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	4013      	ands	r3, r2
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	429a      	cmp	r2, r3
 8003708:	bf0c      	ite	eq
 800370a:	2301      	moveq	r3, #1
 800370c:	2300      	movne	r3, #0
 800370e:	b2db      	uxtb	r3, r3
 8003710:	461a      	mov	r2, r3
 8003712:	79fb      	ldrb	r3, [r7, #7]
 8003714:	429a      	cmp	r2, r3
 8003716:	d09f      	beq.n	8003658 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3740      	adds	r7, #64	; 0x40
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
	...

08003724 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689a      	ldr	r2, [r3, #8]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	431a      	orrs	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	4313      	orrs	r3, r2
 8003758:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003764:	f023 030c 	bic.w	r3, r3, #12
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6812      	ldr	r2, [r2, #0]
 800376c:	68b9      	ldr	r1, [r7, #8]
 800376e:	430b      	orrs	r3, r1
 8003770:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	699a      	ldr	r2, [r3, #24]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a55      	ldr	r2, [pc, #340]	; (80038e4 <UART_SetConfig+0x1c0>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d103      	bne.n	800379a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003792:	f7ff fe11 	bl	80033b8 <HAL_RCC_GetPCLK2Freq>
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	e002      	b.n	80037a0 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800379a:	f7ff fdf9 	bl	8003390 <HAL_RCC_GetPCLK1Freq>
 800379e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037a8:	d14c      	bne.n	8003844 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	4613      	mov	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	009a      	lsls	r2, r3, #2
 80037b4:	441a      	add	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c0:	4a49      	ldr	r2, [pc, #292]	; (80038e8 <UART_SetConfig+0x1c4>)
 80037c2:	fba2 2303 	umull	r2, r3, r2, r3
 80037c6:	095b      	lsrs	r3, r3, #5
 80037c8:	0119      	lsls	r1, r3, #4
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	4613      	mov	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	009a      	lsls	r2, r3, #2
 80037d4:	441a      	add	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80037e0:	4b41      	ldr	r3, [pc, #260]	; (80038e8 <UART_SetConfig+0x1c4>)
 80037e2:	fba3 0302 	umull	r0, r3, r3, r2
 80037e6:	095b      	lsrs	r3, r3, #5
 80037e8:	2064      	movs	r0, #100	; 0x64
 80037ea:	fb00 f303 	mul.w	r3, r0, r3
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	3332      	adds	r3, #50	; 0x32
 80037f4:	4a3c      	ldr	r2, [pc, #240]	; (80038e8 <UART_SetConfig+0x1c4>)
 80037f6:	fba2 2303 	umull	r2, r3, r2, r3
 80037fa:	095b      	lsrs	r3, r3, #5
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003802:	4419      	add	r1, r3
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	4613      	mov	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4413      	add	r3, r2
 800380c:	009a      	lsls	r2, r3, #2
 800380e:	441a      	add	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	fbb2 f2f3 	udiv	r2, r2, r3
 800381a:	4b33      	ldr	r3, [pc, #204]	; (80038e8 <UART_SetConfig+0x1c4>)
 800381c:	fba3 0302 	umull	r0, r3, r3, r2
 8003820:	095b      	lsrs	r3, r3, #5
 8003822:	2064      	movs	r0, #100	; 0x64
 8003824:	fb00 f303 	mul.w	r3, r0, r3
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	3332      	adds	r3, #50	; 0x32
 800382e:	4a2e      	ldr	r2, [pc, #184]	; (80038e8 <UART_SetConfig+0x1c4>)
 8003830:	fba2 2303 	umull	r2, r3, r2, r3
 8003834:	095b      	lsrs	r3, r3, #5
 8003836:	f003 0207 	and.w	r2, r3, #7
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	440a      	add	r2, r1
 8003840:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003842:	e04a      	b.n	80038da <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	4613      	mov	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4413      	add	r3, r2
 800384c:	009a      	lsls	r2, r3, #2
 800384e:	441a      	add	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	fbb2 f3f3 	udiv	r3, r2, r3
 800385a:	4a23      	ldr	r2, [pc, #140]	; (80038e8 <UART_SetConfig+0x1c4>)
 800385c:	fba2 2303 	umull	r2, r3, r2, r3
 8003860:	095b      	lsrs	r3, r3, #5
 8003862:	0119      	lsls	r1, r3, #4
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	4613      	mov	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	009a      	lsls	r2, r3, #2
 800386e:	441a      	add	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	fbb2 f2f3 	udiv	r2, r2, r3
 800387a:	4b1b      	ldr	r3, [pc, #108]	; (80038e8 <UART_SetConfig+0x1c4>)
 800387c:	fba3 0302 	umull	r0, r3, r3, r2
 8003880:	095b      	lsrs	r3, r3, #5
 8003882:	2064      	movs	r0, #100	; 0x64
 8003884:	fb00 f303 	mul.w	r3, r0, r3
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	3332      	adds	r3, #50	; 0x32
 800388e:	4a16      	ldr	r2, [pc, #88]	; (80038e8 <UART_SetConfig+0x1c4>)
 8003890:	fba2 2303 	umull	r2, r3, r2, r3
 8003894:	095b      	lsrs	r3, r3, #5
 8003896:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800389a:	4419      	add	r1, r3
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	4613      	mov	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	009a      	lsls	r2, r3, #2
 80038a6:	441a      	add	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80038b2:	4b0d      	ldr	r3, [pc, #52]	; (80038e8 <UART_SetConfig+0x1c4>)
 80038b4:	fba3 0302 	umull	r0, r3, r3, r2
 80038b8:	095b      	lsrs	r3, r3, #5
 80038ba:	2064      	movs	r0, #100	; 0x64
 80038bc:	fb00 f303 	mul.w	r3, r0, r3
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	3332      	adds	r3, #50	; 0x32
 80038c6:	4a08      	ldr	r2, [pc, #32]	; (80038e8 <UART_SetConfig+0x1c4>)
 80038c8:	fba2 2303 	umull	r2, r3, r2, r3
 80038cc:	095b      	lsrs	r3, r3, #5
 80038ce:	f003 020f 	and.w	r2, r3, #15
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	440a      	add	r2, r1
 80038d8:	609a      	str	r2, [r3, #8]
}
 80038da:	bf00      	nop
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	40013800 	.word	0x40013800
 80038e8:	51eb851f 	.word	0x51eb851f

080038ec <siprintf>:
 80038ec:	b40e      	push	{r1, r2, r3}
 80038ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80038f2:	b500      	push	{lr}
 80038f4:	b09c      	sub	sp, #112	; 0x70
 80038f6:	ab1d      	add	r3, sp, #116	; 0x74
 80038f8:	9002      	str	r0, [sp, #8]
 80038fa:	9006      	str	r0, [sp, #24]
 80038fc:	9107      	str	r1, [sp, #28]
 80038fe:	9104      	str	r1, [sp, #16]
 8003900:	4808      	ldr	r0, [pc, #32]	; (8003924 <siprintf+0x38>)
 8003902:	4909      	ldr	r1, [pc, #36]	; (8003928 <siprintf+0x3c>)
 8003904:	f853 2b04 	ldr.w	r2, [r3], #4
 8003908:	9105      	str	r1, [sp, #20]
 800390a:	6800      	ldr	r0, [r0, #0]
 800390c:	a902      	add	r1, sp, #8
 800390e:	9301      	str	r3, [sp, #4]
 8003910:	f000 f98e 	bl	8003c30 <_svfiprintf_r>
 8003914:	2200      	movs	r2, #0
 8003916:	9b02      	ldr	r3, [sp, #8]
 8003918:	701a      	strb	r2, [r3, #0]
 800391a:	b01c      	add	sp, #112	; 0x70
 800391c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003920:	b003      	add	sp, #12
 8003922:	4770      	bx	lr
 8003924:	20000058 	.word	0x20000058
 8003928:	ffff0208 	.word	0xffff0208

0800392c <memset>:
 800392c:	4603      	mov	r3, r0
 800392e:	4402      	add	r2, r0
 8003930:	4293      	cmp	r3, r2
 8003932:	d100      	bne.n	8003936 <memset+0xa>
 8003934:	4770      	bx	lr
 8003936:	f803 1b01 	strb.w	r1, [r3], #1
 800393a:	e7f9      	b.n	8003930 <memset+0x4>

0800393c <__errno>:
 800393c:	4b01      	ldr	r3, [pc, #4]	; (8003944 <__errno+0x8>)
 800393e:	6818      	ldr	r0, [r3, #0]
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	20000058 	.word	0x20000058

08003948 <__libc_init_array>:
 8003948:	b570      	push	{r4, r5, r6, lr}
 800394a:	2600      	movs	r6, #0
 800394c:	4d0c      	ldr	r5, [pc, #48]	; (8003980 <__libc_init_array+0x38>)
 800394e:	4c0d      	ldr	r4, [pc, #52]	; (8003984 <__libc_init_array+0x3c>)
 8003950:	1b64      	subs	r4, r4, r5
 8003952:	10a4      	asrs	r4, r4, #2
 8003954:	42a6      	cmp	r6, r4
 8003956:	d109      	bne.n	800396c <__libc_init_array+0x24>
 8003958:	f000 fc7a 	bl	8004250 <_init>
 800395c:	2600      	movs	r6, #0
 800395e:	4d0a      	ldr	r5, [pc, #40]	; (8003988 <__libc_init_array+0x40>)
 8003960:	4c0a      	ldr	r4, [pc, #40]	; (800398c <__libc_init_array+0x44>)
 8003962:	1b64      	subs	r4, r4, r5
 8003964:	10a4      	asrs	r4, r4, #2
 8003966:	42a6      	cmp	r6, r4
 8003968:	d105      	bne.n	8003976 <__libc_init_array+0x2e>
 800396a:	bd70      	pop	{r4, r5, r6, pc}
 800396c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003970:	4798      	blx	r3
 8003972:	3601      	adds	r6, #1
 8003974:	e7ee      	b.n	8003954 <__libc_init_array+0xc>
 8003976:	f855 3b04 	ldr.w	r3, [r5], #4
 800397a:	4798      	blx	r3
 800397c:	3601      	adds	r6, #1
 800397e:	e7f2      	b.n	8003966 <__libc_init_array+0x1e>
 8003980:	080042ec 	.word	0x080042ec
 8003984:	080042ec 	.word	0x080042ec
 8003988:	080042ec 	.word	0x080042ec
 800398c:	080042f0 	.word	0x080042f0

08003990 <__retarget_lock_acquire_recursive>:
 8003990:	4770      	bx	lr

08003992 <__retarget_lock_release_recursive>:
 8003992:	4770      	bx	lr

08003994 <_free_r>:
 8003994:	b538      	push	{r3, r4, r5, lr}
 8003996:	4605      	mov	r5, r0
 8003998:	2900      	cmp	r1, #0
 800399a:	d040      	beq.n	8003a1e <_free_r+0x8a>
 800399c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039a0:	1f0c      	subs	r4, r1, #4
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	bfb8      	it	lt
 80039a6:	18e4      	addlt	r4, r4, r3
 80039a8:	f000 f8dc 	bl	8003b64 <__malloc_lock>
 80039ac:	4a1c      	ldr	r2, [pc, #112]	; (8003a20 <_free_r+0x8c>)
 80039ae:	6813      	ldr	r3, [r2, #0]
 80039b0:	b933      	cbnz	r3, 80039c0 <_free_r+0x2c>
 80039b2:	6063      	str	r3, [r4, #4]
 80039b4:	6014      	str	r4, [r2, #0]
 80039b6:	4628      	mov	r0, r5
 80039b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039bc:	f000 b8d8 	b.w	8003b70 <__malloc_unlock>
 80039c0:	42a3      	cmp	r3, r4
 80039c2:	d908      	bls.n	80039d6 <_free_r+0x42>
 80039c4:	6820      	ldr	r0, [r4, #0]
 80039c6:	1821      	adds	r1, r4, r0
 80039c8:	428b      	cmp	r3, r1
 80039ca:	bf01      	itttt	eq
 80039cc:	6819      	ldreq	r1, [r3, #0]
 80039ce:	685b      	ldreq	r3, [r3, #4]
 80039d0:	1809      	addeq	r1, r1, r0
 80039d2:	6021      	streq	r1, [r4, #0]
 80039d4:	e7ed      	b.n	80039b2 <_free_r+0x1e>
 80039d6:	461a      	mov	r2, r3
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	b10b      	cbz	r3, 80039e0 <_free_r+0x4c>
 80039dc:	42a3      	cmp	r3, r4
 80039de:	d9fa      	bls.n	80039d6 <_free_r+0x42>
 80039e0:	6811      	ldr	r1, [r2, #0]
 80039e2:	1850      	adds	r0, r2, r1
 80039e4:	42a0      	cmp	r0, r4
 80039e6:	d10b      	bne.n	8003a00 <_free_r+0x6c>
 80039e8:	6820      	ldr	r0, [r4, #0]
 80039ea:	4401      	add	r1, r0
 80039ec:	1850      	adds	r0, r2, r1
 80039ee:	4283      	cmp	r3, r0
 80039f0:	6011      	str	r1, [r2, #0]
 80039f2:	d1e0      	bne.n	80039b6 <_free_r+0x22>
 80039f4:	6818      	ldr	r0, [r3, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	4408      	add	r0, r1
 80039fa:	6010      	str	r0, [r2, #0]
 80039fc:	6053      	str	r3, [r2, #4]
 80039fe:	e7da      	b.n	80039b6 <_free_r+0x22>
 8003a00:	d902      	bls.n	8003a08 <_free_r+0x74>
 8003a02:	230c      	movs	r3, #12
 8003a04:	602b      	str	r3, [r5, #0]
 8003a06:	e7d6      	b.n	80039b6 <_free_r+0x22>
 8003a08:	6820      	ldr	r0, [r4, #0]
 8003a0a:	1821      	adds	r1, r4, r0
 8003a0c:	428b      	cmp	r3, r1
 8003a0e:	bf01      	itttt	eq
 8003a10:	6819      	ldreq	r1, [r3, #0]
 8003a12:	685b      	ldreq	r3, [r3, #4]
 8003a14:	1809      	addeq	r1, r1, r0
 8003a16:	6021      	streq	r1, [r4, #0]
 8003a18:	6063      	str	r3, [r4, #4]
 8003a1a:	6054      	str	r4, [r2, #4]
 8003a1c:	e7cb      	b.n	80039b6 <_free_r+0x22>
 8003a1e:	bd38      	pop	{r3, r4, r5, pc}
 8003a20:	2000025c 	.word	0x2000025c

08003a24 <sbrk_aligned>:
 8003a24:	b570      	push	{r4, r5, r6, lr}
 8003a26:	4e0e      	ldr	r6, [pc, #56]	; (8003a60 <sbrk_aligned+0x3c>)
 8003a28:	460c      	mov	r4, r1
 8003a2a:	6831      	ldr	r1, [r6, #0]
 8003a2c:	4605      	mov	r5, r0
 8003a2e:	b911      	cbnz	r1, 8003a36 <sbrk_aligned+0x12>
 8003a30:	f000 fbaa 	bl	8004188 <_sbrk_r>
 8003a34:	6030      	str	r0, [r6, #0]
 8003a36:	4621      	mov	r1, r4
 8003a38:	4628      	mov	r0, r5
 8003a3a:	f000 fba5 	bl	8004188 <_sbrk_r>
 8003a3e:	1c43      	adds	r3, r0, #1
 8003a40:	d00a      	beq.n	8003a58 <sbrk_aligned+0x34>
 8003a42:	1cc4      	adds	r4, r0, #3
 8003a44:	f024 0403 	bic.w	r4, r4, #3
 8003a48:	42a0      	cmp	r0, r4
 8003a4a:	d007      	beq.n	8003a5c <sbrk_aligned+0x38>
 8003a4c:	1a21      	subs	r1, r4, r0
 8003a4e:	4628      	mov	r0, r5
 8003a50:	f000 fb9a 	bl	8004188 <_sbrk_r>
 8003a54:	3001      	adds	r0, #1
 8003a56:	d101      	bne.n	8003a5c <sbrk_aligned+0x38>
 8003a58:	f04f 34ff 	mov.w	r4, #4294967295
 8003a5c:	4620      	mov	r0, r4
 8003a5e:	bd70      	pop	{r4, r5, r6, pc}
 8003a60:	20000260 	.word	0x20000260

08003a64 <_malloc_r>:
 8003a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a68:	1ccd      	adds	r5, r1, #3
 8003a6a:	f025 0503 	bic.w	r5, r5, #3
 8003a6e:	3508      	adds	r5, #8
 8003a70:	2d0c      	cmp	r5, #12
 8003a72:	bf38      	it	cc
 8003a74:	250c      	movcc	r5, #12
 8003a76:	2d00      	cmp	r5, #0
 8003a78:	4607      	mov	r7, r0
 8003a7a:	db01      	blt.n	8003a80 <_malloc_r+0x1c>
 8003a7c:	42a9      	cmp	r1, r5
 8003a7e:	d905      	bls.n	8003a8c <_malloc_r+0x28>
 8003a80:	230c      	movs	r3, #12
 8003a82:	2600      	movs	r6, #0
 8003a84:	603b      	str	r3, [r7, #0]
 8003a86:	4630      	mov	r0, r6
 8003a88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003b60 <_malloc_r+0xfc>
 8003a90:	f000 f868 	bl	8003b64 <__malloc_lock>
 8003a94:	f8d8 3000 	ldr.w	r3, [r8]
 8003a98:	461c      	mov	r4, r3
 8003a9a:	bb5c      	cbnz	r4, 8003af4 <_malloc_r+0x90>
 8003a9c:	4629      	mov	r1, r5
 8003a9e:	4638      	mov	r0, r7
 8003aa0:	f7ff ffc0 	bl	8003a24 <sbrk_aligned>
 8003aa4:	1c43      	adds	r3, r0, #1
 8003aa6:	4604      	mov	r4, r0
 8003aa8:	d155      	bne.n	8003b56 <_malloc_r+0xf2>
 8003aaa:	f8d8 4000 	ldr.w	r4, [r8]
 8003aae:	4626      	mov	r6, r4
 8003ab0:	2e00      	cmp	r6, #0
 8003ab2:	d145      	bne.n	8003b40 <_malloc_r+0xdc>
 8003ab4:	2c00      	cmp	r4, #0
 8003ab6:	d048      	beq.n	8003b4a <_malloc_r+0xe6>
 8003ab8:	6823      	ldr	r3, [r4, #0]
 8003aba:	4631      	mov	r1, r6
 8003abc:	4638      	mov	r0, r7
 8003abe:	eb04 0903 	add.w	r9, r4, r3
 8003ac2:	f000 fb61 	bl	8004188 <_sbrk_r>
 8003ac6:	4581      	cmp	r9, r0
 8003ac8:	d13f      	bne.n	8003b4a <_malloc_r+0xe6>
 8003aca:	6821      	ldr	r1, [r4, #0]
 8003acc:	4638      	mov	r0, r7
 8003ace:	1a6d      	subs	r5, r5, r1
 8003ad0:	4629      	mov	r1, r5
 8003ad2:	f7ff ffa7 	bl	8003a24 <sbrk_aligned>
 8003ad6:	3001      	adds	r0, #1
 8003ad8:	d037      	beq.n	8003b4a <_malloc_r+0xe6>
 8003ada:	6823      	ldr	r3, [r4, #0]
 8003adc:	442b      	add	r3, r5
 8003ade:	6023      	str	r3, [r4, #0]
 8003ae0:	f8d8 3000 	ldr.w	r3, [r8]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d038      	beq.n	8003b5a <_malloc_r+0xf6>
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	42a2      	cmp	r2, r4
 8003aec:	d12b      	bne.n	8003b46 <_malloc_r+0xe2>
 8003aee:	2200      	movs	r2, #0
 8003af0:	605a      	str	r2, [r3, #4]
 8003af2:	e00f      	b.n	8003b14 <_malloc_r+0xb0>
 8003af4:	6822      	ldr	r2, [r4, #0]
 8003af6:	1b52      	subs	r2, r2, r5
 8003af8:	d41f      	bmi.n	8003b3a <_malloc_r+0xd6>
 8003afa:	2a0b      	cmp	r2, #11
 8003afc:	d917      	bls.n	8003b2e <_malloc_r+0xca>
 8003afe:	1961      	adds	r1, r4, r5
 8003b00:	42a3      	cmp	r3, r4
 8003b02:	6025      	str	r5, [r4, #0]
 8003b04:	bf18      	it	ne
 8003b06:	6059      	strne	r1, [r3, #4]
 8003b08:	6863      	ldr	r3, [r4, #4]
 8003b0a:	bf08      	it	eq
 8003b0c:	f8c8 1000 	streq.w	r1, [r8]
 8003b10:	5162      	str	r2, [r4, r5]
 8003b12:	604b      	str	r3, [r1, #4]
 8003b14:	4638      	mov	r0, r7
 8003b16:	f104 060b 	add.w	r6, r4, #11
 8003b1a:	f000 f829 	bl	8003b70 <__malloc_unlock>
 8003b1e:	f026 0607 	bic.w	r6, r6, #7
 8003b22:	1d23      	adds	r3, r4, #4
 8003b24:	1af2      	subs	r2, r6, r3
 8003b26:	d0ae      	beq.n	8003a86 <_malloc_r+0x22>
 8003b28:	1b9b      	subs	r3, r3, r6
 8003b2a:	50a3      	str	r3, [r4, r2]
 8003b2c:	e7ab      	b.n	8003a86 <_malloc_r+0x22>
 8003b2e:	42a3      	cmp	r3, r4
 8003b30:	6862      	ldr	r2, [r4, #4]
 8003b32:	d1dd      	bne.n	8003af0 <_malloc_r+0x8c>
 8003b34:	f8c8 2000 	str.w	r2, [r8]
 8003b38:	e7ec      	b.n	8003b14 <_malloc_r+0xb0>
 8003b3a:	4623      	mov	r3, r4
 8003b3c:	6864      	ldr	r4, [r4, #4]
 8003b3e:	e7ac      	b.n	8003a9a <_malloc_r+0x36>
 8003b40:	4634      	mov	r4, r6
 8003b42:	6876      	ldr	r6, [r6, #4]
 8003b44:	e7b4      	b.n	8003ab0 <_malloc_r+0x4c>
 8003b46:	4613      	mov	r3, r2
 8003b48:	e7cc      	b.n	8003ae4 <_malloc_r+0x80>
 8003b4a:	230c      	movs	r3, #12
 8003b4c:	4638      	mov	r0, r7
 8003b4e:	603b      	str	r3, [r7, #0]
 8003b50:	f000 f80e 	bl	8003b70 <__malloc_unlock>
 8003b54:	e797      	b.n	8003a86 <_malloc_r+0x22>
 8003b56:	6025      	str	r5, [r4, #0]
 8003b58:	e7dc      	b.n	8003b14 <_malloc_r+0xb0>
 8003b5a:	605b      	str	r3, [r3, #4]
 8003b5c:	deff      	udf	#255	; 0xff
 8003b5e:	bf00      	nop
 8003b60:	2000025c 	.word	0x2000025c

08003b64 <__malloc_lock>:
 8003b64:	4801      	ldr	r0, [pc, #4]	; (8003b6c <__malloc_lock+0x8>)
 8003b66:	f7ff bf13 	b.w	8003990 <__retarget_lock_acquire_recursive>
 8003b6a:	bf00      	nop
 8003b6c:	20000258 	.word	0x20000258

08003b70 <__malloc_unlock>:
 8003b70:	4801      	ldr	r0, [pc, #4]	; (8003b78 <__malloc_unlock+0x8>)
 8003b72:	f7ff bf0e 	b.w	8003992 <__retarget_lock_release_recursive>
 8003b76:	bf00      	nop
 8003b78:	20000258 	.word	0x20000258

08003b7c <__ssputs_r>:
 8003b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b80:	461f      	mov	r7, r3
 8003b82:	688e      	ldr	r6, [r1, #8]
 8003b84:	4682      	mov	sl, r0
 8003b86:	42be      	cmp	r6, r7
 8003b88:	460c      	mov	r4, r1
 8003b8a:	4690      	mov	r8, r2
 8003b8c:	680b      	ldr	r3, [r1, #0]
 8003b8e:	d82c      	bhi.n	8003bea <__ssputs_r+0x6e>
 8003b90:	898a      	ldrh	r2, [r1, #12]
 8003b92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003b96:	d026      	beq.n	8003be6 <__ssputs_r+0x6a>
 8003b98:	6965      	ldr	r5, [r4, #20]
 8003b9a:	6909      	ldr	r1, [r1, #16]
 8003b9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ba0:	eba3 0901 	sub.w	r9, r3, r1
 8003ba4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ba8:	1c7b      	adds	r3, r7, #1
 8003baa:	444b      	add	r3, r9
 8003bac:	106d      	asrs	r5, r5, #1
 8003bae:	429d      	cmp	r5, r3
 8003bb0:	bf38      	it	cc
 8003bb2:	461d      	movcc	r5, r3
 8003bb4:	0553      	lsls	r3, r2, #21
 8003bb6:	d527      	bpl.n	8003c08 <__ssputs_r+0x8c>
 8003bb8:	4629      	mov	r1, r5
 8003bba:	f7ff ff53 	bl	8003a64 <_malloc_r>
 8003bbe:	4606      	mov	r6, r0
 8003bc0:	b360      	cbz	r0, 8003c1c <__ssputs_r+0xa0>
 8003bc2:	464a      	mov	r2, r9
 8003bc4:	6921      	ldr	r1, [r4, #16]
 8003bc6:	f000 fafd 	bl	80041c4 <memcpy>
 8003bca:	89a3      	ldrh	r3, [r4, #12]
 8003bcc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bd4:	81a3      	strh	r3, [r4, #12]
 8003bd6:	6126      	str	r6, [r4, #16]
 8003bd8:	444e      	add	r6, r9
 8003bda:	6026      	str	r6, [r4, #0]
 8003bdc:	463e      	mov	r6, r7
 8003bde:	6165      	str	r5, [r4, #20]
 8003be0:	eba5 0509 	sub.w	r5, r5, r9
 8003be4:	60a5      	str	r5, [r4, #8]
 8003be6:	42be      	cmp	r6, r7
 8003be8:	d900      	bls.n	8003bec <__ssputs_r+0x70>
 8003bea:	463e      	mov	r6, r7
 8003bec:	4632      	mov	r2, r6
 8003bee:	4641      	mov	r1, r8
 8003bf0:	6820      	ldr	r0, [r4, #0]
 8003bf2:	f000 faaf 	bl	8004154 <memmove>
 8003bf6:	2000      	movs	r0, #0
 8003bf8:	68a3      	ldr	r3, [r4, #8]
 8003bfa:	1b9b      	subs	r3, r3, r6
 8003bfc:	60a3      	str	r3, [r4, #8]
 8003bfe:	6823      	ldr	r3, [r4, #0]
 8003c00:	4433      	add	r3, r6
 8003c02:	6023      	str	r3, [r4, #0]
 8003c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c08:	462a      	mov	r2, r5
 8003c0a:	f000 fae9 	bl	80041e0 <_realloc_r>
 8003c0e:	4606      	mov	r6, r0
 8003c10:	2800      	cmp	r0, #0
 8003c12:	d1e0      	bne.n	8003bd6 <__ssputs_r+0x5a>
 8003c14:	4650      	mov	r0, sl
 8003c16:	6921      	ldr	r1, [r4, #16]
 8003c18:	f7ff febc 	bl	8003994 <_free_r>
 8003c1c:	230c      	movs	r3, #12
 8003c1e:	f8ca 3000 	str.w	r3, [sl]
 8003c22:	89a3      	ldrh	r3, [r4, #12]
 8003c24:	f04f 30ff 	mov.w	r0, #4294967295
 8003c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c2c:	81a3      	strh	r3, [r4, #12]
 8003c2e:	e7e9      	b.n	8003c04 <__ssputs_r+0x88>

08003c30 <_svfiprintf_r>:
 8003c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c34:	4698      	mov	r8, r3
 8003c36:	898b      	ldrh	r3, [r1, #12]
 8003c38:	4607      	mov	r7, r0
 8003c3a:	061b      	lsls	r3, r3, #24
 8003c3c:	460d      	mov	r5, r1
 8003c3e:	4614      	mov	r4, r2
 8003c40:	b09d      	sub	sp, #116	; 0x74
 8003c42:	d50e      	bpl.n	8003c62 <_svfiprintf_r+0x32>
 8003c44:	690b      	ldr	r3, [r1, #16]
 8003c46:	b963      	cbnz	r3, 8003c62 <_svfiprintf_r+0x32>
 8003c48:	2140      	movs	r1, #64	; 0x40
 8003c4a:	f7ff ff0b 	bl	8003a64 <_malloc_r>
 8003c4e:	6028      	str	r0, [r5, #0]
 8003c50:	6128      	str	r0, [r5, #16]
 8003c52:	b920      	cbnz	r0, 8003c5e <_svfiprintf_r+0x2e>
 8003c54:	230c      	movs	r3, #12
 8003c56:	603b      	str	r3, [r7, #0]
 8003c58:	f04f 30ff 	mov.w	r0, #4294967295
 8003c5c:	e0d0      	b.n	8003e00 <_svfiprintf_r+0x1d0>
 8003c5e:	2340      	movs	r3, #64	; 0x40
 8003c60:	616b      	str	r3, [r5, #20]
 8003c62:	2300      	movs	r3, #0
 8003c64:	9309      	str	r3, [sp, #36]	; 0x24
 8003c66:	2320      	movs	r3, #32
 8003c68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c6c:	2330      	movs	r3, #48	; 0x30
 8003c6e:	f04f 0901 	mov.w	r9, #1
 8003c72:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c76:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003e18 <_svfiprintf_r+0x1e8>
 8003c7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c7e:	4623      	mov	r3, r4
 8003c80:	469a      	mov	sl, r3
 8003c82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c86:	b10a      	cbz	r2, 8003c8c <_svfiprintf_r+0x5c>
 8003c88:	2a25      	cmp	r2, #37	; 0x25
 8003c8a:	d1f9      	bne.n	8003c80 <_svfiprintf_r+0x50>
 8003c8c:	ebba 0b04 	subs.w	fp, sl, r4
 8003c90:	d00b      	beq.n	8003caa <_svfiprintf_r+0x7a>
 8003c92:	465b      	mov	r3, fp
 8003c94:	4622      	mov	r2, r4
 8003c96:	4629      	mov	r1, r5
 8003c98:	4638      	mov	r0, r7
 8003c9a:	f7ff ff6f 	bl	8003b7c <__ssputs_r>
 8003c9e:	3001      	adds	r0, #1
 8003ca0:	f000 80a9 	beq.w	8003df6 <_svfiprintf_r+0x1c6>
 8003ca4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ca6:	445a      	add	r2, fp
 8003ca8:	9209      	str	r2, [sp, #36]	; 0x24
 8003caa:	f89a 3000 	ldrb.w	r3, [sl]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 80a1 	beq.w	8003df6 <_svfiprintf_r+0x1c6>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8003cba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cbe:	f10a 0a01 	add.w	sl, sl, #1
 8003cc2:	9304      	str	r3, [sp, #16]
 8003cc4:	9307      	str	r3, [sp, #28]
 8003cc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003cca:	931a      	str	r3, [sp, #104]	; 0x68
 8003ccc:	4654      	mov	r4, sl
 8003cce:	2205      	movs	r2, #5
 8003cd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cd4:	4850      	ldr	r0, [pc, #320]	; (8003e18 <_svfiprintf_r+0x1e8>)
 8003cd6:	f000 fa67 	bl	80041a8 <memchr>
 8003cda:	9a04      	ldr	r2, [sp, #16]
 8003cdc:	b9d8      	cbnz	r0, 8003d16 <_svfiprintf_r+0xe6>
 8003cde:	06d0      	lsls	r0, r2, #27
 8003ce0:	bf44      	itt	mi
 8003ce2:	2320      	movmi	r3, #32
 8003ce4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ce8:	0711      	lsls	r1, r2, #28
 8003cea:	bf44      	itt	mi
 8003cec:	232b      	movmi	r3, #43	; 0x2b
 8003cee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cf2:	f89a 3000 	ldrb.w	r3, [sl]
 8003cf6:	2b2a      	cmp	r3, #42	; 0x2a
 8003cf8:	d015      	beq.n	8003d26 <_svfiprintf_r+0xf6>
 8003cfa:	4654      	mov	r4, sl
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	f04f 0c0a 	mov.w	ip, #10
 8003d02:	9a07      	ldr	r2, [sp, #28]
 8003d04:	4621      	mov	r1, r4
 8003d06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d0a:	3b30      	subs	r3, #48	; 0x30
 8003d0c:	2b09      	cmp	r3, #9
 8003d0e:	d94d      	bls.n	8003dac <_svfiprintf_r+0x17c>
 8003d10:	b1b0      	cbz	r0, 8003d40 <_svfiprintf_r+0x110>
 8003d12:	9207      	str	r2, [sp, #28]
 8003d14:	e014      	b.n	8003d40 <_svfiprintf_r+0x110>
 8003d16:	eba0 0308 	sub.w	r3, r0, r8
 8003d1a:	fa09 f303 	lsl.w	r3, r9, r3
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	46a2      	mov	sl, r4
 8003d22:	9304      	str	r3, [sp, #16]
 8003d24:	e7d2      	b.n	8003ccc <_svfiprintf_r+0x9c>
 8003d26:	9b03      	ldr	r3, [sp, #12]
 8003d28:	1d19      	adds	r1, r3, #4
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	9103      	str	r1, [sp, #12]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	bfbb      	ittet	lt
 8003d32:	425b      	neglt	r3, r3
 8003d34:	f042 0202 	orrlt.w	r2, r2, #2
 8003d38:	9307      	strge	r3, [sp, #28]
 8003d3a:	9307      	strlt	r3, [sp, #28]
 8003d3c:	bfb8      	it	lt
 8003d3e:	9204      	strlt	r2, [sp, #16]
 8003d40:	7823      	ldrb	r3, [r4, #0]
 8003d42:	2b2e      	cmp	r3, #46	; 0x2e
 8003d44:	d10c      	bne.n	8003d60 <_svfiprintf_r+0x130>
 8003d46:	7863      	ldrb	r3, [r4, #1]
 8003d48:	2b2a      	cmp	r3, #42	; 0x2a
 8003d4a:	d134      	bne.n	8003db6 <_svfiprintf_r+0x186>
 8003d4c:	9b03      	ldr	r3, [sp, #12]
 8003d4e:	3402      	adds	r4, #2
 8003d50:	1d1a      	adds	r2, r3, #4
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	9203      	str	r2, [sp, #12]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	bfb8      	it	lt
 8003d5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d5e:	9305      	str	r3, [sp, #20]
 8003d60:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003e1c <_svfiprintf_r+0x1ec>
 8003d64:	2203      	movs	r2, #3
 8003d66:	4650      	mov	r0, sl
 8003d68:	7821      	ldrb	r1, [r4, #0]
 8003d6a:	f000 fa1d 	bl	80041a8 <memchr>
 8003d6e:	b138      	cbz	r0, 8003d80 <_svfiprintf_r+0x150>
 8003d70:	2240      	movs	r2, #64	; 0x40
 8003d72:	9b04      	ldr	r3, [sp, #16]
 8003d74:	eba0 000a 	sub.w	r0, r0, sl
 8003d78:	4082      	lsls	r2, r0
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	3401      	adds	r4, #1
 8003d7e:	9304      	str	r3, [sp, #16]
 8003d80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d84:	2206      	movs	r2, #6
 8003d86:	4826      	ldr	r0, [pc, #152]	; (8003e20 <_svfiprintf_r+0x1f0>)
 8003d88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d8c:	f000 fa0c 	bl	80041a8 <memchr>
 8003d90:	2800      	cmp	r0, #0
 8003d92:	d038      	beq.n	8003e06 <_svfiprintf_r+0x1d6>
 8003d94:	4b23      	ldr	r3, [pc, #140]	; (8003e24 <_svfiprintf_r+0x1f4>)
 8003d96:	bb1b      	cbnz	r3, 8003de0 <_svfiprintf_r+0x1b0>
 8003d98:	9b03      	ldr	r3, [sp, #12]
 8003d9a:	3307      	adds	r3, #7
 8003d9c:	f023 0307 	bic.w	r3, r3, #7
 8003da0:	3308      	adds	r3, #8
 8003da2:	9303      	str	r3, [sp, #12]
 8003da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003da6:	4433      	add	r3, r6
 8003da8:	9309      	str	r3, [sp, #36]	; 0x24
 8003daa:	e768      	b.n	8003c7e <_svfiprintf_r+0x4e>
 8003dac:	460c      	mov	r4, r1
 8003dae:	2001      	movs	r0, #1
 8003db0:	fb0c 3202 	mla	r2, ip, r2, r3
 8003db4:	e7a6      	b.n	8003d04 <_svfiprintf_r+0xd4>
 8003db6:	2300      	movs	r3, #0
 8003db8:	f04f 0c0a 	mov.w	ip, #10
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	3401      	adds	r4, #1
 8003dc0:	9305      	str	r3, [sp, #20]
 8003dc2:	4620      	mov	r0, r4
 8003dc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003dc8:	3a30      	subs	r2, #48	; 0x30
 8003dca:	2a09      	cmp	r2, #9
 8003dcc:	d903      	bls.n	8003dd6 <_svfiprintf_r+0x1a6>
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0c6      	beq.n	8003d60 <_svfiprintf_r+0x130>
 8003dd2:	9105      	str	r1, [sp, #20]
 8003dd4:	e7c4      	b.n	8003d60 <_svfiprintf_r+0x130>
 8003dd6:	4604      	mov	r4, r0
 8003dd8:	2301      	movs	r3, #1
 8003dda:	fb0c 2101 	mla	r1, ip, r1, r2
 8003dde:	e7f0      	b.n	8003dc2 <_svfiprintf_r+0x192>
 8003de0:	ab03      	add	r3, sp, #12
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	462a      	mov	r2, r5
 8003de6:	4638      	mov	r0, r7
 8003de8:	4b0f      	ldr	r3, [pc, #60]	; (8003e28 <_svfiprintf_r+0x1f8>)
 8003dea:	a904      	add	r1, sp, #16
 8003dec:	f3af 8000 	nop.w
 8003df0:	1c42      	adds	r2, r0, #1
 8003df2:	4606      	mov	r6, r0
 8003df4:	d1d6      	bne.n	8003da4 <_svfiprintf_r+0x174>
 8003df6:	89ab      	ldrh	r3, [r5, #12]
 8003df8:	065b      	lsls	r3, r3, #25
 8003dfa:	f53f af2d 	bmi.w	8003c58 <_svfiprintf_r+0x28>
 8003dfe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e00:	b01d      	add	sp, #116	; 0x74
 8003e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e06:	ab03      	add	r3, sp, #12
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	462a      	mov	r2, r5
 8003e0c:	4638      	mov	r0, r7
 8003e0e:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <_svfiprintf_r+0x1f8>)
 8003e10:	a904      	add	r1, sp, #16
 8003e12:	f000 f87d 	bl	8003f10 <_printf_i>
 8003e16:	e7eb      	b.n	8003df0 <_svfiprintf_r+0x1c0>
 8003e18:	080042b0 	.word	0x080042b0
 8003e1c:	080042b6 	.word	0x080042b6
 8003e20:	080042ba 	.word	0x080042ba
 8003e24:	00000000 	.word	0x00000000
 8003e28:	08003b7d 	.word	0x08003b7d

08003e2c <_printf_common>:
 8003e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e30:	4616      	mov	r6, r2
 8003e32:	4699      	mov	r9, r3
 8003e34:	688a      	ldr	r2, [r1, #8]
 8003e36:	690b      	ldr	r3, [r1, #16]
 8003e38:	4607      	mov	r7, r0
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	bfb8      	it	lt
 8003e3e:	4613      	movlt	r3, r2
 8003e40:	6033      	str	r3, [r6, #0]
 8003e42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e46:	460c      	mov	r4, r1
 8003e48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e4c:	b10a      	cbz	r2, 8003e52 <_printf_common+0x26>
 8003e4e:	3301      	adds	r3, #1
 8003e50:	6033      	str	r3, [r6, #0]
 8003e52:	6823      	ldr	r3, [r4, #0]
 8003e54:	0699      	lsls	r1, r3, #26
 8003e56:	bf42      	ittt	mi
 8003e58:	6833      	ldrmi	r3, [r6, #0]
 8003e5a:	3302      	addmi	r3, #2
 8003e5c:	6033      	strmi	r3, [r6, #0]
 8003e5e:	6825      	ldr	r5, [r4, #0]
 8003e60:	f015 0506 	ands.w	r5, r5, #6
 8003e64:	d106      	bne.n	8003e74 <_printf_common+0x48>
 8003e66:	f104 0a19 	add.w	sl, r4, #25
 8003e6a:	68e3      	ldr	r3, [r4, #12]
 8003e6c:	6832      	ldr	r2, [r6, #0]
 8003e6e:	1a9b      	subs	r3, r3, r2
 8003e70:	42ab      	cmp	r3, r5
 8003e72:	dc2b      	bgt.n	8003ecc <_printf_common+0xa0>
 8003e74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e78:	1e13      	subs	r3, r2, #0
 8003e7a:	6822      	ldr	r2, [r4, #0]
 8003e7c:	bf18      	it	ne
 8003e7e:	2301      	movne	r3, #1
 8003e80:	0692      	lsls	r2, r2, #26
 8003e82:	d430      	bmi.n	8003ee6 <_printf_common+0xba>
 8003e84:	4649      	mov	r1, r9
 8003e86:	4638      	mov	r0, r7
 8003e88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e8c:	47c0      	blx	r8
 8003e8e:	3001      	adds	r0, #1
 8003e90:	d023      	beq.n	8003eda <_printf_common+0xae>
 8003e92:	6823      	ldr	r3, [r4, #0]
 8003e94:	6922      	ldr	r2, [r4, #16]
 8003e96:	f003 0306 	and.w	r3, r3, #6
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	bf14      	ite	ne
 8003e9e:	2500      	movne	r5, #0
 8003ea0:	6833      	ldreq	r3, [r6, #0]
 8003ea2:	f04f 0600 	mov.w	r6, #0
 8003ea6:	bf08      	it	eq
 8003ea8:	68e5      	ldreq	r5, [r4, #12]
 8003eaa:	f104 041a 	add.w	r4, r4, #26
 8003eae:	bf08      	it	eq
 8003eb0:	1aed      	subeq	r5, r5, r3
 8003eb2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003eb6:	bf08      	it	eq
 8003eb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	bfc4      	itt	gt
 8003ec0:	1a9b      	subgt	r3, r3, r2
 8003ec2:	18ed      	addgt	r5, r5, r3
 8003ec4:	42b5      	cmp	r5, r6
 8003ec6:	d11a      	bne.n	8003efe <_printf_common+0xd2>
 8003ec8:	2000      	movs	r0, #0
 8003eca:	e008      	b.n	8003ede <_printf_common+0xb2>
 8003ecc:	2301      	movs	r3, #1
 8003ece:	4652      	mov	r2, sl
 8003ed0:	4649      	mov	r1, r9
 8003ed2:	4638      	mov	r0, r7
 8003ed4:	47c0      	blx	r8
 8003ed6:	3001      	adds	r0, #1
 8003ed8:	d103      	bne.n	8003ee2 <_printf_common+0xb6>
 8003eda:	f04f 30ff 	mov.w	r0, #4294967295
 8003ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ee2:	3501      	adds	r5, #1
 8003ee4:	e7c1      	b.n	8003e6a <_printf_common+0x3e>
 8003ee6:	2030      	movs	r0, #48	; 0x30
 8003ee8:	18e1      	adds	r1, r4, r3
 8003eea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ef4:	4422      	add	r2, r4
 8003ef6:	3302      	adds	r3, #2
 8003ef8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003efc:	e7c2      	b.n	8003e84 <_printf_common+0x58>
 8003efe:	2301      	movs	r3, #1
 8003f00:	4622      	mov	r2, r4
 8003f02:	4649      	mov	r1, r9
 8003f04:	4638      	mov	r0, r7
 8003f06:	47c0      	blx	r8
 8003f08:	3001      	adds	r0, #1
 8003f0a:	d0e6      	beq.n	8003eda <_printf_common+0xae>
 8003f0c:	3601      	adds	r6, #1
 8003f0e:	e7d9      	b.n	8003ec4 <_printf_common+0x98>

08003f10 <_printf_i>:
 8003f10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f14:	7e0f      	ldrb	r7, [r1, #24]
 8003f16:	4691      	mov	r9, r2
 8003f18:	2f78      	cmp	r7, #120	; 0x78
 8003f1a:	4680      	mov	r8, r0
 8003f1c:	460c      	mov	r4, r1
 8003f1e:	469a      	mov	sl, r3
 8003f20:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f26:	d807      	bhi.n	8003f38 <_printf_i+0x28>
 8003f28:	2f62      	cmp	r7, #98	; 0x62
 8003f2a:	d80a      	bhi.n	8003f42 <_printf_i+0x32>
 8003f2c:	2f00      	cmp	r7, #0
 8003f2e:	f000 80d5 	beq.w	80040dc <_printf_i+0x1cc>
 8003f32:	2f58      	cmp	r7, #88	; 0x58
 8003f34:	f000 80c1 	beq.w	80040ba <_printf_i+0x1aa>
 8003f38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f40:	e03a      	b.n	8003fb8 <_printf_i+0xa8>
 8003f42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f46:	2b15      	cmp	r3, #21
 8003f48:	d8f6      	bhi.n	8003f38 <_printf_i+0x28>
 8003f4a:	a101      	add	r1, pc, #4	; (adr r1, 8003f50 <_printf_i+0x40>)
 8003f4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f50:	08003fa9 	.word	0x08003fa9
 8003f54:	08003fbd 	.word	0x08003fbd
 8003f58:	08003f39 	.word	0x08003f39
 8003f5c:	08003f39 	.word	0x08003f39
 8003f60:	08003f39 	.word	0x08003f39
 8003f64:	08003f39 	.word	0x08003f39
 8003f68:	08003fbd 	.word	0x08003fbd
 8003f6c:	08003f39 	.word	0x08003f39
 8003f70:	08003f39 	.word	0x08003f39
 8003f74:	08003f39 	.word	0x08003f39
 8003f78:	08003f39 	.word	0x08003f39
 8003f7c:	080040c3 	.word	0x080040c3
 8003f80:	08003fe9 	.word	0x08003fe9
 8003f84:	0800407d 	.word	0x0800407d
 8003f88:	08003f39 	.word	0x08003f39
 8003f8c:	08003f39 	.word	0x08003f39
 8003f90:	080040e5 	.word	0x080040e5
 8003f94:	08003f39 	.word	0x08003f39
 8003f98:	08003fe9 	.word	0x08003fe9
 8003f9c:	08003f39 	.word	0x08003f39
 8003fa0:	08003f39 	.word	0x08003f39
 8003fa4:	08004085 	.word	0x08004085
 8003fa8:	682b      	ldr	r3, [r5, #0]
 8003faa:	1d1a      	adds	r2, r3, #4
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	602a      	str	r2, [r5, #0]
 8003fb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e0a0      	b.n	80040fe <_printf_i+0x1ee>
 8003fbc:	6820      	ldr	r0, [r4, #0]
 8003fbe:	682b      	ldr	r3, [r5, #0]
 8003fc0:	0607      	lsls	r7, r0, #24
 8003fc2:	f103 0104 	add.w	r1, r3, #4
 8003fc6:	6029      	str	r1, [r5, #0]
 8003fc8:	d501      	bpl.n	8003fce <_printf_i+0xbe>
 8003fca:	681e      	ldr	r6, [r3, #0]
 8003fcc:	e003      	b.n	8003fd6 <_printf_i+0xc6>
 8003fce:	0646      	lsls	r6, r0, #25
 8003fd0:	d5fb      	bpl.n	8003fca <_printf_i+0xba>
 8003fd2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003fd6:	2e00      	cmp	r6, #0
 8003fd8:	da03      	bge.n	8003fe2 <_printf_i+0xd2>
 8003fda:	232d      	movs	r3, #45	; 0x2d
 8003fdc:	4276      	negs	r6, r6
 8003fde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fe2:	230a      	movs	r3, #10
 8003fe4:	4859      	ldr	r0, [pc, #356]	; (800414c <_printf_i+0x23c>)
 8003fe6:	e012      	b.n	800400e <_printf_i+0xfe>
 8003fe8:	682b      	ldr	r3, [r5, #0]
 8003fea:	6820      	ldr	r0, [r4, #0]
 8003fec:	1d19      	adds	r1, r3, #4
 8003fee:	6029      	str	r1, [r5, #0]
 8003ff0:	0605      	lsls	r5, r0, #24
 8003ff2:	d501      	bpl.n	8003ff8 <_printf_i+0xe8>
 8003ff4:	681e      	ldr	r6, [r3, #0]
 8003ff6:	e002      	b.n	8003ffe <_printf_i+0xee>
 8003ff8:	0641      	lsls	r1, r0, #25
 8003ffa:	d5fb      	bpl.n	8003ff4 <_printf_i+0xe4>
 8003ffc:	881e      	ldrh	r6, [r3, #0]
 8003ffe:	2f6f      	cmp	r7, #111	; 0x6f
 8004000:	bf0c      	ite	eq
 8004002:	2308      	moveq	r3, #8
 8004004:	230a      	movne	r3, #10
 8004006:	4851      	ldr	r0, [pc, #324]	; (800414c <_printf_i+0x23c>)
 8004008:	2100      	movs	r1, #0
 800400a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800400e:	6865      	ldr	r5, [r4, #4]
 8004010:	2d00      	cmp	r5, #0
 8004012:	bfa8      	it	ge
 8004014:	6821      	ldrge	r1, [r4, #0]
 8004016:	60a5      	str	r5, [r4, #8]
 8004018:	bfa4      	itt	ge
 800401a:	f021 0104 	bicge.w	r1, r1, #4
 800401e:	6021      	strge	r1, [r4, #0]
 8004020:	b90e      	cbnz	r6, 8004026 <_printf_i+0x116>
 8004022:	2d00      	cmp	r5, #0
 8004024:	d04b      	beq.n	80040be <_printf_i+0x1ae>
 8004026:	4615      	mov	r5, r2
 8004028:	fbb6 f1f3 	udiv	r1, r6, r3
 800402c:	fb03 6711 	mls	r7, r3, r1, r6
 8004030:	5dc7      	ldrb	r7, [r0, r7]
 8004032:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004036:	4637      	mov	r7, r6
 8004038:	42bb      	cmp	r3, r7
 800403a:	460e      	mov	r6, r1
 800403c:	d9f4      	bls.n	8004028 <_printf_i+0x118>
 800403e:	2b08      	cmp	r3, #8
 8004040:	d10b      	bne.n	800405a <_printf_i+0x14a>
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	07de      	lsls	r6, r3, #31
 8004046:	d508      	bpl.n	800405a <_printf_i+0x14a>
 8004048:	6923      	ldr	r3, [r4, #16]
 800404a:	6861      	ldr	r1, [r4, #4]
 800404c:	4299      	cmp	r1, r3
 800404e:	bfde      	ittt	le
 8004050:	2330      	movle	r3, #48	; 0x30
 8004052:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004056:	f105 35ff 	addle.w	r5, r5, #4294967295
 800405a:	1b52      	subs	r2, r2, r5
 800405c:	6122      	str	r2, [r4, #16]
 800405e:	464b      	mov	r3, r9
 8004060:	4621      	mov	r1, r4
 8004062:	4640      	mov	r0, r8
 8004064:	f8cd a000 	str.w	sl, [sp]
 8004068:	aa03      	add	r2, sp, #12
 800406a:	f7ff fedf 	bl	8003e2c <_printf_common>
 800406e:	3001      	adds	r0, #1
 8004070:	d14a      	bne.n	8004108 <_printf_i+0x1f8>
 8004072:	f04f 30ff 	mov.w	r0, #4294967295
 8004076:	b004      	add	sp, #16
 8004078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800407c:	6823      	ldr	r3, [r4, #0]
 800407e:	f043 0320 	orr.w	r3, r3, #32
 8004082:	6023      	str	r3, [r4, #0]
 8004084:	2778      	movs	r7, #120	; 0x78
 8004086:	4832      	ldr	r0, [pc, #200]	; (8004150 <_printf_i+0x240>)
 8004088:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800408c:	6823      	ldr	r3, [r4, #0]
 800408e:	6829      	ldr	r1, [r5, #0]
 8004090:	061f      	lsls	r7, r3, #24
 8004092:	f851 6b04 	ldr.w	r6, [r1], #4
 8004096:	d402      	bmi.n	800409e <_printf_i+0x18e>
 8004098:	065f      	lsls	r7, r3, #25
 800409a:	bf48      	it	mi
 800409c:	b2b6      	uxthmi	r6, r6
 800409e:	07df      	lsls	r7, r3, #31
 80040a0:	bf48      	it	mi
 80040a2:	f043 0320 	orrmi.w	r3, r3, #32
 80040a6:	6029      	str	r1, [r5, #0]
 80040a8:	bf48      	it	mi
 80040aa:	6023      	strmi	r3, [r4, #0]
 80040ac:	b91e      	cbnz	r6, 80040b6 <_printf_i+0x1a6>
 80040ae:	6823      	ldr	r3, [r4, #0]
 80040b0:	f023 0320 	bic.w	r3, r3, #32
 80040b4:	6023      	str	r3, [r4, #0]
 80040b6:	2310      	movs	r3, #16
 80040b8:	e7a6      	b.n	8004008 <_printf_i+0xf8>
 80040ba:	4824      	ldr	r0, [pc, #144]	; (800414c <_printf_i+0x23c>)
 80040bc:	e7e4      	b.n	8004088 <_printf_i+0x178>
 80040be:	4615      	mov	r5, r2
 80040c0:	e7bd      	b.n	800403e <_printf_i+0x12e>
 80040c2:	682b      	ldr	r3, [r5, #0]
 80040c4:	6826      	ldr	r6, [r4, #0]
 80040c6:	1d18      	adds	r0, r3, #4
 80040c8:	6961      	ldr	r1, [r4, #20]
 80040ca:	6028      	str	r0, [r5, #0]
 80040cc:	0635      	lsls	r5, r6, #24
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	d501      	bpl.n	80040d6 <_printf_i+0x1c6>
 80040d2:	6019      	str	r1, [r3, #0]
 80040d4:	e002      	b.n	80040dc <_printf_i+0x1cc>
 80040d6:	0670      	lsls	r0, r6, #25
 80040d8:	d5fb      	bpl.n	80040d2 <_printf_i+0x1c2>
 80040da:	8019      	strh	r1, [r3, #0]
 80040dc:	2300      	movs	r3, #0
 80040de:	4615      	mov	r5, r2
 80040e0:	6123      	str	r3, [r4, #16]
 80040e2:	e7bc      	b.n	800405e <_printf_i+0x14e>
 80040e4:	682b      	ldr	r3, [r5, #0]
 80040e6:	2100      	movs	r1, #0
 80040e8:	1d1a      	adds	r2, r3, #4
 80040ea:	602a      	str	r2, [r5, #0]
 80040ec:	681d      	ldr	r5, [r3, #0]
 80040ee:	6862      	ldr	r2, [r4, #4]
 80040f0:	4628      	mov	r0, r5
 80040f2:	f000 f859 	bl	80041a8 <memchr>
 80040f6:	b108      	cbz	r0, 80040fc <_printf_i+0x1ec>
 80040f8:	1b40      	subs	r0, r0, r5
 80040fa:	6060      	str	r0, [r4, #4]
 80040fc:	6863      	ldr	r3, [r4, #4]
 80040fe:	6123      	str	r3, [r4, #16]
 8004100:	2300      	movs	r3, #0
 8004102:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004106:	e7aa      	b.n	800405e <_printf_i+0x14e>
 8004108:	462a      	mov	r2, r5
 800410a:	4649      	mov	r1, r9
 800410c:	4640      	mov	r0, r8
 800410e:	6923      	ldr	r3, [r4, #16]
 8004110:	47d0      	blx	sl
 8004112:	3001      	adds	r0, #1
 8004114:	d0ad      	beq.n	8004072 <_printf_i+0x162>
 8004116:	6823      	ldr	r3, [r4, #0]
 8004118:	079b      	lsls	r3, r3, #30
 800411a:	d413      	bmi.n	8004144 <_printf_i+0x234>
 800411c:	68e0      	ldr	r0, [r4, #12]
 800411e:	9b03      	ldr	r3, [sp, #12]
 8004120:	4298      	cmp	r0, r3
 8004122:	bfb8      	it	lt
 8004124:	4618      	movlt	r0, r3
 8004126:	e7a6      	b.n	8004076 <_printf_i+0x166>
 8004128:	2301      	movs	r3, #1
 800412a:	4632      	mov	r2, r6
 800412c:	4649      	mov	r1, r9
 800412e:	4640      	mov	r0, r8
 8004130:	47d0      	blx	sl
 8004132:	3001      	adds	r0, #1
 8004134:	d09d      	beq.n	8004072 <_printf_i+0x162>
 8004136:	3501      	adds	r5, #1
 8004138:	68e3      	ldr	r3, [r4, #12]
 800413a:	9903      	ldr	r1, [sp, #12]
 800413c:	1a5b      	subs	r3, r3, r1
 800413e:	42ab      	cmp	r3, r5
 8004140:	dcf2      	bgt.n	8004128 <_printf_i+0x218>
 8004142:	e7eb      	b.n	800411c <_printf_i+0x20c>
 8004144:	2500      	movs	r5, #0
 8004146:	f104 0619 	add.w	r6, r4, #25
 800414a:	e7f5      	b.n	8004138 <_printf_i+0x228>
 800414c:	080042c1 	.word	0x080042c1
 8004150:	080042d2 	.word	0x080042d2

08004154 <memmove>:
 8004154:	4288      	cmp	r0, r1
 8004156:	b510      	push	{r4, lr}
 8004158:	eb01 0402 	add.w	r4, r1, r2
 800415c:	d902      	bls.n	8004164 <memmove+0x10>
 800415e:	4284      	cmp	r4, r0
 8004160:	4623      	mov	r3, r4
 8004162:	d807      	bhi.n	8004174 <memmove+0x20>
 8004164:	1e43      	subs	r3, r0, #1
 8004166:	42a1      	cmp	r1, r4
 8004168:	d008      	beq.n	800417c <memmove+0x28>
 800416a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800416e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004172:	e7f8      	b.n	8004166 <memmove+0x12>
 8004174:	4601      	mov	r1, r0
 8004176:	4402      	add	r2, r0
 8004178:	428a      	cmp	r2, r1
 800417a:	d100      	bne.n	800417e <memmove+0x2a>
 800417c:	bd10      	pop	{r4, pc}
 800417e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004182:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004186:	e7f7      	b.n	8004178 <memmove+0x24>

08004188 <_sbrk_r>:
 8004188:	b538      	push	{r3, r4, r5, lr}
 800418a:	2300      	movs	r3, #0
 800418c:	4d05      	ldr	r5, [pc, #20]	; (80041a4 <_sbrk_r+0x1c>)
 800418e:	4604      	mov	r4, r0
 8004190:	4608      	mov	r0, r1
 8004192:	602b      	str	r3, [r5, #0]
 8004194:	f7fd f816 	bl	80011c4 <_sbrk>
 8004198:	1c43      	adds	r3, r0, #1
 800419a:	d102      	bne.n	80041a2 <_sbrk_r+0x1a>
 800419c:	682b      	ldr	r3, [r5, #0]
 800419e:	b103      	cbz	r3, 80041a2 <_sbrk_r+0x1a>
 80041a0:	6023      	str	r3, [r4, #0]
 80041a2:	bd38      	pop	{r3, r4, r5, pc}
 80041a4:	20000254 	.word	0x20000254

080041a8 <memchr>:
 80041a8:	4603      	mov	r3, r0
 80041aa:	b510      	push	{r4, lr}
 80041ac:	b2c9      	uxtb	r1, r1
 80041ae:	4402      	add	r2, r0
 80041b0:	4293      	cmp	r3, r2
 80041b2:	4618      	mov	r0, r3
 80041b4:	d101      	bne.n	80041ba <memchr+0x12>
 80041b6:	2000      	movs	r0, #0
 80041b8:	e003      	b.n	80041c2 <memchr+0x1a>
 80041ba:	7804      	ldrb	r4, [r0, #0]
 80041bc:	3301      	adds	r3, #1
 80041be:	428c      	cmp	r4, r1
 80041c0:	d1f6      	bne.n	80041b0 <memchr+0x8>
 80041c2:	bd10      	pop	{r4, pc}

080041c4 <memcpy>:
 80041c4:	440a      	add	r2, r1
 80041c6:	4291      	cmp	r1, r2
 80041c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80041cc:	d100      	bne.n	80041d0 <memcpy+0xc>
 80041ce:	4770      	bx	lr
 80041d0:	b510      	push	{r4, lr}
 80041d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041d6:	4291      	cmp	r1, r2
 80041d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041dc:	d1f9      	bne.n	80041d2 <memcpy+0xe>
 80041de:	bd10      	pop	{r4, pc}

080041e0 <_realloc_r>:
 80041e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041e4:	4680      	mov	r8, r0
 80041e6:	4614      	mov	r4, r2
 80041e8:	460e      	mov	r6, r1
 80041ea:	b921      	cbnz	r1, 80041f6 <_realloc_r+0x16>
 80041ec:	4611      	mov	r1, r2
 80041ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041f2:	f7ff bc37 	b.w	8003a64 <_malloc_r>
 80041f6:	b92a      	cbnz	r2, 8004204 <_realloc_r+0x24>
 80041f8:	f7ff fbcc 	bl	8003994 <_free_r>
 80041fc:	4625      	mov	r5, r4
 80041fe:	4628      	mov	r0, r5
 8004200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004204:	f000 f81b 	bl	800423e <_malloc_usable_size_r>
 8004208:	4284      	cmp	r4, r0
 800420a:	4607      	mov	r7, r0
 800420c:	d802      	bhi.n	8004214 <_realloc_r+0x34>
 800420e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004212:	d812      	bhi.n	800423a <_realloc_r+0x5a>
 8004214:	4621      	mov	r1, r4
 8004216:	4640      	mov	r0, r8
 8004218:	f7ff fc24 	bl	8003a64 <_malloc_r>
 800421c:	4605      	mov	r5, r0
 800421e:	2800      	cmp	r0, #0
 8004220:	d0ed      	beq.n	80041fe <_realloc_r+0x1e>
 8004222:	42bc      	cmp	r4, r7
 8004224:	4622      	mov	r2, r4
 8004226:	4631      	mov	r1, r6
 8004228:	bf28      	it	cs
 800422a:	463a      	movcs	r2, r7
 800422c:	f7ff ffca 	bl	80041c4 <memcpy>
 8004230:	4631      	mov	r1, r6
 8004232:	4640      	mov	r0, r8
 8004234:	f7ff fbae 	bl	8003994 <_free_r>
 8004238:	e7e1      	b.n	80041fe <_realloc_r+0x1e>
 800423a:	4635      	mov	r5, r6
 800423c:	e7df      	b.n	80041fe <_realloc_r+0x1e>

0800423e <_malloc_usable_size_r>:
 800423e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004242:	1f18      	subs	r0, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	bfbc      	itt	lt
 8004248:	580b      	ldrlt	r3, [r1, r0]
 800424a:	18c0      	addlt	r0, r0, r3
 800424c:	4770      	bx	lr
	...

08004250 <_init>:
 8004250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004252:	bf00      	nop
 8004254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004256:	bc08      	pop	{r3}
 8004258:	469e      	mov	lr, r3
 800425a:	4770      	bx	lr

0800425c <_fini>:
 800425c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800425e:	bf00      	nop
 8004260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004262:	bc08      	pop	{r3}
 8004264:	469e      	mov	lr, r3
 8004266:	4770      	bx	lr
